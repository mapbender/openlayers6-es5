diff -p2 -uwr pre-14444/ol/Image.js node_modules/ol/Image.js
--- pre-14444/ol/Image.js	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ol/Image.js	2023-01-20 11:31:34.613521315 +0100
@@ -49,6 +49,9 @@ var ImageWrapper = /** @class */ (functi
      * @param {?string} crossOrigin Cross origin.
      * @param {LoadFunction} imageLoadFunction Image load function.
+     * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be
+     *    drawn into the context's canvas, and `getImage()` will return the canvas once the image
+     *    has finished loading.
      */
-    function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
+    function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction, context) {
         var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;
         /**
@@ -67,4 +70,9 @@ var ImageWrapper = /** @class */ (functi
         /**
          * @private
+         * @type {CanvasRenderingContext2D}
+         */
+        _this.context_ = context;
+        /**
+         * @private
          * @type {?function():void}
          */
@@ -87,4 +95,15 @@ var ImageWrapper = /** @class */ (functi
      */
     ImageWrapper.prototype.getImage = function () {
+        if (
+          this.state == ImageState.LOADED &&
+          this.context_ &&
+          !(this.image_ instanceof HTMLCanvasElement)
+        ) {
+          const canvas = this.context_.canvas;
+          canvas.width = this.image_.width;
+          canvas.height = this.image_.height;
+          this.context_.drawImage(this.image_, 0, 0);
+          this.image_ = this.context_.canvas;
+        }
         return this.image_;
     };
diff -p2 -uwr pre-14444/ol/renderer/canvas/ImageLayer.js node_modules/ol/renderer/canvas/ImageLayer.js
--- pre-14444/ol/renderer/canvas/ImageLayer.js	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ol/renderer/canvas/ImageLayer.js	2023-01-20 11:18:12.590853653 +0100
@@ -49,5 +49,5 @@ var CanvasImageLayerRenderer = /** @clas
      */
     CanvasImageLayerRenderer.prototype.getImage = function () {
-        return !this.image_ ? null : this.image_.getImage();
+        return this.image_ ? this.image_.getImage() : null;
     };
     /**
@@ -112,5 +112,5 @@ var CanvasImageLayerRenderer = /** @clas
         }
         var imageExtent = this.image_.getExtent();
-        var img = this.image_.getImage();
+        var img = this.getImage();
         var imageMapWidth = getWidth(imageExtent);
         var col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));
@@ -173,5 +173,5 @@ var CanvasImageLayerRenderer = /** @clas
             }
         }
-        var img = image.getImage();
+        var img = this.getImage();
         var transform = composeTransform(this.tempTransform, width / 2, height / 2, scale, scale, 0, (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution, (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution);
         this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;
diff -p2 -uwr pre-14444/ol/source/ImageArcGISRest.js node_modules/ol/source/ImageArcGISRest.js
--- pre-14444/ol/source/ImageArcGISRest.js	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ol/source/ImageArcGISRest.js	2023-01-20 11:22:59.899746543 +0100
@@ -24,4 +24,5 @@ import { assert } from '../asserts.js';
 import { assign } from '../obj.js';
 import { containsExtent, getHeight, getWidth } from '../extent.js';
+import { createCanvasContext2D } from '../dom.js';
 /**
  * @typedef {Object} Options
@@ -85,4 +86,9 @@ var ImageArcGISRest = /** @class */ (fun
         /**
          * @private
+         * @type {CanvasRenderingContext2D}
+         */
+        _this.context_ = createCanvasContext2D(1, 1);
+        /**
+         * @private
          * @type {?string}
          */
@@ -193,5 +199,5 @@ var ImageArcGISRest = /** @class */ (fun
         this.imageSize_[1] = height;
         var url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);
-        this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);
+        this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_, this.context_);
         this.renderedRevision_ = this.getRevision();
         this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));
diff -p2 -uwr pre-14444/ol/source/ImageMapGuide.js node_modules/ol/source/ImageMapGuide.js
--- pre-14444/ol/source/ImageMapGuide.js	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ol/source/ImageMapGuide.js	2023-01-20 11:25:17.968206392 +0100
@@ -23,4 +23,5 @@ import { appendParams } from '../uri.js'
 import { assign } from '../obj.js';
 import { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter, } from '../extent.js';
+import { createCanvasContext2D } from '../dom.js';
 /**
  * @typedef {Object} Options
@@ -70,4 +71,9 @@ var ImageMapGuide = /** @class */ (funct
         /**
          * @private
+         * @type {CanvasRenderingContext2D}
+         */
+        _this.context_ = createCanvasContext2D(1, 1);
+        /**
+         * @private
          * @type {?string}
          */
@@ -168,5 +174,5 @@ var ImageMapGuide = /** @class */ (funct
         if (this.url_ !== undefined) {
             var imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);
-            image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);
+            image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_, this.context_);
             image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));
         }
diff -p2 -uwr pre-14444/ol/source/ImageStatic.js node_modules/ol/source/ImageStatic.js
--- pre-14444/ol/source/ImageStatic.js	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ol/source/ImageStatic.js	2023-01-20 11:26:28.156445640 +0100
@@ -82,5 +82,5 @@ var Static = /** @class */ (function (_s
          * @type {import("../Image.js").default}
          */
-        _this.image_ = new ImageWrapper(_this.imageExtent_, undefined, 1, _this.url_, crossOrigin, imageLoadFunction);
+        _this.image_ = new ImageWrapper(_this.imageExtent_, undefined, 1, _this.url_, crossOrigin, imageLoadFunction, createCanvasContext2D(1, 1));
         /**
          * @private
diff -p2 -uwr pre-14444/ol/source/ImageWMS.js node_modules/ol/source/ImageWMS.js
--- pre-14444/ol/source/ImageWMS.js	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ol/source/ImageWMS.js	2023-01-20 11:28:21.832839408 +0100
@@ -28,4 +28,5 @@ import { ceil, floor, round } from '../m
 import { compareVersions } from '../string.js';
 import { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth, } from '../extent.js';
+import { createCanvasContext2D } from '../dom.js';
 import { get as getProjection, transform } from '../proj.js';
 /**
@@ -93,4 +94,9 @@ var ImageWMS = /** @class */ (function (
         /**
          * @private
+         * @type {CanvasRenderingContext2D}
+         */
+        _this.context_ = createCanvasContext2D(1, 1);
+        /**
+         * @private
          * @type {?string}
          */
@@ -292,5 +298,5 @@ var ImageWMS = /** @class */ (function (
         this.imageSize_[1] = round(getHeight(requestExtent) / imageResolution, DECIMALS);
         var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);
-        this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);
+        this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_, this.context_);
         this.renderedRevision_ = this.getRevision();
         this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));
