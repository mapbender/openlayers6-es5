var ol = (function () {
  'use strict';

  /**
   * @module ol/AssertionError
   */

  /** @type {Object<number, string>} */
  const messages$1 = {
    1: 'The view center is not defined',
    2: 'The view resolution is not defined',
    3: 'The view rotation is not defined',
    4: '`image` and `src` cannot be provided at the same time',
    5: '`imgSize` must be set when `image` is provided',
    7: '`format` must be set when `url` is set',
    8: 'Unknown `serverType` configured',
    9: '`url` must be configured or set using `#setUrl()`',
    10: 'The default `geometryFunction` can only handle `Point` geometries',
    11: '`options.featureTypes` must be an Array',
    12: '`options.geometryName` must also be provided when `options.bbox` is set',
    13: 'Invalid corner',
    14: 'Invalid color',
    15: 'Tried to get a value for a key that does not exist in the cache',
    16: 'Tried to set a value for a key that is used already',
    17: '`resolutions` must be sorted in descending order',
    18: 'Either `origin` or `origins` must be configured, never both',
    19: 'Number of `tileSizes` and `resolutions` must be equal',
    20: 'Number of `origins` and `resolutions` must be equal',
    22: 'Either `tileSize` or `tileSizes` must be configured, never both',
    24: 'Invalid extent or geometry provided as `geometry`',
    25: 'Cannot fit empty extent provided as `geometry`',
    26: 'Features must have an id set',
    27: 'Features must have an id set',
    28: '`renderMode` must be `"hybrid"` or `"vector"`',
    30: 'The passed `feature` was already added to the source',
    31: 'Tried to enqueue an `element` that was already added to the queue',
    32: 'Transformation matrix cannot be inverted',
    33: 'Invalid units',
    34: 'Invalid geometry layout',
    36: 'Unknown SRS type',
    37: 'Unknown geometry type found',
    38: '`styleMapValue` has an unknown type',
    39: 'Unknown geometry type',
    40: 'Expected `feature` to have a geometry',
    41: 'Expected an `ol/style/Style` or an array of `ol/style/Style.js`',
    42: 'Question unknown, the answer is 42',
    43: 'Expected `layers` to be an array or a `Collection`',
    47: 'Expected `controls` to be an array or an `ol/Collection`',
    48: 'Expected `interactions` to be an array or an `ol/Collection`',
    49: 'Expected `overlays` to be an array or an `ol/Collection`',
    50: '`options.featureTypes` should be an Array',
    51: 'Either `url` or `tileJSON` options must be provided',
    52: 'Unknown `serverType` configured',
    53: 'Unknown `tierSizeCalculation` configured',
    55: 'The {-y} placeholder requires a tile grid with extent',
    56: 'mapBrowserEvent must originate from a pointer event',
    57: 'At least 2 conditions are required',
    59: 'Invalid command found in the PBF',
    60: 'Missing or invalid `size`',
    61: 'Cannot determine IIIF Image API version from provided image information JSON',
    62: 'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',
    64: 'Layer opacity must be a number',
    66: '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`',
    67: 'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both',
    68: 'A VectorTile source can only be rendered if it has a projection compatible with the view projection',
    69: '`width` or `height` cannot be provided together with `scale`',
  };

  /**
   * Error object thrown when an assertion failed. This is an ECMA-262 Error,
   * extended with a `code` property.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
   */
  class AssertionError extends Error {
    /**
     * @param {number} code Error code.
     */
    constructor(code) {
      const message = messages$1[code];

      super(message);

      /**
       * Error code. The meaning of the code can be found on
       * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
       * the version found in the OpenLayers script's header comment if a version
       * other than the latest is used).
       * @type {number}
       * @deprecated ol/AssertionError and error codes will be removed in v8.0
       * @api
       */
      this.code = code;

      /**
       * @type {string}
       */
      this.name = 'AssertionError';

      // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
      this.message = message;
    }
  }

  var AssertionError$1 = AssertionError;

  /**
   * @module ol/events/Event
   */

  /**
   * @classdesc
   * Stripped down implementation of the W3C DOM Level 2 Event interface.
   * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
   *
   * This implementation only provides `type` and `target` properties, and
   * `stopPropagation` and `preventDefault` methods. It is meant as base class
   * for higher level events defined in the library, and works with
   * {@link module:ol/events/Target~Target}.
   */
  class BaseEvent {
    /**
     * @param {string} type Type.
     */
    constructor(type) {
      /**
       * @type {boolean}
       */
      this.propagationStopped;

      /**
       * @type {boolean}
       */
      this.defaultPrevented;

      /**
       * The event type.
       * @type {string}
       * @api
       */
      this.type = type;

      /**
       * The event target.
       * @type {Object}
       * @api
       */
      this.target = null;
    }

    /**
     * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events
     * will be fired.
     * @api
     */
    preventDefault() {
      this.defaultPrevented = true;
    }

    /**
     * Stop event propagation.
     * @api
     */
    stopPropagation() {
      this.propagationStopped = true;
    }
  }

  /**
   * @param {Event|import("./Event.js").default} evt Event
   */
  function stopPropagation(evt) {
    evt.stopPropagation();
  }

  /**
   * @param {Event|import("./Event.js").default} evt Event
   */
  function preventDefault(evt) {
    evt.preventDefault();
  }

  var nsEvents_Event = {
    __proto__: null,
    stopPropagation: stopPropagation,
    preventDefault: preventDefault,
    'default': BaseEvent
  };

  /**
   * @module ol/ObjectEventType
   */

  /**
   * @enum {string}
   */
  var ObjectEventType = {
    /**
     * Triggered when a property is changed.
     * @event module:ol/Object.ObjectEvent#propertychange
     * @api
     */
    PROPERTYCHANGE: 'propertychange',
  };

  /**
   * @typedef {'propertychange'} Types
   */

  /**
   * @module ol/Disposable
   */

  /**
   * @classdesc
   * Objects that need to clean up after themselves.
   */
  class Disposable {
    constructor() {
      /**
       * The object has already been disposed.
       * @type {boolean}
       * @protected
       */
      this.disposed = false;
    }

    /**
     * Clean up.
     */
    dispose() {
      if (!this.disposed) {
        this.disposed = true;
        this.disposeInternal();
      }
    }

    /**
     * Extension point for disposable objects.
     * @protected
     */
    disposeInternal() {}
  }

  var Disposable$1 = Disposable;

  /**
   * @module ol/array
   */

  /**
   * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
   * https://github.com/darkskyapp/binary-search
   *
   * @param {Array<*>} haystack Items to search through.
   * @param {*} needle The item to look for.
   * @param {Function} [comparator] Comparator function.
   * @return {number} The index of the item if found, -1 if not.
   */
  function binarySearch$1(haystack, needle, comparator) {
    let mid, cmp;
    comparator = comparator || ascending;
    let low = 0;
    let high = haystack.length;
    let found = false;

    while (low < high) {
      /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
       * to double (which gives the wrong results). */
      mid = low + ((high - low) >> 1);
      cmp = +comparator(haystack[mid], needle);

      if (cmp < 0.0) {
        /* Too low. */
        low = mid + 1;
      } else {
        /* Key found or too high */
        high = mid;
        found = !cmp;
      }
    }

    /* Key not found. */
    return found ? low : ~low;
  }

  /**
   * Compare function sorting arrays in ascending order.  Safe to use for numeric values.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function ascending(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  /**
   * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function
   * of this type to determine which nearest resolution to use.
   *
   * This function takes a `{number}` representing a value between two array entries,
   * a `{number}` representing the value of the nearest higher entry and
   * a `{number}` representing the value of the nearest lower entry
   * as arguments and returns a `{number}`. If a negative number or zero is returned
   * the lower value will be used, if a positive number is returned the higher value
   * will be used.
   * @typedef {function(number, number, number): number} NearestDirectionFunction
   * @api
   */

  /**
   * @param {Array<number>} arr Array in descending order.
   * @param {number} target Target.
   * @param {number|NearestDirectionFunction} direction
   *    0 means return the nearest,
   *    > 0 means return the largest nearest,
   *    < 0 means return the smallest nearest.
   * @return {number} Index.
   */
  function linearFindNearest(arr, target, direction) {
    const n = arr.length;
    if (arr[0] <= target) {
      return 0;
    } else if (target <= arr[n - 1]) {
      return n - 1;
    }
    let i;
    if (direction > 0) {
      for (i = 1; i < n; ++i) {
        if (arr[i] < target) {
          return i - 1;
        }
      }
    } else if (direction < 0) {
      for (i = 1; i < n; ++i) {
        if (arr[i] <= target) {
          return i;
        }
      }
    } else {
      for (i = 1; i < n; ++i) {
        if (arr[i] == target) {
          return i;
        } else if (arr[i] < target) {
          if (typeof direction === 'function') {
            if (direction(target, arr[i - 1], arr[i]) > 0) {
              return i - 1;
            }
            return i;
          } else if (arr[i - 1] - target < target - arr[i]) {
            return i - 1;
          }
          return i;
        }
      }
    }
    return n - 1;
  }

  /**
   * @param {Array<*>} arr Array.
   * @param {number} begin Begin index.
   * @param {number} end End index.
   */
  function reverseSubArray(arr, begin, end) {
    while (begin < end) {
      const tmp = arr[begin];
      arr[begin] = arr[end];
      arr[end] = tmp;
      ++begin;
      --end;
    }
  }

  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
   * @template VALUE
   */
  function extend$1(arr, data) {
    const extension = Array.isArray(data) ? data : [data];
    const length = extension.length;
    for (let i = 0; i < length; i++) {
      arr[arr.length] = extension[i];
    }
  }

  /**
   * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
   * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
   * @return {boolean} Whether the two arrays are equal.
   */
  function equals$3(arr1, arr2) {
    const len1 = arr1.length;
    if (len1 !== arr2.length) {
      return false;
    }
    for (let i = 0; i < len1; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }

  /**
   * @param {Array<*>} arr The array to test.
   * @param {Function} [func] Comparison function.
   * @param {boolean} [strict] Strictly sorted (default false).
   * @return {boolean} Return index.
   */
  function isSorted(arr, func, strict) {
    const compare = func || ascending;
    return arr.every(function (currentVal, index) {
      if (index === 0) {
        return true;
      }
      const res = compare(arr[index - 1], currentVal);
      return !(res > 0 || (strict && res === 0));
    });
  }

  /**
   * @module ol/functions
   */

  /**
   * Always returns true.
   * @return {boolean} true.
   */
  function TRUE() {
    return true;
  }

  /**
   * Always returns false.
   * @return {boolean} false.
   */
  function FALSE() {
    return false;
  }

  /**
   * A reusable function, used e.g. as a default for callbacks.
   *
   * @return {void} Nothing.
   */
  function VOID() {}

  /**
   * Wrap a function in another function that remembers the last return.  If the
   * returned function is called twice in a row with the same arguments and the same
   * this object, it will return the value from the first call in the second call.
   *
   * @param {function(...any): ReturnType} fn The function to memoize.
   * @return {function(...any): ReturnType} The memoized function.
   * @template ReturnType
   */
  function memoizeOne(fn) {
    let called = false;

    /** @type {ReturnType} */
    let lastResult;

    /** @type {Array<any>} */
    let lastArgs;

    let lastThis;

    return function () {
      const nextArgs = Array.prototype.slice.call(arguments);
      if (!called || this !== lastThis || !equals$3(nextArgs, lastArgs)) {
        called = true;
        lastThis = this;
        lastArgs = nextArgs;
        lastResult = fn.apply(this, arguments);
      }
      return lastResult;
    };
  }

  /**
   * @template T
   * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.
   * @return {Promise<T>} A promise for the value.
   */
  function toPromise(getter) {
    function promiseGetter() {
      let value;
      try {
        value = getter();
      } catch (err) {
        return Promise.reject(err);
      }
      if (value instanceof Promise) {
        return value;
      }
      return Promise.resolve(value);
    }
    return promiseGetter();
  }

  /**
   * @module ol/obj
   */

  /**
   * Removes all properties from an object.
   * @param {Object} object The object to clear.
   */
  function clear$2(object) {
    for (const property in object) {
      delete object[property];
    }
  }

  /**
   * Determine if an object has any properties.
   * @param {Object} object The object to check.
   * @return {boolean} The object is empty.
   */
  function isEmpty$1(object) {
    let property;
    for (property in object) {
      return false;
    }
    return !property;
  }

  /**
   * @module ol/events/Target
   */

  /**
   * @typedef {EventTarget|Target} EventTargetLike
   */

  /**
   * @classdesc
   * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
   * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
   *
   * There are two important simplifications compared to the specification:
   *
   * 1. The handling of `useCapture` in `addEventListener` and
   *    `removeEventListener`. There is no real capture model.
   * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
   *    There is no event target hierarchy. When a listener calls
   *    `stopPropagation` or `preventDefault` on an event object, it means that no
   *    more listeners after this one will be called. Same as when the listener
   *    returns false.
   */
  class Target extends Disposable$1 {
    /**
     * @param {*} [target] Default event target for dispatched events.
     */
    constructor(target) {
      super();

      /**
       * @private
       * @type {*}
       */
      this.eventTarget_ = target;

      /**
       * @private
       * @type {Object<string, number>}
       */
      this.pendingRemovals_ = null;

      /**
       * @private
       * @type {Object<string, number>}
       */
      this.dispatching_ = null;

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").Listener>>}
       */
      this.listeners_ = null;
    }

    /**
     * @param {string} type Type.
     * @param {import("../events.js").Listener} listener Listener.
     */
    addEventListener(type, listener) {
      if (!type || !listener) {
        return;
      }
      const listeners = this.listeners_ || (this.listeners_ = {});
      const listenersForType = listeners[type] || (listeners[type] = []);
      if (!listenersForType.includes(listener)) {
        listenersForType.push(listener);
      }
    }

    /**
     * Dispatches an event and calls all listeners listening for events
     * of this type. The event parameter can either be a string or an
     * Object with a `type` property.
     *
     * @param {import("./Event.js").default|string} event Event object.
     * @return {boolean|undefined} `false` if anyone called preventDefault on the
     *     event object or if any of the listeners returned false.
     * @api
     */
    dispatchEvent(event) {
      const isString = typeof event === 'string';
      const type = isString ? event : event.type;
      const listeners = this.listeners_ && this.listeners_[type];
      if (!listeners) {
        return;
      }

      const evt = isString ? new BaseEvent(event) : /** @type {Event} */ (event);
      if (!evt.target) {
        evt.target = this.eventTarget_ || this;
      }
      const dispatching = this.dispatching_ || (this.dispatching_ = {});
      const pendingRemovals =
        this.pendingRemovals_ || (this.pendingRemovals_ = {});
      if (!(type in dispatching)) {
        dispatching[type] = 0;
        pendingRemovals[type] = 0;
      }
      ++dispatching[type];
      let propagate;
      for (let i = 0, ii = listeners.length; i < ii; ++i) {
        if ('handleEvent' in listeners[i]) {
          propagate = /** @type {import("../events.js").ListenerObject} */ (
            listeners[i]
          ).handleEvent(evt);
        } else {
          propagate = /** @type {import("../events.js").ListenerFunction} */ (
            listeners[i]
          ).call(this, evt);
        }
        if (propagate === false || evt.propagationStopped) {
          propagate = false;
          break;
        }
      }
      if (--dispatching[type] === 0) {
        let pr = pendingRemovals[type];
        delete pendingRemovals[type];
        while (pr--) {
          this.removeEventListener(type, VOID);
        }
        delete dispatching[type];
      }
      return propagate;
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.listeners_ && clear$2(this.listeners_);
    }

    /**
     * Get the listeners for a specified event type. Listeners are returned in the
     * order that they will be called in.
     *
     * @param {string} type Type.
     * @return {Array<import("../events.js").Listener>|undefined} Listeners.
     */
    getListeners(type) {
      return (this.listeners_ && this.listeners_[type]) || undefined;
    }

    /**
     * @param {string} [type] Type. If not provided,
     *     `true` will be returned if this event target has any listeners.
     * @return {boolean} Has listeners.
     */
    hasListener(type) {
      if (!this.listeners_) {
        return false;
      }
      return type
        ? type in this.listeners_
        : Object.keys(this.listeners_).length > 0;
    }

    /**
     * @param {string} type Type.
     * @param {import("../events.js").Listener} listener Listener.
     */
    removeEventListener(type, listener) {
      const listeners = this.listeners_ && this.listeners_[type];
      if (listeners) {
        const index = listeners.indexOf(listener);
        if (index !== -1) {
          if (this.pendingRemovals_ && type in this.pendingRemovals_) {
            // make listener a no-op, and remove later in #dispatchEvent()
            listeners[index] = VOID;
            ++this.pendingRemovals_[type];
          } else {
            listeners.splice(index, 1);
            if (listeners.length === 0) {
              delete this.listeners_[type];
            }
          }
        }
      }
    }
  }

  var EventTarget = Target;

  /**
   * @module ol/events/EventType
   */

  /**
   * @enum {string}
   * @const
   */
  var EventType = {
    /**
     * Generic change event. Triggered when the revision counter is increased.
     * @event module:ol/events/Event~BaseEvent#change
     * @api
     */
    CHANGE: 'change',

    /**
     * Generic error event. Triggered when an error occurs.
     * @event module:ol/events/Event~BaseEvent#error
     * @api
     */
    ERROR: 'error',

    BLUR: 'blur',
    CLEAR: 'clear',
    CONTEXTMENU: 'contextmenu',
    CLICK: 'click',
    DBLCLICK: 'dblclick',
    DRAGENTER: 'dragenter',
    DRAGOVER: 'dragover',
    DROP: 'drop',
    FOCUS: 'focus',
    KEYDOWN: 'keydown',
    KEYPRESS: 'keypress',
    LOAD: 'load',
    RESIZE: 'resize',
    TOUCHMOVE: 'touchmove',
    WHEEL: 'wheel',
  };

  /**
   * @module ol/events
   */

  /**
   * Key to use with {@link module:ol/Observable.unByKey}.
   * @typedef {Object} EventsKey
   * @property {ListenerFunction} listener Listener.
   * @property {import("./events/Target.js").EventTargetLike} target Target.
   * @property {string} type Type.
   * @api
   */

  /**
   * Listener function. This function is called with an event object as argument.
   * When the function returns `false`, event propagation will stop.
   *
   * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
   * @api
   */

  /**
   * @typedef {Object} ListenerObject
   * @property {ListenerFunction} handleEvent HandleEvent listener function.
   */

  /**
   * @typedef {ListenerFunction|ListenerObject} Listener
   */

  /**
   * Registers an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` to a `this` object, and returns
   * a key for use with {@link module:ol/events.unlistenByKey}.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object} [thisArg] Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @param {boolean} [once] If true, add the listener as one-off listener.
   * @return {EventsKey} Unique key for the listener.
   */
  function listen(target, type, listener, thisArg, once) {
    if (thisArg && thisArg !== target) {
      listener = listener.bind(thisArg);
    }
    if (once) {
      const originalListener = listener;
      listener = function () {
        target.removeEventListener(type, listener);
        originalListener.apply(this, arguments);
      };
    }
    const eventsKey = {
      target: target,
      type: type,
      listener: listener,
    };
    target.addEventListener(type, listener);
    return eventsKey;
  }

  /**
   * Registers a one-off event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` as self-unregistering listener
   * to a `this` object, and returns a key for use with
   * {@link module:ol/events.unlistenByKey} in case the listener needs to be
   * unregistered before it is called.
   *
   * When {@link module:ol/events.listen} is called with the same arguments after this
   * function, the self-unregistering listener will be turned into a permanent
   * listener.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object} [thisArg] Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @return {EventsKey} Key for unlistenByKey.
   */
  function listenOnce(target, type, listener, thisArg) {
    return listen(target, type, listener, thisArg, true);
  }

  /**
   * Unregisters event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * The argument passed to this function is the key returned from
   * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.
   *
   * @param {EventsKey} key The key.
   */
  function unlistenByKey(key) {
    if (key && key.target) {
      key.target.removeEventListener(key.type, key.listener);
      clear$2(key);
    }
  }

  var nsEvents = {
    __proto__: null,
    listen: listen,
    listenOnce: listenOnce,
    unlistenByKey: unlistenByKey
  };

  /**
   * @module ol/Observable
   */

  /***
   * @template {string} Type
   * @template {Event|import("./events/Event.js").default} EventClass
   * @template Return
   * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature
   */

  /***
   * @template {string} Type
   * @template Return
   * @typedef {(type: Type[], listener: (event: Event|import("./events/Event").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature
   */

  /**
   * @typedef {'change'|'error'} EventTypes
   */

  /***
   * @template Return
   * @typedef {OnSignature<EventTypes, import("./events/Event.js").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * An event target providing convenient methods for listener registration
   * and unregistration. A generic `change` event is always available through
   * {@link module:ol/Observable~Observable#changed}.
   *
   * @fires import("./events/Event.js").default
   * @api
   */
  class Observable extends EventTarget {
    constructor() {
      super();

      this.on =
        /** @type {ObservableOnSignature<import("./events").EventsKey>} */ (
          this.onInternal
        );

      this.once =
        /** @type {ObservableOnSignature<import("./events").EventsKey>} */ (
          this.onceInternal
        );

      this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);

      /**
       * @private
       * @type {number}
       */
      this.revision_ = 0;
    }

    /**
     * Increases the revision counter and dispatches a 'change' event.
     * @api
     */
    changed() {
      ++this.revision_;
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * Get the version number for this object.  Each time the object is modified,
     * its version number will be incremented.
     * @return {number} Revision.
     * @api
     */
    getRevision() {
      return this.revision_;
    }

    /**
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
     * @protected
     */
    onInternal(type, listener) {
      if (Array.isArray(type)) {
        const len = type.length;
        const keys = new Array(len);
        for (let i = 0; i < len; ++i) {
          keys[i] = listen(this, type[i], listener);
        }
        return keys;
      }
      return listen(this, /** @type {string} */ (type), listener);
    }

    /**
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Event key.
     * @protected
     */
    onceInternal(type, listener) {
      let key;
      if (Array.isArray(type)) {
        const len = type.length;
        key = new Array(len);
        for (let i = 0; i < len; ++i) {
          key[i] = listenOnce(this, type[i], listener);
        }
      } else {
        key = listenOnce(this, /** @type {string} */ (type), listener);
      }
      /** @type {Object} */ (listener).ol_key = key;
      return key;
    }

    /**
     * Unlisten for a certain type of event.
     * @param {string|Array<string>} type Type.
     * @param {function((Event|import("./events/Event").default)): ?} listener Listener.
     * @protected
     */
    unInternal(type, listener) {
      const key = /** @type {Object} */ (listener).ol_key;
      if (key) {
        unByKey(key);
      } else if (Array.isArray(type)) {
        for (let i = 0, ii = type.length; i < ii; ++i) {
          this.removeEventListener(type[i], listener);
        }
      } else {
        this.removeEventListener(type, listener);
      }
    }
  }

  /**
   * Listen for a certain type of event.
   * @function
   * @param {string|Array<string>} type The event type or array of event types.
   * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
   *     called with an array of event types as the first argument, the return
   *     will be an array of keys.
   * @api
   */
  Observable.prototype.on;

  /**
   * Listen once for a certain type of event.
   * @function
   * @param {string|Array<string>} type The event type or array of event types.
   * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
   * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
   *     called with an array of event types as the first argument, the return
   *     will be an array of keys.
   * @api
   */
  Observable.prototype.once;

  /**
   * Unlisten for a certain type of event.
   * @function
   * @param {string|Array<string>} type The event type or array of event types.
   * @param {function((Event|import("./events/Event").default)): ?} listener The listener function.
   * @api
   */
  Observable.prototype.un;

  /**
   * Removes an event listener using the key returned by `on()` or `once()`.
   * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
   *     or `once()` (or an array of keys).
   * @api
   */
  function unByKey(key) {
    if (Array.isArray(key)) {
      for (let i = 0, ii = key.length; i < ii; ++i) {
        unlistenByKey(key[i]);
      }
    } else {
      unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
    }
  }

  var Observable$1 = Observable;

  /**
   * @module ol/util
   */

  /**
   * @return {never} Any return.
   */
  function abstract() {
    throw new Error('Unimplemented abstract method.');
  }

  /**
   * Counter for getUid.
   * @type {number}
   * @private
   */
  let uidCounter_ = 0;

  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. Unique IDs are generated
   * as a strictly increasing sequence. Adapted from goog.getUid.
   *
   * @param {Object} obj The object to get the unique ID for.
   * @return {string} The unique ID for the object.
   * @api
   */
  function getUid(obj) {
    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
  }

  /**
   * OpenLayers version.
   * @type {string}
   */
  const VERSION = '7.3.0';

  /**
   * @module ol/Object
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
   */
  class ObjectEvent extends BaseEvent {
    /**
     * @param {string} type The event type.
     * @param {string} key The property name.
     * @param {*} oldValue The old value for `key`.
     */
    constructor(type, key, oldValue) {
      super(type);

      /**
       * The name of the property whose value is changing.
       * @type {string}
       * @api
       */
      this.key = key;

      /**
       * The old value. To get the new value use `e.target.get(e.key)` where
       * `e` is the event object.
       * @type {*}
       * @api
       */
      this.oldValue = oldValue;
    }
  }

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *    import("./Observable").OnSignature<import("./ObjectEventType").Types, ObjectEvent, Return> &
   *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types, Return>} ObjectOnSignature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Most non-trivial classes inherit from this.
   *
   * This extends {@link module:ol/Observable~Observable} with observable
   * properties, where each property is observable as well as the object as a
   * whole.
   *
   * Classes that inherit from this have pre-defined properties, to which you can
   * add your owns. The pre-defined properties are listed in this documentation as
   * 'Observable Properties', and have their own accessors; for example,
   * {@link module:ol/Map~Map} has a `target` property, accessed with
   * `getTarget()` and changed with `setTarget()`. Not all properties are however
   * settable. There are also general-purpose accessors `get()` and `set()`. For
   * example, `get('target')` is equivalent to `getTarget()`.
   *
   * The `set` accessors trigger a change event, and you can monitor this by
   * registering a listener. For example, {@link module:ol/View~View} has a
   * `center` property, so `view.on('change:center', function(evt) {...});` would
   * call the function whenever the value of the center property changes. Within
   * the function, `evt.target` would be the view, so `evt.target.getCenter()`
   * would return the new center.
   *
   * You can add your own observable properties with
   * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
   * You can listen for changes on that property value with
   * `object.on('change:prop', listener)`. You can get a list of all
   * properties with {@link module:ol/Object~BaseObject#getProperties}.
   *
   * Note that the observable properties are separate from standard JS properties.
   * You can, for example, give your map object a title with
   * `map.title='New title'` and with `map.set('title', 'Another title')`. The
   * first will be a `hasOwnProperty`; the second will appear in
   * `getProperties()`. Only the second is observable.
   *
   * Properties can be deleted by using the unset method. E.g.
   * object.unset('foo').
   *
   * @fires ObjectEvent
   * @api
   */
  class BaseObject extends Observable$1 {
    /**
     * @param {Object<string, *>} [values] An object with key-value pairs.
     */
    constructor(values) {
      super();

      /***
       * @type {ObjectOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {ObjectOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {ObjectOnSignature<void>}
       */
      this.un;

      // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is
      // the same as the order in which they were created.  This also helps to
      // ensure that object properties are always added in the same order, which
      // helps many JavaScript engines generate faster code.
      getUid(this);

      /**
       * @private
       * @type {Object<string, *>}
       */
      this.values_ = null;

      if (values !== undefined) {
        this.setProperties(values);
      }
    }

    /**
     * Gets a value.
     * @param {string} key Key name.
     * @return {*} Value.
     * @api
     */
    get(key) {
      let value;
      if (this.values_ && this.values_.hasOwnProperty(key)) {
        value = this.values_[key];
      }
      return value;
    }

    /**
     * Get a list of object property names.
     * @return {Array<string>} List of property names.
     * @api
     */
    getKeys() {
      return (this.values_ && Object.keys(this.values_)) || [];
    }

    /**
     * Get an object of all property names and values.
     * @return {Object<string, *>} Object.
     * @api
     */
    getProperties() {
      return (this.values_ && Object.assign({}, this.values_)) || {};
    }

    /**
     * @return {boolean} The object has properties.
     */
    hasProperties() {
      return !!this.values_;
    }

    /**
     * @param {string} key Key name.
     * @param {*} oldValue Old value.
     */
    notify(key, oldValue) {
      let eventType;
      eventType = `change:${key}`;
      if (this.hasListener(eventType)) {
        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      }
      eventType = ObjectEventType.PROPERTYCHANGE;
      if (this.hasListener(eventType)) {
        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      }
    }

    /**
     * @param {string} key Key name.
     * @param {import("./events.js").Listener} listener Listener.
     */
    addChangeListener(key, listener) {
      this.addEventListener(`change:${key}`, listener);
    }

    /**
     * @param {string} key Key name.
     * @param {import("./events.js").Listener} listener Listener.
     */
    removeChangeListener(key, listener) {
      this.removeEventListener(`change:${key}`, listener);
    }

    /**
     * Sets a value.
     * @param {string} key Key name.
     * @param {*} value Value.
     * @param {boolean} [silent] Update without triggering an event.
     * @api
     */
    set(key, value, silent) {
      const values = this.values_ || (this.values_ = {});
      if (silent) {
        values[key] = value;
      } else {
        const oldValue = values[key];
        values[key] = value;
        if (oldValue !== value) {
          this.notify(key, oldValue);
        }
      }
    }

    /**
     * Sets a collection of key-value pairs.  Note that this changes any existing
     * properties and adds new ones (it does not remove any existing properties).
     * @param {Object<string, *>} values Values.
     * @param {boolean} [silent] Update without triggering an event.
     * @api
     */
    setProperties(values, silent) {
      for (const key in values) {
        this.set(key, values[key], silent);
      }
    }

    /**
     * Apply any properties from another object without triggering events.
     * @param {BaseObject} source The source object.
     * @protected
     */
    applyProperties(source) {
      if (!source.values_) {
        return;
      }
      Object.assign(this.values_ || (this.values_ = {}), source.values_);
    }

    /**
     * Unsets a property.
     * @param {string} key Key name.
     * @param {boolean} [silent] Unset without triggering an event.
     * @api
     */
    unset(key, silent) {
      if (this.values_ && key in this.values_) {
        const oldValue = this.values_[key];
        delete this.values_[key];
        if (isEmpty$1(this.values_)) {
          this.values_ = null;
        }
        if (!silent) {
          this.notify(key, oldValue);
        }
      }
    }
  }

  var olObject = BaseObject;

  /**
   * @module ol/CollectionEventType
   */

  /**
   * @enum {string}
   */
  var CollectionEventType = {
    /**
     * Triggered when an item is added to the collection.
     * @event module:ol/Collection.CollectionEvent#add
     * @api
     */
    ADD: 'add',
    /**
     * Triggered when an item is removed from the collection.
     * @event module:ol/Collection.CollectionEvent#remove
     * @api
     */
    REMOVE: 'remove',
  };

  /**
   * @module ol/Collection
   */

  /**
   * @enum {string}
   * @private
   */
  const Property$5 = {
    LENGTH: 'length',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
   * type.
   * @template T
   */
  class CollectionEvent extends BaseEvent {
    /**
     * @param {import("./CollectionEventType.js").default} type Type.
     * @param {T} element Element.
     * @param {number} index The index of the added or removed element.
     */
    constructor(type, element, index) {
      super(type);

      /**
       * The element that is added to or removed from the collection.
       * @type {T}
       * @api
       */
      this.element = element;

      /**
       * The index of the added or removed element.
       * @type {number}
       * @api
       */
      this.index = index;
    }
  }

  /***
   * @template T
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:length', import("./Object").ObjectEvent, Return> &
   *   import("./Observable").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types|
   *     'change:length'|'add'|'remove',Return>} CollectionOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {boolean} [unique=false] Disallow the same item from being added to
   * the collection twice.
   */

  /**
   * @classdesc
   * An expanded version of standard JS Array, adding convenience methods for
   * manipulation. Add and remove changes to the Collection trigger a Collection
   * event. Note that this does not cover changes to the objects _within_ the
   * Collection; they trigger events on the appropriate object, not on the
   * Collection as a whole.
   *
   * @fires CollectionEvent
   *
   * @template T
   * @api
   */
  class Collection extends olObject {
    /**
     * @param {Array<T>} [array] Array.
     * @param {Options} [options] Collection options.
     */
    constructor(array, options) {
      super();

      /***
       * @type {CollectionOnSignature<T, import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {CollectionOnSignature<T, import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {CollectionOnSignature<T, void>}
       */
      this.un;

      options = options || {};

      /**
       * @private
       * @type {boolean}
       */
      this.unique_ = !!options.unique;

      /**
       * @private
       * @type {!Array<T>}
       */
      this.array_ = array ? array : [];

      if (this.unique_) {
        for (let i = 0, ii = this.array_.length; i < ii; ++i) {
          this.assertUnique_(this.array_[i], i);
        }
      }

      this.updateLength_();
    }

    /**
     * Remove all elements from the collection.
     * @api
     */
    clear() {
      while (this.getLength() > 0) {
        this.pop();
      }
    }

    /**
     * Add elements to the collection.  This pushes each item in the provided array
     * to the end of the collection.
     * @param {!Array<T>} arr Array.
     * @return {Collection<T>} This collection.
     * @api
     */
    extend(arr) {
      for (let i = 0, ii = arr.length; i < ii; ++i) {
        this.push(arr[i]);
      }
      return this;
    }

    /**
     * Iterate over each element, calling the provided callback.
     * @param {function(T, number, Array<T>): *} f The function to call
     *     for every element. This function takes 3 arguments (the element, the
     *     index and the array). The return value is ignored.
     * @api
     */
    forEach(f) {
      const array = this.array_;
      for (let i = 0, ii = array.length; i < ii; ++i) {
        f(array[i], i, array);
      }
    }

    /**
     * Get a reference to the underlying Array object. Warning: if the array
     * is mutated, no events will be dispatched by the collection, and the
     * collection's "length" property won't be in sync with the actual length
     * of the array.
     * @return {!Array<T>} Array.
     * @api
     */
    getArray() {
      return this.array_;
    }

    /**
     * Get the element at the provided index.
     * @param {number} index Index.
     * @return {T} Element.
     * @api
     */
    item(index) {
      return this.array_[index];
    }

    /**
     * Get the length of this collection.
     * @return {number} The length of the array.
     * @observable
     * @api
     */
    getLength() {
      return this.get(Property$5.LENGTH);
    }

    /**
     * Insert an element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    insertAt(index, elem) {
      if (index < 0 || index > this.getLength()) {
        throw new Error('Index out of bounds: ' + index);
      }
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      this.array_.splice(index, 0, elem);
      this.updateLength_();
      this.dispatchEvent(
        new CollectionEvent(CollectionEventType.ADD, elem, index)
      );
    }

    /**
     * Remove the last element of the collection and return it.
     * Return `undefined` if the collection is empty.
     * @return {T|undefined} Element.
     * @api
     */
    pop() {
      return this.removeAt(this.getLength() - 1);
    }

    /**
     * Insert the provided element at the end of the collection.
     * @param {T} elem Element.
     * @return {number} New length of the collection.
     * @api
     */
    push(elem) {
      if (this.unique_) {
        this.assertUnique_(elem);
      }
      const n = this.getLength();
      this.insertAt(n, elem);
      return this.getLength();
    }

    /**
     * Remove the first occurrence of an element from the collection.
     * @param {T} elem Element.
     * @return {T|undefined} The removed element or undefined if none found.
     * @api
     */
    remove(elem) {
      const arr = this.array_;
      for (let i = 0, ii = arr.length; i < ii; ++i) {
        if (arr[i] === elem) {
          return this.removeAt(i);
        }
      }
      return undefined;
    }

    /**
     * Remove the element at the provided index and return it.
     * Return `undefined` if the collection does not contain this index.
     * @param {number} index Index.
     * @return {T|undefined} Value.
     * @api
     */
    removeAt(index) {
      if (index < 0 || index >= this.getLength()) {
        return undefined;
      }
      const prev = this.array_[index];
      this.array_.splice(index, 1);
      this.updateLength_();
      this.dispatchEvent(
        /** @type {CollectionEvent<T>} */ (
          new CollectionEvent(CollectionEventType.REMOVE, prev, index)
        )
      );
      return prev;
    }

    /**
     * Set the element at the provided index.
     * @param {number} index Index.
     * @param {T} elem Element.
     * @api
     */
    setAt(index, elem) {
      const n = this.getLength();
      if (index >= n) {
        this.insertAt(index, elem);
        return;
      }
      if (index < 0) {
        throw new Error('Index out of bounds: ' + index);
      }
      if (this.unique_) {
        this.assertUnique_(elem, index);
      }
      const prev = this.array_[index];
      this.array_[index] = elem;
      this.dispatchEvent(
        /** @type {CollectionEvent<T>} */ (
          new CollectionEvent(CollectionEventType.REMOVE, prev, index)
        )
      );
      this.dispatchEvent(
        /** @type {CollectionEvent<T>} */ (
          new CollectionEvent(CollectionEventType.ADD, elem, index)
        )
      );
    }

    /**
     * @private
     */
    updateLength_() {
      this.set(Property$5.LENGTH, this.array_.length);
    }

    /**
     * @private
     * @param {T} elem Element.
     * @param {number} [except] Optional index to ignore.
     */
    assertUnique_(elem, except) {
      for (let i = 0, ii = this.array_.length; i < ii; ++i) {
        if (this.array_[i] === elem && i !== except) {
          throw new AssertionError$1(58);
        }
      }
    }
  }

  var Collection$1 = Collection;

  /**
   * @module ol/asserts
   */

  /**
   * @param {*} assertion Assertion we expected to be truthy.
   * @param {number} errorCode Error code.
   */
  function assert(assertion, errorCode) {
    if (!assertion) {
      throw new AssertionError$1(errorCode);
    }
  }

  /**
   * @module ol/Feature
   */

  /**
   * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
   */

  /**
   * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<import("./ObjectEventType").Types|'change:geometry', import("./Object").ObjectEvent, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|import("./ObjectEventType").Types
   *     |'change:geometry', Return>} FeatureOnSignature
   */

  /***
   * @template Geometry
   * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry
   */

  /**
   * @classdesc
   * A vector object for geographic features with a geometry and other
   * attribute properties, similar to the features in vector file formats like
   * GeoJSON.
   *
   * Features can be styled individually with `setStyle`; otherwise they use the
   * style of their vector layer.
   *
   * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on
   * the feature object, so they are observable, and have get/set accessors.
   *
   * Typically, a feature has a single geometry property. You can set the
   * geometry using the `setGeometry` method and get it with `getGeometry`.
   * It is possible to store more than one geometry on a feature using attribute
   * properties. By default, the geometry used for rendering is identified by
   * the property name `geometry`. If you want to use another geometry property
   * for rendering, use the `setGeometryName` method to change the attribute
   * property associated with the geometry for the feature.  For example:
   *
   * ```js
   *
   * import Feature from 'ol/Feature.js';
   * import Polygon from 'ol/geom/Polygon.js';
   * import Point from 'ol/geom/Point.js';
   *
   * const feature = new Feature({
   *   geometry: new Polygon(polyCoords),
   *   labelPoint: new Point(labelCoords),
   *   name: 'My Polygon',
   * });
   *
   * // get the polygon geometry
   * const poly = feature.getGeometry();
   *
   * // Render the feature as a point using the coordinates from labelPoint
   * feature.setGeometryName('labelPoint');
   *
   * // get the point geometry
   * const point = feature.getGeometry();
   * ```
   *
   * @api
   * @template {import("./geom/Geometry.js").default} [Geometry=import("./geom/Geometry.js").default]
   */
  class Feature extends olObject {
    /**
     * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]
     *     You may pass a Geometry object directly, or an object literal containing
     *     properties. If you pass an object literal, you may include a Geometry
     *     associated with a `geometry` key.
     */
    constructor(geometryOrProperties) {
      super();

      /***
       * @type {FeatureOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {FeatureOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {FeatureOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = undefined;

      /**
       * @type {string}
       * @private
       */
      this.geometryName_ = 'geometry';

      /**
       * User provided style.
       * @private
       * @type {import("./style/Style.js").StyleLike}
       */
      this.style_ = null;

      /**
       * @private
       * @type {import("./style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction_ = undefined;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.geometryChangeKey_ = null;

      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);

      if (geometryOrProperties) {
        if (
          typeof (
            /** @type {?} */ (geometryOrProperties).getSimplifiedGeometry
          ) === 'function'
        ) {
          const geometry = /** @type {Geometry} */ (geometryOrProperties);
          this.setGeometry(geometry);
        } else {
          /** @type {Object<string, *>} */
          const properties = geometryOrProperties;
          this.setProperties(properties);
        }
      }
    }

    /**
     * Clone this feature. If the original feature has a geometry it
     * is also cloned. The feature id is not set in the clone.
     * @return {Feature<Geometry>} The clone.
     * @api
     */
    clone() {
      const clone = /** @type {Feature<Geometry>} */ (
        new Feature(this.hasProperties() ? this.getProperties() : null)
      );
      clone.setGeometryName(this.getGeometryName());
      const geometry = this.getGeometry();
      if (geometry) {
        clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));
      }
      const style = this.getStyle();
      if (style) {
        clone.setStyle(style);
      }
      return clone;
    }

    /**
     * Get the feature's default geometry.  A feature may have any number of named
     * geometries.  The "default" geometry (the one that is rendered by default) is
     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
     * @return {Geometry|undefined} The default geometry for the feature.
     * @api
     * @observable
     */
    getGeometry() {
      return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));
    }

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is either set when reading data from a remote source or set explicitly by
     * calling {@link module:ol/Feature~Feature#setId}.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id_;
    }

    /**
     * Get the name of the feature's default geometry.  By default, the default
     * geometry is named `geometry`.
     * @return {string} Get the property name associated with the default geometry
     *     for this feature.
     * @api
     */
    getGeometryName() {
      return this.geometryName_;
    }

    /**
     * Get the feature's style. Will return what was provided to the
     * {@link module:ol/Feature~Feature#setStyle} method.
     * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Get the feature's style function.
     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
     * representing the current style of this feature.
     * @api
     */
    getStyleFunction() {
      return this.styleFunction_;
    }

    /**
     * @private
     */
    handleGeometryChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleGeometryChanged_() {
      if (this.geometryChangeKey_) {
        unlistenByKey(this.geometryChangeKey_);
        this.geometryChangeKey_ = null;
      }
      const geometry = this.getGeometry();
      if (geometry) {
        this.geometryChangeKey_ = listen(
          geometry,
          EventType.CHANGE,
          this.handleGeometryChange_,
          this
        );
      }
      this.changed();
    }

    /**
     * Set the default geometry for the feature.  This will update the property
     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
     * @param {Geometry|undefined} geometry The new geometry.
     * @api
     * @observable
     */
    setGeometry(geometry) {
      this.set(this.geometryName_, geometry);
    }

    /**
     * Set the style for the feature to override the layer style.  This can be a
     * single style object, an array of styles, or a function that takes a
     * resolution and returns an array of styles. To unset the feature style, call
     * `setStyle()` without arguments or a falsey value.
     * @param {import("./style/Style.js").StyleLike} [style] Style for this feature.
     * @api
     * @fires module:ol/events/Event~BaseEvent#event:change
     */
    setStyle(style) {
      this.style_ = style;
      this.styleFunction_ = !style ? undefined : createStyleFunction(style);
      this.changed();
    }

    /**
     * Set the feature id.  The feature id is considered stable and may be used when
     * requesting features or comparing identifiers returned from a remote source.
     * The feature id can be used with the
     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
     * @param {number|string|undefined} id The feature id.
     * @api
     * @fires module:ol/events/Event~BaseEvent#event:change
     */
    setId(id) {
      this.id_ = id;
      this.changed();
    }

    /**
     * Set the property name to be used when getting the feature's default geometry.
     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
     * this name will be returned.
     * @param {string} name The property name of the default geometry.
     * @api
     */
    setGeometryName(name) {
      this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.geometryName_ = name;
      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.handleGeometryChanged_();
    }
  }

  /**
   * Convert the provided object into a feature style function.  Functions passed
   * through unchanged.  Arrays of Style or single style objects wrapped
   * in a new feature style function.
   * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
   *     A feature style function, a single style, or an array of styles.
   * @return {import("./style/Style.js").StyleFunction} A style function.
   */
  function createStyleFunction(obj) {
    if (typeof obj === 'function') {
      return obj;
    }
    /**
     * @type {Array<import("./style/Style.js").default>}
     */
    let styles;
    if (Array.isArray(obj)) {
      styles = obj;
    } else {
      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
      const style = /** @type {import("./style/Style.js").default} */ (obj);
      styles = [style];
    }
    return function () {
      return styles;
    };
  }
  var Feature$1 = Feature;

  /**
   * @module ol/has
   */

  const ua =
    typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'
      ? navigator.userAgent.toLowerCase()
      : '';

  /**
   * User agent string says we are dealing with Firefox as browser.
   * @type {boolean}
   */
  const FIREFOX = ua.includes('firefox');

  /**
   * User agent string says we are dealing with Safari as browser.
   * @type {boolean}
   */
  const SAFARI = ua.includes('safari') && !ua.includes('chrom');

  /**
   * https://bugs.webkit.org/show_bug.cgi?id=237906
   * @type {boolean}
   */
  const SAFARI_BUG_237906 =
    SAFARI &&
    (ua.includes('version/15.4') ||
      /cpu (os|iphone os) 15_4 like mac os x/.test(ua));

  /**
   * User agent string says we are dealing with a WebKit engine.
   * @type {boolean}
   */
  const WEBKIT = ua.includes('webkit') && !ua.includes('edge');

  /**
   * User agent string says we are dealing with a Mac as platform.
   * @type {boolean}
   */
  const MAC = ua.includes('macintosh');

  /**
   * The ratio between physical pixels and device-independent pixels
   * (dips) on the device (`window.devicePixelRatio`).
   * @const
   * @type {number}
   * @api
   */
  const DEVICE_PIXEL_RATIO =
    typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;

  /**
   * The execution context is a worker with OffscreenCanvas available.
   * @const
   * @type {boolean}
   */
  const WORKER_OFFSCREEN_CANVAS =
    typeof WorkerGlobalScope !== 'undefined' &&
    typeof OffscreenCanvas !== 'undefined' &&
    self instanceof WorkerGlobalScope; //eslint-disable-line

  /**
   * Image.prototype.decode() is supported.
   * @type {boolean}
   */
  const IMAGE_DECODE =
    typeof Image !== 'undefined' && Image.prototype.decode;

  /**
   * @type {boolean}
   */
  const PASSIVE_EVENT_LISTENERS = (function () {
    let passive = false;
    try {
      const options = Object.defineProperty({}, 'passive', {
        get: function () {
          passive = true;
        },
      });

      window.addEventListener('_', null, options);
      window.removeEventListener('_', null, options);
    } catch (error) {
      // passive not supported
    }
    return passive;
  })();

  /**
   * @module ol/transform
   */

  /**
   * An array representing an affine 2d transformation for use with
   * {@link module:ol/transform} functions. The array has 6 elements.
   * @typedef {!Array<number>} Transform
   * @api
   */

  /**
   * Collection of affine 2d transformation functions. The functions work on an
   * array of 6 elements. The element order is compatible with the [SVGMatrix
   * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
   * a subset (elements a to f) of a 3×3 matrix:
   * ```
   * [ a c e ]
   * [ b d f ]
   * [ 0 0 1 ]
   * ```
   */

  /**
   * @private
   * @type {Transform}
   */
  const tmp_ = new Array(6);

  /**
   * Create an identity transform.
   * @return {!Transform} Identity transform.
   */
  function create$3() {
    return [1, 0, 0, 1, 0, 0];
  }

  /**
   * Resets the given transform to an identity transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Transform.
   */
  function reset(transform) {
    return set(transform, 1, 0, 0, 1, 0, 0);
  }

  /**
   * Multiply the underlying matrices of two transforms and return the result in
   * the first transform.
   * @param {!Transform} transform1 Transform parameters of matrix 1.
   * @param {!Transform} transform2 Transform parameters of matrix 2.
   * @return {!Transform} transform1 multiplied with transform2.
   */
  function multiply(transform1, transform2) {
    const a1 = transform1[0];
    const b1 = transform1[1];
    const c1 = transform1[2];
    const d1 = transform1[3];
    const e1 = transform1[4];
    const f1 = transform1[5];
    const a2 = transform2[0];
    const b2 = transform2[1];
    const c2 = transform2[2];
    const d2 = transform2[3];
    const e2 = transform2[4];
    const f2 = transform2[5];

    transform1[0] = a1 * a2 + c1 * b2;
    transform1[1] = b1 * a2 + d1 * b2;
    transform1[2] = a1 * c2 + c1 * d2;
    transform1[3] = b1 * c2 + d1 * d2;
    transform1[4] = a1 * e2 + c1 * f2 + e1;
    transform1[5] = b1 * e2 + d1 * f2 + f1;

    return transform1;
  }

  /**
   * Set the transform components a-f on a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} a The a component of the transform.
   * @param {number} b The b component of the transform.
   * @param {number} c The c component of the transform.
   * @param {number} d The d component of the transform.
   * @param {number} e The e component of the transform.
   * @param {number} f The f component of the transform.
   * @return {!Transform} Matrix with transform applied.
   */
  function set(transform, a, b, c, d, e, f) {
    transform[0] = a;
    transform[1] = b;
    transform[2] = c;
    transform[3] = d;
    transform[4] = e;
    transform[5] = f;
    return transform;
  }

  /**
   * Set transform on one matrix from another matrix.
   * @param {!Transform} transform1 Matrix to set transform to.
   * @param {!Transform} transform2 Matrix to set transform from.
   * @return {!Transform} transform1 with transform from transform2 applied.
   */
  function setFromArray(transform1, transform2) {
    transform1[0] = transform2[0];
    transform1[1] = transform2[1];
    transform1[2] = transform2[2];
    transform1[3] = transform2[3];
    transform1[4] = transform2[4];
    transform1[5] = transform2[5];
    return transform1;
  }

  /**
   * Transforms the given coordinate with the given transform returning the
   * resulting, transformed coordinate. The coordinate will be modified in-place.
   *
   * @param {Transform} transform The transformation.
   * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
   * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
   *     chained together.
   */
  function apply(transform, coordinate) {
    const x = coordinate[0];
    const y = coordinate[1];
    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
    return coordinate;
  }

  /**
   * Applies rotation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} angle Angle in radians.
   * @return {!Transform} The rotated transform.
   */
  function rotate$2(transform, angle) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));
  }

  /**
   * Applies scale to a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scaled transform.
   */
  function scale$3(transform, x, y) {
    return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
  }

  /**
   * Creates a scale transform.
   * @param {!Transform} target Transform to overwrite.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scale transform.
   */
  function makeScale(target, x, y) {
    return set(target, x, 0, 0, y, 0, 0);
  }

  /**
   * Applies translation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} dx Translation x.
   * @param {number} dy Translation y.
   * @return {!Transform} The translated transform.
   */
  function translate$1(transform, dx, dy) {
    return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
  }

  /**
   * Creates a composite transform given an initial translation, scale, rotation, and
   * final translation (in that order only, not commutative).
   * @param {!Transform} transform The transform (will be modified in place).
   * @param {number} dx1 Initial translation x.
   * @param {number} dy1 Initial translation y.
   * @param {number} sx Scale factor x.
   * @param {number} sy Scale factor y.
   * @param {number} angle Rotation (in counter-clockwise radians).
   * @param {number} dx2 Final translation x.
   * @param {number} dy2 Final translation y.
   * @return {!Transform} The composite transform.
   */
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
    const sin = Math.sin(angle);
    const cos = Math.cos(angle);
    transform[0] = sx * cos;
    transform[1] = sy * sin;
    transform[2] = -sx * sin;
    transform[3] = sy * cos;
    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
    return transform;
  }

  /**
   * Invert the given transform.
   * @param {!Transform} target Transform to be set as the inverse of
   *     the source transform.
   * @param {!Transform} source The source transform to invert.
   * @return {!Transform} The inverted (target) transform.
   */
  function makeInverse(target, source) {
    const det = determinant(source);
    assert(det !== 0, 32); // Transformation matrix cannot be inverted

    const a = source[0];
    const b = source[1];
    const c = source[2];
    const d = source[3];
    const e = source[4];
    const f = source[5];

    target[0] = d / det;
    target[1] = -b / det;
    target[2] = -c / det;
    target[3] = a / det;
    target[4] = (c * f - d * e) / det;
    target[5] = -(a * f - b * e) / det;

    return target;
  }

  /**
   * Returns the determinant of the given matrix.
   * @param {!Transform} mat Matrix.
   * @return {number} Determinant.
   */
  function determinant(mat) {
    return mat[0] * mat[3] - mat[1] * mat[2];
  }

  /**
   * @type {HTMLElement}
   * @private
   */
  let transformStringDiv;

  /**
   * A rounded string version of the transform.  This can be used
   * for CSS transforms.
   * @param {!Transform} mat Matrix.
   * @return {string} The transform as a string.
   */
  function toString$4(mat) {
    const transformString = 'matrix(' + mat.join(', ') + ')';
    if (WORKER_OFFSCREEN_CANVAS) {
      return transformString;
    }
    const node =
      transformStringDiv || (transformStringDiv = document.createElement('div'));
    node.style.transform = transformString;
    return node.style.transform;
  }

  /**
   * @module ol/extent/Relationship
   */

  /**
   * Relationship to an extent.
   * @enum {number}
   */
  var Relationship = {
    UNKNOWN: 0,
    INTERSECTING: 1,
    ABOVE: 2,
    RIGHT: 4,
    BELOW: 8,
    LEFT: 16,
  };

  /**
   * @module ol/extent
   */

  /**
   * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
   * @typedef {Array<number>} Extent
   * @api
   */

  /**
   * Extent corner.
   * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner
   */

  /**
   * Build an extent that includes all given coordinates.
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Bounding extent.
   * @api
   */
  function boundingExtent(coordinates) {
    const extent = createEmpty();
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }

  /**
   * @param {Array<number>} xs Xs.
   * @param {Array<number>} ys Ys.
   * @param {Extent} [dest] Destination extent.
   * @private
   * @return {Extent} Extent.
   */
  function _boundingExtentXYs(xs, ys, dest) {
    const minX = Math.min.apply(null, xs);
    const minY = Math.min.apply(null, ys);
    const maxX = Math.max.apply(null, xs);
    const maxY = Math.max.apply(null, ys);
    return createOrUpdate$2(minX, minY, maxX, maxY, dest);
  }

  /**
   * Return extent increased by the provided value.
   * @param {Extent} extent Extent.
   * @param {number} value The amount by which the extent should be buffered.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   * @api
   */
  function buffer$2(extent, value, dest) {
    if (dest) {
      dest[0] = extent[0] - value;
      dest[1] = extent[1] - value;
      dest[2] = extent[2] + value;
      dest[3] = extent[3] + value;
      return dest;
    }
    return [
      extent[0] - value,
      extent[1] - value,
      extent[2] + value,
      extent[3] + value,
    ];
  }

  /**
   * Creates a clone of an extent.
   *
   * @param {Extent} extent Extent to clone.
   * @param {Extent} [dest] Extent.
   * @return {Extent} The clone.
   */
  function clone(extent, dest) {
    if (dest) {
      dest[0] = extent[0];
      dest[1] = extent[1];
      dest[2] = extent[2];
      dest[3] = extent[3];
      return dest;
    }
    return extent.slice();
  }

  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {number} Closest squared distance.
   */
  function closestSquaredDistanceXY(extent, x, y) {
    let dx, dy;
    if (x < extent[0]) {
      dx = extent[0] - x;
    } else if (extent[2] < x) {
      dx = x - extent[2];
    } else {
      dx = 0;
    }
    if (y < extent[1]) {
      dy = extent[1] - y;
    } else if (extent[3] < y) {
      dy = y - extent[3];
    } else {
      dy = 0;
    }
    return dx * dx + dy * dy;
  }

  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} The coordinate is contained in the extent.
   * @api
   */
  function containsCoordinate(extent, coordinate) {
    return containsXY(extent, coordinate[0], coordinate[1]);
  }

  /**
   * Check if one extent contains another.
   *
   * An extent is deemed contained if it lies completely within the other extent,
   * including if they share one or more edges.
   *
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The second extent is contained by or on the edge of the
   *     first.
   * @api
   */
  function containsExtent(extent1, extent2) {
    return (
      extent1[0] <= extent2[0] &&
      extent2[2] <= extent1[2] &&
      extent1[1] <= extent2[1] &&
      extent2[3] <= extent1[3]
    );
  }

  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   * @return {boolean} The x, y values are contained in the extent.
   * @api
   */
  function containsXY(extent, x, y) {
    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
  }

  /**
   * Get the relationship between a coordinate and extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
   * @return {import("./extent/Relationship.js").default} The relationship (bitwise compare with
   *     import("./extent/Relationship.js").Relationship).
   */
  function coordinateRelationship(extent, coordinate) {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const x = coordinate[0];
    const y = coordinate[1];
    let relationship = Relationship.UNKNOWN;
    if (x < minX) {
      relationship = relationship | Relationship.LEFT;
    } else if (x > maxX) {
      relationship = relationship | Relationship.RIGHT;
    }
    if (y < minY) {
      relationship = relationship | Relationship.BELOW;
    } else if (y > maxY) {
      relationship = relationship | Relationship.ABOVE;
    }
    if (relationship === Relationship.UNKNOWN) {
      relationship = Relationship.INTERSECTING;
    }
    return relationship;
  }

  /**
   * Create an empty extent.
   * @return {Extent} Empty extent.
   * @api
   */
  function createEmpty() {
    return [Infinity, Infinity, -Infinity, -Infinity];
  }

  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent} [dest] Destination extent.
   * @return {Extent} Extent.
   */
  function createOrUpdate$2(minX, minY, maxX, maxY, dest) {
    if (dest) {
      dest[0] = minX;
      dest[1] = minY;
      dest[2] = maxX;
      dest[3] = maxY;
      return dest;
    }
    return [minX, minY, maxX, maxY];
  }

  /**
   * Create a new empty extent or make the provided one empty.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateEmpty(dest) {
    return createOrUpdate$2(Infinity, Infinity, -Infinity, -Infinity, dest);
  }

  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinate(coordinate, dest) {
    const x = coordinate[0];
    const y = coordinate[1];
    return createOrUpdate$2(x, y, x, y, dest);
  }

  /**
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinates(coordinates, dest) {
    const extent = createOrUpdateEmpty(dest);
    return extendCoordinates(extent, coordinates);
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromFlatCoordinates(
    flatCoordinates,
    offset,
    end,
    stride,
    dest
  ) {
    const extent = createOrUpdateEmpty(dest);
    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
  }

  /**
   * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromRings(rings, dest) {
    const extent = createOrUpdateEmpty(dest);
    return extendRings(extent, rings);
  }

  /**
   * Determine if two extents are equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The two extents are equivalent.
   * @api
   */
  function equals$2(extent1, extent2) {
    return (
      extent1[0] == extent2[0] &&
      extent1[2] == extent2[2] &&
      extent1[1] == extent2[1] &&
      extent1[3] == extent2[3]
    );
  }

  /**
   * Determine if two extents are approximately equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {number} tolerance Tolerance in extent coordinate units.
   * @return {boolean} The two extents differ by less than the tolerance.
   */
  function approximatelyEquals(extent1, extent2, tolerance) {
    return (
      Math.abs(extent1[0] - extent2[0]) < tolerance &&
      Math.abs(extent1[2] - extent2[2]) < tolerance &&
      Math.abs(extent1[1] - extent2[1]) < tolerance &&
      Math.abs(extent1[3] - extent2[3]) < tolerance
    );
  }

  /**
   * Modify an extent to include another extent.
   * @param {Extent} extent1 The extent to be modified.
   * @param {Extent} extent2 The extent that will be included in the first.
   * @return {Extent} A reference to the first (extended) extent.
   * @api
   */
  function extend(extent1, extent2) {
    if (extent2[0] < extent1[0]) {
      extent1[0] = extent2[0];
    }
    if (extent2[2] > extent1[2]) {
      extent1[2] = extent2[2];
    }
    if (extent2[1] < extent1[1]) {
      extent1[1] = extent2[1];
    }
    if (extent2[3] > extent1[3]) {
      extent1[3] = extent2[3];
    }
    return extent1;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   */
  function extendCoordinate(extent, coordinate) {
    if (coordinate[0] < extent[0]) {
      extent[0] = coordinate[0];
    }
    if (coordinate[0] > extent[2]) {
      extent[2] = coordinate[0];
    }
    if (coordinate[1] < extent[1]) {
      extent[1] = coordinate[1];
    }
    if (coordinate[1] > extent[3]) {
      extent[3] = coordinate[1];
    }
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Extent.
   */
  function extendCoordinates(extent, coordinates) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      extendCoordinate(extent, coordinates[i]);
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Extent} Extent.
   */
  function extendFlatCoordinates(
    extent,
    flatCoordinates,
    offset,
    end,
    stride
  ) {
    for (; offset < end; offset += stride) {
      extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
   * @return {Extent} Extent.
   */
  function extendRings(extent, rings) {
    for (let i = 0, ii = rings.length; i < ii; ++i) {
      extendCoordinates(extent, rings[i]);
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   */
  function extendXY(extent, x, y) {
    extent[0] = Math.min(extent[0], x);
    extent[1] = Math.min(extent[1], y);
    extent[2] = Math.max(extent[2], x);
    extent[3] = Math.max(extent[3], y);
  }

  /**
   * This function calls `callback` for each corner of the extent. If the
   * callback returns a truthy value the function returns that value
   * immediately. Otherwise the function returns `false`.
   * @param {Extent} extent Extent.
   * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
   * @return {S|boolean} Value.
   * @template S
   */
  function forEachCorner(extent, callback) {
    let val;
    val = callback(getBottomLeft(extent));
    if (val) {
      return val;
    }
    val = callback(getBottomRight(extent));
    if (val) {
      return val;
    }
    val = callback(getTopRight(extent));
    if (val) {
      return val;
    }
    val = callback(getTopLeft(extent));
    if (val) {
      return val;
    }
    return false;
  }

  /**
   * Get the size of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Area.
   * @api
   */
  function getArea$1(extent) {
    let area = 0;
    if (!isEmpty(extent)) {
      area = getWidth(extent) * getHeight(extent);
    }
    return area;
  }

  /**
   * Get the bottom left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
   * @api
   */
  function getBottomLeft(extent) {
    return [extent[0], extent[1]];
  }

  /**
   * Get the bottom right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
   * @api
   */
  function getBottomRight(extent) {
    return [extent[2], extent[1]];
  }

  /**
   * Get the center coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Center.
   * @api
   */
  function getCenter(extent) {
    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
  }

  /**
   * Get a corner coordinate of an extent.
   * @param {Extent} extent Extent.
   * @param {Corner} corner Corner.
   * @return {import("./coordinate.js").Coordinate} Corner coordinate.
   */
  function getCorner(extent, corner) {
    let coordinate;
    if (corner === 'bottom-left') {
      coordinate = getBottomLeft(extent);
    } else if (corner === 'bottom-right') {
      coordinate = getBottomRight(extent);
    } else if (corner === 'top-left') {
      coordinate = getTopLeft(extent);
    } else if (corner === 'top-right') {
      coordinate = getTopRight(extent);
    } else {
      assert(false, 13); // Invalid corner
    }
    return coordinate;
  }

  /**
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {number} Enlarged area.
   */
  function getEnlargedArea(extent1, extent2) {
    const minX = Math.min(extent1[0], extent2[0]);
    const minY = Math.min(extent1[1], extent2[1]);
    const maxX = Math.max(extent1[2], extent2[2]);
    const maxY = Math.max(extent1[3], extent2[3]);
    return (maxX - minX) * (maxY - minY);
  }

  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @param {Extent} [dest] Destination extent.
   * @return {Extent} Extent.
   */
  function getForViewAndSize(center, resolution, rotation, size, dest) {
    const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(
      center,
      resolution,
      rotation,
      size
    );
    return createOrUpdate$2(
      Math.min(x0, x1, x2, x3),
      Math.min(y0, y1, y2, y3),
      Math.max(x0, x1, x2, x3),
      Math.max(y0, y1, y2, y3),
      dest
    );
  }

  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @return {Array<number>} Linear ring representing the viewport.
   */
  function getRotatedViewport(center, resolution, rotation, size) {
    const dx = (resolution * size[0]) / 2;
    const dy = (resolution * size[1]) / 2;
    const cosRotation = Math.cos(rotation);
    const sinRotation = Math.sin(rotation);
    const xCos = dx * cosRotation;
    const xSin = dx * sinRotation;
    const yCos = dy * cosRotation;
    const ySin = dy * sinRotation;
    const x = center[0];
    const y = center[1];
    return [
      x - xCos + ySin,
      y - xSin - yCos,
      x - xCos - ySin,
      y - xSin + yCos,
      x + xCos - ySin,
      y + xSin + yCos,
      x + xCos + ySin,
      y + xSin - yCos,
      x - xCos + ySin,
      y - xSin - yCos,
    ];
  }

  /**
   * Get the height of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Height.
   * @api
   */
  function getHeight(extent) {
    return extent[3] - extent[1];
  }

  /**
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {number} Intersection area.
   */
  function getIntersectionArea(extent1, extent2) {
    const intersection = getIntersection(extent1, extent2);
    return getArea$1(intersection);
  }

  /**
   * Get the intersection of two extents.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {Extent} [dest] Optional extent to populate with intersection.
   * @return {Extent} Intersecting extent.
   * @api
   */
  function getIntersection(extent1, extent2, dest) {
    const intersection = dest ? dest : createEmpty();
    if (intersects$2(extent1, extent2)) {
      if (extent1[0] > extent2[0]) {
        intersection[0] = extent1[0];
      } else {
        intersection[0] = extent2[0];
      }
      if (extent1[1] > extent2[1]) {
        intersection[1] = extent1[1];
      } else {
        intersection[1] = extent2[1];
      }
      if (extent1[2] < extent2[2]) {
        intersection[2] = extent1[2];
      } else {
        intersection[2] = extent2[2];
      }
      if (extent1[3] < extent2[3]) {
        intersection[3] = extent1[3];
      } else {
        intersection[3] = extent2[3];
      }
    } else {
      createOrUpdateEmpty(intersection);
    }
    return intersection;
  }

  /**
   * @param {Extent} extent Extent.
   * @return {number} Margin.
   */
  function getMargin(extent) {
    return getWidth(extent) + getHeight(extent);
  }

  /**
   * Get the size (width, height) of an extent.
   * @param {Extent} extent The extent.
   * @return {import("./size.js").Size} The extent size.
   * @api
   */
  function getSize(extent) {
    return [extent[2] - extent[0], extent[3] - extent[1]];
  }

  /**
   * Get the top left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top left coordinate.
   * @api
   */
  function getTopLeft(extent) {
    return [extent[0], extent[3]];
  }

  /**
   * Get the top right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top right coordinate.
   * @api
   */
  function getTopRight(extent) {
    return [extent[2], extent[3]];
  }

  /**
   * Get the width of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Width.
   * @api
   */
  function getWidth(extent) {
    return extent[2] - extent[0];
  }

  /**
   * Determine if one extent intersects another.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent.
   * @return {boolean} The two extents intersect.
   * @api
   */
  function intersects$2(extent1, extent2) {
    return (
      extent1[0] <= extent2[2] &&
      extent1[2] >= extent2[0] &&
      extent1[1] <= extent2[3] &&
      extent1[3] >= extent2[1]
    );
  }

  /**
   * Determine if an extent is empty.
   * @param {Extent} extent Extent.
   * @return {boolean} Is empty.
   * @api
   */
  function isEmpty(extent) {
    return extent[2] < extent[0] || extent[3] < extent[1];
  }

  /**
   * @param {Extent} extent Extent.
   * @param {Extent} [dest] Extent.
   * @return {Extent} Extent.
   */
  function returnOrUpdate(extent, dest) {
    if (dest) {
      dest[0] = extent[0];
      dest[1] = extent[1];
      dest[2] = extent[2];
      dest[3] = extent[3];
      return dest;
    }
    return extent;
  }

  /**
   * @param {Extent} extent Extent.
   * @param {number} value Value.
   */
  function scaleFromCenter(extent, value) {
    const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
    const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
    extent[0] -= deltaX;
    extent[2] += deltaX;
    extent[1] -= deltaY;
    extent[3] += deltaY;
  }

  /**
   * Determine if the segment between two coordinates intersects (crosses,
   * touches, or is contained by) the provided extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
   * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
   * @return {boolean} The segment intersects the extent.
   */
  function intersectsSegment(extent, start, end) {
    let intersects = false;
    const startRel = coordinateRelationship(extent, start);
    const endRel = coordinateRelationship(extent, end);
    if (
      startRel === Relationship.INTERSECTING ||
      endRel === Relationship.INTERSECTING
    ) {
      intersects = true;
    } else {
      const minX = extent[0];
      const minY = extent[1];
      const maxX = extent[2];
      const maxY = extent[3];
      const startX = start[0];
      const startY = start[1];
      const endX = end[0];
      const endY = end[1];
      const slope = (endY - startY) / (endX - startX);
      let x, y;
      if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {
        // potentially intersects top
        x = endX - (endY - maxY) / slope;
        intersects = x >= minX && x <= maxX;
      }
      if (
        !intersects &&
        !!(endRel & Relationship.RIGHT) &&
        !(startRel & Relationship.RIGHT)
      ) {
        // potentially intersects right
        y = endY - (endX - maxX) * slope;
        intersects = y >= minY && y <= maxY;
      }
      if (
        !intersects &&
        !!(endRel & Relationship.BELOW) &&
        !(startRel & Relationship.BELOW)
      ) {
        // potentially intersects bottom
        x = endX - (endY - minY) / slope;
        intersects = x >= minX && x <= maxX;
      }
      if (
        !intersects &&
        !!(endRel & Relationship.LEFT) &&
        !(startRel & Relationship.LEFT)
      ) {
        // potentially intersects left
        y = endY - (endX - minX) * slope;
        intersects = y >= minY && y <= maxY;
      }
    }
    return intersects;
  }

  /**
   * Apply a transform function to the extent.
   * @param {Extent} extent Extent.
   * @param {import("./proj.js").TransformFunction} transformFn Transform function.
   * Called with `[minX, minY, maxX, maxY]` extent coordinates.
   * @param {Extent} [dest] Destination extent.
   * @param {number} [stops] Number of stops per side used for the transform.
   * By default only the corners are used.
   * @return {Extent} Extent.
   * @api
   */
  function applyTransform(extent, transformFn, dest, stops) {
    let coordinates = [];
    if (stops > 1) {
      const width = extent[2] - extent[0];
      const height = extent[3] - extent[1];
      for (let i = 0; i < stops; ++i) {
        coordinates.push(
          extent[0] + (width * i) / stops,
          extent[1],
          extent[2],
          extent[1] + (height * i) / stops,
          extent[2] - (width * i) / stops,
          extent[3],
          extent[0],
          extent[3] - (height * i) / stops
        );
      }
    } else {
      coordinates = [
        extent[0],
        extent[1],
        extent[2],
        extent[1],
        extent[2],
        extent[3],
        extent[0],
        extent[3],
      ];
    }
    transformFn(coordinates, coordinates, 2);
    const xs = [];
    const ys = [];
    for (let i = 0, l = coordinates.length; i < l; i += 2) {
      xs.push(coordinates[i]);
      ys.push(coordinates[i + 1]);
    }
    return _boundingExtentXYs(xs, ys, dest);
  }

  /**
   * Modifies the provided extent in-place to be within the real world
   * extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./proj/Projection.js").default} projection Projection
   * @return {Extent} The extent within the real world extent.
   */
  function wrapX$2(extent, projection) {
    const projectionExtent = projection.getExtent();
    const center = getCenter(extent);
    if (
      projection.canWrapX() &&
      (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])
    ) {
      const worldWidth = getWidth(projectionExtent);
      const worldsAway = Math.floor(
        (center[0] - projectionExtent[0]) / worldWidth
      );
      const offset = worldsAway * worldWidth;
      extent[0] -= offset;
      extent[2] -= offset;
    }
    return extent;
  }

  /**
   * Fits the extent to the real world
   *
   * If the extent does not cross the anti meridian, this will return the extent in an array
   * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the
   * real world
   *
   *
   * @param {Extent} extent Extent.
   * @param {import("./proj/Projection.js").default} projection Projection
   * @return {Array<Extent>} The extent within the real world extent.
   */
  function wrapAndSliceX(extent, projection) {
    if (projection.canWrapX()) {
      const projectionExtent = projection.getExtent();

      if (!isFinite(extent[0]) || !isFinite(extent[2])) {
        return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];
      }

      wrapX$2(extent, projection);
      const worldWidth = getWidth(projectionExtent);

      if (getWidth(extent) > worldWidth) {
        // the extent wraps around on itself
        return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];
      } else if (extent[0] < projectionExtent[0]) {
        // the extent crosses the anti meridian, so it needs to be sliced
        return [
          [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],
          [projectionExtent[0], extent[1], extent[2], extent[3]],
        ];
      } else if (extent[2] > projectionExtent[2]) {
        // the extent crosses the anti meridian, so it needs to be sliced
        return [
          [extent[0], extent[1], projectionExtent[2], extent[3]],
          [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],
        ];
      }
    }

    return [extent];
  }

  var nsExtent = {
    __proto__: null,
    boundingExtent: boundingExtent,
    buffer: buffer$2,
    clone: clone,
    closestSquaredDistanceXY: closestSquaredDistanceXY,
    containsCoordinate: containsCoordinate,
    containsExtent: containsExtent,
    containsXY: containsXY,
    coordinateRelationship: coordinateRelationship,
    createEmpty: createEmpty,
    createOrUpdate: createOrUpdate$2,
    createOrUpdateEmpty: createOrUpdateEmpty,
    createOrUpdateFromCoordinate: createOrUpdateFromCoordinate,
    createOrUpdateFromCoordinates: createOrUpdateFromCoordinates,
    createOrUpdateFromFlatCoordinates: createOrUpdateFromFlatCoordinates,
    createOrUpdateFromRings: createOrUpdateFromRings,
    equals: equals$2,
    approximatelyEquals: approximatelyEquals,
    extend: extend,
    extendCoordinate: extendCoordinate,
    extendCoordinates: extendCoordinates,
    extendFlatCoordinates: extendFlatCoordinates,
    extendRings: extendRings,
    extendXY: extendXY,
    forEachCorner: forEachCorner,
    getArea: getArea$1,
    getBottomLeft: getBottomLeft,
    getBottomRight: getBottomRight,
    getCenter: getCenter,
    getCorner: getCorner,
    getEnlargedArea: getEnlargedArea,
    getForViewAndSize: getForViewAndSize,
    getRotatedViewport: getRotatedViewport,
    getHeight: getHeight,
    getIntersectionArea: getIntersectionArea,
    getIntersection: getIntersection,
    getMargin: getMargin,
    getSize: getSize,
    getTopLeft: getTopLeft,
    getTopRight: getTopRight,
    getWidth: getWidth,
    intersects: intersects$2,
    isEmpty: isEmpty,
    returnOrUpdate: returnOrUpdate,
    scaleFromCenter: scaleFromCenter,
    intersectsSegment: intersectsSegment,
    applyTransform: applyTransform,
    wrapX: wrapX$2,
    wrapAndSliceX: wrapAndSliceX
  };

  /**
   * @module ol/proj/Units
   */

  /**
   * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units
   * Projection units.
   */

  /**
   * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt
   * @type {Object<number, Units>}
   */
  const unitByCode = {
    '9001': 'm',
    '9002': 'ft',
    '9003': 'us-ft',
    '9101': 'radians',
    '9102': 'degrees',
  };

  /**
   * @param {number} code Unit code.
   * @return {Units} Units.
   */
  function fromCode(code) {
    return unitByCode[code];
  }

  /**
   * @typedef {Object} MetersPerUnitLookup
   * @property {number} radians Radians
   * @property {number} degrees Degrees
   * @property {number} ft  Feet
   * @property {number} m Meters
   * @property {number} us-ft US feet
   */

  /**
   * Meters per unit lookup table.
   * @const
   * @type {MetersPerUnitLookup}
   * @api
   */
  const METERS_PER_UNIT$1 = {
    // use the radius of the Normal sphere
    'radians': 6370997 / (2 * Math.PI),
    'degrees': (2 * Math.PI * 6370997) / 360,
    'ft': 0.3048,
    'm': 1,
    'us-ft': 1200 / 3937,
  };

  /**
   * @module ol/proj/Projection
   */

  /**
   * @typedef {Object} Options
   * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
   * @property {import("./Units.js").Units} [units] Units. Required unless a
   * proj4 projection is defined for `code`.
   * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
   * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
   * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
   * @property {number} [metersPerUnit] The meters per unit for the SRS.
   * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}
   * lookup table.
   * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
   * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
   * Function to determine resolution at a point. The function is called with a
   * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns
   * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,
   * the default {@link module:ol/proj.getPointResolution} function will be used.
   */

  /**
   * @classdesc
   * Projection definition class. One of these is created for each projection
   * supported in the application and stored in the {@link module:ol/proj} namespace.
   * You can use these in applications, but this is not required, as API params
   * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
   * code will suffice.
   *
   * You can use {@link module:ol/proj.get} to retrieve the object for a particular
   * projection.
   *
   * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
   * with the following aliases:
   * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
   *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
   *     http://www.opengis.net/gml/srs/epsg.xml#4326,
   *     urn:x-ogc:def:crs:EPSG:4326
   * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
   *     urn:ogc:def:crs:EPSG:6.18:3:3857,
   *     http://www.opengis.net/gml/srs/epsg.xml#3857
   *
   * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
   * be added using `proj4.defs()`. After all required projection definitions are
   * added, call the {@link module:ol/proj/proj4.register} function.
   *
   * @api
   */
  class Projection {
    /**
     * @param {Options} options Projection options.
     */
    constructor(options) {
      /**
       * @private
       * @type {string}
       */
      this.code_ = options.code;

      /**
       * Units of projected coordinates. When set to `TILE_PIXELS`, a
       * `this.extent_` and `this.worldExtent_` must be configured properly for each
       * tile.
       * @private
       * @type {import("./Units.js").Units}
       */
      this.units_ = /** @type {import("./Units.js").Units} */ (options.units);

      /**
       * Validity extent of the projection in projected coordinates. For projections
       * with `TILE_PIXELS` units, this is the extent of the tile in
       * tile pixel space.
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = options.extent !== undefined ? options.extent : null;

      /**
       * Extent of the world in EPSG:4326. For projections with
       * `TILE_PIXELS` units, this is the extent of the tile in
       * projected coordinate space.
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.worldExtent_ =
        options.worldExtent !== undefined ? options.worldExtent : null;

      /**
       * @private
       * @type {string}
       */
      this.axisOrientation_ =
        options.axisOrientation !== undefined ? options.axisOrientation : 'enu';

      /**
       * @private
       * @type {boolean}
       */
      this.global_ = options.global !== undefined ? options.global : false;

      /**
       * @private
       * @type {boolean}
       */
      this.canWrapX_ = !!(this.global_ && this.extent_);

      /**
       * @private
       * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
       */
      this.getPointResolutionFunc_ = options.getPointResolution;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.defaultTileGrid_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.metersPerUnit_ = options.metersPerUnit;
    }

    /**
     * @return {boolean} The projection is suitable for wrapping the x-axis
     */
    canWrapX() {
      return this.canWrapX_;
    }

    /**
     * Get the code for this projection, e.g. 'EPSG:4326'.
     * @return {string} Code.
     * @api
     */
    getCode() {
      return this.code_;
    }

    /**
     * Get the validity extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Get the units of this projection.
     * @return {import("./Units.js").Units} Units.
     * @api
     */
    getUnits() {
      return this.units_;
    }

    /**
     * Get the amount of meters per unit of this projection.  If the projection is
     * not configured with `metersPerUnit` or a units identifier, the return is
     * `undefined`.
     * @return {number|undefined} Meters.
     * @api
     */
    getMetersPerUnit() {
      return this.metersPerUnit_ || METERS_PER_UNIT$1[this.units_];
    }

    /**
     * Get the world extent for this projection.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getWorldExtent() {
      return this.worldExtent_;
    }

    /**
     * Get the axis orientation of this projection.
     * Example values are:
     * enu - the default easting, northing, elevation.
     * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
     *     or south orientated transverse mercator.
     * wnu - westing, northing, up - some planetary coordinate systems have
     *     "west positive" coordinate systems
     * @return {string} Axis orientation.
     * @api
     */
    getAxisOrientation() {
      return this.axisOrientation_;
    }

    /**
     * Is this projection a global projection which spans the whole world?
     * @return {boolean} Whether the projection is global.
     * @api
     */
    isGlobal() {
      return this.global_;
    }

    /**
     * Set if the projection is a global projection which spans the whole world
     * @param {boolean} global Whether the projection is global.
     * @api
     */
    setGlobal(global) {
      this.global_ = global;
      this.canWrapX_ = !!(global && this.extent_);
    }

    /**
     * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
     */
    getDefaultTileGrid() {
      return this.defaultTileGrid_;
    }

    /**
     * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
     */
    setDefaultTileGrid(tileGrid) {
      this.defaultTileGrid_ = tileGrid;
    }

    /**
     * Set the validity extent for this projection.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    setExtent(extent) {
      this.extent_ = extent;
      this.canWrapX_ = !!(this.global_ && extent);
    }

    /**
     * Set the world extent for this projection.
     * @param {import("../extent.js").Extent} worldExtent World extent
     *     [minlon, minlat, maxlon, maxlat].
     * @api
     */
    setWorldExtent(worldExtent) {
      this.worldExtent_ = worldExtent;
    }

    /**
     * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}
     * for this projection.
     * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
     * @api
     */
    setGetPointResolution(func) {
      this.getPointResolutionFunc_ = func;
    }

    /**
     * Get the custom point resolution function for this projection (if set).
     * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
     * resolution function (if set).
     */
    getPointResolutionFunc() {
      return this.getPointResolutionFunc_;
    }
  }

  var Projection$1 = Projection;

  /**
   * @module ol/proj/epsg3857
   */

  /**
   * Radius of WGS84 sphere
   *
   * @const
   * @type {number}
   */
  const RADIUS$1 = 6378137;

  /**
   * @const
   * @type {number}
   */
  const HALF_SIZE = Math.PI * RADIUS$1;

  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  const EXTENT$2 = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];

  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  const WORLD_EXTENT = [-180, -85, 180, 85];

  /**
   * Maximum safe value in y direction
   * @const
   * @type {number}
   */
  const MAX_SAFE_Y = RADIUS$1 * Math.log(Math.tan(Math.PI / 2));

  /**
   * @classdesc
   * Projection object for web/spherical Mercator (EPSG:3857).
   */
  class EPSG3857Projection extends Projection$1 {
    /**
     * @param {string} code Code.
     */
    constructor(code) {
      super({
        code: code,
        units: 'm',
        extent: EXTENT$2,
        global: true,
        worldExtent: WORLD_EXTENT,
        getPointResolution: function (resolution, point) {
          return resolution / Math.cosh(point[1] / RADIUS$1);
        },
      });
    }
  }

  /**
   * Projections equal to EPSG:3857.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  const PROJECTIONS$1 = [
    new EPSG3857Projection('EPSG:3857'),
    new EPSG3857Projection('EPSG:102100'),
    new EPSG3857Projection('EPSG:102113'),
    new EPSG3857Projection('EPSG:900913'),
    new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),
    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),
  ];

  /**
   * Transformation from EPSG:4326 to EPSG:3857.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @param {number} [dimension] Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function fromEPSG4326(input, output, dimension) {
    const length = input.length;
    dimension = dimension > 1 ? dimension : 2;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (let i = 0; i < length; i += dimension) {
      output[i] = (HALF_SIZE * input[i]) / 180;
      let y = RADIUS$1 * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));
      if (y > MAX_SAFE_Y) {
        y = MAX_SAFE_Y;
      } else if (y < -MAX_SAFE_Y) {
        y = -MAX_SAFE_Y;
      }
      output[i + 1] = y;
    }
    return output;
  }

  /**
   * Transformation from EPSG:3857 to EPSG:4326.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @param {number} [dimension] Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function toEPSG4326(input, output, dimension) {
    const length = input.length;
    dimension = dimension > 1 ? dimension : 2;
    if (output === undefined) {
      if (dimension > 2) {
        // preserve values beyond second dimension
        output = input.slice();
      } else {
        output = new Array(length);
      }
    }
    for (let i = 0; i < length; i += dimension) {
      output[i] = (180 * input[i]) / HALF_SIZE;
      output[i + 1] =
        (360 * Math.atan(Math.exp(input[i + 1] / RADIUS$1))) / Math.PI - 90;
    }
    return output;
  }

  /**
   * @module ol/proj/epsg4326
   */

  /**
   * Semi-major radius of the WGS84 ellipsoid.
   *
   * @const
   * @type {number}
   */
  const RADIUS = 6378137;

  /**
   * Extent of the EPSG:4326 projection which is the whole world.
   *
   * @const
   * @type {import("../extent.js").Extent}
   */
  const EXTENT$1 = [-180, -90, 180, 90];

  /**
   * @const
   * @type {number}
   */
  const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;

  /**
   * @classdesc
   * Projection object for WGS84 geographic coordinates (EPSG:4326).
   *
   * Note that OpenLayers does not strictly comply with the EPSG definition.
   * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
   * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
   */
  class EPSG4326Projection extends Projection$1 {
    /**
     * @param {string} code Code.
     * @param {string} [axisOrientation] Axis orientation.
     */
    constructor(code, axisOrientation) {
      super({
        code: code,
        units: 'degrees',
        extent: EXTENT$1,
        axisOrientation: axisOrientation,
        global: true,
        metersPerUnit: METERS_PER_UNIT,
        worldExtent: EXTENT$1,
      });
    }
  }

  /**
   * Projections equal to EPSG:4326.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  const PROJECTIONS = [
    new EPSG4326Projection('CRS:84'),
    new EPSG4326Projection('EPSG:4326', 'neu'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
    new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),
    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
    new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),
  ];

  /**
   * @module ol/proj/projections
   */

  /**
   * @type {Object<string, import("./Projection.js").default>}
   */
  let cache = {};

  /**
   * Clear the projections cache.
   */
  function clear$1() {
    cache = {};
  }

  /**
   * Get a cached projection by code.
   * @param {string} code The code for the projection.
   * @return {import("./Projection.js").default} The projection (if cached).
   */
  function get$4(code) {
    return (
      cache[code] ||
      cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/, 'EPSG:$3')] ||
      null
    );
  }

  /**
   * Add a projection to the cache.
   * @param {string} code The projection code.
   * @param {import("./Projection.js").default} projection The projection to cache.
   */
  function add$2(code, projection) {
    cache[code] = projection;
  }

  /**
   * @module ol/proj/transforms
   */

  /**
   * @private
   * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
   */
  let transforms = {};

  /**
   * Clear the transform cache.
   */
  function clear() {
    transforms = {};
  }

  /**
   * Registers a conversion function to convert coordinates from the source
   * projection to the destination projection.
   *
   * @param {import("./Projection.js").default} source Source.
   * @param {import("./Projection.js").default} destination Destination.
   * @param {import("../proj.js").TransformFunction} transformFn Transform.
   */
  function add$1(source, destination, transformFn) {
    const sourceCode = source.getCode();
    const destinationCode = destination.getCode();
    if (!(sourceCode in transforms)) {
      transforms[sourceCode] = {};
    }
    transforms[sourceCode][destinationCode] = transformFn;
  }

  /**
   * Get a transform given a source code and a destination code.
   * @param {string} sourceCode The code for the source projection.
   * @param {string} destinationCode The code for the destination projection.
   * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
   */
  function get$3(sourceCode, destinationCode) {
    let transform;
    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
      transform = transforms[sourceCode][destinationCode];
    }
    return transform;
  }

  /**
   * @module ol/math
   */

  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param {number} value The input number.
   * @param {number} min The minimum value to return.
   * @param {number} max The maximum value to return.
   * @return {number} The input number if it is within bounds, or the nearest
   *     number within the bounds.
   */
  function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
  }

  /**
   * Returns the square of the closest distance between the point (x, y) and the
   * line segment (x1, y1) to (x2, y2).
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    if (dx !== 0 || dy !== 0) {
      const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        x1 = x2;
        y1 = y2;
      } else if (t > 0) {
        x1 += dx * t;
        y1 += dy * t;
      }
    }
    return squaredDistance$1(x, y, x1, y1);
  }

  /**
   * Returns the square of the distance between the points (x1, y1) and (x2, y2).
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredDistance$1(x1, y1, x2, y2) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    return dx * dx + dy * dy;
  }

  /**
   * Solves system of linear equations using Gaussian elimination method.
   *
   * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
   *                                     in row-major order.
   * @return {Array<number>} The resulting vector.
   */
  function solveLinearSystem(mat) {
    const n = mat.length;

    for (let i = 0; i < n; i++) {
      // Find max in the i-th column (ignoring i - 1 first rows)
      let maxRow = i;
      let maxEl = Math.abs(mat[i][i]);
      for (let r = i + 1; r < n; r++) {
        const absValue = Math.abs(mat[r][i]);
        if (absValue > maxEl) {
          maxEl = absValue;
          maxRow = r;
        }
      }

      if (maxEl === 0) {
        return null; // matrix is singular
      }

      // Swap max row with i-th (current) row
      const tmp = mat[maxRow];
      mat[maxRow] = mat[i];
      mat[i] = tmp;

      // Subtract the i-th row to make all the remaining rows 0 in the i-th column
      for (let j = i + 1; j < n; j++) {
        const coef = -mat[j][i] / mat[i][i];
        for (let k = i; k < n + 1; k++) {
          if (i == k) {
            mat[j][k] = 0;
          } else {
            mat[j][k] += coef * mat[i][k];
          }
        }
      }
    }

    // Solve Ax=b for upper triangular matrix A (mat)
    const x = new Array(n);
    for (let l = n - 1; l >= 0; l--) {
      x[l] = mat[l][n] / mat[l][l];
      for (let m = l - 1; m >= 0; m--) {
        mat[m][n] -= mat[m][l] * x[l];
      }
    }
    return x;
  }

  /**
   * Converts radians to to degrees.
   *
   * @param {number} angleInRadians Angle in radians.
   * @return {number} Angle in degrees.
   */
  function toDegrees(angleInRadians) {
    return (angleInRadians * 180) / Math.PI;
  }

  /**
   * Converts degrees to radians.
   *
   * @param {number} angleInDegrees Angle in degrees.
   * @return {number} Angle in radians.
   */
  function toRadians(angleInDegrees) {
    return (angleInDegrees * Math.PI) / 180;
  }

  /**
   * Returns the modulo of a / b, depending on the sign of b.
   *
   * @param {number} a Dividend.
   * @param {number} b Divisor.
   * @return {number} Modulo.
   */
  function modulo(a, b) {
    const r = a % b;
    return r * b < 0 ? r + b : r;
  }

  /**
   * Calculates the linearly interpolated value of x between a and b.
   *
   * @param {number} a Number
   * @param {number} b Number
   * @param {number} x Value to be interpolated.
   * @return {number} Interpolated value.
   */
  function lerp$1(a, b, x) {
    return a + x * (b - a);
  }

  /**
   * Returns a number with a limited number of decimal digits.
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The input number with a limited number of decimal digits.
   */
  function toFixed(n, decimals) {
    const factor = Math.pow(10, decimals);
    return Math.round(n * factor) / factor;
  }

  /**
   * Rounds a number to the nearest integer value considering only the given number
   * of decimal digits (with rounding on the final digit).
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The nearest integer.
   */
  function round(n, decimals) {
    return Math.round(toFixed(n, decimals));
  }

  /**
   * Rounds a number to the next smaller integer considering only the given number
   * of decimal digits (with rounding on the final digit).
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The next smaller integer.
   */
  function floor(n, decimals) {
    return Math.floor(toFixed(n, decimals));
  }

  /**
   * Rounds a number to the next bigger integer considering only the given number
   * of decimal digits (with rounding on the final digit).
   * @param {number} n The input number.
   * @param {number} decimals The maximum number of decimal digits.
   * @return {number} The next bigger integer.
   */
  function ceil(n, decimals) {
    return Math.ceil(toFixed(n, decimals));
  }

  /**
   * @module ol/string
   */

  /**
   * @param {number} number Number to be formatted
   * @param {number} width The desired width
   * @param {number} [precision] Precision of the output string (i.e. number of decimal places)
   * @return {string} Formatted string
   */
  function padNumber(number, width, precision) {
    const numberString =
      precision !== undefined ? number.toFixed(precision) : '' + number;
    let decimal = numberString.indexOf('.');
    decimal = decimal === -1 ? numberString.length : decimal;
    return decimal > width
      ? numberString
      : new Array(1 + width - decimal).join('0') + numberString;
  }

  /**
   * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
   * @param {string|number} v1 First version
   * @param {string|number} v2 Second version
   * @return {number} Value
   */
  function compareVersions(v1, v2) {
    const s1 = ('' + v1).split('.');
    const s2 = ('' + v2).split('.');

    for (let i = 0; i < Math.max(s1.length, s2.length); i++) {
      const n1 = parseInt(s1[i] || '0', 10);
      const n2 = parseInt(s2[i] || '0', 10);

      if (n1 > n2) {
        return 1;
      }
      if (n2 > n1) {
        return -1;
      }
    }

    return 0;
  }

  /**
   * @module ol/coordinate
   */

  /**
   * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
   * @typedef {Array<number>} Coordinate
   * @api
   */

  /**
   * A function that takes a {@link module:ol/coordinate~Coordinate} and
   * transforms it into a `{string}`.
   *
   * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
   * @api
   */

  /**
   * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {add} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     add(coord, [-2, 4]);
   *     // coord is now [5.85, 51.983333]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {Coordinate} delta Delta.
   * @return {Coordinate} The input coordinate adjusted by
   * the given delta.
   * @api
   */
  function add(coordinate, delta) {
    coordinate[0] += +delta[0];
    coordinate[1] += +delta[1];
    return coordinate;
  }

  /**
   * Calculates the point closest to the passed coordinate on the passed circle.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {import("./geom/Circle.js").default} circle The circle.
   * @return {Coordinate} Closest point on the circumference.
   */
  function closestOnCircle(coordinate, circle) {
    const r = circle.getRadius();
    const center = circle.getCenter();
    const x0 = center[0];
    const y0 = center[1];
    const x1 = coordinate[0];
    const y1 = coordinate[1];

    let dx = x1 - x0;
    const dy = y1 - y0;
    if (dx === 0 && dy === 0) {
      dx = 1;
    }
    const d = Math.sqrt(dx * dx + dy * dy);

    const x = x0 + (r * dx) / d;
    const y = y0 + (r * dy) / d;

    return [x, y];
  }

  /**
   * Calculates the point closest to the passed coordinate on the passed segment.
   * This is the foot of the perpendicular of the coordinate to the segment when
   * the foot is on the segment, or the closest segment coordinate when the foot
   * is outside the segment.
   *
   * @param {Coordinate} coordinate The coordinate.
   * @param {Array<Coordinate>} segment The two coordinates
   * of the segment.
   * @return {Coordinate} The foot of the perpendicular of
   * the coordinate to the segment.
   */
  function closestOnSegment(coordinate, segment) {
    const x0 = coordinate[0];
    const y0 = coordinate[1];
    const start = segment[0];
    const end = segment[1];
    const x1 = start[0];
    const y1 = start[1];
    const x2 = end[0];
    const y2 = end[1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    const along =
      dx === 0 && dy === 0
        ? 0
        : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);
    let x, y;
    if (along <= 0) {
      x = x1;
      y = y1;
    } else if (along >= 1) {
      x = x2;
      y = y2;
    } else {
      x = x1 + along * dx;
      y = y1 + along * dy;
    }
    return [x, y];
  }

  /**
   * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be
   * used to format
   * a {Coordinate} to a string.
   *
   * Example without specifying the fractional digits:
   *
   *     import {createStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const stringifyFunc = createStringXY();
   *     const out = stringifyFunc(coord);
   *     // out is now '8, 48'
   *
   * Example with explicitly specifying 2 fractional digits:
   *
   *     import {createStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const stringifyFunc = createStringXY(2);
   *     const out = stringifyFunc(coord);
   *     // out is now '7.85, 47.98'
   *
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {CoordinateFormat} Coordinate format.
   * @api
   */
  function createStringXY(fractionDigits) {
    return (
      /**
       * @param {Coordinate} coordinate Coordinate.
       * @return {string} String XY.
       */
      function (coordinate) {
        return toStringXY(coordinate, fractionDigits);
      }
    );
  }

  /**
   * @param {string} hemispheres Hemispheres.
   * @param {number} degrees Degrees.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} String.
   */
  function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {
    const normalizedDegrees = modulo(degrees + 180, 360) - 180;
    const x = Math.abs(3600 * normalizedDegrees);
    const decimals = fractionDigits || 0;

    let deg = Math.floor(x / 3600);
    let min = Math.floor((x - deg * 3600) / 60);
    let sec = toFixed(x - deg * 3600 - min * 60, decimals);

    if (sec >= 60) {
      sec = 0;
      min += 1;
    }

    if (min >= 60) {
      min = 0;
      deg += 1;
    }

    let hdms = deg + '\u00b0';
    if (min !== 0 || sec !== 0) {
      hdms += ' ' + padNumber(min, 2) + '\u2032';
    }
    if (sec !== 0) {
      hdms += ' ' + padNumber(sec, 2, decimals) + '\u2033';
    }
    if (normalizedDegrees !== 0) {
      hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);
    }

    return hdms;
  }

  /**
   * Transforms the given {@link module:ol/coordinate~Coordinate} to a string
   * using the given string template. The strings `{x}` and `{y}` in the template
   * will be replaced with the first and second coordinate values respectively.
   *
   * Example without specifying the fractional digits:
   *
   *     import {format} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const template = 'Coordinate is ({x}|{y}).';
   *     const out = format(coord, template);
   *     // out is now 'Coordinate is (8|48).'
   *
   * Example explicitly specifying the fractional digits:
   *
   *     import {format} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const template = 'Coordinate is ({x}|{y}).';
   *     const out = format(coord, template, 2);
   *     // out is now 'Coordinate is (7.85|47.98).'
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {string} template A template string with `{x}` and `{y}` placeholders
   *     that will be replaced by first and second coordinate values.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} Formatted coordinate.
   * @api
   */
  function format(coordinate, template, fractionDigits) {
    if (coordinate) {
      return template
        .replace('{x}', coordinate[0].toFixed(fractionDigits))
        .replace('{y}', coordinate[1].toFixed(fractionDigits));
    }
    return '';
  }

  /**
   * @param {Coordinate} coordinate1 First coordinate.
   * @param {Coordinate} coordinate2 Second coordinate.
   * @return {boolean} The two coordinates are equal.
   */
  function equals$1(coordinate1, coordinate2) {
    let equals = true;
    for (let i = coordinate1.length - 1; i >= 0; --i) {
      if (coordinate1[i] != coordinate2[i]) {
        equals = false;
        break;
      }
    }
    return equals;
  }

  /**
   * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
   * returned by the function.
   *
   * Example:
   *
   *     import {rotate} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const rotateRadians = Math.PI / 2; // 90 degrees
   *     rotate(coord, rotateRadians);
   *     // coord is now [-47.983333, 7.85]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} angle Angle in radian.
   * @return {Coordinate} Coordinate.
   * @api
   */
  function rotate$1(coordinate, angle) {
    const cosAngle = Math.cos(angle);
    const sinAngle = Math.sin(angle);
    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    coordinate[0] = x;
    coordinate[1] = y;
    return coordinate;
  }

  /**
   * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {scale as scaleCoordinate} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const scale = 1.2;
   *     scaleCoordinate(coord, scale);
   *     // coord is now [9.42, 57.5799996]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} scale Scale factor.
   * @return {Coordinate} Coordinate.
   */
  function scale$2(coordinate, scale) {
    coordinate[0] *= scale;
    coordinate[1] *= scale;
    return coordinate;
  }

  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Squared distance between coord1 and coord2.
   */
  function squaredDistance(coord1, coord2) {
    const dx = coord1[0] - coord2[0];
    const dy = coord1[1] - coord2[1];
    return dx * dx + dy * dy;
  }

  /**
   * @param {Coordinate} coord1 First coordinate.
   * @param {Coordinate} coord2 Second coordinate.
   * @return {number} Distance between coord1 and coord2.
   */
  function distance(coord1, coord2) {
    return Math.sqrt(squaredDistance(coord1, coord2));
  }

  /**
   * Calculate the squared distance from a coordinate to a line segment.
   *
   * @param {Coordinate} coordinate Coordinate of the point.
   * @param {Array<Coordinate>} segment Line segment (2
   * coordinates).
   * @return {number} Squared distance from the point to the line segment.
   */
  function squaredDistanceToSegment(coordinate, segment) {
    return squaredDistance(coordinate, closestOnSegment(coordinate, segment));
  }

  /**
   * Format a geographic coordinate with the hemisphere, degrees, minutes, and
   * seconds.
   *
   * Example without specifying fractional digits:
   *
   *     import {toStringHDMS} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringHDMS(coord);
   *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'
   *
   * Example explicitly specifying 1 fractional digit:
   *
   *     import {toStringHDMS} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringHDMS(coord, 1);
   *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} Hemisphere, degrees, minutes and seconds.
   * @api
   */
  function toStringHDMS(coordinate, fractionDigits) {
    if (coordinate) {
      return (
        degreesToStringHDMS('NS', coordinate[1], fractionDigits) +
        ' ' +
        degreesToStringHDMS('EW', coordinate[0], fractionDigits)
      );
    }
    return '';
  }

  /**
   * Format a coordinate as a comma delimited string.
   *
   * Example without specifying fractional digits:
   *
   *     import {toStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringXY(coord);
   *     // out is now '8, 48'
   *
   * Example explicitly specifying 1 fractional digit:
   *
   *     import {toStringXY} from 'ol/coordinate.js';
   *
   *     const coord = [7.85, 47.983333];
   *     const out = toStringXY(coord, 1);
   *     // out is now '7.8, 48.0'
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} [fractionDigits] The number of digits to include
   *    after the decimal point. Default is `0`.
   * @return {string} XY.
   * @api
   */
  function toStringXY(coordinate, fractionDigits) {
    return format(coordinate, '{x}, {y}', fractionDigits);
  }

  /**
   * Modifies the provided coordinate in-place to be within the real world
   * extent. The lower projection extent boundary is inclusive, the upper one
   * exclusive.
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {Coordinate} The coordinate within the real world extent.
   */
  function wrapX$1(coordinate, projection) {
    if (projection.canWrapX()) {
      const worldWidth = getWidth(projection.getExtent());
      const worldsAway = getWorldsAway(coordinate, projection, worldWidth);
      if (worldsAway) {
        coordinate[0] -= worldsAway * worldWidth;
      }
    }
    return coordinate;
  }
  /**
   * @param {Coordinate} coordinate Coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @param {number} [sourceExtentWidth] Width of the source extent.
   * @return {number} Offset in world widths.
   */
  function getWorldsAway(coordinate, projection, sourceExtentWidth) {
    const projectionExtent = projection.getExtent();
    let worldsAway = 0;
    if (
      projection.canWrapX() &&
      (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])
    ) {
      sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);
      worldsAway = Math.floor(
        (coordinate[0] - projectionExtent[0]) / sourceExtentWidth
      );
    }
    return worldsAway;
  }

  var nsCoordinate = {
    __proto__: null,
    add: add,
    closestOnCircle: closestOnCircle,
    closestOnSegment: closestOnSegment,
    createStringXY: createStringXY,
    degreesToStringHDMS: degreesToStringHDMS,
    format: format,
    equals: equals$1,
    rotate: rotate$1,
    scale: scale$2,
    squaredDistance: squaredDistance,
    distance: distance,
    squaredDistanceToSegment: squaredDistanceToSegment,
    toStringHDMS: toStringHDMS,
    toStringXY: toStringXY,
    wrapX: wrapX$1,
    getWorldsAway: getWorldsAway
  };

  /**
   * @module ol/sphere
   */

  /**
   * Object literal with options for the {@link getLength} or {@link getArea}
   * functions.
   * @typedef {Object} SphereMetricOptions
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
   * Projection of the  geometry.  By default, the geometry is assumed to be in
   * Web Mercator.
   * @property {number} [radius=6371008.8] Sphere radius.  By default, the
   * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
   * for the WGS84 ellipsoid is used.
   */

  /**
   * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
   * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
   * @type {number}
   */
  const DEFAULT_RADIUS = 6371008.8;

  /**
   * Get the great circle distance (in meters) between two geographic coordinates.
   * @param {Array} c1 Starting coordinate.
   * @param {Array} c2 Ending coordinate.
   * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {number} The great circle distance between the points (in meters).
   * @api
   */
  function getDistance(c1, c2, radius) {
    radius = radius || DEFAULT_RADIUS;
    const lat1 = toRadians(c1[1]);
    const lat2 = toRadians(c2[1]);
    const deltaLatBy2 = (lat2 - lat1) / 2;
    const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
    const a =
      Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
      Math.sin(deltaLonBy2) *
        Math.sin(deltaLonBy2) *
        Math.cos(lat1) *
        Math.cos(lat2);
    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }

  /**
   * Get the cumulative great circle length of linestring coordinates (geographic).
   * @param {Array} coordinates Linestring coordinates.
   * @param {number} radius The sphere radius to use.
   * @return {number} The length (in meters).
   */
  function getLengthInternal(coordinates, radius) {
    let length = 0;
    for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {
      length += getDistance(coordinates[i], coordinates[i + 1], radius);
    }
    return length;
  }

  /**
   * Get the spherical length of a geometry.  This length is the sum of the
   * great circle distances between coordinates.  For polygons, the length is
   * the sum of all rings.  For points, the length is zero.  For multi-part
   * geometries, the length is the sum of the length of each part.
   * @param {import("./geom/Geometry.js").default} geometry A geometry.
   * @param {SphereMetricOptions} [options] Options for the
   * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
   * You can change this by providing a `projection` option.
   * @return {number} The spherical length (in meters).
   * @api
   */
  function getLength(geometry, options) {
    options = options || {};
    const radius = options.radius || DEFAULT_RADIUS;
    const projection = options.projection || 'EPSG:3857';
    const type = geometry.getType();
    if (type !== 'GeometryCollection') {
      geometry = geometry.clone().transform(projection, 'EPSG:4326');
    }
    let length = 0;
    let coordinates, coords, i, ii, j, jj;
    switch (type) {
      case 'Point':
      case 'MultiPoint': {
        break;
      }
      case 'LineString':
      case 'LinearRing': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        length = getLengthInternal(coordinates, radius);
        break;
      }
      case 'MultiLineString':
      case 'Polygon': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        for (i = 0, ii = coordinates.length; i < ii; ++i) {
          length += getLengthInternal(coordinates[i], radius);
        }
        break;
      }
      case 'MultiPolygon': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        for (i = 0, ii = coordinates.length; i < ii; ++i) {
          coords = coordinates[i];
          for (j = 0, jj = coords.length; j < jj; ++j) {
            length += getLengthInternal(coords[j], radius);
          }
        }
        break;
      }
      case 'GeometryCollection': {
        const geometries =
          /** @type {import("./geom/GeometryCollection.js").default} */ (
            geometry
          ).getGeometries();
        for (i = 0, ii = geometries.length; i < ii; ++i) {
          length += getLength(geometries[i], options);
        }
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return length;
  }

  /**
   * Returns the spherical area for a list of coordinates.
   *
   * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)
   * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
   * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
   * Laboratory, Pasadena, CA, June 2007
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates List of coordinates of a linear
   * ring. If the ring is oriented clockwise, the area will be positive,
   * otherwise it will be negative.
   * @param {number} radius The sphere radius.
   * @return {number} Area (in square meters).
   */
  function getAreaInternal(coordinates, radius) {
    let area = 0;
    const len = coordinates.length;
    let x1 = coordinates[len - 1][0];
    let y1 = coordinates[len - 1][1];
    for (let i = 0; i < len; i++) {
      const x2 = coordinates[i][0];
      const y2 = coordinates[i][1];
      area +=
        toRadians(x2 - x1) *
        (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));
      x1 = x2;
      y1 = y2;
    }
    return (area * radius * radius) / 2.0;
  }

  /**
   * Get the spherical area of a geometry.  This is the area (in meters) assuming
   * that polygon edges are segments of great circles on a sphere.
   * @param {import("./geom/Geometry.js").default} geometry A geometry.
   * @param {SphereMetricOptions} [options] Options for the area
   *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
   *     You can change this by providing a `projection` option.
   * @return {number} The spherical area (in square meters).
   * @api
   */
  function getArea(geometry, options) {
    options = options || {};
    const radius = options.radius || DEFAULT_RADIUS;
    const projection = options.projection || 'EPSG:3857';
    const type = geometry.getType();
    if (type !== 'GeometryCollection') {
      geometry = geometry.clone().transform(projection, 'EPSG:4326');
    }
    let area = 0;
    let coordinates, coords, i, ii, j, jj;
    switch (type) {
      case 'Point':
      case 'MultiPoint':
      case 'LineString':
      case 'MultiLineString':
      case 'LinearRing': {
        break;
      }
      case 'Polygon': {
        coordinates = /** @type {import("./geom/Polygon.js").default} */ (
          geometry
        ).getCoordinates();
        area = Math.abs(getAreaInternal(coordinates[0], radius));
        for (i = 1, ii = coordinates.length; i < ii; ++i) {
          area -= Math.abs(getAreaInternal(coordinates[i], radius));
        }
        break;
      }
      case 'MultiPolygon': {
        coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (
          geometry
        ).getCoordinates();
        for (i = 0, ii = coordinates.length; i < ii; ++i) {
          coords = coordinates[i];
          area += Math.abs(getAreaInternal(coords[0], radius));
          for (j = 1, jj = coords.length; j < jj; ++j) {
            area -= Math.abs(getAreaInternal(coords[j], radius));
          }
        }
        break;
      }
      case 'GeometryCollection': {
        const geometries =
          /** @type {import("./geom/GeometryCollection.js").default} */ (
            geometry
          ).getGeometries();
        for (i = 0, ii = geometries.length; i < ii; ++i) {
          area += getArea(geometries[i], options);
        }
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return area;
  }

  /**
   * Returns the coordinate at the given distance and bearing from `c1`.
   *
   * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
   * @param {number} distance The great-circle distance between the origin
   *     point and the target point.
   * @param {number} bearing The bearing (in radians).
   * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {import("./coordinate.js").Coordinate} The target point.
   */
  function offset(c1, distance, bearing, radius) {
    radius = radius || DEFAULT_RADIUS;
    const lat1 = toRadians(c1[1]);
    const lon1 = toRadians(c1[0]);
    const dByR = distance / radius;
    const lat = Math.asin(
      Math.sin(lat1) * Math.cos(dByR) +
        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)
    );
    const lon =
      lon1 +
      Math.atan2(
        Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
        Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)
      );
    return [toDegrees(lon), toDegrees(lat)];
  }

  var nsSphere = {
    __proto__: null,
    DEFAULT_RADIUS: DEFAULT_RADIUS,
    getDistance: getDistance,
    getLength: getLength,
    getArea: getArea,
    offset: offset
  };

  /**
   * @module ol/console
   */

  /**
   * @typedef {'info'|'warn'|'error'|'none'} Level
   */

  /**
   * @type {Object<Level, number>}
   */
  const levels = {
    info: 1,
    warn: 2,
    error: 3,
    none: 4,
  };

  /**
   * @type {number}
   */
  let level = levels.info;

  function warn(...args) {
    if (level > levels.warn) {
      return;
    }
    console.warn(...args); // eslint-disable-line no-console
  }

  function error$1(...args) {
    if (level > levels.error) {
      return;
    }
    console.error(...args); // eslint-disable-line no-console
  }

  /**
   * @module ol/proj
   */

  let showCoordinateWarning = true;

  /**
   * @param {boolean} [disable = true] Disable console info about `useGeographic()`
   */
  function disableCoordinateWarning(disable) {
    const hide = disable === undefined ? true : disable;
    showCoordinateWarning = !hide;
  }

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @return {Array<number>} Output coordinate array (new array, same coordinate
   *     values).
   */
  function cloneTransform(input, output) {
    if (output !== undefined) {
      for (let i = 0, ii = input.length; i < ii; ++i) {
        output[i] = input[i];
      }
      output = output;
    } else {
      output = input.slice();
    }
    return output;
  }

  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>} [output] Output array of coordinate values.
   * @return {Array<number>} Input coordinate array (same array as input).
   */
  function identityTransform(input, output) {
    if (output !== undefined && input !== output) {
      for (let i = 0, ii = input.length; i < ii; ++i) {
        output[i] = input[i];
      }
      input = output;
    }
    return input;
  }

  /**
   * Add a Projection object to the list of supported projections that can be
   * looked up by their code.
   *
   * @param {Projection} projection Projection instance.
   * @api
   */
  function addProjection(projection) {
    add$2(projection.getCode(), projection);
    add$1(projection, projection, cloneTransform);
  }

  /**
   * @param {Array<Projection>} projections Projections.
   */
  function addProjections(projections) {
    projections.forEach(addProjection);
  }

  /**
   * Fetches a Projection object for the code specified.
   *
   * @param {ProjectionLike} projectionLike Either a code string which is
   *     a combination of authority and identifier such as "EPSG:4326", or an
   *     existing projection object, or undefined.
   * @return {Projection|null} Projection object, or null if not in list.
   * @api
   */
  function get$2(projectionLike) {
    return typeof projectionLike === 'string'
      ? get$4(/** @type {string} */ (projectionLike))
      : /** @type {Projection} */ (projectionLike) || null;
  }

  /**
   * Get the resolution of the point in degrees or distance units.
   * For projections with degrees as the unit this will simply return the
   * provided resolution. For other projections the point resolution is
   * by default estimated by transforming the `point` pixel to EPSG:4326,
   * measuring its width and height on the normal sphere,
   * and taking the average of the width and height.
   * A custom function can be provided for a specific projection, either
   * by setting the `getPointResolution` option in the
   * {@link module:ol/proj/Projection~Projection} constructor or by using
   * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
   * projection object.
   * @param {ProjectionLike} projection The projection.
   * @param {number} resolution Nominal resolution in projection units.
   * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
   * @param {import("./proj/Units.js").Units} [units] Units to get the point resolution in.
   * Default is the projection's units.
   * @return {number} Point resolution.
   * @api
   */
  function getPointResolution(projection, resolution, point, units) {
    projection = get$2(projection);
    let pointResolution;
    const getter = projection.getPointResolutionFunc();
    if (getter) {
      pointResolution = getter(resolution, point);
      if (units && units !== projection.getUnits()) {
        const metersPerUnit = projection.getMetersPerUnit();
        if (metersPerUnit) {
          pointResolution =
            (pointResolution * metersPerUnit) / METERS_PER_UNIT$1[units];
        }
      }
    } else {
      const projUnits = projection.getUnits();
      if ((projUnits == 'degrees' && !units) || units == 'degrees') {
        pointResolution = resolution;
      } else {
        // Estimate point resolution by transforming the center pixel to EPSG:4326,
        // measuring its width and height on the normal sphere, and taking the
        // average of the width and height.
        const toEPSG4326 = getTransformFromProjections(
          projection,
          get$2('EPSG:4326')
        );
        if (toEPSG4326 === identityTransform && projUnits !== 'degrees') {
          // no transform is available
          pointResolution = resolution * projection.getMetersPerUnit();
        } else {
          let vertices = [
            point[0] - resolution / 2,
            point[1],
            point[0] + resolution / 2,
            point[1],
            point[0],
            point[1] - resolution / 2,
            point[0],
            point[1] + resolution / 2,
          ];
          vertices = toEPSG4326(vertices, vertices, 2);
          const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
          const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
          pointResolution = (width + height) / 2;
        }
        const metersPerUnit = units
          ? METERS_PER_UNIT$1[units]
          : projection.getMetersPerUnit();
        if (metersPerUnit !== undefined) {
          pointResolution /= metersPerUnit;
        }
      }
    }
    return pointResolution;
  }

  /**
   * Registers transformation functions that don't alter coordinates. Those allow
   * to transform between projections with equal meaning.
   *
   * @param {Array<Projection>} projections Projections.
   * @api
   */
  function addEquivalentProjections(projections) {
    addProjections(projections);
    projections.forEach(function (source) {
      projections.forEach(function (destination) {
        if (source !== destination) {
          add$1(source, destination, cloneTransform);
        }
      });
    });
  }

  /**
   * Registers transformation functions to convert coordinates in any projection
   * in projection1 to any projection in projection2.
   *
   * @param {Array<Projection>} projections1 Projections with equal
   *     meaning.
   * @param {Array<Projection>} projections2 Projections with equal
   *     meaning.
   * @param {TransformFunction} forwardTransform Transformation from any
   *   projection in projection1 to any projection in projection2.
   * @param {TransformFunction} inverseTransform Transform from any projection
   *   in projection2 to any projection in projection1..
   */
  function addEquivalentTransforms(
    projections1,
    projections2,
    forwardTransform,
    inverseTransform
  ) {
    projections1.forEach(function (projection1) {
      projections2.forEach(function (projection2) {
        add$1(projection1, projection2, forwardTransform);
        add$1(projection2, projection1, inverseTransform);
      });
    });
  }

  /**
   * Clear all cached projections and transforms.
   */
  function clearAllProjections() {
    clear$1();
    clear();
  }

  /**
   * @param {Projection|string|undefined} projection Projection.
   * @param {string} defaultCode Default code.
   * @return {Projection} Projection.
   */
  function createProjection(projection, defaultCode) {
    if (!projection) {
      return get$2(defaultCode);
    } else if (typeof projection === 'string') {
      return get$2(projection);
    }
    return /** @type {Projection} */ (projection);
  }

  /**
   * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
   * function.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} coordTransform Coordinate
   *     transform.
   * @return {TransformFunction} Transform function.
   */
  function createTransformFromCoordinateTransform(coordTransform) {
    return (
      /**
       * @param {Array<number>} input Input.
       * @param {Array<number>} [output] Output.
       * @param {number} [dimension] Dimension.
       * @return {Array<number>} Output.
       */
      function (input, output, dimension) {
        const length = input.length;
        dimension = dimension !== undefined ? dimension : 2;
        output = output !== undefined ? output : new Array(length);
        for (let i = 0; i < length; i += dimension) {
          const point = coordTransform(input.slice(i, i + dimension));
          const pointLength = point.length;
          for (let j = 0, jj = dimension; j < jj; ++j) {
            output[i + j] = j >= pointLength ? input[i + j] : point[j];
          }
        }
        return output;
      }
    );
  }

  /**
   * Registers coordinate transform functions to convert coordinates between the
   * source projection and the destination projection.
   * The forward and inverse functions convert coordinate pairs; this function
   * converts these into the functions used internally which also handle
   * extents and coordinate arrays.
   *
   * @param {ProjectionLike} source Source projection.
   * @param {ProjectionLike} destination Destination projection.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} forward The forward transform
   *     function (that is, from the source projection to the destination
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} inverse The inverse transform
   *     function (that is, from the destination projection to the source
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only
   *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate
   *     with only the length it can transform. The other dimensions will be taken unchanged from the
   *     source.
   * @api
   */
  function addCoordinateTransforms(source, destination, forward, inverse) {
    const sourceProj = get$2(source);
    const destProj = get$2(destination);
    add$1(
      sourceProj,
      destProj,
      createTransformFromCoordinateTransform(forward)
    );
    add$1(
      destProj,
      sourceProj,
      createTransformFromCoordinateTransform(inverse)
    );
  }

  /**
   * Transforms a coordinate from longitude/latitude to a different projection.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate as longitude and latitude, i.e.
   *     an array with longitude as 1st and latitude as 2nd element.
   * @param {ProjectionLike} [projection] Target projection. The
   *     default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate projected to the target projection.
   * @api
   */
  function fromLonLat(coordinate, projection) {
    disableCoordinateWarning();
    return transform(
      coordinate,
      'EPSG:4326',
      projection !== undefined ? projection : 'EPSG:3857'
    );
  }

  /**
   * Transforms a coordinate to longitude/latitude.
   * @param {import("./coordinate.js").Coordinate} coordinate Projected coordinate.
   * @param {ProjectionLike} [projection] Projection of the coordinate.
   *     The default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate as longitude and latitude, i.e. an array
   *     with longitude as 1st and latitude as 2nd element.
   * @api
   */
  function toLonLat(coordinate, projection) {
    const lonLat = transform(
      coordinate,
      projection !== undefined ? projection : 'EPSG:3857',
      'EPSG:4326'
    );
    const lon = lonLat[0];
    if (lon < -180 || lon > 180) {
      lonLat[0] = modulo(lon + 180, 360) - 180;
    }
    return lonLat;
  }

  /**
   * Checks if two projections are the same, that is every coordinate in one
   * projection does represent the same geographic point as the same coordinate in
   * the other projection.
   *
   * @param {Projection} projection1 Projection 1.
   * @param {Projection} projection2 Projection 2.
   * @return {boolean} Equivalent.
   * @api
   */
  function equivalent(projection1, projection2) {
    if (projection1 === projection2) {
      return true;
    }
    const equalUnits = projection1.getUnits() === projection2.getUnits();
    if (projection1.getCode() === projection2.getCode()) {
      return equalUnits;
    }
    const transformFunc = getTransformFromProjections(projection1, projection2);
    return transformFunc === cloneTransform && equalUnits;
  }

  /**
   * Searches in the list of transform functions for the function for converting
   * coordinates from the source projection to the destination projection.
   *
   * @param {Projection} sourceProjection Source Projection object.
   * @param {Projection} destinationProjection Destination Projection
   *     object.
   * @return {TransformFunction} Transform function.
   */
  function getTransformFromProjections(
    sourceProjection,
    destinationProjection
  ) {
    const sourceCode = sourceProjection.getCode();
    const destinationCode = destinationProjection.getCode();
    let transformFunc = get$3(sourceCode, destinationCode);
    if (!transformFunc) {
      transformFunc = identityTransform;
    }
    return transformFunc;
  }

  /**
   * Given the projection-like objects, searches for a transformation
   * function to convert a coordinates array from the source projection to the
   * destination projection.
   *
   * @param {ProjectionLike} source Source.
   * @param {ProjectionLike} destination Destination.
   * @return {TransformFunction} Transform function.
   * @api
   */
  function getTransform(source, destination) {
    const sourceProjection = get$2(source);
    const destinationProjection = get$2(destination);
    return getTransformFromProjections(sourceProjection, destinationProjection);
  }

  /**
   * Transforms a coordinate from source projection to destination projection.
   * This returns a new coordinate (and does not modify the original).
   *
   * See {@link module:ol/proj.transformExtent} for extent transformation.
   * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
   * subclasses for geometry transforms.
   *
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */
  function transform(coordinate, source, destination) {
    const transformFunc = getTransform(source, destination);
    return transformFunc(coordinate, undefined, coordinate.length);
  }

  /**
   * Transforms an extent from source projection to destination projection.  This
   * returns a new extent (and does not modify the original).
   *
   * @param {import("./extent.js").Extent} extent The extent to transform.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @param {number} [stops] Number of stops per side used for the transform.
   * By default only the corners are used.
   * @return {import("./extent.js").Extent} The transformed extent.
   * @api
   */
  function transformExtent(extent, source, destination, stops) {
    const transformFunc = getTransform(source, destination);
    return applyTransform(extent, transformFunc, undefined, stops);
  }

  /**
   * Transforms the given point to the destination projection.
   *
   * @param {import("./coordinate.js").Coordinate} point Point.
   * @param {Projection} sourceProjection Source projection.
   * @param {Projection} destinationProjection Destination projection.
   * @return {import("./coordinate.js").Coordinate} Point.
   */
  function transformWithProjections(
    point,
    sourceProjection,
    destinationProjection
  ) {
    const transformFunc = getTransformFromProjections(
      sourceProjection,
      destinationProjection
    );
    return transformFunc(point);
  }

  /**
   * @type {Projection|null}
   */
  let userProjection = null;

  /**
   * Set the projection for coordinates supplied from and returned by API methods.
   * This includes all API methods except for those interacting with tile grids.
   * @param {ProjectionLike} projection The user projection.
   * @api
   */
  function setUserProjection(projection) {
    userProjection = get$2(projection);
  }

  /**
   * Clear the user projection if set.
   * @api
   */
  function clearUserProjection() {
    userProjection = null;
  }

  /**
   * Get the projection for coordinates supplied from and returned by API methods.
   * Note that this method is not yet a part of the stable API.  Support for user
   * projections is not yet complete and should be considered experimental.
   * @return {Projection|null} The user projection (or null if not set).
   * @api
   */
  function getUserProjection() {
    return userProjection;
  }

  /**
   * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API
   * methods except for those interacting with tile grids.
   * @api
   */
  function useGeographic() {
    setUserProjection('EPSG:4326');
  }

  /**
   * Return a coordinate transformed into the user projection.  If no user projection
   * is set, the original coordinate is returned.
   * @param {Array<number>} coordinate Input coordinate.
   * @param {ProjectionLike} sourceProjection The input coordinate projection.
   * @return {Array<number>} The input coordinate in the user projection.
   */
  function toUserCoordinate(coordinate, sourceProjection) {
    if (!userProjection) {
      return coordinate;
    }
    return transform(coordinate, sourceProjection, userProjection);
  }

  /**
   * Return a coordinate transformed from the user projection.  If no user projection
   * is set, the original coordinate is returned.
   * @param {Array<number>} coordinate Input coordinate.
   * @param {ProjectionLike} destProjection The destination projection.
   * @return {Array<number>} The input coordinate transformed.
   */
  function fromUserCoordinate(coordinate, destProjection) {
    if (!userProjection) {
      if (
        showCoordinateWarning &&
        !equals$1(coordinate, [0, 0]) &&
        coordinate[0] >= -180 &&
        coordinate[0] <= 180 &&
        coordinate[1] >= -90 &&
        coordinate[1] <= 90
      ) {
        showCoordinateWarning = false;
        warn(
          'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'
        );
      }
      return coordinate;
    }
    return transform(coordinate, userProjection, destProjection);
  }

  /**
   * Return an extent transformed into the user projection.  If no user projection
   * is set, the original extent is returned.
   * @param {import("./extent.js").Extent} extent Input extent.
   * @param {ProjectionLike} sourceProjection The input extent projection.
   * @return {import("./extent.js").Extent} The input extent in the user projection.
   */
  function toUserExtent(extent, sourceProjection) {
    if (!userProjection) {
      return extent;
    }
    return transformExtent(extent, sourceProjection, userProjection);
  }

  /**
   * Return an extent transformed from the user projection.  If no user projection
   * is set, the original extent is returned.
   * @param {import("./extent.js").Extent} extent Input extent.
   * @param {ProjectionLike} destProjection The destination projection.
   * @return {import("./extent.js").Extent} The input extent transformed.
   */
  function fromUserExtent(extent, destProjection) {
    if (!userProjection) {
      return extent;
    }
    return transformExtent(extent, userProjection, destProjection);
  }

  /**
   * Return the resolution in user projection units per pixel. If no user projection
   * is set, or source or user projection are missing units, the original resolution
   * is returned.
   * @param {number} resolution Resolution in input projection units per pixel.
   * @param {ProjectionLike} sourceProjection The input projection.
   * @return {number} Resolution in user projection units per pixel.
   */
  function toUserResolution(resolution, sourceProjection) {
    if (!userProjection) {
      return resolution;
    }
    const sourceUnits = get$2(sourceProjection).getUnits();
    const userUnits = userProjection.getUnits();
    return sourceUnits && userUnits
      ? (resolution * METERS_PER_UNIT$1[sourceUnits]) / METERS_PER_UNIT$1[userUnits]
      : resolution;
  }

  /**
   * Return the resolution in user projection units per pixel. If no user projection
   * is set, or source or user projection are missing units, the original resolution
   * is returned.
   * @param {number} resolution Resolution in user projection units per pixel.
   * @param {ProjectionLike} destProjection The destination projection.
   * @return {number} Resolution in destination projection units per pixel.
   */
  function fromUserResolution(resolution, destProjection) {
    if (!userProjection) {
      return resolution;
    }
    const sourceUnits = get$2(destProjection).getUnits();
    const userUnits = userProjection.getUnits();
    return sourceUnits && userUnits
      ? (resolution * METERS_PER_UNIT$1[userUnits]) / METERS_PER_UNIT$1[sourceUnits]
      : resolution;
  }

  /**
   * Creates a safe coordinate transform function from a coordinate transform function.
   * "Safe" means that it can handle wrapping of x-coordinates for global projections,
   * and that coordinates exceeding the source projection validity extent's range will be
   * clamped to the validity range.
   * @param {Projection} sourceProj Source projection.
   * @param {Projection} destProj Destination projection.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} transform Transform function (source to destiation).
   * @return {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} Safe transform function (source to destiation).
   */
  function createSafeCoordinateTransform(sourceProj, destProj, transform) {
    return function (coord) {
      let transformed, worldsAway;
      if (sourceProj.canWrapX()) {
        const sourceExtent = sourceProj.getExtent();
        const sourceExtentWidth = getWidth(sourceExtent);
        coord = coord.slice(0);
        worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);
        if (worldsAway) {
          // Move x to the real world
          coord[0] = coord[0] - worldsAway * sourceExtentWidth;
        }
        coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);
        coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);
        transformed = transform(coord);
      } else {
        transformed = transform(coord);
      }
      if (worldsAway && destProj.canWrapX()) {
        // Move transformed coordinate back to the offset world
        transformed[0] += worldsAway * getWidth(destProj.getExtent());
      }
      return transformed;
    };
  }

  /**
   * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
   * by when this module is executed and should only need to be called again after
   * `clearAllProjections()` is called (e.g. in tests).
   */
  function addCommon() {
    // Add transformations that don't alter coordinates to convert within set of
    // projections with equal meaning.
    addEquivalentProjections(PROJECTIONS$1);
    addEquivalentProjections(PROJECTIONS);
    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
    // coordinates and back.
    addEquivalentTransforms(
      PROJECTIONS,
      PROJECTIONS$1,
      fromEPSG4326,
      toEPSG4326
    );
  }

  addCommon();

  var proj0 = {
    __proto__: null,
    METERS_PER_UNIT: METERS_PER_UNIT$1,
    Projection: Projection$1,
    disableCoordinateWarning: disableCoordinateWarning,
    cloneTransform: cloneTransform,
    identityTransform: identityTransform,
    addProjection: addProjection,
    addProjections: addProjections,
    get: get$2,
    getPointResolution: getPointResolution,
    addEquivalentProjections: addEquivalentProjections,
    addEquivalentTransforms: addEquivalentTransforms,
    clearAllProjections: clearAllProjections,
    createProjection: createProjection,
    createTransformFromCoordinateTransform: createTransformFromCoordinateTransform,
    addCoordinateTransforms: addCoordinateTransforms,
    fromLonLat: fromLonLat,
    toLonLat: toLonLat,
    equivalent: equivalent,
    getTransformFromProjections: getTransformFromProjections,
    getTransform: getTransform,
    transform: transform,
    transformExtent: transformExtent,
    transformWithProjections: transformWithProjections,
    setUserProjection: setUserProjection,
    clearUserProjection: clearUserProjection,
    getUserProjection: getUserProjection,
    useGeographic: useGeographic,
    toUserCoordinate: toUserCoordinate,
    fromUserCoordinate: fromUserCoordinate,
    toUserExtent: toUserExtent,
    fromUserExtent: fromUserExtent,
    toUserResolution: toUserResolution,
    fromUserResolution: fromUserResolution,
    createSafeCoordinateTransform: createSafeCoordinateTransform,
    addCommon: addCommon
  };

  /**
   * @module ol/geom/flat/transform
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function transform2D(
    flatCoordinates,
    offset,
    end,
    stride,
    transform,
    dest
  ) {
    dest = dest ? dest : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const x = flatCoordinates[j];
      const y = flatCoordinates[j + 1];
      dest[i++] = transform[0] * x + transform[2] * y + transform[4];
      dest[i++] = transform[1] * x + transform[3] * y + transform[5];
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} angle Angle.
   * @param {Array<number>} anchor Rotation anchor point.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function rotate(
    flatCoordinates,
    offset,
    end,
    stride,
    angle,
    anchor,
    dest
  ) {
    dest = dest ? dest : [];
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const deltaX = flatCoordinates[j] - anchorX;
      const deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + deltaX * cos - deltaY * sin;
      dest[i++] = anchorY + deltaX * sin + deltaY * cos;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * Scale the coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} sx Scale factor in the x-direction.
   * @param {number} sy Scale factor in the y-direction.
   * @param {Array<number>} anchor Scale anchor point.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function scale$1(
    flatCoordinates,
    offset,
    end,
    stride,
    sx,
    sy,
    anchor,
    dest
  ) {
    dest = dest ? dest : [];
    const anchorX = anchor[0];
    const anchorY = anchor[1];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      const deltaX = flatCoordinates[j] - anchorX;
      const deltaY = flatCoordinates[j + 1] - anchorY;
      dest[i++] = anchorX + sx * deltaX;
      dest[i++] = anchorY + sy * deltaY;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function translate(
    flatCoordinates,
    offset,
    end,
    stride,
    deltaX,
    deltaY,
    dest
  ) {
    dest = dest ? dest : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      dest[i++] = flatCoordinates[j] + deltaX;
      dest[i++] = flatCoordinates[j + 1] + deltaY;
      for (let k = j + 2; k < j + stride; ++k) {
        dest[i++] = flatCoordinates[k];
      }
    }
    if (dest && dest.length != i) {
      dest.length = i;
    }
    return dest;
  }

  /**
   * @module ol/geom/Geometry
   */

  /**
   * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout
   * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
   * or measure ('M') coordinate is available.
   */

  /**
   * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type
   * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
   * `'GeometryCollection'`, or `'Circle'`.
   */

  /**
   * @type {import("../transform.js").Transform}
   */
  const tmpTransform$1 = create$3();

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for vector geometries.
   *
   * To get notified of changes to the geometry, register a listener for the
   * generic `change` event on your geometry instance.
   *
   * @abstract
   * @api
   */
  class Geometry extends olObject {
    constructor() {
      super();

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.extentRevision_ = -1;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryMaxMinSquaredTolerance = 0;

      /**
       * @protected
       * @type {number}
       */
      this.simplifiedGeometryRevision = 0;

      /**
       * Get a transformed and simplified version of the geometry.
       * @abstract
       * @param {number} revision The geometry revision.
       * @param {number} squaredTolerance Squared tolerance.
       * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
       * @return {Geometry} Simplified geometry.
       */
      this.simplifyTransformedInternal = memoizeOne(function (
        revision,
        squaredTolerance,
        transform
      ) {
        if (!transform) {
          return this.getSimplifiedGeometry(squaredTolerance);
        }
        const clone = this.clone();
        clone.applyTransform(transform);
        return clone.getSimplifiedGeometry(squaredTolerance);
      });
    }

    /**
     * Get a transformed and simplified version of the geometry.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
     * @return {Geometry} Simplified geometry.
     */
    simplifyTransformed(squaredTolerance, transform) {
      return this.simplifyTransformedInternal(
        this.getRevision(),
        squaredTolerance,
        transform
      );
    }

    /**
     * Make a complete copy of the geometry.
     * @abstract
     * @return {!Geometry} Clone.
     */
    clone() {
      return abstract();
    }

    /**
     * @abstract
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      return abstract();
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      const coord = this.getClosestPoint([x, y]);
      return coord[0] === x && coord[1] === y;
    }

    /**
     * Return the closest point of the geometry to the passed point as
     * {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} point Point.
     * @param {import("../coordinate.js").Coordinate} [closestPoint] Closest point.
     * @return {import("../coordinate.js").Coordinate} Closest point.
     * @api
     */
    getClosestPoint(point, closestPoint) {
      closestPoint = closestPoint ? closestPoint : [NaN, NaN];
      this.closestPointXY(point[0], point[1], closestPoint, Infinity);
      return closestPoint;
    }

    /**
     * Returns true if this geometry includes the specified coordinate. If the
     * coordinate is on the boundary of the geometry, returns false.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} Contains coordinate.
     * @api
     */
    intersectsCoordinate(coordinate) {
      return this.containsXY(coordinate[0], coordinate[1]);
    }

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      return abstract();
    }

    /**
     * Get the extent of the geometry.
     * @param {import("../extent.js").Extent} [extent] Extent.
     * @return {import("../extent.js").Extent} extent Extent.
     * @api
     */
    getExtent(extent) {
      if (this.extentRevision_ != this.getRevision()) {
        const extent = this.computeExtent(this.extent_);
        if (isNaN(extent[0]) || isNaN(extent[1])) {
          createOrUpdateEmpty(extent);
        }
        this.extentRevision_ = this.getRevision();
      }
      return returnOrUpdate(this.extent_, extent);
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    rotate(angle, anchor) {
      abstract();
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    scale(sx, sy, anchor) {
      abstract();
    }

    /**
     * Create a simplified version of this geometry.  For linestrings, this uses
     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
     * algorithm.  For polygons, a quantization-based
     * simplification is used to preserve topology.
     * @param {number} tolerance The tolerance distance for simplification.
     * @return {Geometry} A new, simplified version of the original geometry.
     * @api
     */
    simplify(tolerance) {
      return this.getSimplifiedGeometry(tolerance * tolerance);
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker
     * algorithm.
     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Geometry} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      return abstract();
    }

    /**
     * Get the type of this geometry.
     * @abstract
     * @return {Type} Geometry type.
     */
    getType() {
      return abstract();
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @abstract
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     */
    applyTransform(transformFn) {
      abstract();
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     */
    intersectsExtent(extent) {
      return abstract();
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @abstract
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    translate(deltaX, deltaY) {
      abstract();
    }

    /**
     * Transform each coordinate of the geometry from one coordinate reference
     * system to another. The geometry is modified in place.
     * For example, a line will be transformed to a line and a circle to a circle.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {Geometry} This geometry.  Note that original geometry is
     *     modified in place.
     * @api
     */
    transform(source, destination) {
      /** @type {import("../proj/Projection.js").default} */
      const sourceProj = get$2(source);
      const transformFn =
        sourceProj.getUnits() == 'tile-pixels'
          ? function (inCoordinates, outCoordinates, stride) {
              const pixelExtent = sourceProj.getExtent();
              const projectedExtent = sourceProj.getWorldExtent();
              const scale = getHeight(projectedExtent) / getHeight(pixelExtent);
              compose(
                tmpTransform$1,
                projectedExtent[0],
                projectedExtent[3],
                scale,
                -scale,
                0,
                0,
                0
              );
              transform2D(
                inCoordinates,
                0,
                inCoordinates.length,
                stride,
                tmpTransform$1,
                outCoordinates
              );
              return getTransform(sourceProj, destination)(
                inCoordinates,
                outCoordinates,
                stride
              );
            }
          : getTransform(sourceProj, destination);
      this.applyTransform(transformFn);
      return this;
    }
  }

  var Geometry$1 = Geometry;

  /**
   * @module ol/geom/SimpleGeometry
   */

  /**
   * @classdesc
   * Abstract base class; only used for creating subclasses; do not instantiate
   * in apps, as cannot be rendered.
   *
   * @abstract
   * @api
   */
  class SimpleGeometry extends Geometry$1 {
    constructor() {
      super();

      /**
       * @protected
       * @type {import("./Geometry.js").GeometryLayout}
       */
      this.layout = 'XY';

      /**
       * @protected
       * @type {number}
       */
      this.stride = 2;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.flatCoordinates = null;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      return createOrUpdateFromFlatCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        extent
      );
    }

    /**
     * @abstract
     * @return {Array<*> | null} Coordinates.
     */
    getCoordinates() {
      return abstract();
    }

    /**
     * Return the first coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} First coordinate.
     * @api
     */
    getFirstCoordinate() {
      return this.flatCoordinates.slice(0, this.stride);
    }

    /**
     * @return {Array<number>} Flat coordinates.
     */
    getFlatCoordinates() {
      return this.flatCoordinates;
    }

    /**
     * Return the last coordinate of the geometry.
     * @return {import("../coordinate.js").Coordinate} Last point.
     * @api
     */
    getLastCoordinate() {
      return this.flatCoordinates.slice(
        this.flatCoordinates.length - this.stride
      );
    }

    /**
     * Return the {@link import("./Geometry.js").GeometryLayout layout} of the geometry.
     * @return {import("./Geometry.js").GeometryLayout} Layout.
     * @api
     */
    getLayout() {
      return this.layout;
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker algorithm.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      if (this.simplifiedGeometryRevision !== this.getRevision()) {
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      // If squaredTolerance is negative or if we know that simplification will not
      // have any effect then just return this.
      if (
        squaredTolerance < 0 ||
        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
          squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)
      ) {
        return this;
      }

      const simplifiedGeometry =
        this.getSimplifiedGeometryInternal(squaredTolerance);
      const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
      if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
        return simplifiedGeometry;
      }
      // Simplification did not actually remove any coordinates.  We now know
      // that any calls to getSimplifiedGeometry with a squaredTolerance less
      // than or equal to the current squaredTolerance will also not have any
      // effect.  This allows us to short circuit simplification (saving CPU
      // cycles) and prevents the cache of simplified geometries from filling
      // up with useless identical copies of this geometry (saving memory).
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {SimpleGeometry} Simplified geometry.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      return this;
    }

    /**
     * @return {number} Stride.
     */
    getStride() {
      return this.stride;
    }

    /**
     * @param {import("./Geometry.js").GeometryLayout} layout Layout.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     */
    setFlatCoordinates(layout, flatCoordinates) {
      this.stride = getStrideForLayout(layout);
      this.layout = layout;
      this.flatCoordinates = flatCoordinates;
    }

    /**
     * @abstract
     * @param {!Array<*>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    setCoordinates(coordinates, layout) {
      abstract();
    }

    /**
     * @param {import("./Geometry.js").GeometryLayout|undefined} layout Layout.
     * @param {Array<*>} coordinates Coordinates.
     * @param {number} nesting Nesting.
     * @protected
     */
    setLayout(layout, coordinates, nesting) {
      /** @type {number} */
      let stride;
      if (layout) {
        stride = getStrideForLayout(layout);
      } else {
        for (let i = 0; i < nesting; ++i) {
          if (coordinates.length === 0) {
            this.layout = 'XY';
            this.stride = 2;
            return;
          }
          coordinates = /** @type {Array} */ (coordinates[0]);
        }
        stride = coordinates.length;
        layout = getLayoutForStride(stride);
      }
      this.layout = layout;
      this.stride = stride;
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     * @api
     */
    applyTransform(transformFn) {
      if (this.flatCoordinates) {
        transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
        this.changed();
      }
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in counter-clockwise radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    rotate(angle, anchor) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        rotate(
          flatCoordinates,
          0,
          flatCoordinates.length,
          stride,
          angle,
          anchor,
          flatCoordinates
        );
        this.changed();
      }
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    scale(sx, sy, anchor) {
      if (sy === undefined) {
        sy = sx;
      }
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        scale$1(
          flatCoordinates,
          0,
          flatCoordinates.length,
          stride,
          sx,
          sy,
          anchor,
          flatCoordinates
        );
        this.changed();
      }
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    translate(deltaX, deltaY) {
      const flatCoordinates = this.getFlatCoordinates();
      if (flatCoordinates) {
        const stride = this.getStride();
        translate(
          flatCoordinates,
          0,
          flatCoordinates.length,
          stride,
          deltaX,
          deltaY,
          flatCoordinates
        );
        this.changed();
      }
    }
  }

  /**
   * @param {number} stride Stride.
   * @return {import("./Geometry.js").GeometryLayout} layout Layout.
   */
  function getLayoutForStride(stride) {
    let layout;
    if (stride == 2) {
      layout = 'XY';
    } else if (stride == 3) {
      layout = 'XYZ';
    } else if (stride == 4) {
      layout = 'XYZM';
    }
    return /** @type {import("./Geometry.js").GeometryLayout} */ (layout);
  }

  /**
   * @param {import("./Geometry.js").GeometryLayout} layout Layout.
   * @return {number} Stride.
   */
  function getStrideForLayout(layout) {
    let stride;
    if (layout == 'XY') {
      stride = 2;
    } else if (layout == 'XYZ' || layout == 'XYM') {
      stride = 3;
    } else if (layout == 'XYZM') {
      stride = 4;
    }
    return /** @type {number} */ (stride);
  }

  /**
   * @param {SimpleGeometry} simpleGeometry Simple geometry.
   * @param {import("../transform.js").Transform} transform Transform.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Transformed flat coordinates.
   */
  function transformGeom2D(simpleGeometry, transform, dest) {
    const flatCoordinates = simpleGeometry.getFlatCoordinates();
    if (!flatCoordinates) {
      return null;
    }
    const stride = simpleGeometry.getStride();
    return transform2D(
      flatCoordinates,
      0,
      flatCoordinates.length,
      stride,
      transform,
      dest
    );
  }

  var SimpleGeometry$1 = SimpleGeometry;

  /**
   * @module ol/geom/flat/closest
   */

  /**
   * Returns the point on the 2D line segment flatCoordinates[offset1] to
   * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
   * dimensions are linearly interpolated.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset1 Offset 1.
   * @param {number} offset2 Offset 2.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   */
  function assignClosest(
    flatCoordinates,
    offset1,
    offset2,
    stride,
    x,
    y,
    closestPoint
  ) {
    const x1 = flatCoordinates[offset1];
    const y1 = flatCoordinates[offset1 + 1];
    const dx = flatCoordinates[offset2] - x1;
    const dy = flatCoordinates[offset2 + 1] - y1;
    let offset;
    if (dx === 0 && dy === 0) {
      offset = offset1;
    } else {
      const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
      if (t > 1) {
        offset = offset2;
      } else if (t > 0) {
        for (let i = 0; i < stride; ++i) {
          closestPoint[i] = lerp$1(
            flatCoordinates[offset1 + i],
            flatCoordinates[offset2 + i],
            t
          );
        }
        closestPoint.length = stride;
        return;
      } else {
        offset = offset1;
      }
    }
    for (let i = 0; i < stride; ++i) {
      closestPoint[i] = flatCoordinates[offset + i];
    }
    closestPoint.length = stride;
  }

  /**
   * Return the squared of the largest distance between any pair of consecutive
   * coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    for (offset += stride; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      const squaredDelta = squaredDistance$1(x1, y1, x2, y2);
      if (squaredDelta > max) {
        max = squaredDelta;
      }
      x1 = x2;
      y1 = y2;
    }
    return max;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function arrayMaxSquaredDelta(
    flatCoordinates,
    offset,
    ends,
    stride,
    max
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
      offset = end;
    }
    return max;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function multiArrayMaxSquaredDelta(
    flatCoordinates,
    offset,
    endss,
    stride,
    max
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);
      offset = ends[ends.length - 1];
    }
    return max;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>} [tmpPoint] Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestPoint(
    flatCoordinates,
    offset,
    end,
    stride,
    maxDelta,
    isRing,
    x,
    y,
    closestPoint,
    minSquaredDistance,
    tmpPoint
  ) {
    if (offset == end) {
      return minSquaredDistance;
    }
    let i, squaredDistance;
    if (maxDelta === 0) {
      // All points are identical, so just test the first point.
      squaredDistance = squaredDistance$1(
        x,
        y,
        flatCoordinates[offset],
        flatCoordinates[offset + 1]
      );
      if (squaredDistance < minSquaredDistance) {
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
        return squaredDistance;
      }
      return minSquaredDistance;
    }
    tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];
    let index = offset + stride;
    while (index < end) {
      assignClosest(
        flatCoordinates,
        index - stride,
        index,
        stride,
        x,
        y,
        tmpPoint
      );
      squaredDistance = squaredDistance$1(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance < minSquaredDistance) {
        minSquaredDistance = squaredDistance;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
        index += stride;
      } else {
        // Skip ahead multiple points, because we know that all the skipped
        // points cannot be any closer than the closest point we have found so
        // far.  We know this because we know how close the current point is, how
        // close the closest point we have found so far is, and the maximum
        // distance between consecutive points.  For example, if we're currently
        // at distance 10, the best we've found so far is 3, and that the maximum
        // distance between consecutive points is 2, then we'll need to skip at
        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
        // finding a closer point.  We use Math.max(..., 1) to ensure that we
        // always advance at least one point, to avoid an infinite loop.
        index +=
          stride *
          Math.max(
            ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /
              maxDelta) |
              0,
            1
          );
      }
    }
    if (isRing) {
      // Check the closing segment.
      assignClosest(
        flatCoordinates,
        end - stride,
        offset,
        stride,
        x,
        y,
        tmpPoint
      );
      squaredDistance = squaredDistance$1(x, y, tmpPoint[0], tmpPoint[1]);
      if (squaredDistance < minSquaredDistance) {
        minSquaredDistance = squaredDistance;
        for (i = 0; i < stride; ++i) {
          closestPoint[i] = tmpPoint[i];
        }
        closestPoint.length = stride;
      }
    }
    return minSquaredDistance;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>} [tmpPoint] Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestArrayPoint(
    flatCoordinates,
    offset,
    ends,
    stride,
    maxDelta,
    isRing,
    x,
    y,
    closestPoint,
    minSquaredDistance,
    tmpPoint
  ) {
    tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      minSquaredDistance = assignClosestPoint(
        flatCoordinates,
        offset,
        end,
        stride,
        maxDelta,
        isRing,
        x,
        y,
        closestPoint,
        minSquaredDistance,
        tmpPoint
      );
      offset = end;
    }
    return minSquaredDistance;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>} [tmpPoint] Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestMultiArrayPoint(
    flatCoordinates,
    offset,
    endss,
    stride,
    maxDelta,
    isRing,
    x,
    y,
    closestPoint,
    minSquaredDistance,
    tmpPoint
  ) {
    tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      minSquaredDistance = assignClosestArrayPoint(
        flatCoordinates,
        offset,
        ends,
        stride,
        maxDelta,
        isRing,
        x,
        y,
        closestPoint,
        minSquaredDistance,
        tmpPoint
      );
      offset = ends[ends.length - 1];
    }
    return minSquaredDistance;
  }

  /**
   * @module ol/geom/flat/deflate
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
    for (let i = 0, ii = coordinate.length; i < ii; ++i) {
      flatCoordinates[offset++] = coordinate[i];
    }
    return offset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinates(
    flatCoordinates,
    offset,
    coordinates,
    stride
  ) {
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      const coordinate = coordinates[i];
      for (let j = 0; j < stride; ++j) {
        flatCoordinates[offset++] = coordinate[j];
      }
    }
    return offset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
   * @param {number} stride Stride.
   * @param {Array<number>} [ends] Ends.
   * @return {Array<number>} Ends.
   */
  function deflateCoordinatesArray(
    flatCoordinates,
    offset,
    coordinatess,
    stride,
    ends
  ) {
    ends = ends ? ends : [];
    let i = 0;
    for (let j = 0, jj = coordinatess.length; j < jj; ++j) {
      const end = deflateCoordinates(
        flatCoordinates,
        offset,
        coordinatess[j],
        stride
      );
      ends[i++] = end;
      offset = end;
    }
    ends.length = i;
    return ends;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
   * @param {number} stride Stride.
   * @param {Array<Array<number>>} [endss] Endss.
   * @return {Array<Array<number>>} Endss.
   */
  function deflateMultiCoordinatesArray(
    flatCoordinates,
    offset,
    coordinatesss,
    stride,
    endss
  ) {
    endss = endss ? endss : [];
    let i = 0;
    for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {
      const ends = deflateCoordinatesArray(
        flatCoordinates,
        offset,
        coordinatesss[j],
        stride,
        endss[i]
      );
      if (ends.length === 0) {
        ends[0] = offset;
      }
      endss[i++] = ends;
      offset = ends[ends.length - 1];
    }
    endss.length = i;
    return endss;
  }

  /**
   * @module ol/geom/flat/simplify
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function douglasPeucker(
    flatCoordinates,
    offset,
    end,
    stride,
    squaredTolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset
  ) {
    const n = (end - offset) / stride;
    if (n < 3) {
      for (; offset < end; offset += stride) {
        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
        simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + 1];
      }
      return simplifiedOffset;
    }
    /** @type {Array<number>} */
    const markers = new Array(n);
    markers[0] = 1;
    markers[n - 1] = 1;
    /** @type {Array<number>} */
    const stack = [offset, end - stride];
    let index = 0;
    while (stack.length > 0) {
      const last = stack.pop();
      const first = stack.pop();
      let maxSquaredDistance = 0;
      const x1 = flatCoordinates[first];
      const y1 = flatCoordinates[first + 1];
      const x2 = flatCoordinates[last];
      const y2 = flatCoordinates[last + 1];
      for (let i = first + stride; i < last; i += stride) {
        const x = flatCoordinates[i];
        const y = flatCoordinates[i + 1];
        const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);
        if (squaredDistance > maxSquaredDistance) {
          index = i;
          maxSquaredDistance = squaredDistance;
        }
      }
      if (maxSquaredDistance > squaredTolerance) {
        markers[(index - offset) / stride] = 1;
        if (first + stride < index) {
          stack.push(first, index);
        }
        if (index + stride < last) {
          stack.push(index, last);
        }
      }
    }
    for (let i = 0; i < n; ++i) {
      if (markers[i]) {
        simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + i * stride];
        simplifiedFlatCoordinates[simplifiedOffset++] =
          flatCoordinates[offset + i * stride + 1];
      }
    }
    return simplifiedOffset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function douglasPeuckerArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    squaredTolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
    simplifiedEnds
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      simplifiedOffset = douglasPeucker(
        flatCoordinates,
        offset,
        end,
        stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        simplifiedOffset
      );
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }

  /**
   * @param {number} value Value.
   * @param {number} tolerance Tolerance.
   * @return {number} Rounded value.
   */
  function snap(value, tolerance) {
    return tolerance * Math.round(value / tolerance);
  }

  /**
   * Simplifies a line string using an algorithm designed by Tim Schaub.
   * Coordinates are snapped to the nearest value in a virtual grid and
   * consecutive duplicate coordinates are discarded.  This effectively preserves
   * topology as the simplification of any subsection of a line string is
   * independent of the rest of the line string.  This means that, for examples,
   * the common edge between two polygons will be simplified to the same line
   * string independently in both polygons.  This implementation uses a single
   * pass over the coordinates and eliminates intermediate collinear points.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function quantize(
    flatCoordinates,
    offset,
    end,
    stride,
    tolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset
  ) {
    // do nothing if the line is empty
    if (offset == end) {
      return simplifiedOffset;
    }
    // snap the first coordinate (P1)
    let x1 = snap(flatCoordinates[offset], tolerance);
    let y1 = snap(flatCoordinates[offset + 1], tolerance);
    offset += stride;
    // add the first coordinate to the output
    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
    // find the next coordinate that does not snap to the same value as the first
    // coordinate (P2)
    let x2, y2;
    do {
      x2 = snap(flatCoordinates[offset], tolerance);
      y2 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      if (offset == end) {
        // all coordinates snap to the same value, the line collapses to a point
        // push the last snapped value anyway to ensure that the output contains
        // at least two points
        // FIXME should we really return at least two points anyway?
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
      }
    } while (x2 == x1 && y2 == y1);
    while (offset < end) {
      // snap the next coordinate (P3)
      const x3 = snap(flatCoordinates[offset], tolerance);
      const y3 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      // skip P3 if it is equal to P2
      if (x3 == x2 && y3 == y2) {
        continue;
      }
      // calculate the delta between P1 and P2
      const dx1 = x2 - x1;
      const dy1 = y2 - y1;
      // calculate the delta between P3 and P1
      const dx2 = x3 - x1;
      const dy2 = y3 - y1;
      // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
      // P1 in the same direction then P2 is on the straight line between P1 and
      // P3
      if (
        dx1 * dy2 == dy1 * dx2 &&
        ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
        ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))
      ) {
        // discard P2 and set P2 = P3
        x2 = x3;
        y2 = y3;
        continue;
      }
      // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
      // between P3 and P1 or on the opposite half of the line to P2.  add P2,
      // and continue with P1 = P2 and P2 = P3
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      x1 = x2;
      y1 = y2;
      x2 = x3;
      y2 = y3;
    }
    // add the last point (P2)
    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
    return simplifiedOffset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function quantizeArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    tolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
    simplifiedEnds
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      simplifiedOffset = quantize(
        flatCoordinates,
        offset,
        end,
        stride,
        tolerance,
        simplifiedFlatCoordinates,
        simplifiedOffset
      );
      simplifiedEnds.push(simplifiedOffset);
      offset = end;
    }
    return simplifiedOffset;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
   * @return {number} Simplified offset.
   */
  function quantizeMultiArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    tolerance,
    simplifiedFlatCoordinates,
    simplifiedOffset,
    simplifiedEndss
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      const simplifiedEnds = [];
      simplifiedOffset = quantizeArray(
        flatCoordinates,
        offset,
        ends,
        stride,
        tolerance,
        simplifiedFlatCoordinates,
        simplifiedOffset,
        simplifiedEnds
      );
      simplifiedEndss.push(simplifiedEnds);
      offset = ends[ends.length - 1];
    }
    return simplifiedOffset;
  }

  /**
   * @module ol/geom/flat/inflate
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<import("../../coordinate.js").Coordinate>} [coordinates] Coordinates.
   * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
   */
  function inflateCoordinates(
    flatCoordinates,
    offset,
    end,
    stride,
    coordinates
  ) {
    coordinates = coordinates !== undefined ? coordinates : [];
    let i = 0;
    for (let j = offset; j < end; j += stride) {
      coordinates[i++] = flatCoordinates.slice(j, j + stride);
    }
    coordinates.length = i;
    return coordinates;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} [coordinatess] Coordinatess.
   * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
   */
  function inflateCoordinatesArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    coordinatess
  ) {
    coordinatess = coordinatess !== undefined ? coordinatess : [];
    let i = 0;
    for (let j = 0, jj = ends.length; j < jj; ++j) {
      const end = ends[j];
      coordinatess[i++] = inflateCoordinates(
        flatCoordinates,
        offset,
        end,
        stride,
        coordinatess[i]
      );
      offset = end;
    }
    coordinatess.length = i;
    return coordinatess;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} [coordinatesss]
   *     Coordinatesss.
   * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
   */
  function inflateMultiCoordinatesArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    coordinatesss
  ) {
    coordinatesss = coordinatesss !== undefined ? coordinatesss : [];
    let i = 0;
    for (let j = 0, jj = endss.length; j < jj; ++j) {
      const ends = endss[j];
      coordinatesss[i++] =
        ends.length === 1 && ends[0] === offset
          ? []
          : inflateCoordinatesArray(
              flatCoordinates,
              offset,
              ends,
              stride,
              coordinatesss[i]
            );
      offset = ends[ends.length - 1];
    }
    coordinatesss.length = i;
    return coordinatesss;
  }

  /**
   * @module ol/geom/flat/area
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRing(flatCoordinates, offset, end, stride) {
    let twiceArea = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      twiceArea += y1 * x2 - x1 * y2;
      x1 = x2;
      y1 = y2;
    }
    return twiceArea / 2;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRings(flatCoordinates, offset, ends, stride) {
    let area = 0;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      area += linearRing(flatCoordinates, offset, end, stride);
      offset = end;
    }
    return area;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRingss$1(flatCoordinates, offset, endss, stride) {
    let area = 0;
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      area += linearRings(flatCoordinates, offset, ends, stride);
      offset = ends[ends.length - 1];
    }
    return area;
  }

  /**
   * @module ol/geom/LinearRing
   */

  /**
   * @classdesc
   * Linear ring geometry. Only used as part of polygon; cannot be rendered
   * on its own.
   *
   * @api
   */
  class LinearRing extends SimpleGeometry$1 {
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates)
        );
      } else {
        this.setCoordinates(
          /** @type {Array<import("../coordinate.js").Coordinate>} */ (
            coordinates
          ),
          layout
        );
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!LinearRing} Clone.
     * @api
     */
    clone() {
      return new LinearRing(this.flatCoordinates.slice(), this.layout);
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          maxSquaredDelta(
            this.flatCoordinates,
            0,
            this.flatCoordinates.length,
            this.stride,
            0
          )
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        this.maxDelta_,
        true,
        x,
        y,
        closestPoint,
        minSquaredDistance
      );
    }

    /**
     * Return the area of the linear ring on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRing(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride
      );
    }

    /**
     * Return the coordinates of the linear ring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride
      );
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LinearRing} Simplified LinearRing.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        0
      );
      return new LinearRing(simplifiedFlatCoordinates, 'XY');
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'LinearRing';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      return false;
    }

    /**
     * Set the coordinates of the linear ring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride
      );
      this.changed();
    }
  }

  var LinearRing$1 = LinearRing;

  /**
   * @module ol/geom/Point
   */

  /**
   * @classdesc
   * Point geometry.
   *
   * @api
   */
  class Point extends SimpleGeometry$1 {
    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();
      this.setCoordinates(coordinates, layout);
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Point} Clone.
     * @api
     */
    clone() {
      const point = new Point(this.flatCoordinates.slice(), this.layout);
      point.applyProperties(this);
      return point;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      const flatCoordinates = this.flatCoordinates;
      const squaredDistance = squaredDistance$1(
        x,
        y,
        flatCoordinates[0],
        flatCoordinates[1]
      );
      if (squaredDistance < minSquaredDistance) {
        const stride = this.stride;
        for (let i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[i];
        }
        closestPoint.length = stride;
        return squaredDistance;
      }
      return minSquaredDistance;
    }

    /**
     * Return the coordinate of the point.
     * @return {import("../coordinate.js").Coordinate} Coordinates.
     * @api
     */
    getCoordinates() {
      return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'Point';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
    }

    /**
     * @param {!Array<*>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinate(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride
      );
      this.changed();
    }
  }

  var Point$1 = Point;

  /**
   * @module ol/geom/flat/contains
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} Contains extent.
   */
  function linearRingContainsExtent(
    flatCoordinates,
    offset,
    end,
    stride,
    extent
  ) {
    const outside = forEachCorner(
      extent,
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains (x, y).
       */
      function (coordinate) {
        return !linearRingContainsXY(
          flatCoordinates,
          offset,
          end,
          stride,
          coordinate[0],
          coordinate[1]
        );
      }
    );
    return !outside;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingContainsXY(
    flatCoordinates,
    offset,
    end,
    stride,
    x,
    y
  ) {
    // https://geomalgorithms.com/a03-_inclusion.html
    // Copyright 2000 softSurfer, 2012 Dan Sunday
    // This code may be freely used and modified for any purpose
    // providing that this copyright notice is included with it.
    // SoftSurfer makes no warranty for this code, and cannot be held
    // liable for any real or imagined damage resulting from its use.
    // Users of this code must verify correctness for their application.
    let wn = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      if (y1 <= y) {
        if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {
          wn++;
        }
      } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {
        wn--;
      }
      x1 = x2;
      y1 = y2;
    }
    return wn !== 0;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingsContainsXY(
    flatCoordinates,
    offset,
    ends,
    stride,
    x,
    y
  ) {
    if (ends.length === 0) {
      return false;
    }
    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
      return false;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if (
        linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)
      ) {
        return false;
      }
    }
    return true;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingssContainsXY(
    flatCoordinates,
    offset,
    endss,
    stride,
    x,
    y
  ) {
    if (endss.length === 0) {
      return false;
    }
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/interiorpoint
   */

  /**
   * Calculates a point that is likely to lie in the interior of the linear rings.
   * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @param {number} flatCentersOffset Flat center offset.
   * @param {Array<number>} [dest] Destination.
   * @return {Array<number>} Destination point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointOfArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    flatCenters,
    flatCentersOffset,
    dest
  ) {
    let i, ii, x, x1, x2, y1, y2;
    const y = flatCenters[flatCentersOffset + 1];
    /** @type {Array<number>} */
    const intersections = [];
    // Calculate intersections with the horizontal line
    for (let r = 0, rr = ends.length; r < rr; ++r) {
      const end = ends[r];
      x1 = flatCoordinates[end - stride];
      y1 = flatCoordinates[end - stride + 1];
      for (i = offset; i < end; i += stride) {
        x2 = flatCoordinates[i];
        y2 = flatCoordinates[i + 1];
        if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
          x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;
          intersections.push(x);
        }
        x1 = x2;
        y1 = y2;
      }
    }
    // Find the longest segment of the horizontal line that has its center point
    // inside the linear ring.
    let pointX = NaN;
    let maxSegmentLength = -Infinity;
    intersections.sort(ascending);
    x1 = intersections[0];
    for (i = 1, ii = intersections.length; i < ii; ++i) {
      x2 = intersections[i];
      const segmentLength = Math.abs(x2 - x1);
      if (segmentLength > maxSegmentLength) {
        x = (x1 + x2) / 2;
        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
          pointX = x;
          maxSegmentLength = segmentLength;
        }
      }
      x1 = x2;
    }
    if (isNaN(pointX)) {
      // There is no horizontal line that has its center point inside the linear
      // ring.  Use the center of the the linear ring's extent.
      pointX = flatCenters[flatCentersOffset];
    }
    if (dest) {
      dest.push(pointX, y, maxSegmentLength);
      return dest;
    }
    return [pointX, y, maxSegmentLength];
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @return {Array<number>} Interior points as XYM coordinates, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointsOfMultiArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    flatCenters
  ) {
    let interiorPoints = [];
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      interiorPoints = getInteriorPointOfArray(
        flatCoordinates,
        offset,
        ends,
        stride,
        flatCenters,
        2 * i,
        interiorPoints
      );
      offset = ends[ends.length - 1];
    }
    return interiorPoints;
  }

  /**
   * @module ol/geom/flat/segments
   */

  /**
   * This function calls `callback` for each segment of the flat coordinates
   * array. If the callback returns a truthy value the function returns that
   * value immediately. Otherwise the function returns `false`.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
   *     called for each segment.
   * @return {T|boolean} Value.
   * @template T
   */
  function forEach(flatCoordinates, offset, end, stride, callback) {
    let ret;
    offset += stride;
    for (; offset < end; offset += stride) {
      ret = callback(
        flatCoordinates.slice(offset - stride, offset),
        flatCoordinates.slice(offset, offset + stride)
      );
      if (ret) {
        return ret;
      }
    }
    return false;
  }

  /**
   * @module ol/geom/flat/intersectsextent
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineString(
    flatCoordinates,
    offset,
    end,
    stride,
    extent
  ) {
    const coordinatesExtent = extendFlatCoordinates(
      createEmpty(),
      flatCoordinates,
      offset,
      end,
      stride
    );
    if (!intersects$2(extent, coordinatesExtent)) {
      return false;
    }
    if (containsExtent(extent, coordinatesExtent)) {
      return true;
    }
    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {
      return true;
    }
    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {
      return true;
    }
    return forEach(
      flatCoordinates,
      offset,
      end,
      stride,
      /**
       * @param {import("../../coordinate.js").Coordinate} point1 Start point.
       * @param {import("../../coordinate.js").Coordinate} point2 End point.
       * @return {boolean} `true` if the segment and the extent intersect,
       *     `false` otherwise.
       */
      function (point1, point2) {
        return intersectsSegment(extent, point1, point2);
      }
    );
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineStringArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    extent
  ) {
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      if (
        intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)
      ) {
        return true;
      }
      offset = ends[i];
    }
    return false;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRing(
    flatCoordinates,
    offset,
    end,
    stride,
    extent
  ) {
    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[0],
        extent[1]
      )
    ) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[0],
        extent[3]
      )
    ) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[2],
        extent[1]
      )
    ) {
      return true;
    }
    if (
      linearRingContainsXY(
        flatCoordinates,
        offset,
        end,
        stride,
        extent[2],
        extent[3]
      )
    ) {
      return true;
    }
    return false;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingArray(
    flatCoordinates,
    offset,
    ends,
    stride,
    extent
  ) {
    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
      return false;
    }
    if (ends.length === 1) {
      return true;
    }
    for (let i = 1, ii = ends.length; i < ii; ++i) {
      if (
        linearRingContainsExtent(
          flatCoordinates,
          ends[i - 1],
          ends[i],
          stride,
          extent
        )
      ) {
        if (
          !intersectsLineString(
            flatCoordinates,
            ends[i - 1],
            ends[i],
            stride,
            extent
          )
        ) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingMultiArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    extent
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (
        intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)
      ) {
        return true;
      }
      offset = ends[ends.length - 1];
    }
    return false;
  }

  /**
   * @module ol/geom/flat/reverse
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   */
  function coordinates(flatCoordinates, offset, end, stride) {
    while (offset < end - stride) {
      for (let i = 0; i < stride; ++i) {
        const tmp = flatCoordinates[offset + i];
        flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
        flatCoordinates[end - stride + i] = tmp;
      }
      offset += stride;
      end -= stride;
    }
  }

  /**
   * @module ol/geom/flat/orient
   */

  /**
   * Is the linear ring oriented clockwise in a coordinate system with a bottom-left
   * coordinate origin? For a coordinate system with a top-left coordinate origin,
   * the ring's orientation is clockwise when this function returns false.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} Is clockwise.
   */
  function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
    // https://stackoverflow.com/q/1165647/clockwise-method#1165943
    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp
    let edge = 0;
    let x1 = flatCoordinates[end - stride];
    let y1 = flatCoordinates[end - stride + 1];
    for (; offset < end; offset += stride) {
      const x2 = flatCoordinates[offset];
      const y2 = flatCoordinates[offset + 1];
      edge += (x2 - x1) * (y2 + y1);
      x1 = x2;
      y1 = y2;
    }
    return edge === 0 ? undefined : edge > 0;
  }

  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean} [right] Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingsAreOriented(
    flatCoordinates,
    offset,
    ends,
    stride,
    right
  ) {
    right = right !== undefined ? right : false;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const isClockwise = linearRingIsClockwise(
        flatCoordinates,
        offset,
        end,
        stride
      );
      if (i === 0) {
        if ((right && isClockwise) || (!right && !isClockwise)) {
          return false;
        }
      } else {
        if ((right && !isClockwise) || (!right && isClockwise)) {
          return false;
        }
      }
      offset = end;
    }
    return true;
  }

  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean} [right] Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingssAreOriented(
    flatCoordinates,
    offset,
    endss,
    stride,
    right
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {
        return false;
      }
      if (ends.length) {
        offset = ends[ends.length - 1];
      }
    }
    return true;
  }

  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {boolean} [right] Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRings(
    flatCoordinates,
    offset,
    ends,
    stride,
    right
  ) {
    right = right !== undefined ? right : false;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      const isClockwise = linearRingIsClockwise(
        flatCoordinates,
        offset,
        end,
        stride
      );
      const reverse =
        i === 0
          ? (right && isClockwise) || (!right && !isClockwise)
          : (right && !isClockwise) || (!right && isClockwise);
      if (reverse) {
        coordinates(flatCoordinates, offset, end, stride);
      }
      offset = end;
    }
    return offset;
  }

  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean} [right] Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRingsArray(
    flatCoordinates,
    offset,
    endss,
    stride,
    right
  ) {
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      offset = orientLinearRings(
        flatCoordinates,
        offset,
        endss[i],
        stride,
        right
      );
    }
    return offset;
  }

  /**
   * Return a two-dimensional endss
   * @param {Array<number>} flatCoordinates Flat coordinates
   * @param {Array<number>} ends Linear ring end indexes
   * @return {Array<Array<number>>} Two dimensional endss array that can
   * be used to contruct a MultiPolygon
   */
  function inflateEnds(flatCoordinates, ends) {
    const endss = [];
    let offset = 0;
    let prevEndIndex = 0;
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      // classifies an array of rings into polygons with outer rings and holes
      if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {
        endss.push(ends.slice(prevEndIndex, i + 1));
      } else {
        if (endss.length === 0) {
          continue;
        }
        endss[endss.length - 1].push(ends[prevEndIndex]);
      }
      prevEndIndex = i + 1;
      offset = end;
    }
    return endss;
  }

  /**
   * @module ol/geom/Polygon
   */

  /**
   * @classdesc
   * Polygon geometry.
   *
   * @api
   */
  class Polygon extends SimpleGeometry$1 {
    /**
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
     *     Array of linear rings that define the polygon. The first linear ring of the
     *     array defines the outer-boundary or surface of the polygon. Each subsequent
     *     linear ring defines a hole in the surface of the polygon. A linear ring is
     *     an array of vertices' coordinates where the first coordinate and the last are
     *     equivalent. (For internal use, flat coordinates in combination with
     *     `layout` and `ends` are also accepted.)
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).
     */
    constructor(coordinates, layout, ends) {
      super();

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointRevision_ = -1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatInteriorPoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (layout !== undefined && ends) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates)
        );
        this.ends_ = ends;
      } else {
        this.setCoordinates(
          /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (
            coordinates
          ),
          layout
        );
      }
    }

    /**
     * Append the passed linear ring to this polygon.
     * @param {LinearRing} linearRing Linear ring.
     * @api
     */
    appendLinearRing(linearRing) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = linearRing.getFlatCoordinates().slice();
      } else {
        extend$1(this.flatCoordinates, linearRing.getFlatCoordinates());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Polygon} Clone.
     * @api
     */
    clone() {
      const polygon = new Polygon(
        this.flatCoordinates.slice(),
        this.layout,
        this.ends_.slice()
      );
      polygon.applyProperties(this);
      return polygon;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          arrayMaxSquaredDelta(
            this.flatCoordinates,
            0,
            this.ends_,
            this.stride,
            0
          )
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        this.maxDelta_,
        true,
        x,
        y,
        closestPoint,
        minSquaredDistance
      );
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      return linearRingsContainsXY(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride,
        x,
        y
      );
    }

    /**
     * Return the area of the polygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRings(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride
      );
    }

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for polygons.
     *
     * @param {boolean} [right] Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @api
     */
    getCoordinates(right) {
      let flatCoordinates;
      if (right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
    }

    /**
     * @return {Array<number>} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * @return {Array<number>} Interior point.
     */
    getFlatInteriorPoint() {
      if (this.flatInteriorPointRevision_ != this.getRevision()) {
        const flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoint_ = getInteriorPointOfArray(
          this.getOrientedFlatCoordinates(),
          0,
          this.ends_,
          this.stride,
          flatCenter,
          0
        );
        this.flatInteriorPointRevision_ = this.getRevision();
      }
      return this.flatInteriorPoint_;
    }

    /**
     * Return an interior point of the polygon.
     * @return {Point} Interior point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     * @api
     */
    getInteriorPoint() {
      return new Point$1(this.getFlatInteriorPoint(), 'XYM');
    }

    /**
     * Return the number of rings of the polygon,  this includes the exterior
     * ring and any interior rings.
     *
     * @return {number} Number of rings.
     * @api
     */
    getLinearRingCount() {
      return this.ends_.length;
    }

    /**
     * Return the Nth linear ring of the polygon geometry. Return `null` if the
     * given index is out of range.
     * The exterior linear ring is available at index `0` and the interior rings
     * at index `1` and beyond.
     *
     * @param {number} index Index.
     * @return {LinearRing|null} Linear ring.
     * @api
     */
    getLinearRing(index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LinearRing$1(
        this.flatCoordinates.slice(
          index === 0 ? 0 : this.ends_[index - 1],
          this.ends_[index]
        ),
        this.layout
      );
    }

    /**
     * Return the linear rings of the polygon.
     * @return {Array<LinearRing>} Linear rings.
     * @api
     */
    getLinearRings() {
      const layout = this.layout;
      const flatCoordinates = this.flatCoordinates;
      const ends = this.ends_;
      const linearRings = [];
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const linearRing = new LinearRing$1(
          flatCoordinates.slice(offset, end),
          layout
        );
        linearRings.push(linearRing);
        offset = end;
      }
      return linearRings;
    }

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    getOrientedFlatCoordinates() {
      if (this.orientedRevision_ != this.getRevision()) {
        const flatCoordinates = this.flatCoordinates;
        if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length = orientLinearRings(
            this.orientedFlatCoordinates_,
            0,
            this.ends_,
            this.stride
          );
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {Polygon} Simplified Polygon.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      const simplifiedEnds = [];
      simplifiedFlatCoordinates.length = quantizeArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates,
        0,
        simplifiedEnds
      );
      return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'Polygon';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLinearRingArray(
        this.getOrientedFlatCoordinates(),
        0,
        this.ends_,
        this.stride,
        extent
      );
    }

    /**
     * Set the coordinates of the polygon.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const ends = deflateCoordinatesArray(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
        this.ends_
      );
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    }
  }

  var Polygon$1 = Polygon;

  /**
   * Create an approximation of a circle on the surface of a sphere.
   * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
   * @param {number} radius The great-circle distance from the center to
   *     the polygon vertices in meters.
   * @param {number} [n] Optional number of vertices for the resulting
   *     polygon. Default is `32`.
   * @param {number} [sphereRadius] Optional radius for the sphere (defaults to
   *     the Earth's mean radius using the WGS84 ellipsoid).
   * @return {Polygon} The "circular" polygon.
   * @api
   */
  function circular(center, radius, n, sphereRadius) {
    n = n ? n : 32;
    /** @type {Array<number>} */
    const flatCoordinates = [];
    for (let i = 0; i < n; ++i) {
      extend$1(
        flatCoordinates,
        offset(center, radius, (2 * Math.PI * i) / n, sphereRadius)
      );
    }
    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
    return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);
  }

  /**
   * Create a polygon from an extent. The layout used is `XY`.
   * @param {import("../extent.js").Extent} extent The extent.
   * @return {Polygon} The polygon.
   * @api
   */
  function fromExtent(extent) {
    const minX = extent[0];
    const minY = extent[1];
    const maxX = extent[2];
    const maxY = extent[3];
    const flatCoordinates = [
      minX,
      minY,
      minX,
      maxY,
      maxX,
      maxY,
      maxX,
      minY,
      minX,
      minY,
    ];
    return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);
  }

  /**
   * Create a regular polygon from a circle.
   * @param {import("./Circle.js").default} circle Circle geometry.
   * @param {number} [sides] Number of sides of the polygon. Default is 32.
   * @param {number} [angle] Start angle for the first vertex of the polygon in
   *     counter-clockwise radians. 0 means East. Default is 0.
   * @return {Polygon} Polygon geometry.
   * @api
   */
  function fromCircle(circle, sides, angle) {
    sides = sides ? sides : 32;
    const stride = circle.getStride();
    const layout = circle.getLayout();
    const center = circle.getCenter();
    const arrayLength = stride * (sides + 1);
    const flatCoordinates = new Array(arrayLength);
    for (let i = 0; i < arrayLength; i += stride) {
      flatCoordinates[i] = 0;
      flatCoordinates[i + 1] = 0;
      for (let j = 2; j < stride; j++) {
        flatCoordinates[i + j] = center[j];
      }
    }
    const ends = [flatCoordinates.length];
    const polygon = new Polygon(flatCoordinates, layout, ends);
    makeRegular(polygon, center, circle.getRadius(), angle);
    return polygon;
  }

  /**
   * Modify the coordinates of a polygon to make it a regular polygon.
   * @param {Polygon} polygon Polygon geometry.
   * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
   * @param {number} radius Radius of the regular polygon.
   * @param {number} [angle] Start angle for the first vertex of the polygon in
   *     counter-clockwise radians. 0 means East. Default is 0.
   */
  function makeRegular(polygon, center, radius, angle) {
    const flatCoordinates = polygon.getFlatCoordinates();
    const stride = polygon.getStride();
    const sides = flatCoordinates.length / stride - 1;
    const startAngle = angle ? angle : 0;
    for (let i = 0; i <= sides; ++i) {
      const offset = i * stride;
      const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;
      flatCoordinates[offset] = center[0] + radius * Math.cos(angle);
      flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);
    }
    polygon.changed();
  }

  var geom_Polygon = {
    __proto__: null,
    'default': Polygon$1,
    circular: circular,
    fromExtent: fromExtent,
    fromCircle: fromCircle,
    makeRegular: makeRegular
  };

  /**
   * @module ol/Geolocation
   */

  /**
   * @enum {string}
   */
  const Property$4 = {
    ACCURACY: 'accuracy',
    ACCURACY_GEOMETRY: 'accuracyGeometry',
    ALTITUDE: 'altitude',
    ALTITUDE_ACCURACY: 'altitudeAccuracy',
    HEADING: 'heading',
    POSITION: 'position',
    PROJECTION: 'projection',
    SPEED: 'speed',
    TRACKING: 'tracking',
    TRACKING_OPTIONS: 'trackingOptions',
  };

  /**
   * @enum string
   */
  const GeolocationErrorType = {
    /**
     * Triggered when a `GeolocationPositionError` occurs.
     * @event module:ol/Geolocation.GeolocationError#error
     * @api
     */
    ERROR: 'error',
  };

  /**
   * @classdesc
   * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).
   */
  class GeolocationError extends BaseEvent {
    /**
     * @param {GeolocationPositionError} error error object.
     */
    constructor(error) {
      super(GeolocationErrorType.ERROR);

      /**
       * Code of the underlying `GeolocationPositionError`.
       * @type {number}
       * @api
       */
      this.code = error.code;

      /**
       * Message of the underlying `GeolocationPositionError`.
       * @type {string}
       * @api
       */
      this.message = error.message;
    }
  }

  /**
   * @typedef {Object} Options
   * @property {boolean} [tracking=false] Start Tracking right after
   * instantiation.
   * @property {PositionOptions} [trackingOptions] Tracking options.
   * See https://www.w3.org/TR/geolocation-API/#position_options_interface.
   * @property {import("./proj.js").ProjectionLike} [projection] The projection the position
   * is reported in.
   */

  /**
   * @typedef {import("./ObjectEventType").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|
   *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|
   *    'change:trackingOptions'} GeolocationObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<GeolocationObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *   import("./Observable").OnSignature<'error', GeolocationError, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|GeolocationObjectEventTypes, Return> &
   *   import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return>} GeolocationOnSignature
   */

  /**
   * @classdesc
   * Helper class for providing HTML5 Geolocation capabilities.
   * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)
   * is used to locate a user's position.
   *
   * To get notified of position changes and errors, register listeners for the generic
   * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.
   *
   * Example:
   *
   *     const geolocation = new Geolocation({
   *       // take the projection to use from the map's view
   *       projection: view.getProjection()
   *     });
   *     // listen to changes in position
   *     geolocation.on('change', function(evt) {
   *       console.log(geolocation.getPosition());
   *     });
   *     // listen to error
   *     geolocation.on('error', function(evt) {
   *       window.console.log(evt.message);
   *     });
   *
   * @fires GeolocationError
   * @api
   */
  class Geolocation extends olObject {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {GeolocationOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {GeolocationOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {GeolocationOnSignature<void>}
       */
      this.un;

      options = options || {};

      /**
       * The unprojected (EPSG:4326) device position.
       * @private
       * @type {?import("./coordinate.js").Coordinate}
       */
      this.position_ = null;

      /**
       * @private
       * @type {import("./proj.js").TransformFunction}
       */
      this.transform_ = identityTransform;

      /**
       * @private
       * @type {number|undefined}
       */
      this.watchId_ = undefined;

      this.addChangeListener(Property$4.PROJECTION, this.handleProjectionChanged_);
      this.addChangeListener(Property$4.TRACKING, this.handleTrackingChanged_);

      if (options.projection !== undefined) {
        this.setProjection(options.projection);
      }
      if (options.trackingOptions !== undefined) {
        this.setTrackingOptions(options.trackingOptions);
      }

      this.setTracking(options.tracking !== undefined ? options.tracking : false);
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.setTracking(false);
      super.disposeInternal();
    }

    /**
     * @private
     */
    handleProjectionChanged_() {
      const projection = this.getProjection();
      if (projection) {
        this.transform_ = getTransformFromProjections(
          get$2('EPSG:4326'),
          projection
        );
        if (this.position_) {
          this.set(Property$4.POSITION, this.transform_(this.position_));
        }
      }
    }

    /**
     * @private
     */
    handleTrackingChanged_() {
      if ('geolocation' in navigator) {
        const tracking = this.getTracking();
        if (tracking && this.watchId_ === undefined) {
          this.watchId_ = navigator.geolocation.watchPosition(
            this.positionChange_.bind(this),
            this.positionError_.bind(this),
            this.getTrackingOptions()
          );
        } else if (!tracking && this.watchId_ !== undefined) {
          navigator.geolocation.clearWatch(this.watchId_);
          this.watchId_ = undefined;
        }
      }
    }

    /**
     * @private
     * @param {GeolocationPosition} position position event.
     */
    positionChange_(position) {
      const coords = position.coords;
      this.set(Property$4.ACCURACY, coords.accuracy);
      this.set(
        Property$4.ALTITUDE,
        coords.altitude === null ? undefined : coords.altitude
      );
      this.set(
        Property$4.ALTITUDE_ACCURACY,
        coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy
      );
      this.set(
        Property$4.HEADING,
        coords.heading === null ? undefined : toRadians(coords.heading)
      );
      if (!this.position_) {
        this.position_ = [coords.longitude, coords.latitude];
      } else {
        this.position_[0] = coords.longitude;
        this.position_[1] = coords.latitude;
      }
      const projectedPosition = this.transform_(this.position_);
      this.set(Property$4.POSITION, projectedPosition.slice());
      this.set(Property$4.SPEED, coords.speed === null ? undefined : coords.speed);
      const geometry = circular(this.position_, coords.accuracy);
      geometry.applyTransform(this.transform_);
      this.set(Property$4.ACCURACY_GEOMETRY, geometry);
      this.changed();
    }

    /**
     * @private
     * @param {GeolocationPositionError} error error object.
     */
    positionError_(error) {
      this.dispatchEvent(new GeolocationError(error));
    }

    /**
     * Get the accuracy of the position in meters.
     * @return {number|undefined} The accuracy of the position measurement in
     *     meters.
     * @observable
     * @api
     */
    getAccuracy() {
      return /** @type {number|undefined} */ (this.get(Property$4.ACCURACY));
    }

    /**
     * Get a geometry of the position accuracy.
     * @return {?import("./geom/Polygon.js").default} A geometry of the position accuracy.
     * @observable
     * @api
     */
    getAccuracyGeometry() {
      return /** @type {?import("./geom/Polygon.js").default} */ (
        this.get(Property$4.ACCURACY_GEOMETRY) || null
      );
    }

    /**
     * Get the altitude associated with the position.
     * @return {number|undefined} The altitude of the position in meters above mean
     *     sea level.
     * @observable
     * @api
     */
    getAltitude() {
      return /** @type {number|undefined} */ (this.get(Property$4.ALTITUDE));
    }

    /**
     * Get the altitude accuracy of the position.
     * @return {number|undefined} The accuracy of the altitude measurement in
     *     meters.
     * @observable
     * @api
     */
    getAltitudeAccuracy() {
      return /** @type {number|undefined} */ (
        this.get(Property$4.ALTITUDE_ACCURACY)
      );
    }

    /**
     * Get the heading as radians clockwise from North.
     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
     * is set to `true` in the tracking options.
     * @return {number|undefined} The heading of the device in radians from north.
     * @observable
     * @api
     */
    getHeading() {
      return /** @type {number|undefined} */ (this.get(Property$4.HEADING));
    }

    /**
     * Get the position of the device.
     * @return {import("./coordinate.js").Coordinate|undefined} The current position of the device reported
     *     in the current projection.
     * @observable
     * @api
     */
    getPosition() {
      return /** @type {import("./coordinate.js").Coordinate|undefined} */ (
        this.get(Property$4.POSITION)
      );
    }

    /**
     * Get the projection associated with the position.
     * @return {import("./proj/Projection.js").default|undefined} The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    getProjection() {
      return /** @type {import("./proj/Projection.js").default|undefined} */ (
        this.get(Property$4.PROJECTION)
      );
    }

    /**
     * Get the speed in meters per second.
     * @return {number|undefined} The instantaneous speed of the device in meters
     *     per second.
     * @observable
     * @api
     */
    getSpeed() {
      return /** @type {number|undefined} */ (this.get(Property$4.SPEED));
    }

    /**
     * Determine if the device location is being tracked.
     * @return {boolean} The device location is being tracked.
     * @observable
     * @api
     */
    getTracking() {
      return /** @type {boolean} */ (this.get(Property$4.TRACKING));
    }

    /**
     * Get the tracking options.
     * See https://www.w3.org/TR/geolocation-API/#position-options.
     * @return {PositionOptions|undefined} PositionOptions as defined by
     *     the [HTML5 Geolocation spec
     *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    getTrackingOptions() {
      return /** @type {PositionOptions|undefined} */ (
        this.get(Property$4.TRACKING_OPTIONS)
      );
    }

    /**
     * Set the projection to use for transforming the coordinates.
     * @param {import("./proj.js").ProjectionLike} projection The projection the position is
     *     reported in.
     * @observable
     * @api
     */
    setProjection(projection) {
      this.set(Property$4.PROJECTION, get$2(projection));
    }

    /**
     * Enable or disable tracking.
     * @param {boolean} tracking Enable tracking.
     * @observable
     * @api
     */
    setTracking(tracking) {
      this.set(Property$4.TRACKING, tracking);
    }

    /**
     * Set the tracking options.
     * See http://www.w3.org/TR/geolocation-API/#position-options.
     * @param {PositionOptions} options PositionOptions as defined by the
     *     [HTML5 Geolocation spec
     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
     * @observable
     * @api
     */
    setTrackingOptions(options) {
      this.set(Property$4.TRACKING_OPTIONS, options);
    }
  }

  var Geolocation$1 = Geolocation;

  /**
   * @module ol/render/EventType
   */

  /**
   * @enum {string}
   */
  var RenderEventType = {
    /**
     * Triggered before a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#prerender
     * @api
     */
    PRERENDER: 'prerender',

    /**
     * Triggered after a layer is rendered.
     * @event module:ol/render/Event~RenderEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered before layers are composed.  When dispatched by the map, the event object will not have
     * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
     * WebGL layers currently dispatch this event.
     * @event module:ol/render/Event~RenderEvent#precompose
     * @api
     */
    PRECOMPOSE: 'precompose',

    /**
     * Triggered after layers are composed.  When dispatched by the map, the event object will not have
     * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only
     * WebGL layers currently dispatch this event.
     * @event module:ol/render/Event~RenderEvent#postcompose
     * @api
     */
    POSTCOMPOSE: 'postcompose',

    /**
     * Triggered when rendering is complete, i.e. all sources and tiles have
     * finished loading for the current viewport, and all tiles are faded in.
     * The event object will not have a `context` set.
     * @event module:ol/render/Event~RenderEvent#rendercomplete
     * @api
     */
    RENDERCOMPLETE: 'rendercomplete',
  };

  /**
   * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes
   */

  /**
   * @typedef {'postrender'|'prerender'} LayerRenderEventTypes
   */

  /**
   * @module ol/style/Fill
   */

  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike|null} [color=null] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   */

  /**
   * @classdesc
   * Set fill style for vector features.
   * @api
   */
  class Fill {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {import("../color.js").Color|import("../colorlike.js").ColorLike|null}
       */
      this.color_ = options.color !== undefined ? options.color : null;
    }

    /**
     * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
     * @return {Fill} The cloned style.
     * @api
     */
    clone() {
      const color = this.getColor();
      return new Fill({
        color: Array.isArray(color) ? color.slice() : color || undefined,
      });
    }

    /**
     * Get the fill color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike|null} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike|null} color Color.
     * @api
     */
    setColor(color) {
      this.color_ = color;
    }
  }

  var Fill$1 = Fill;

  /**
   * @module ol/geom/flat/interpolate
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} fraction Fraction.
   * @param {Array<number>} [dest] Destination.
   * @param {number} [dimension] Destination dimension (default is `2`)
   * @return {Array<number>} Destination.
   */
  function interpolatePoint(
    flatCoordinates,
    offset,
    end,
    stride,
    fraction,
    dest,
    dimension
  ) {
    let o, t;
    const n = (end - offset) / stride;
    if (n === 1) {
      o = offset;
    } else if (n === 2) {
      o = offset;
      t = fraction;
    } else if (n !== 0) {
      let x1 = flatCoordinates[offset];
      let y1 = flatCoordinates[offset + 1];
      let length = 0;
      const cumulativeLengths = [0];
      for (let i = offset + stride; i < end; i += stride) {
        const x2 = flatCoordinates[i];
        const y2 = flatCoordinates[i + 1];
        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        cumulativeLengths.push(length);
        x1 = x2;
        y1 = y2;
      }
      const target = fraction * length;
      const index = binarySearch$1(cumulativeLengths, target);
      if (index < 0) {
        t =
          (target - cumulativeLengths[-index - 2]) /
          (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
        o = offset + (-index - 2) * stride;
      } else {
        o = offset + index * stride;
      }
    }
    dimension = dimension > 1 ? dimension : 2;
    dest = dest ? dest : new Array(dimension);
    for (let i = 0; i < dimension; ++i) {
      dest[i] =
        o === undefined
          ? NaN
          : t === undefined
          ? flatCoordinates[o + i]
          : lerp$1(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);
    }
    return dest;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @return {import("../../coordinate.js").Coordinate|null} Coordinate.
   */
  function lineStringCoordinateAtM(
    flatCoordinates,
    offset,
    end,
    stride,
    m,
    extrapolate
  ) {
    if (end == offset) {
      return null;
    }
    let coordinate;
    if (m < flatCoordinates[offset + stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(offset, offset + stride);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    } else if (flatCoordinates[end - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(end - stride, end);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    // FIXME use O(1) search
    if (m == flatCoordinates[offset + stride - 1]) {
      return flatCoordinates.slice(offset, offset + stride);
    }
    let lo = offset / stride;
    let hi = end / stride;
    while (lo < hi) {
      const mid = (lo + hi) >> 1;
      if (m < flatCoordinates[(mid + 1) * stride - 1]) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    const m0 = flatCoordinates[lo * stride - 1];
    if (m == m0) {
      return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
    }
    const m1 = flatCoordinates[(lo + 1) * stride - 1];
    const t = (m - m0) / (m1 - m0);
    coordinate = [];
    for (let i = 0; i < stride - 1; ++i) {
      coordinate.push(
        lerp$1(
          flatCoordinates[(lo - 1) * stride + i],
          flatCoordinates[lo * stride + i],
          t
        )
      );
    }
    coordinate.push(m);
    return coordinate;
  }

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @param {boolean} interpolate Interpolate.
   * @return {import("../../coordinate.js").Coordinate|null} Coordinate.
   */
  function lineStringsCoordinateAtM(
    flatCoordinates,
    offset,
    ends,
    stride,
    m,
    extrapolate,
    interpolate
  ) {
    if (interpolate) {
      return lineStringCoordinateAtM(
        flatCoordinates,
        offset,
        ends[ends.length - 1],
        stride,
        m,
        extrapolate
      );
    }
    let coordinate;
    if (m < flatCoordinates[stride - 1]) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(0, stride);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    if (flatCoordinates[flatCoordinates.length - 1] < m) {
      if (extrapolate) {
        coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
        coordinate[stride - 1] = m;
        return coordinate;
      }
      return null;
    }
    for (let i = 0, ii = ends.length; i < ii; ++i) {
      const end = ends[i];
      if (offset == end) {
        continue;
      }
      if (m < flatCoordinates[offset + stride - 1]) {
        return null;
      } else if (m <= flatCoordinates[end - 1]) {
        return lineStringCoordinateAtM(
          flatCoordinates,
          offset,
          end,
          stride,
          m,
          false
        );
      }
      offset = end;
    }
    return null;
  }

  /**
   * @module ol/geom/flat/length
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Length.
   */
  function lineStringLength(flatCoordinates, offset, end, stride) {
    let x1 = flatCoordinates[offset];
    let y1 = flatCoordinates[offset + 1];
    let length = 0;
    for (let i = offset + stride; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      x1 = x2;
      y1 = y2;
    }
    return length;
  }

  /**
   * @module ol/geom/LineString
   */

  /**
   * @classdesc
   * Linestring geometry.
   *
   * @api
   */
  class LineString extends SimpleGeometry$1 {
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.flatMidpoint_ = null;

      /**
       * @private
       * @type {number}
       */
      this.flatMidpointRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (layout !== undefined && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates)
        );
      } else {
        this.setCoordinates(
          /** @type {Array<import("../coordinate.js").Coordinate>} */ (
            coordinates
          ),
          layout
        );
      }
    }

    /**
     * Append the passed coordinate to the coordinates of the linestring.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @api
     */
    appendCoordinate(coordinate) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = coordinate.slice();
      } else {
        extend$1(this.flatCoordinates, coordinate);
      }
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!LineString} Clone.
     * @api
     */
    clone() {
      const lineString = new LineString(
        this.flatCoordinates.slice(),
        this.layout
      );
      lineString.applyProperties(this);
      return lineString;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          maxSquaredDelta(
            this.flatCoordinates,
            0,
            this.flatCoordinates.length,
            this.stride,
            0
          )
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestPoint(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        this.maxDelta_,
        false,
        x,
        y,
        closestPoint,
        minSquaredDistance
      );
    }

    /**
     * Iterate over each segment, calling the provided callback.
     * If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     *
     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
     * @return {T|boolean} Value.
     * @template T,S
     * @api
     */
    forEachSegment(callback) {
      return forEach(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        callback
      );
    }

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * @param {number} m M.
     * @param {boolean} [extrapolate] Extrapolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate|null} Coordinate.
     * @api
     */
    getCoordinateAtM(m, extrapolate) {
      if (this.layout != 'XYM' && this.layout != 'XYZM') {
        return null;
      }
      extrapolate = extrapolate !== undefined ? extrapolate : false;
      return lineStringCoordinateAtM(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        m,
        extrapolate
      );
    }

    /**
     * Return the coordinates of the linestring.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride
      );
    }

    /**
     * Return the coordinate at the provided fraction along the linestring.
     * The `fraction` is a number between 0 and 1, where 0 is the start of the
     * linestring and 1 is the end.
     * @param {number} fraction Fraction.
     * @param {import("../coordinate.js").Coordinate} [dest] Optional coordinate whose values will
     *     be modified. If not provided, a new coordinate will be returned.
     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
     * @api
     */
    getCoordinateAt(fraction, dest) {
      return interpolatePoint(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        fraction,
        dest,
        this.stride
      );
    }

    /**
     * Return the length of the linestring on projected plane.
     * @return {number} Length (on projected plane).
     * @api
     */
    getLength() {
      return lineStringLength(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride
      );
    }

    /**
     * @return {Array<number>} Flat midpoint.
     */
    getFlatMidpoint() {
      if (this.flatMidpointRevision_ != this.getRevision()) {
        this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
        this.flatMidpointRevision_ = this.getRevision();
      }
      return this.flatMidpoint_;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} Simplified LineString.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      simplifiedFlatCoordinates.length = douglasPeucker(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        0
      );
      return new LineString(simplifiedFlatCoordinates, 'XY');
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'LineString';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLineString(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride,
        extent
      );
    }

    /**
     * Set the coordinates of the linestring.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride
      );
      this.changed();
    }
  }

  var LineString$1 = LineString;

  /**
   * @module ol/style/Stroke
   */

  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
   * @property {number} [lineDashOffset=0] Line dash offset.
   * @property {number} [miterLimit=10] Miter limit.
   * @property {number} [width] Width.
   */

  /**
   * @classdesc
   * Set stroke style for vector features.
   * Note that the defaults given are the Canvas defaults, which will be used if
   * option is not defined. The `get` functions return whatever was entered in
   * the options; they will not return the default.
   * @api
   */
  class Stroke {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
       */
      this.color_ = options.color !== undefined ? options.color : null;

      /**
       * @private
       * @type {CanvasLineCap|undefined}
       */
      this.lineCap_ = options.lineCap;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lineDashOffset_ = options.lineDashOffset;

      /**
       * @private
       * @type {CanvasLineJoin|undefined}
       */
      this.lineJoin_ = options.lineJoin;

      /**
       * @private
       * @type {number|undefined}
       */
      this.miterLimit_ = options.miterLimit;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = options.width;
    }

    /**
     * Clones the style.
     * @return {Stroke} The cloned style.
     * @api
     */
    clone() {
      const color = this.getColor();
      return new Stroke({
        color: Array.isArray(color) ? color.slice() : color || undefined,
        lineCap: this.getLineCap(),
        lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
        lineDashOffset: this.getLineDashOffset(),
        lineJoin: this.getLineJoin(),
        miterLimit: this.getMiterLimit(),
        width: this.getWidth(),
      });
    }

    /**
     * Get the stroke color.
     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Get the line cap type for the stroke.
     * @return {CanvasLineCap|undefined} Line cap.
     * @api
     */
    getLineCap() {
      return this.lineCap_;
    }

    /**
     * Get the line dash style for the stroke.
     * @return {Array<number>|null} Line dash.
     * @api
     */
    getLineDash() {
      return this.lineDash_;
    }

    /**
     * Get the line dash offset for the stroke.
     * @return {number|undefined} Line dash offset.
     * @api
     */
    getLineDashOffset() {
      return this.lineDashOffset_;
    }

    /**
     * Get the line join type for the stroke.
     * @return {CanvasLineJoin|undefined} Line join.
     * @api
     */
    getLineJoin() {
      return this.lineJoin_;
    }

    /**
     * Get the miter limit for the stroke.
     * @return {number|undefined} Miter limit.
     * @api
     */
    getMiterLimit() {
      return this.miterLimit_;
    }

    /**
     * Get the stroke width.
     * @return {number|undefined} Width.
     * @api
     */
    getWidth() {
      return this.width_;
    }

    /**
     * Set the color.
     *
     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
     * @api
     */
    setColor(color) {
      this.color_ = color;
    }

    /**
     * Set the line cap.
     *
     * @param {CanvasLineCap|undefined} lineCap Line cap.
     * @api
     */
    setLineCap(lineCap) {
      this.lineCap_ = lineCap;
    }

    /**
     * Set the line dash.
     *
     * @param {Array<number>|null} lineDash Line dash.
     * @api
     */
    setLineDash(lineDash) {
      this.lineDash_ = lineDash;
    }

    /**
     * Set the line dash offset.
     *
     * @param {number|undefined} lineDashOffset Line dash offset.
     * @api
     */
    setLineDashOffset(lineDashOffset) {
      this.lineDashOffset_ = lineDashOffset;
    }

    /**
     * Set the line join.
     *
     * @param {CanvasLineJoin|undefined} lineJoin Line join.
     * @api
     */
    setLineJoin(lineJoin) {
      this.lineJoin_ = lineJoin;
    }

    /**
     * Set the miter limit.
     *
     * @param {number|undefined} miterLimit Miter limit.
     * @api
     */
    setMiterLimit(miterLimit) {
      this.miterLimit_ = miterLimit;
    }

    /**
     * Set the width.
     *
     * @param {number|undefined} width Width.
     * @api
     */
    setWidth(width) {
      this.width_ = width;
    }
  }

  var Stroke$1 = Stroke;

  /**
   * @module ol/ImageState
   */

  /**
   * @enum {number}
   */
  var ImageState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    ERROR: 3,
    EMPTY: 4,
  };

  /**
   * @module ol/size
   */

  /**
   * An array of numbers representing a size: `[width, height]`.
   * @typedef {Array<number>} Size
   * @api
   */

  /**
   * Returns a buffered size.
   * @param {Size} size Size.
   * @param {number} num The amount by which to buffer.
   * @param {Size} [dest] Optional reusable size array.
   * @return {Size} The buffered size.
   */
  function buffer$1(size, num, dest) {
    if (dest === undefined) {
      dest = [0, 0];
    }
    dest[0] = size[0] + 2 * num;
    dest[1] = size[1] + 2 * num;
    return dest;
  }

  /**
   * Determines if a size has a positive area.
   * @param {Size} size The size to test.
   * @return {boolean} The size has a positive area.
   */
  function hasArea(size) {
    return size[0] > 0 && size[1] > 0;
  }

  /**
   * Returns a size scaled by a ratio. The result will be an array of integers.
   * @param {Size} size Size.
   * @param {number} ratio Ratio.
   * @param {Size} [dest] Optional reusable size array.
   * @return {Size} The scaled size.
   */
  function scale(size, ratio, dest) {
    if (dest === undefined) {
      dest = [0, 0];
    }
    dest[0] = (size[0] * ratio + 0.5) | 0;
    dest[1] = (size[1] * ratio + 0.5) | 0;
    return dest;
  }

  /**
   * Returns an `Size` array for the passed in number (meaning: square) or
   * `Size` array.
   * (meaning: non-square),
   * @param {number|Size} size Width and height.
   * @param {Size} [dest] Optional reusable size array.
   * @return {Size} Size.
   * @api
   */
  function toSize(size, dest) {
    if (Array.isArray(size)) {
      return size;
    }
    if (dest === undefined) {
      dest = [size, size];
    } else {
      dest[0] = size;
      dest[1] = size;
    }
    return dest;
  }

  /**
   * @module ol/style/Image
   */

  /**
   * @typedef {Object} Options
   * @property {number} opacity Opacity.
   * @property {boolean} rotateWithView If the image should get rotated with the view.
   * @property {number} rotation Rotation.
   * @property {number|import("../size.js").Size} scale Scale.
   * @property {Array<number>} displacement Displacement.
   * @property {"declutter"|"obstacle"|"none"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */

  /**
   * @classdesc
   * A base class used for creating subclasses and not instantiated in
   * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
   * {@link module:ol/style/RegularShape~RegularShape}.
   * @abstract
   * @api
   */
  class ImageStyle {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      /**
       * @private
       * @type {number}
       */
      this.opacity_ = options.opacity;

      /**
       * @private
       * @type {boolean}
       */
      this.rotateWithView_ = options.rotateWithView;

      /**
       * @private
       * @type {number}
       */
      this.rotation_ = options.rotation;

      /**
       * @private
       * @type {number|import("../size.js").Size}
       */
      this.scale_ = options.scale;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.scaleArray_ = toSize(options.scale);

      /**
       * @private
       * @type {Array<number>}
       */
      this.displacement_ = options.displacement;

      /**
       * @private
       * @type {"declutter"|"obstacle"|"none"|undefined}
       */
      this.declutterMode_ = options.declutterMode;
    }

    /**
     * Clones the style.
     * @return {ImageStyle} The cloned style.
     * @api
     */
    clone() {
      const scale = this.getScale();
      return new ImageStyle({
        opacity: this.getOpacity(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
    }

    /**
     * Get the symbolizer opacity.
     * @return {number} Opacity.
     * @api
     */
    getOpacity() {
      return this.opacity_;
    }

    /**
     * Determine whether the symbolizer rotates with the map.
     * @return {boolean} Rotate with map.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Get the symoblizer rotation.
     * @return {number} Rotation.
     * @api
     */
    getRotation() {
      return this.rotation_;
    }

    /**
     * Get the symbolizer scale.
     * @return {number|import("../size.js").Size} Scale.
     * @api
     */
    getScale() {
      return this.scale_;
    }

    /**
     * Get the symbolizer scale array.
     * @return {import("../size.js").Size} Scale array.
     */
    getScaleArray() {
      return this.scaleArray_;
    }

    /**
     * Get the displacement of the shape
     * @return {Array<number>} Shape's center displacement
     * @api
     */
    getDisplacement() {
      return this.displacement_;
    }

    /**
     * Get the declutter mode of the shape
     * @return {"declutter"|"obstacle"|"none"|undefined} Shape's declutter mode
     * @api
     */
    getDeclutterMode() {
      return this.declutterMode_;
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @abstract
     * @return {Array<number>} Anchor.
     */
    getAnchor() {
      return abstract();
    }

    /**
     * Get the image element for the symbolizer.
     * @abstract
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
     */
    getImage(pixelRatio) {
      return abstract();
    }

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
     */
    getHitDetectionImage() {
      return abstract();
    }

    /**
     * Get the image pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel ratio.
     */
    getPixelRatio(pixelRatio) {
      return 1;
    }

    /**
     * @abstract
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return abstract();
    }

    /**
     * @abstract
     * @return {import("../size.js").Size} Image size.
     */
    getImageSize() {
      return abstract();
    }

    /**
     * Get the origin of the symbolizer.
     * @abstract
     * @return {Array<number>} Origin.
     */
    getOrigin() {
      return abstract();
    }

    /**
     * Get the size of the symbolizer (in pixels).
     * @abstract
     * @return {import("../size.js").Size} Size.
     */
    getSize() {
      return abstract();
    }

    /**
     * Set the displacement.
     *
     * @param {Array<number>} displacement Displacement.
     * @api
     */
    setDisplacement(displacement) {
      this.displacement_ = displacement;
    }

    /**
     * Set the opacity.
     *
     * @param {number} opacity Opacity.
     * @api
     */
    setOpacity(opacity) {
      this.opacity_ = opacity;
    }

    /**
     * Set whether to rotate the style with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }

    /**
     * Set the rotation.
     *
     * @param {number} rotation Rotation.
     * @api
     */
    setRotation(rotation) {
      this.rotation_ = rotation;
    }

    /**
     * Set the scale.
     *
     * @param {number|import("../size.js").Size} scale Scale.
     * @api
     */
    setScale(scale) {
      this.scale_ = scale;
      this.scaleArray_ = toSize(scale);
    }

    /**
     * @abstract
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    listenImageChange(listener) {
      abstract();
    }

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    load() {
      abstract();
    }

    /**
     * @abstract
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    unlistenImageChange(listener) {
      abstract();
    }
  }

  var ImageStyle$1 = ImageStyle;

  /**
   * @module ol/color
   */

  /**
   * A color represented as a short array [red, green, blue, alpha].
   * red, green, and blue should be integers in the range 0..255 inclusive.
   * alpha should be a float in the range 0..1 inclusive. If no alpha value is
   * given then `1` will be used.
   * @typedef {Array<number>} Color
   * @api
   */

  /**
   * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
   * @const
   * @type {RegExp}
   * @private
   */
  const HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;

  /**
   * Regular expression for matching potential named color style strings.
   * @const
   * @type {RegExp}
   * @private
   */
  const NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;

  /**
   * Return the color as an rgba string.
   * @param {Color|string} color Color.
   * @return {string} Rgba string.
   * @api
   */
  function asString(color) {
    if (typeof color === 'string') {
      return color;
    }
    return toString$3(color);
  }

  /**
   * Return named color as an rgba string.
   * @param {string} color Named color.
   * @return {string} Rgb string.
   */
  function fromNamed(color) {
    const el = document.createElement('div');
    el.style.color = color;
    if (el.style.color !== '') {
      document.body.appendChild(el);
      const rgb = getComputedStyle(el).color;
      document.body.removeChild(el);
      return rgb;
    }
    return '';
  }

  /**
   * @param {string} s String.
   * @return {Color} Color.
   */
  const fromString = (function () {
    // We maintain a small cache of parsed strings.  To provide cheap LRU-like
    // semantics, whenever the cache grows too large we simply delete an
    // arbitrary 25% of the entries.

    /**
     * @const
     * @type {number}
     */
    const MAX_CACHE_SIZE = 1024;

    /**
     * @type {Object<string, Color>}
     */
    const cache = {};

    /**
     * @type {number}
     */
    let cacheSize = 0;

    return (
      /**
       * @param {string} s String.
       * @return {Color} Color.
       */
      function (s) {
        let color;
        if (cache.hasOwnProperty(s)) {
          color = cache[s];
        } else {
          if (cacheSize >= MAX_CACHE_SIZE) {
            let i = 0;
            for (const key in cache) {
              if ((i++ & 3) === 0) {
                delete cache[key];
                --cacheSize;
              }
            }
          }
          color = fromStringInternal_(s);
          cache[s] = color;
          ++cacheSize;
        }
        return color;
      }
    );
  })();

  /**
   * Return the color as an array. This function maintains a cache of calculated
   * arrays which means the result should not be modified.
   * @param {Color|string} color Color.
   * @return {Color} Color.
   * @api
   */
  function asArray(color) {
    if (Array.isArray(color)) {
      return color;
    }
    return fromString(color);
  }

  /**
   * @param {string} s String.
   * @private
   * @return {Color} Color.
   */
  function fromStringInternal_(s) {
    let r, g, b, a, color;

    if (NAMED_COLOR_RE_.exec(s)) {
      s = fromNamed(s);
    }

    if (HEX_COLOR_RE_.exec(s)) {
      // hex
      const n = s.length - 1; // number of hex digits
      let d; // number of digits per channel
      if (n <= 4) {
        d = 1;
      } else {
        d = 2;
      }
      const hasAlpha = n === 4 || n === 8;
      r = parseInt(s.substr(1 + 0 * d, d), 16);
      g = parseInt(s.substr(1 + 1 * d, d), 16);
      b = parseInt(s.substr(1 + 2 * d, d), 16);
      if (hasAlpha) {
        a = parseInt(s.substr(1 + 3 * d, d), 16);
      } else {
        a = 255;
      }
      if (d == 1) {
        r = (r << 4) + r;
        g = (g << 4) + g;
        b = (b << 4) + b;
        if (hasAlpha) {
          a = (a << 4) + a;
        }
      }
      color = [r, g, b, a / 255];
    } else if (s.startsWith('rgba(')) {
      // rgba()
      color = s.slice(5, -1).split(',').map(Number);
      normalize(color);
    } else if (s.startsWith('rgb(')) {
      // rgb()
      color = s.slice(4, -1).split(',').map(Number);
      color.push(1);
      normalize(color);
    } else {
      assert(false, 14); // Invalid color
    }
    return color;
  }

  /**
   * TODO this function is only used in the test, we probably shouldn't export it
   * @param {Color} color Color.
   * @return {Color} Clamped color.
   */
  function normalize(color) {
    color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
    color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
    color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
    color[3] = clamp(color[3], 0, 1);
    return color;
  }

  /**
   * @param {Color} color Color.
   * @return {string} String.
   */
  function toString$3(color) {
    let r = color[0];
    if (r != (r | 0)) {
      r = (r + 0.5) | 0;
    }
    let g = color[1];
    if (g != (g | 0)) {
      g = (g + 0.5) | 0;
    }
    let b = color[2];
    if (b != (b | 0)) {
      b = (b + 0.5) | 0;
    }
    const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  }

  /**
   * @param {string} s String.
   * @return {boolean} Whether the string is actually a valid color
   */
  function isStringColor(s) {
    if (NAMED_COLOR_RE_.test(s)) {
      s = fromNamed(s);
    }
    return HEX_COLOR_RE_.test(s) || s.startsWith('rgba(') || s.startsWith('rgb(');
  }

  /**
   * @module ol/colorlike
   */

  /**
   * A type accepted by CanvasRenderingContext2D.fillStyle
   * or CanvasRenderingContext2D.strokeStyle.
   * Represents a color, pattern, or gradient. The origin for patterns and
   * gradients as fill style is an increment of 512 css pixels from map coordinate
   * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
   * must be a factor of two (2, 4, 8, ..., 512).
   *
   * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
   * @api
   */

  /**
   * @param {import("./color.js").Color|ColorLike} color Color.
   * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
   * @api
   */
  function asColorLike(color) {
    if (Array.isArray(color)) {
      return toString$3(color);
    }
    return color;
  }

  /**
   * @module ol/dom
   */

  //FIXME Move this function to the canvas module
  /**
   * Create an html canvas element and returns its 2d context.
   * @param {number} [width] Canvas width.
   * @param {number} [height] Canvas height.
   * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.
   * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings
   * @return {CanvasRenderingContext2D} The context.
   */
  function createCanvasContext2D(width, height, canvasPool, settings) {
    /** @type {HTMLCanvasElement|OffscreenCanvas} */
    let canvas;
    if (canvasPool && canvasPool.length) {
      canvas = canvasPool.shift();
    } else if (WORKER_OFFSCREEN_CANVAS) {
      canvas = new OffscreenCanvas(width || 300, height || 300);
    } else {
      canvas = document.createElement('canvas');
    }
    if (width) {
      canvas.width = width;
    }
    if (height) {
      canvas.height = height;
    }
    //FIXME Allow OffscreenCanvasRenderingContext2D as return type
    return /** @type {CanvasRenderingContext2D} */ (
      canvas.getContext('2d', settings)
    );
  }

  /**
   * Releases canvas memory to avoid exceeding memory limits in Safari.
   * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/
   * @param {CanvasRenderingContext2D} context Context.
   */
  function releaseCanvas$1(context) {
    const canvas = context.canvas;
    canvas.width = 1;
    canvas.height = 1;
    context.clearRect(0, 0, 1, 1);
  }

  /**
   * Get the current computed width for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerWidth(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The width.
   */
  function outerWidth(element) {
    let width = element.offsetWidth;
    const style = getComputedStyle(element);
    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);

    return width;
  }

  /**
   * Get the current computed height for the given element including margin,
   * padding and border.
   * Equivalent to jQuery's `$(el).outerHeight(true)`.
   * @param {!HTMLElement} element Element.
   * @return {number} The height.
   */
  function outerHeight(element) {
    let height = element.offsetHeight;
    const style = getComputedStyle(element);
    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);

    return height;
  }

  /**
   * @param {Node} newNode Node to replace old node
   * @param {Node} oldNode The node to be replaced
   */
  function replaceNode(newNode, oldNode) {
    const parent = oldNode.parentNode;
    if (parent) {
      parent.replaceChild(newNode, oldNode);
    }
  }

  /**
   * @param {Node} node The node to remove.
   * @return {Node|null} The node that was removed or null.
   */
  function removeNode$1(node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
  }

  /**
   * @param {Node} node The node to remove the children from.
   */
  function removeChildren(node) {
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
  }

  /**
   * Transform the children of a parent node so they match the
   * provided list of children.  This function aims to efficiently
   * remove, add, and reorder child nodes while maintaining a simple
   * implementation (it is not guaranteed to minimize DOM operations).
   * @param {Node} node The parent node whose children need reworking.
   * @param {Array<Node>} children The desired children.
   */
  function replaceChildren(node, children) {
    const oldChildren = node.childNodes;

    for (let i = 0; true; ++i) {
      const oldChild = oldChildren[i];
      const newChild = children[i];

      // check if our work is done
      if (!oldChild && !newChild) {
        break;
      }

      // check if children match
      if (oldChild === newChild) {
        continue;
      }

      // check if a new child needs to be added
      if (!oldChild) {
        node.appendChild(newChild);
        continue;
      }

      // check if an old child needs to be removed
      if (!newChild) {
        node.removeChild(oldChild);
        --i;
        continue;
      }

      // reorder
      node.insertBefore(newChild, oldChild);
    }
  }

  /**
   * @module ol/css
   */

  /**
   * @typedef {Object} FontParameters
   * @property {string} style Style.
   * @property {string} variant Variant.
   * @property {string} weight Weight.
   * @property {string} size Size.
   * @property {string} lineHeight LineHeight.
   * @property {string} family Family.
   * @property {Array<string>} families Families.
   */

  /**
   * The CSS class for hidden feature.
   *
   * @const
   * @type {string}
   */
  const CLASS_HIDDEN = 'ol-hidden';

  /**
   * The CSS class that we'll give the DOM elements to have them selectable.
   *
   * @const
   * @type {string}
   */
  const CLASS_SELECTABLE = 'ol-selectable';

  /**
   * The CSS class that we'll give the DOM elements to have them unselectable.
   *
   * @const
   * @type {string}
   */
  const CLASS_UNSELECTABLE = 'ol-unselectable';

  /**
   * The CSS class for unsupported feature.
   *
   * @const
   * @type {string}
   */
  const CLASS_UNSUPPORTED = 'ol-unsupported';

  /**
   * The CSS class for controls.
   *
   * @const
   * @type {string}
   */
  const CLASS_CONTROL = 'ol-control';

  /**
   * The CSS class that we'll give the DOM elements that are collapsed, i.e.
   * to those elements which usually can be expanded.
   *
   * @const
   * @type {string}
   */
  const CLASS_COLLAPSED = 'ol-collapsed';

  /**
   * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
   * @type {RegExp}
   */
  const fontRegEx = new RegExp(
    [
      '^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)',
      '(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)',
      '(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',
      '(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?',
      '(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))',
      '(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))',
      '?\\s*([-,\\"\\\'\\sa-z]+?)\\s*$',
    ].join(''),
    'i'
  );
  const fontRegExMatchIndex = [
    'style',
    'variant',
    'weight',
    'size',
    'lineHeight',
    'family',
  ];

  /**
   * Get the list of font families from a font spec.  Note that this doesn't work
   * for font families that have commas in them.
   * @param {string} fontSpec The CSS font property.
   * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).
   */
  const getFontParameters = function (fontSpec) {
    const match = fontSpec.match(fontRegEx);
    if (!match) {
      return null;
    }
    const style = /** @type {FontParameters} */ ({
      lineHeight: 'normal',
      size: '1.2em',
      style: 'normal',
      weight: 'normal',
      variant: 'normal',
    });
    for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {
      const value = match[i + 1];
      if (value !== undefined) {
        style[fontRegExMatchIndex[i]] = value;
      }
    }
    style.families = style.family.split(/,\s?/);
    return style;
  };

  /**
   * @module ol/render/canvas
   */

  /**
   * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType
   */

  /**
   * @typedef {Object} FillState
   * @property {import("../colorlike.js").ColorLike} fillStyle FillStyle.
   */

  /**
   * @typedef Label
   * @property {number} width Width.
   * @property {number} height Height.
   * @property {Array<string|number>} contextInstructions ContextInstructions.
   */

  /**
   * @typedef {Object} FillStrokeState
   * @property {import("../colorlike.js").ColorLike} [currentFillStyle] Current FillStyle.
   * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle] Current StrokeStyle.
   * @property {CanvasLineCap} [currentLineCap] Current LineCap.
   * @property {Array<number>} currentLineDash Current LineDash.
   * @property {number} [currentLineDashOffset] Current LineDashOffset.
   * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.
   * @property {number} [currentLineWidth] Current LineWidth.
   * @property {number} [currentMiterLimit] Current MiterLimit.
   * @property {number} [lastStroke] Last stroke.
   * @property {import("../colorlike.js").ColorLike} [fillStyle] FillStyle.
   * @property {import("../colorlike.js").ColorLike} [strokeStyle] StrokeStyle.
   * @property {CanvasLineCap} [lineCap] LineCap.
   * @property {Array<number>} lineDash LineDash.
   * @property {number} [lineDashOffset] LineDashOffset.
   * @property {CanvasLineJoin} [lineJoin] LineJoin.
   * @property {number} [lineWidth] LineWidth.
   * @property {number} [miterLimit] MiterLimit.
   */

  /**
   * @typedef {Object} StrokeState
   * @property {CanvasLineCap} lineCap LineCap.
   * @property {Array<number>} lineDash LineDash.
   * @property {number} lineDashOffset LineDashOffset.
   * @property {CanvasLineJoin} lineJoin LineJoin.
   * @property {number} lineWidth LineWidth.
   * @property {number} miterLimit MiterLimit.
   * @property {import("../colorlike.js").ColorLike} strokeStyle StrokeStyle.
   */

  /**
   * @typedef {Object} TextState
   * @property {string} font Font.
   * @property {CanvasTextAlign} [textAlign] TextAlign.
   * @property {number} [repeat] Repeat.
   * @property {import("../style/Text.js").TextJustify} [justify] Justify.
   * @property {CanvasTextBaseline} textBaseline TextBaseline.
   * @property {import("../style/Text.js").TextPlacement} [placement] Placement.
   * @property {number} [maxAngle] MaxAngle.
   * @property {boolean} [overflow] Overflow.
   * @property {import("../style/Fill.js").default} [backgroundFill] BackgroundFill.
   * @property {import("../style/Stroke.js").default} [backgroundStroke] BackgroundStroke.
   * @property {import("../size.js").Size} [scale] Scale.
   * @property {Array<number>} [padding] Padding.
   */

  /**
   * @typedef {Object} SerializableInstructions
   * @property {Array<*>} instructions The rendering instructions.
   * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
   * @property {Array<number>} coordinates The array of all coordinates.
   * @property {!Object<string, TextState>} [textStates] The text states (decluttering).
   * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).
   * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).
   */

  /**
   * @typedef {Object<number, import("./canvas/Executor.js").ReplayImageOrLabelArgs>} DeclutterImageWithText
   */

  /**
   * @const
   * @type {string}
   */
  const defaultFont = '10px sans-serif';

  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  const defaultFillStyle = '#000';

  /**
   * @const
   * @type {CanvasLineCap}
   */
  const defaultLineCap = 'round';

  /**
   * @const
   * @type {Array<number>}
   */
  const defaultLineDash = [];

  /**
   * @const
   * @type {number}
   */
  const defaultLineDashOffset = 0;

  /**
   * @const
   * @type {CanvasLineJoin}
   */
  const defaultLineJoin = 'round';

  /**
   * @const
   * @type {number}
   */
  const defaultMiterLimit = 10;

  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  const defaultStrokeStyle = '#000';

  /**
   * @const
   * @type {CanvasTextAlign}
   */
  const defaultTextAlign = 'center';

  /**
   * @const
   * @type {CanvasTextBaseline}
   */
  const defaultTextBaseline = 'middle';

  /**
   * @const
   * @type {Array<number>}
   */
  const defaultPadding = [0, 0, 0, 0];

  /**
   * @const
   * @type {number}
   */
  const defaultLineWidth = 1;

  /**
   * @type {BaseObject}
   */
  const checkedFonts = new olObject();

  /**
   * @type {CanvasRenderingContext2D}
   */
  let measureContext$1 = null;

  /**
   * @type {string}
   */
  let measureFont;

  /**
   * @type {!Object<string, number>}
   */
  const textHeights = {};

  /**
   * Clears the label cache when a font becomes available.
   * @param {string} fontSpec CSS font spec.
   */
  const registerFont = (function () {
    const retries = 100;
    const size = '32px ';
    const referenceFonts = ['monospace', 'serif'];
    const len = referenceFonts.length;
    const text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
    let interval, referenceWidth;

    /**
     * @param {string} fontStyle Css font-style
     * @param {string} fontWeight Css font-weight
     * @param {*} fontFamily Css font-family
     * @return {boolean} Font with style and weight is available
     */
    function isAvailable(fontStyle, fontWeight, fontFamily) {
      let available = true;
      for (let i = 0; i < len; ++i) {
        const referenceFont = referenceFonts[i];
        referenceWidth = measureTextWidth(
          fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,
          text
        );
        if (fontFamily != referenceFont) {
          const width = measureTextWidth(
            fontStyle +
              ' ' +
              fontWeight +
              ' ' +
              size +
              fontFamily +
              ',' +
              referenceFont,
            text
          );
          // If width and referenceWidth are the same, then the fallback was used
          // instead of the font we wanted, so the font is not available.
          available = available && width != referenceWidth;
        }
      }
      if (available) {
        return true;
      }
      return false;
    }

    function check() {
      let done = true;
      const fonts = checkedFonts.getKeys();
      for (let i = 0, ii = fonts.length; i < ii; ++i) {
        const font = fonts[i];
        if (checkedFonts.get(font) < retries) {
          if (isAvailable.apply(this, font.split('\n'))) {
            clear$2(textHeights);
            // Make sure that loaded fonts are picked up by Safari
            measureContext$1 = null;
            measureFont = undefined;
            checkedFonts.set(font, retries);
          } else {
            checkedFonts.set(font, checkedFonts.get(font) + 1, true);
            done = false;
          }
        }
      }
      if (done) {
        clearInterval(interval);
        interval = undefined;
      }
    }

    return function (fontSpec) {
      const font = getFontParameters(fontSpec);
      if (!font) {
        return;
      }
      const families = font.families;
      for (let i = 0, ii = families.length; i < ii; ++i) {
        const family = families[i];
        const key = font.style + '\n' + font.weight + '\n' + family;
        if (checkedFonts.get(key) === undefined) {
          checkedFonts.set(key, retries, true);
          if (!isAvailable(font.style, font.weight, family)) {
            checkedFonts.set(key, 0, true);
            if (interval === undefined) {
              interval = setInterval(check, 32);
            }
          }
        }
      }
    };
  })();

  /**
   * @param {string} font Font to use for measuring.
   * @return {import("../size.js").Size} Measurement.
   */
  const measureTextHeight = (function () {
    /**
     * @type {HTMLDivElement}
     */
    let measureElement;
    return function (fontSpec) {
      let height = textHeights[fontSpec];
      if (height == undefined) {
        if (WORKER_OFFSCREEN_CANVAS) {
          const font = getFontParameters(fontSpec);
          const metrics = measureText$1(fontSpec, 'Žg');
          const lineHeight = isNaN(Number(font.lineHeight))
            ? 1.2
            : Number(font.lineHeight);
          height =
            lineHeight *
            (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
        } else {
          if (!measureElement) {
            measureElement = document.createElement('div');
            measureElement.innerHTML = 'M';
            measureElement.style.minHeight = '0';
            measureElement.style.maxHeight = 'none';
            measureElement.style.height = 'auto';
            measureElement.style.padding = '0';
            measureElement.style.border = 'none';
            measureElement.style.position = 'absolute';
            measureElement.style.display = 'block';
            measureElement.style.left = '-99999px';
          }
          measureElement.style.font = fontSpec;
          document.body.appendChild(measureElement);
          height = measureElement.offsetHeight;
          document.body.removeChild(measureElement);
        }
        textHeights[fontSpec] = height;
      }
      return height;
    };
  })();

  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {TextMetrics} Text metrics.
   */
  function measureText$1(font, text) {
    if (!measureContext$1) {
      measureContext$1 = createCanvasContext2D(1, 1);
    }
    if (font != measureFont) {
      measureContext$1.font = font;
      measureFont = measureContext$1.font;
    }
    return measureContext$1.measureText(text);
  }

  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {number} Width.
   */
  function measureTextWidth(font, text) {
    return measureText$1(font, text).width;
  }

  /**
   * Measure text width using a cache.
   * @param {string} font The font.
   * @param {string} text The text to measure.
   * @param {Object<string, number>} cache A lookup of cached widths by text.
   * @return {number} The text width.
   */
  function measureAndCacheTextWidth(font, text, cache) {
    if (text in cache) {
      return cache[text];
    }
    const width = text
      .split('\n')
      .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);
    cache[text] = width;
    return width;
  }

  /**
   * @param {TextState} baseStyle Base style.
   * @param {Array<string>} chunks Text chunks to measure.
   * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.
   */
  function getTextDimensions(baseStyle, chunks) {
    const widths = [];
    const heights = [];
    const lineWidths = [];
    let width = 0;
    let lineWidth = 0;
    let height = 0;
    let lineHeight = 0;
    for (let i = 0, ii = chunks.length; i <= ii; i += 2) {
      const text = chunks[i];
      if (text === '\n' || i === ii) {
        width = Math.max(width, lineWidth);
        lineWidths.push(lineWidth);
        lineWidth = 0;
        height += lineHeight;
        continue;
      }
      const font = chunks[i + 1] || baseStyle.font;
      const currentWidth = measureTextWidth(font, text);
      widths.push(currentWidth);
      lineWidth += currentWidth;
      const currentHeight = measureTextHeight(font);
      heights.push(currentHeight);
      lineHeight = Math.max(lineHeight, currentHeight);
    }
    return {width, height, widths, heights, lineWidths};
  }

  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../transform.js").Transform|null} transform Transform.
   * @param {number} opacity Opacity.
   * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} w Width.
   * @param {number} h Height.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {import("../size.js").Size} scale Scale.
   */
  function drawImageOrLabel(
    context,
    transform,
    opacity,
    labelOrImage,
    originX,
    originY,
    w,
    h,
    x,
    y,
    scale
  ) {
    context.save();

    if (opacity !== 1) {
      context.globalAlpha *= opacity;
    }
    if (transform) {
      context.setTransform.apply(context, transform);
    }

    if (/** @type {*} */ (labelOrImage).contextInstructions) {
      // label
      context.translate(x, y);
      context.scale(scale[0], scale[1]);
      executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);
    } else if (scale[0] < 0 || scale[1] < 0) {
      // flipped image
      context.translate(x, y);
      context.scale(scale[0], scale[1]);
      context.drawImage(
        /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (
          labelOrImage
        ),
        originX,
        originY,
        w,
        h,
        0,
        0,
        w,
        h
      );
    } else {
      // if image not flipped translate and scale can be avoided
      context.drawImage(
        /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (
          labelOrImage
        ),
        originX,
        originY,
        w,
        h,
        x,
        y,
        w * scale[0],
        h * scale[1]
      );
    }

    context.restore();
  }

  /**
   * @param {Label} label Label.
   * @param {CanvasRenderingContext2D} context Context.
   */
  function executeLabelInstructions(label, context) {
    const contextInstructions = label.contextInstructions;
    for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {
      if (Array.isArray(contextInstructions[i + 1])) {
        context[contextInstructions[i]].apply(
          context,
          contextInstructions[i + 1]
        );
      } else {
        context[contextInstructions[i]] = contextInstructions[i + 1];
      }
    }
  }

  /**
   * @module ol/style/RegularShape
   */

  /**
   * Specify radius for regular polygons, or radius1 and radius2 for stars.
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {number} [radius] Radius of a regular polygon.
   * @property {number} [radius1] First radius of a star. Ignored if radius is set.
   * @property {number} [radius2] Second radius of a star.
   * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.
   * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.
   * Positive values will shift the shape right and up.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
   * @property {number|import("../size.js").Size} [scale=1] Scale. Unless two dimensional scaling is required a better
   * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.
   * @property {"declutter"|"obstacle"|"none"|undefined} [declutterMode] Declutter mode.
   */

  /**
   * @typedef {Object} RenderOptions
   * @property {import("../colorlike.js").ColorLike} [strokeStyle] StrokeStyle.
   * @property {number} strokeWidth StrokeWidth.
   * @property {number} size Size.
   * @property {Array<number>|null} lineDash LineDash.
   * @property {number} lineDashOffset LineDashOffset.
   * @property {CanvasLineJoin} lineJoin LineJoin.
   * @property {number} miterLimit MiterLimit.
   */

  /**
   * @classdesc
   * Set regular shape style for vector features. The resulting shape will be
   * a regular polygon when `radius` is provided, or a star when `radius1` and
   * `radius2` are provided.
   * @api
   */
  class RegularShape extends ImageStyle$1 {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      /**
       * @type {boolean}
       */
      const rotateWithView =
        options.rotateWithView !== undefined ? options.rotateWithView : false;

      super({
        opacity: 1,
        rotateWithView: rotateWithView,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        scale: options.scale !== undefined ? options.scale : 1,
        displacement:
          options.displacement !== undefined ? options.displacement : [0, 0],
        declutterMode: options.declutterMode,
      });

      /**
       * @private
       * @type {Object<number, HTMLCanvasElement>}
       */
      this.canvas_ = undefined;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.hitDetectionCanvas_ = null;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.points_ = options.points;

      /**
       * @protected
       * @type {number}
       */
      this.radius_ =
        options.radius !== undefined ? options.radius : options.radius1;

      /**
       * @private
       * @type {number|undefined}
       */
      this.radius2_ = options.radius2;

      /**
       * @private
       * @type {number}
       */
      this.angle_ = options.angle !== undefined ? options.angle : 0;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = null;

      /**
       * @private
       * @type {RenderOptions}
       */
      this.renderOptions_ = null;

      this.render();
    }

    /**
     * Clones the style.
     * @return {RegularShape} The cloned style.
     * @api
     */
    clone() {
      const scale = this.getScale();
      const style = new RegularShape({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        points: this.getPoints(),
        radius: this.getRadius(),
        radius2: this.getRadius2(),
        angle: this.getAngle(),
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
      style.setOpacity(this.getOpacity());
      return style;
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @return {Array<number>} Anchor.
     * @api
     */
    getAnchor() {
      const size = this.size_;
      if (!size) {
        return null;
      }
      const displacement = this.getDisplacement();
      const scale = this.getScaleArray();
      // anchor is scaled by renderer but displacement should not be scaled
      // so divide by scale here
      return [
        size[0] / 2 - displacement[0] / scale[0],
        size[1] / 2 + displacement[1] / scale[1],
      ];
    }

    /**
     * Get the angle used in generating the shape.
     * @return {number} Shape's rotation in radians.
     * @api
     */
    getAngle() {
      return this.angle_;
    }

    /**
     * Get the fill style for the shape.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Set the fill style.
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
      this.render();
    }

    /**
     * @return {HTMLCanvasElement} Image element.
     */
    getHitDetectionImage() {
      if (!this.hitDetectionCanvas_) {
        this.createHitDetectionCanvas_(this.renderOptions_);
      }
      return this.hitDetectionCanvas_;
    }

    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLCanvasElement} Image or Canvas element.
     * @api
     */
    getImage(pixelRatio) {
      let image = this.canvas_[pixelRatio];
      if (!image) {
        const renderOptions = this.renderOptions_;
        const context = createCanvasContext2D(
          renderOptions.size * pixelRatio,
          renderOptions.size * pixelRatio
        );
        this.draw_(renderOptions, context, pixelRatio);

        image = context.canvas;
        this.canvas_[pixelRatio] = image;
      }
      return image;
    }

    /**
     * Get the image pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel ratio.
     */
    getPixelRatio(pixelRatio) {
      return pixelRatio;
    }

    /**
     * @return {import("../size.js").Size} Image size.
     */
    getImageSize() {
      return this.size_;
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return ImageState.LOADED;
    }

    /**
     * Get the origin of the symbolizer.
     * @return {Array<number>} Origin.
     * @api
     */
    getOrigin() {
      return this.origin_;
    }

    /**
     * Get the number of points for generating the shape.
     * @return {number} Number of points for stars and regular polygons.
     * @api
     */
    getPoints() {
      return this.points_;
    }

    /**
     * Get the (primary) radius for the shape.
     * @return {number} Radius.
     * @api
     */
    getRadius() {
      return this.radius_;
    }

    /**
     * Get the secondary radius for the shape.
     * @return {number|undefined} Radius2.
     * @api
     */
    getRadius2() {
      return this.radius2_;
    }

    /**
     * Get the size of the symbolizer (in pixels).
     * @return {import("../size.js").Size} Size.
     * @api
     */
    getSize() {
      return this.size_;
    }

    /**
     * Get the stroke style for the shape.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Set the stroke style.
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
      this.render();
    }

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    listenImageChange(listener) {}

    /**
     * Load not yet loaded URI.
     */
    load() {}

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    unlistenImageChange(listener) {}

    /**
     * Calculate additional canvas size needed for the miter.
     * @param {string} lineJoin Line join
     * @param {number} strokeWidth Stroke width
     * @param {number} miterLimit Miter limit
     * @return {number} Additional canvas size needed
     * @private
     */
    calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {
      if (
        strokeWidth === 0 ||
        this.points_ === Infinity ||
        (lineJoin !== 'bevel' && lineJoin !== 'miter')
      ) {
        return strokeWidth;
      }
      // m  | ^
      // i  | |\                  .
      // t >|  #\
      // e  | |\ \              .
      // r      \s\
      //      |  \t\          .                 .
      //          \r\                      .   .
      //      |    \o\      .          .  . . .
      //          e \k\            .  .    . .
      //      |      \e\  .    .  .       . .
      //       d      \ \  .  .          . .
      //      | _ _a_ _\#  .            . .
      //   r1          / `             . .
      //      |                       . .
      //       b     /               . .
      //      |                     . .
      //           / r2            . .
      //      |                        .   .
      //         /                           .   .
      //      |α                                   .   .
      //       /                                         .   .
      //      ° center
      let r1 = this.radius_;
      let r2 = this.radius2_ === undefined ? r1 : this.radius2_;
      if (r1 < r2) {
        const tmp = r1;
        r1 = r2;
        r2 = tmp;
      }
      const points =
        this.radius2_ === undefined ? this.points_ : this.points_ * 2;
      const alpha = (2 * Math.PI) / points;
      const a = r2 * Math.sin(alpha);
      const b = Math.sqrt(r2 * r2 - a * a);
      const d = r1 - b;
      const e = Math.sqrt(a * a + d * d);
      const miterRatio = e / a;
      if (lineJoin === 'miter' && miterRatio <= miterLimit) {
        return miterRatio * strokeWidth;
      }
      // Calculate the distnce from center to the stroke corner where
      // it was cut short because of the miter limit.
      //              l
      //        ----+---- <= distance from center to here is maxr
      //       /####|k ##\
      //      /#####^#####\
      //     /#### /+\# s #\
      //    /### h/+++\# t #\
      //   /### t/+++++\# r #\
      //  /### a/+++++++\# o #\
      // /### p/++ fill +\# k #\
      ///#### /+++++^+++++\# e #\
      //#####/+++++/+\+++++\#####\
      const k = strokeWidth / 2 / miterRatio;
      const l = (strokeWidth / 2) * (d / e);
      const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);
      const bevelAdd = maxr - r1;
      if (this.radius2_ === undefined || lineJoin === 'bevel') {
        return bevelAdd * 2;
      }
      // If outer miter is over the miter limit the inner miter may reach through the
      // center and be longer than the bevel, same calculation as above but swap r1 / r2.
      const aa = r1 * Math.sin(alpha);
      const bb = Math.sqrt(r1 * r1 - aa * aa);
      const dd = r2 - bb;
      const ee = Math.sqrt(aa * aa + dd * dd);
      const innerMiterRatio = ee / aa;
      if (innerMiterRatio <= miterLimit) {
        const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;
        return 2 * Math.max(bevelAdd, innerLength);
      }
      return bevelAdd * 2;
    }

    /**
     * @return {RenderOptions}  The render options
     * @protected
     */
    createRenderOptions() {
      let lineJoin = defaultLineJoin;
      let miterLimit = 0;
      let lineDash = null;
      let lineDashOffset = 0;
      let strokeStyle;
      let strokeWidth = 0;

      if (this.stroke_) {
        strokeStyle = this.stroke_.getColor();
        if (strokeStyle === null) {
          strokeStyle = defaultStrokeStyle;
        }
        strokeStyle = asColorLike(strokeStyle);
        strokeWidth = this.stroke_.getWidth();
        if (strokeWidth === undefined) {
          strokeWidth = defaultLineWidth;
        }
        lineDash = this.stroke_.getLineDash();
        lineDashOffset = this.stroke_.getLineDashOffset();
        lineJoin = this.stroke_.getLineJoin();
        if (lineJoin === undefined) {
          lineJoin = defaultLineJoin;
        }
        miterLimit = this.stroke_.getMiterLimit();
        if (miterLimit === undefined) {
          miterLimit = defaultMiterLimit;
        }
      }

      const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);
      const maxRadius = Math.max(this.radius_, this.radius2_ || 0);
      const size = Math.ceil(2 * maxRadius + add);

      return {
        strokeStyle: strokeStyle,
        strokeWidth: strokeWidth,
        size: size,
        lineDash: lineDash,
        lineDashOffset: lineDashOffset,
        lineJoin: lineJoin,
        miterLimit: miterLimit,
      };
    }

    /**
     * @protected
     */
    render() {
      this.renderOptions_ = this.createRenderOptions();
      const size = this.renderOptions_.size;
      this.canvas_ = {};
      this.size_ = [size, size];
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The rendering context.
     * @param {number} pixelRatio The pixel ratio.
     */
    draw_(renderOptions, context, pixelRatio) {
      context.scale(pixelRatio, pixelRatio);
      // set origin to canvas center
      context.translate(renderOptions.size / 2, renderOptions.size / 2);

      this.createPath_(context);

      if (this.fill_) {
        let color = this.fill_.getColor();
        if (color === null) {
          color = defaultFillStyle;
        }
        context.fillStyle = asColorLike(color);
        context.fill();
      }
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineJoin = renderOptions.lineJoin;
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     */
    createHitDetectionCanvas_(renderOptions) {
      if (this.fill_) {
        let color = this.fill_.getColor();

        // determine if fill is transparent (or pattern or gradient)
        let opacity = 0;
        if (typeof color === 'string') {
          color = asArray(color);
        }
        if (color === null) {
          opacity = 1;
        } else if (Array.isArray(color)) {
          opacity = color.length === 4 ? color[3] : 1;
        }
        if (opacity === 0) {
          // if a transparent fill style is set, create an extra hit-detection image
          // with a default fill style
          const context = createCanvasContext2D(
            renderOptions.size,
            renderOptions.size
          );
          this.hitDetectionCanvas_ = context.canvas;

          this.drawHitDetectionCanvas_(renderOptions, context);
        }
      }
      if (!this.hitDetectionCanvas_) {
        this.hitDetectionCanvas_ = this.getImage(1);
      }
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context The context to draw in.
     */
    createPath_(context) {
      let points = this.points_;
      const radius = this.radius_;
      if (points === Infinity) {
        context.arc(0, 0, radius, 0, 2 * Math.PI);
      } else {
        const radius2 = this.radius2_ === undefined ? radius : this.radius2_;
        if (this.radius2_ !== undefined) {
          points *= 2;
        }
        const startAngle = this.angle_ - Math.PI / 2;
        const step = (2 * Math.PI) / points;
        for (let i = 0; i < points; i++) {
          const angle0 = startAngle + i * step;
          const radiusC = i % 2 === 0 ? radius : radius2;
          context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));
        }
        context.closePath();
      }
    }

    /**
     * @private
     * @param {RenderOptions} renderOptions Render options.
     * @param {CanvasRenderingContext2D} context The context.
     */
    drawHitDetectionCanvas_(renderOptions, context) {
      // set origin to canvas center
      context.translate(renderOptions.size / 2, renderOptions.size / 2);

      this.createPath_(context);

      context.fillStyle = defaultFillStyle;
      context.fill();
      if (this.stroke_) {
        context.strokeStyle = renderOptions.strokeStyle;
        context.lineWidth = renderOptions.strokeWidth;
        if (renderOptions.lineDash) {
          context.setLineDash(renderOptions.lineDash);
          context.lineDashOffset = renderOptions.lineDashOffset;
        }
        context.lineJoin = renderOptions.lineJoin;
        context.miterLimit = renderOptions.miterLimit;
        context.stroke();
      }
    }
  }

  var RegularShape$1 = RegularShape;

  /**
   * @module ol/style/Circle
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} radius Circle radius.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {Array<number>} [displacement=[0,0]] displacement
   * @property {number|import("../size.js").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.
   * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.
   * @property {number} [rotation=0] Rotation in radians
   * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view
   * (meaningful only when used in conjunction with a two dimensional scale).
   * @property {"declutter"|"obstacle"|"none"|undefined} [declutterMode] Declutter mode
   */

  /**
   * @classdesc
   * Set circle style for vector features.
   * @api
   */
  class CircleStyle extends RegularShape$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {radius: 5};

      super({
        points: Infinity,
        fill: options.fill,
        radius: options.radius,
        stroke: options.stroke,
        scale: options.scale !== undefined ? options.scale : 1,
        rotation: options.rotation !== undefined ? options.rotation : 0,
        rotateWithView:
          options.rotateWithView !== undefined ? options.rotateWithView : false,
        displacement:
          options.displacement !== undefined ? options.displacement : [0, 0],
        declutterMode: options.declutterMode,
      });
    }

    /**
     * Clones the style.
     * @return {CircleStyle} The cloned style.
     * @api
     */
    clone() {
      const scale = this.getScale();
      const style = new CircleStyle({
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        radius: this.getRadius(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
      });
      style.setOpacity(this.getOpacity());
      return style;
    }

    /**
     * Set the circle radius.
     *
     * @param {number} radius Circle radius.
     * @api
     */
    setRadius(radius) {
      this.radius_ = radius;
      this.render();
    }
  }

  var Circle$2 = CircleStyle;

  /**
   * @module ol/style/Style
   */

  /**
   * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`
   * representing the view's resolution. The function should return a
   * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a
   * vector layer can be styled. If the function returns `undefined`, the
   * feature will not be rendered.
   *
   * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
   */

  /**
   * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
   * @typedef {Style|Array<Style>|StyleFunction} StyleLike
   */

  /**
   * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an
   * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.
   *
   * @typedef {function(import("../Feature.js").FeatureLike):
   *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
   */

  /**
   * Custom renderer function. Takes two arguments:
   *
   * 1. The pixel coordinates of the geometry in GeoJSON notation.
   * 2. The {@link module:ol/render~State} of the layer renderer.
   *
   * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void} RenderFunction
   */

  /**
   * @typedef {Object} Options
   * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
   * or function returning a geometry to render for this style.
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {import("./Image.js").default} [image] Image style.
   * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
   * ignored, and the provided function will be called with each render frame for each geometry.
   * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used
   * in hit detection rendering.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Text.js").default} [text] Text style.
   * @property {number} [zIndex] Z index.
   */

  /**
   * @classdesc
   * Container for vector feature rendering styles. Any changes made to the style
   * or its children through `set*()` methods will not take effect until the
   * feature or layer that uses the style is re-rendered.
   *
   * ## Feature styles
   *
   * If no style is defined, the following default style is used:
   * ```js
   *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';
   *
   *  const fill = new Fill({
   *    color: 'rgba(255,255,255,0.4)',
   *  });
   *  const stroke = new Stroke({
   *    color: '#3399CC',
   *    width: 1.25,
   *  });
   *  const styles = [
   *    new Style({
   *      image: new Circle({
   *        fill: fill,
   *        stroke: stroke,
   *        radius: 5,
   *      }),
   *      fill: fill,
   *      stroke: stroke,
   *    }),
   *  ];
   * ```
   *
   * A separate editing style has the following defaults:
   * ```js
   *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';
   *
   *  const styles = {};
   *  const white = [255, 255, 255, 1];
   *  const blue = [0, 153, 255, 1];
   *  const width = 3;
   *  styles['Polygon'] = [
   *    new Style({
   *      fill: new Fill({
   *        color: [255, 255, 255, 0.5],
   *      }),
   *    }),
   *  ];
   *  styles['MultiPolygon'] =
   *      styles['Polygon'];
   *  styles['LineString'] = [
   *    new Style({
   *      stroke: new Stroke({
   *        color: white,
   *        width: width + 2,
   *      }),
   *    }),
   *    new Style({
   *      stroke: new Stroke({
   *        color: blue,
   *        width: width,
   *      }),
   *    }),
   *  ];
   *  styles['MultiLineString'] = styles['LineString'];
   *
   *  styles['Circle'] = styles['Polygon'].concat(
   *    styles['LineString']
   *  );
   *
   *  styles['Point'] = [
   *    new Style({
   *      image: new Circle({
   *        radius: width * 2,
   *        fill: new Fill({
   *          color: blue,
   *        }),
   *        stroke: new Stroke({
   *          color: white,
   *          width: width / 2,
   *        }),
   *      }),
   *      zIndex: Infinity,
   *    }),
   *  ];
   *  styles['MultiPoint'] =
   *      styles['Point'];
   *  styles['GeometryCollection'] =
   *      styles['Polygon'].concat(
   *          styles['LineString'],
   *          styles['Point']
   *      );
   * ```
   *
   * @api
   */
  class Style {
    /**
     * @param {Options} [options] Style options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
       */
      this.geometry_ = null;

      /**
       * @private
       * @type {!GeometryFunction}
       */
      this.geometryFunction_ = defaultGeometryFunction;

      if (options.geometry !== undefined) {
        this.setGeometry(options.geometry);
      }

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ = options.fill !== undefined ? options.fill : null;

      /**
       * @private
       * @type {import("./Image.js").default}
       */
      this.image_ = options.image !== undefined ? options.image : null;

      /**
       * @private
       * @type {RenderFunction|null}
       */
      this.renderer_ = options.renderer !== undefined ? options.renderer : null;

      /**
       * @private
       * @type {RenderFunction|null}
       */
      this.hitDetectionRenderer_ =
        options.hitDetectionRenderer !== undefined
          ? options.hitDetectionRenderer
          : null;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {import("./Text.js").default}
       */
      this.text_ = options.text !== undefined ? options.text : null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.zIndex_ = options.zIndex;
    }

    /**
     * Clones the style.
     * @return {Style} The cloned style.
     * @api
     */
    clone() {
      let geometry = this.getGeometry();
      if (geometry && typeof geometry === 'object') {
        geometry = /** @type {import("../geom/Geometry.js").default} */ (
          geometry
        ).clone();
      }
      return new Style({
        geometry: geometry,
        fill: this.getFill() ? this.getFill().clone() : undefined,
        image: this.getImage() ? this.getImage().clone() : undefined,
        renderer: this.getRenderer(),
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        text: this.getText() ? this.getText().clone() : undefined,
        zIndex: this.getZIndex(),
      });
    }

    /**
     * Get the custom renderer function that was configured with
     * {@link #setRenderer} or the `renderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */
    getRenderer() {
      return this.renderer_;
    }

    /**
     * Sets a custom renderer function for this style. When set, `fill`, `stroke`
     * and `image` options of the style will be ignored.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */
    setRenderer(renderer) {
      this.renderer_ = renderer;
    }

    /**
     * Sets a custom renderer function for this style used
     * in hit detection.
     * @param {RenderFunction|null} renderer Custom renderer function.
     * @api
     */
    setHitDetectionRenderer(renderer) {
      this.hitDetectionRenderer_ = renderer;
    }

    /**
     * Get the custom renderer function that was configured with
     * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.
     * @return {RenderFunction|null} Custom renderer function.
     * @api
     */
    getHitDetectionRenderer() {
      return this.hitDetectionRenderer_;
    }

    /**
     * Get the geometry to be rendered.
     * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
     * Feature property or geometry or function that returns the geometry that will
     * be rendered with this style.
     * @api
     */
    getGeometry() {
      return this.geometry_;
    }

    /**
     * Get the function used to generate a geometry for rendering.
     * @return {!GeometryFunction} Function that is called with a feature
     * and returns the geometry to render instead of the feature's geometry.
     * @api
     */
    getGeometryFunction() {
      return this.geometryFunction_;
    }

    /**
     * Get the fill style.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Set the fill style.
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
    }

    /**
     * Get the image style.
     * @return {import("./Image.js").default} Image style.
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * Set the image style.
     * @param {import("./Image.js").default} image Image style.
     * @api
     */
    setImage(image) {
      this.image_ = image;
    }

    /**
     * Get the stroke style.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Set the stroke style.
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
    }

    /**
     * Get the text style.
     * @return {import("./Text.js").default} Text style.
     * @api
     */
    getText() {
      return this.text_;
    }

    /**
     * Set the text style.
     * @param {import("./Text.js").default} text Text style.
     * @api
     */
    setText(text) {
      this.text_ = text;
    }

    /**
     * Get the z-index for the style.
     * @return {number|undefined} ZIndex.
     * @api
     */
    getZIndex() {
      return this.zIndex_;
    }

    /**
     * Set a geometry that is rendered instead of the feature's geometry.
     *
     * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
     *     Feature property or geometry or function returning a geometry to render
     *     for this style.
     * @api
     */
    setGeometry(geometry) {
      if (typeof geometry === 'function') {
        this.geometryFunction_ = geometry;
      } else if (typeof geometry === 'string') {
        this.geometryFunction_ = function (feature) {
          return /** @type {import("../geom/Geometry.js").default} */ (
            feature.get(geometry)
          );
        };
      } else if (!geometry) {
        this.geometryFunction_ = defaultGeometryFunction;
      } else if (geometry !== undefined) {
        this.geometryFunction_ = function () {
          return /** @type {import("../geom/Geometry.js").default} */ (geometry);
        };
      }
      this.geometry_ = geometry;
    }

    /**
     * Set the z-index.
     *
     * @param {number|undefined} zIndex ZIndex.
     * @api
     */
    setZIndex(zIndex) {
      this.zIndex_ = zIndex;
    }
  }

  /**
   * Convert the provided object into a style function.  Functions passed through
   * unchanged.  Arrays of Style or single style objects wrapped in a
   * new style function.
   * @param {StyleFunction|Array<Style>|Style} obj
   *     A style function, a single style, or an array of styles.
   * @return {StyleFunction} A style function.
   */
  function toFunction(obj) {
    let styleFunction;

    if (typeof obj === 'function') {
      styleFunction = obj;
    } else {
      /**
       * @type {Array<Style>}
       */
      let styles;
      if (Array.isArray(obj)) {
        styles = obj;
      } else {
        assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`
        const style = /** @type {Style} */ (obj);
        styles = [style];
      }
      styleFunction = function () {
        return styles;
      };
    }
    return styleFunction;
  }

  /**
   * @type {Array<Style>|null}
   */
  let defaultStyles = null;

  /**
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} resolution Resolution.
   * @return {Array<Style>} Style.
   */
  function createDefaultStyle(feature, resolution) {
    // We don't use an immediately-invoked function
    // and a closure so we don't get an error at script evaluation time in
    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
    // canvas.getContext('2d') at construction time, which will cause an.error
    // in such browsers.)
    if (!defaultStyles) {
      const fill = new Fill$1({
        color: 'rgba(255,255,255,0.4)',
      });
      const stroke = new Stroke$1({
        color: '#3399CC',
        width: 1.25,
      });
      defaultStyles = [
        new Style({
          image: new Circle$2({
            fill: fill,
            stroke: stroke,
            radius: 5,
          }),
          fill: fill,
          stroke: stroke,
        }),
      ];
    }
    return defaultStyles;
  }

  /**
   * Default styles for editing features.
   * @return {Object<import("../geom/Geometry.js").Type, Array<Style>>} Styles
   */
  function createEditingStyle() {
    /** @type {Object<import("../geom/Geometry.js").Type, Array<Style>>} */
    const styles = {};
    const white = [255, 255, 255, 1];
    const blue = [0, 153, 255, 1];
    const width = 3;
    styles['Polygon'] = [
      new Style({
        fill: new Fill$1({
          color: [255, 255, 255, 0.5],
        }),
      }),
    ];
    styles['MultiPolygon'] = styles['Polygon'];

    styles['LineString'] = [
      new Style({
        stroke: new Stroke$1({
          color: white,
          width: width + 2,
        }),
      }),
      new Style({
        stroke: new Stroke$1({
          color: blue,
          width: width,
        }),
      }),
    ];
    styles['MultiLineString'] = styles['LineString'];

    styles['Circle'] = styles['Polygon'].concat(styles['LineString']);

    styles['Point'] = [
      new Style({
        image: new Circle$2({
          radius: width * 2,
          fill: new Fill$1({
            color: blue,
          }),
          stroke: new Stroke$1({
            color: white,
            width: width / 2,
          }),
        }),
        zIndex: Infinity,
      }),
    ];
    styles['MultiPoint'] = styles['Point'];

    styles['GeometryCollection'] = styles['Polygon'].concat(
      styles['LineString'],
      styles['Point']
    );

    return styles;
  }

  /**
   * Function that is called with a feature and returns its default geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
   * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
   */
  function defaultGeometryFunction(feature) {
    return feature.getGeometry();
  }

  var Style$1 = Style;

  /**
   * @module ol/style/Text
   */

  /**
   * @typedef {'point' | 'line'} TextPlacement
   * Default text placement is `'point'`. Note that
   * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
   * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
   * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
   */

  /**
   * @typedef {'left' | 'center' | 'right'} TextJustify
   */

  /**
   * The default fill color to use if no fill was set at construction time; a
   * blackish `#333`.
   *
   * @const {string}
   */
  const DEFAULT_FILL_COLOR = '#333';

  /**
   * @typedef {Object} Options
   * @property {string} [font] Font style as CSS `font` value, see:
   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`
   * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
   * The expected value is in radians, and the default is 45° (`Math.PI / 4`).
   * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
   * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
   * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
   * the width of the polygon at the label position or the length of the path that it follows.
   * @property {TextPlacement} [placement='point'] Text placement.
   * @property {number} [repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available
   * when `placement` is set to `'line'`. Overrides 'textAlign'.
   * @property {number|import("../size.js").Size} [scale] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can
   * contain line breaks (`\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to
   * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\n', ''`).
   * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield "**foo** *bar* baz".
   * **Note:** Rich text is not supported for the immediate rendering API.
   * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.
   * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
   * placement where `maxAngle` is not exceeded.
   * @property {TextJustify} [justify] Text justification within the text box.
   * If not set, text is justified towards the `textAlign` anchor.
   * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.
   * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.
   * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,
   * `'hanging'`, `'ideographic'`.
   * @property {import("./Fill.js").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Fill.js").default} [backgroundFill] Fill style for the text background when `placement` is
   * `'point'`. Default is no fill.
   * @property {import("./Stroke.js").default} [backgroundStroke] Stroke style for the text background  when `placement`
   * is `'point'`. Default is no stroke.
   * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
   * values in the array is `[top, right, bottom, left]`.
   */

  /**
   * @classdesc
   * Set text style for vector features.
   * @api
   */
  class Text {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.font_ = options.font;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = options.rotation;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = options.rotateWithView;

      /**
       * @private
       * @type {number|import("../size.js").Size|undefined}
       */
      this.scale_ = options.scale;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);

      /**
       * @private
       * @type {string|Array<string>|undefined}
       */
      this.text_ = options.text;

      /**
       * @private
       * @type {CanvasTextAlign|undefined}
       */
      this.textAlign_ = options.textAlign;

      /**
       * @private
       * @type {TextJustify|undefined}
       */
      this.justify_ = options.justify;

      /**
       * @private
       * @type {number|undefined}
       */
      this.repeat_ = options.repeat;

      /**
       * @private
       * @type {CanvasTextBaseline|undefined}
       */
      this.textBaseline_ = options.textBaseline;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.fill_ =
        options.fill !== undefined
          ? options.fill
          : new Fill$1({color: DEFAULT_FILL_COLOR});

      /**
       * @private
       * @type {number}
       */
      this.maxAngle_ =
        options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;

      /**
       * @private
       * @type {TextPlacement}
       */
      this.placement_ =
        options.placement !== undefined ? options.placement : 'point';

      /**
       * @private
       * @type {boolean}
       */
      this.overflow_ = !!options.overflow;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.stroke_ = options.stroke !== undefined ? options.stroke : null;

      /**
       * @private
       * @type {number}
       */
      this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;

      /**
       * @private
       * @type {number}
       */
      this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;

      /**
       * @private
       * @type {import("./Fill.js").default}
       */
      this.backgroundFill_ = options.backgroundFill
        ? options.backgroundFill
        : null;

      /**
       * @private
       * @type {import("./Stroke.js").default}
       */
      this.backgroundStroke_ = options.backgroundStroke
        ? options.backgroundStroke
        : null;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.padding_ = options.padding === undefined ? null : options.padding;
    }

    /**
     * Clones the style.
     * @return {Text} The cloned style.
     * @api
     */
    clone() {
      const scale = this.getScale();
      return new Text({
        font: this.getFont(),
        placement: this.getPlacement(),
        repeat: this.getRepeat(),
        maxAngle: this.getMaxAngle(),
        overflow: this.getOverflow(),
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        text: this.getText(),
        textAlign: this.getTextAlign(),
        justify: this.getJustify(),
        textBaseline: this.getTextBaseline(),
        fill: this.getFill() ? this.getFill().clone() : undefined,
        stroke: this.getStroke() ? this.getStroke().clone() : undefined,
        offsetX: this.getOffsetX(),
        offsetY: this.getOffsetY(),
        backgroundFill: this.getBackgroundFill()
          ? this.getBackgroundFill().clone()
          : undefined,
        backgroundStroke: this.getBackgroundStroke()
          ? this.getBackgroundStroke().clone()
          : undefined,
        padding: this.getPadding() || undefined,
      });
    }

    /**
     * Get the `overflow` configuration.
     * @return {boolean} Let text overflow the length of the path they follow.
     * @api
     */
    getOverflow() {
      return this.overflow_;
    }

    /**
     * Get the font name.
     * @return {string|undefined} Font.
     * @api
     */
    getFont() {
      return this.font_;
    }

    /**
     * Get the maximum angle between adjacent characters.
     * @return {number} Angle in radians.
     * @api
     */
    getMaxAngle() {
      return this.maxAngle_;
    }

    /**
     * Get the label placement.
     * @return {TextPlacement} Text placement.
     * @api
     */
    getPlacement() {
      return this.placement_;
    }

    /**
     * Get the repeat interval of the text.
     * @return {number|undefined} Repeat interval in pixels.
     * @api
     */
    getRepeat() {
      return this.repeat_;
    }

    /**
     * Get the x-offset for the text.
     * @return {number} Horizontal text offset.
     * @api
     */
    getOffsetX() {
      return this.offsetX_;
    }

    /**
     * Get the y-offset for the text.
     * @return {number} Vertical text offset.
     * @api
     */
    getOffsetY() {
      return this.offsetY_;
    }

    /**
     * Get the fill style for the text.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getFill() {
      return this.fill_;
    }

    /**
     * Determine whether the text rotates with the map.
     * @return {boolean|undefined} Rotate with map.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Get the text rotation.
     * @return {number|undefined} Rotation.
     * @api
     */
    getRotation() {
      return this.rotation_;
    }

    /**
     * Get the text scale.
     * @return {number|import("../size.js").Size|undefined} Scale.
     * @api
     */
    getScale() {
      return this.scale_;
    }

    /**
     * Get the symbolizer scale array.
     * @return {import("../size.js").Size} Scale array.
     */
    getScaleArray() {
      return this.scaleArray_;
    }

    /**
     * Get the stroke style for the text.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getStroke() {
      return this.stroke_;
    }

    /**
     * Get the text to be rendered.
     * @return {string|Array<string>|undefined} Text.
     * @api
     */
    getText() {
      return this.text_;
    }

    /**
     * Get the text alignment.
     * @return {CanvasTextAlign|undefined} Text align.
     * @api
     */
    getTextAlign() {
      return this.textAlign_;
    }

    /**
     * Get the justification.
     * @return {TextJustify|undefined} Justification.
     * @api
     */
    getJustify() {
      return this.justify_;
    }

    /**
     * Get the text baseline.
     * @return {CanvasTextBaseline|undefined} Text baseline.
     * @api
     */
    getTextBaseline() {
      return this.textBaseline_;
    }

    /**
     * Get the background fill style for the text.
     * @return {import("./Fill.js").default} Fill style.
     * @api
     */
    getBackgroundFill() {
      return this.backgroundFill_;
    }

    /**
     * Get the background stroke style for the text.
     * @return {import("./Stroke.js").default} Stroke style.
     * @api
     */
    getBackgroundStroke() {
      return this.backgroundStroke_;
    }

    /**
     * Get the padding for the text.
     * @return {Array<number>|null} Padding.
     * @api
     */
    getPadding() {
      return this.padding_;
    }

    /**
     * Set the `overflow` property.
     *
     * @param {boolean} overflow Let text overflow the path that it follows.
     * @api
     */
    setOverflow(overflow) {
      this.overflow_ = overflow;
    }

    /**
     * Set the font.
     *
     * @param {string|undefined} font Font.
     * @api
     */
    setFont(font) {
      this.font_ = font;
    }

    /**
     * Set the maximum angle between adjacent characters.
     *
     * @param {number} maxAngle Angle in radians.
     * @api
     */
    setMaxAngle(maxAngle) {
      this.maxAngle_ = maxAngle;
    }

    /**
     * Set the x offset.
     *
     * @param {number} offsetX Horizontal text offset.
     * @api
     */
    setOffsetX(offsetX) {
      this.offsetX_ = offsetX;
    }

    /**
     * Set the y offset.
     *
     * @param {number} offsetY Vertical text offset.
     * @api
     */
    setOffsetY(offsetY) {
      this.offsetY_ = offsetY;
    }

    /**
     * Set the text placement.
     *
     * @param {TextPlacement} placement Placement.
     * @api
     */
    setPlacement(placement) {
      this.placement_ = placement;
    }

    /**
     * Set the repeat interval of the text.
     * @param {number|undefined} [repeat] Repeat interval in pixels.
     * @api
     */
    setRepeat(repeat) {
      this.repeat_ = repeat;
    }

    /**
     * Set whether to rotate the text with the view.
     *
     * @param {boolean} rotateWithView Rotate with map.
     * @api
     */
    setRotateWithView(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    }

    /**
     * Set the fill.
     *
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setFill(fill) {
      this.fill_ = fill;
    }

    /**
     * Set the rotation.
     *
     * @param {number|undefined} rotation Rotation.
     * @api
     */
    setRotation(rotation) {
      this.rotation_ = rotation;
    }

    /**
     * Set the scale.
     *
     * @param {number|import("../size.js").Size|undefined} scale Scale.
     * @api
     */
    setScale(scale) {
      this.scale_ = scale;
      this.scaleArray_ = toSize(scale !== undefined ? scale : 1);
    }

    /**
     * Set the stroke.
     *
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setStroke(stroke) {
      this.stroke_ = stroke;
    }

    /**
     * Set the text.
     *
     * @param {string|Array<string>|undefined} text Text.
     * @api
     */
    setText(text) {
      this.text_ = text;
    }

    /**
     * Set the text alignment.
     *
     * @param {CanvasTextAlign|undefined} textAlign Text align.
     * @api
     */
    setTextAlign(textAlign) {
      this.textAlign_ = textAlign;
    }

    /**
     * Set the justification.
     *
     * @param {TextJustify|undefined} justify Justification.
     * @api
     */
    setJustify(justify) {
      this.justify_ = justify;
    }

    /**
     * Set the text baseline.
     *
     * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.
     * @api
     */
    setTextBaseline(textBaseline) {
      this.textBaseline_ = textBaseline;
    }

    /**
     * Set the background fill.
     *
     * @param {import("./Fill.js").default} fill Fill style.
     * @api
     */
    setBackgroundFill(fill) {
      this.backgroundFill_ = fill;
    }

    /**
     * Set the background stroke.
     *
     * @param {import("./Stroke.js").default} stroke Stroke style.
     * @api
     */
    setBackgroundStroke(stroke) {
      this.backgroundStroke_ = stroke;
    }

    /**
     * Set the padding (`[top, right, bottom, left]`).
     *
     * @param {Array<number>|null} padding Padding.
     * @api
     */
    setPadding(padding) {
      this.padding_ = padding;
    }
  }

  var Text$1 = Text;

  /**
   * @module ol/layer/Property
   */

  /**
   * @enum {string}
   */
  var LayerProperty = {
    OPACITY: 'opacity',
    VISIBLE: 'visible',
    EXTENT: 'extent',
    Z_INDEX: 'zIndex',
    MAX_RESOLUTION: 'maxResolution',
    MIN_RESOLUTION: 'minResolution',
    MAX_ZOOM: 'maxZoom',
    MIN_ZOOM: 'minZoom',
    SOURCE: 'source',
    MAP: 'map',
  };

  /**
   * @module ol/layer/Base
   */

  /**
   * A css color, or a function called with a view resolution returning a css color.
   *
   * @typedef {string|function(number):string} BackgroundColor
   * @api
   */

  /**
   * @typedef {import("../ObjectEventType").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|
   *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<BaseLayerObjectEventTypes, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background
   * will be rendered.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in
   * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so
   * is observable, and has get/set accessors.
   *
   * @api
   */
  class BaseLayer extends olObject {
    /**
     * @param {Options} options Layer options.
     */
    constructor(options) {
      super();

      /***
       * @type {BaseLayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {BaseLayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {BaseLayerOnSignature<void>}
       */
      this.un;

      /**
       * @type {BackgroundColor|false}
       * @private
       */
      this.background_ = options.background;

      /**
       * @type {Object<string, *>}
       */
      const properties = Object.assign({}, options);
      if (typeof options.properties === 'object') {
        delete properties.properties;
        Object.assign(properties, options.properties);
      }

      properties[LayerProperty.OPACITY] =
        options.opacity !== undefined ? options.opacity : 1;
      assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number

      properties[LayerProperty.VISIBLE] =
        options.visible !== undefined ? options.visible : true;
      properties[LayerProperty.Z_INDEX] = options.zIndex;
      properties[LayerProperty.MAX_RESOLUTION] =
        options.maxResolution !== undefined ? options.maxResolution : Infinity;
      properties[LayerProperty.MIN_RESOLUTION] =
        options.minResolution !== undefined ? options.minResolution : 0;
      properties[LayerProperty.MIN_ZOOM] =
        options.minZoom !== undefined ? options.minZoom : -Infinity;
      properties[LayerProperty.MAX_ZOOM] =
        options.maxZoom !== undefined ? options.maxZoom : Infinity;

      /**
       * @type {string}
       * @private
       */
      this.className_ =
        properties.className !== undefined ? properties.className : 'ol-layer';
      delete properties.className;

      this.setProperties(properties);

      /**
       * @type {import("./Layer.js").State}
       * @private
       */
      this.state_ = null;
    }

    /**
     * Get the background for this layer.
     * @return {BackgroundColor|false} Layer background.
     */
    getBackground() {
      return this.background_;
    }

    /**
     * @return {string} CSS class name.
     */
    getClassName() {
      return this.className_;
    }

    /**
     * This method is not meant to be called by layers or layer renderers because the state
     * is incorrect if the layer is included in a layer group.
     *
     * @param {boolean} [managed] Layer is managed.
     * @return {import("./Layer.js").State} Layer state.
     */
    getLayerState(managed) {
      /** @type {import("./Layer.js").State} */
      const state =
        this.state_ ||
        /** @type {?} */ ({
          layer: this,
          managed: managed === undefined ? true : managed,
        });
      const zIndex = this.getZIndex();
      state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
      state.visible = this.getVisible();
      state.extent = this.getExtent();
      state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;
      state.maxResolution = this.getMaxResolution();
      state.minResolution = Math.max(this.getMinResolution(), 0);
      state.minZoom = this.getMinZoom();
      state.maxZoom = this.getMaxZoom();
      this.state_ = state;

      return state;
    }

    /**
     * @abstract
     * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be
     *     modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    getLayersArray(array) {
      return abstract();
    }

    /**
     * @abstract
     * @param {Array<import("./Layer.js").State>} [states] Optional list of layer
     *     states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    getLayerStatesArray(states) {
      return abstract();
    }

    /**
     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
     * will be visible regardless of extent.
     * @return {import("../extent.js").Extent|undefined} The layer extent.
     * @observable
     * @api
     */
    getExtent() {
      return /** @type {import("../extent.js").Extent|undefined} */ (
        this.get(LayerProperty.EXTENT)
      );
    }

    /**
     * Return the maximum resolution of the layer.
     * @return {number} The maximum resolution of the layer.
     * @observable
     * @api
     */
    getMaxResolution() {
      return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
    }

    /**
     * Return the minimum resolution of the layer.
     * @return {number} The minimum resolution of the layer.
     * @observable
     * @api
     */
    getMinResolution() {
      return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
    }

    /**
     * Return the minimum zoom level of the layer.
     * @return {number} The minimum zoom level of the layer.
     * @observable
     * @api
     */
    getMinZoom() {
      return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));
    }

    /**
     * Return the maximum zoom level of the layer.
     * @return {number} The maximum zoom level of the layer.
     * @observable
     * @api
     */
    getMaxZoom() {
      return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));
    }

    /**
     * Return the opacity of the layer (between 0 and 1).
     * @return {number} The opacity of the layer.
     * @observable
     * @api
     */
    getOpacity() {
      return /** @type {number} */ (this.get(LayerProperty.OPACITY));
    }

    /**
     * @abstract
     * @return {import("../source/Source.js").State} Source state.
     */
    getSourceState() {
      return abstract();
    }

    /**
     * Return the visibility of the layer (`true` or `false`).
     * @return {boolean} The visibility of the layer.
     * @observable
     * @api
     */
    getVisible() {
      return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
    }

    /**
     * Return the Z-index of the layer, which is used to order layers before
     * rendering. The default Z-index is 0.
     * @return {number} The Z-index of the layer.
     * @observable
     * @api
     */
    getZIndex() {
      return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
    }

    /**
     * Sets the background color.
     * @param {BackgroundColor} [background] Background color.
     */
    setBackground(background) {
      this.background_ = background;
      this.changed();
    }

    /**
     * Set the extent at which the layer is visible.  If `undefined`, the layer
     * will be visible at all extents.
     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
     * @observable
     * @api
     */
    setExtent(extent) {
      this.set(LayerProperty.EXTENT, extent);
    }

    /**
     * Set the maximum resolution at which the layer is visible.
     * @param {number} maxResolution The maximum resolution of the layer.
     * @observable
     * @api
     */
    setMaxResolution(maxResolution) {
      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
    }

    /**
     * Set the minimum resolution at which the layer is visible.
     * @param {number} minResolution The minimum resolution of the layer.
     * @observable
     * @api
     */
    setMinResolution(minResolution) {
      this.set(LayerProperty.MIN_RESOLUTION, minResolution);
    }

    /**
     * Set the maximum zoom (exclusive) at which the layer is visible.
     * Note that the zoom levels for layer visibility are based on the
     * view zoom level, which may be different from a tile source zoom level.
     * @param {number} maxZoom The maximum zoom of the layer.
     * @observable
     * @api
     */
    setMaxZoom(maxZoom) {
      this.set(LayerProperty.MAX_ZOOM, maxZoom);
    }

    /**
     * Set the minimum zoom (inclusive) at which the layer is visible.
     * Note that the zoom levels for layer visibility are based on the
     * view zoom level, which may be different from a tile source zoom level.
     * @param {number} minZoom The minimum zoom of the layer.
     * @observable
     * @api
     */
    setMinZoom(minZoom) {
      this.set(LayerProperty.MIN_ZOOM, minZoom);
    }

    /**
     * Set the opacity of the layer, allowed values range from 0 to 1.
     * @param {number} opacity The opacity of the layer.
     * @observable
     * @api
     */
    setOpacity(opacity) {
      assert(typeof opacity === 'number', 64); // Layer opacity must be a number
      this.set(LayerProperty.OPACITY, opacity);
    }

    /**
     * Set the visibility of the layer (`true` or `false`).
     * @param {boolean} visible The visibility of the layer.
     * @observable
     * @api
     */
    setVisible(visible) {
      this.set(LayerProperty.VISIBLE, visible);
    }

    /**
     * Set Z-index of the layer, which is used to order layers before rendering.
     * The default Z-index is 0.
     * @param {number} zindex The z-index of the layer.
     * @observable
     * @api
     */
    setZIndex(zindex) {
      this.set(LayerProperty.Z_INDEX, zindex);
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      if (this.state_) {
        this.state_.layer = null;
        this.state_ = null;
      }
      super.disposeInternal();
    }
  }

  var BaseLayer$1 = BaseLayer;

  /**
   * @module ol/ViewHint
   */

  /**
   * @enum {number}
   */
  var ViewHint = {
    ANIMATING: 0,
    INTERACTING: 1,
  };

  /**
   * @module ol/ViewProperty
   */

  /**
   * @enum {string}
   */
  var ViewProperty = {
    CENTER: 'center',
    RESOLUTION: 'resolution',
    ROTATION: 'rotation',
  };

  /**
   * @module ol/tilegrid/common
   */

  /**
   * Default maximum zoom for default tile grids.
   * @type {number}
   */
  const DEFAULT_MAX_ZOOM = 42;

  /**
   * Default tile size.
   * @type {number}
   */
  const DEFAULT_TILE_SIZE = 256;

  /**
   * @module ol/centerconstraint
   */

  /**
   * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=, Array<number>=): (import("./coordinate.js").Coordinate|undefined)} Type
   */

  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
   * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
   * (only during interaction and animation).
   * @return {Type} The constraint.
   */
  function createExtent(extent, onlyCenter, smooth) {
    return (
      /**
       * @param {import("./coordinate.js").Coordinate|undefined} center Center.
       * @param {number|undefined} resolution Resolution.
       * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @param {Array<number>} [centerShift] Shift between map center and viewport center.
       * @return {import("./coordinate.js").Coordinate|undefined} Center.
       */
      function (center, resolution, size, isMoving, centerShift) {
        if (!center) {
          return undefined;
        }
        if (!resolution && !onlyCenter) {
          return center;
        }
        const viewWidth = onlyCenter ? 0 : size[0] * resolution;
        const viewHeight = onlyCenter ? 0 : size[1] * resolution;
        const shiftX = centerShift ? centerShift[0] : 0;
        const shiftY = centerShift ? centerShift[1] : 0;
        let minX = extent[0] + viewWidth / 2 + shiftX;
        let maxX = extent[2] - viewWidth / 2 + shiftX;
        let minY = extent[1] + viewHeight / 2 + shiftY;
        let maxY = extent[3] - viewHeight / 2 + shiftY;

        // note: when zooming out of bounds, min and max values for x and y may
        // end up inverted (min > max); this has to be accounted for
        if (minX > maxX) {
          minX = (maxX + minX) / 2;
          maxX = minX;
        }
        if (minY > maxY) {
          minY = (maxY + minY) / 2;
          maxY = minY;
        }

        let x = clamp(center[0], minX, maxX);
        let y = clamp(center[1], minY, maxY);

        // during an interaction, allow some overscroll
        if (isMoving && smooth && resolution) {
          const ratio = 30 * resolution;
          x +=
            -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
          y +=
            -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
        }

        return [x, y];
      }
    );
  }

  /**
   * @param {import("./coordinate.js").Coordinate} [center] Center.
   * @return {import("./coordinate.js").Coordinate|undefined} Center.
   */
  function none$1(center) {
    return center;
  }

  /**
   * @module ol/resolutionconstraint
   */

  /**
   * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
   */

  /**
   * Returns a modified resolution taking into account the viewport size and maximum
   * allowed extent.
   * @param {number} resolution Resolution
   * @param {import("./extent.js").Extent} maxExtent Maximum allowed extent.
   * @param {import("./size.js").Size} viewportSize Viewport size.
   * @param {boolean} showFullExtent Whether to show the full extent.
   * @return {number} Capped resolution.
   */
  function getViewportClampedResolution(
    resolution,
    maxExtent,
    viewportSize,
    showFullExtent
  ) {
    const xResolution = getWidth(maxExtent) / viewportSize[0];
    const yResolution = getHeight(maxExtent) / viewportSize[1];

    if (showFullExtent) {
      return Math.min(resolution, Math.max(xResolution, yResolution));
    }
    return Math.min(resolution, Math.min(xResolution, yResolution));
  }

  /**
   * Returns a modified resolution to be between maxResolution and minResolution while
   * still allowing the value to be slightly out of bounds.
   * Note: the computation is based on the logarithm function (ln):
   *  - at 1, ln(x) is 0
   *  - above 1, ln(x) keeps increasing but at a much slower pace than x
   * The final result is clamped to prevent getting too far away from bounds.
   * @param {number} resolution Resolution.
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @return {number} Smoothed resolution.
   */
  function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
    let result = Math.min(resolution, maxResolution);
    const ratio = 50;

    result *=
      Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +
      1;
    if (minResolution) {
      result = Math.max(result, minResolution);
      result /=
        Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /
          ratio +
        1;
    }
    return clamp(result, minResolution / 2, maxResolution * 2);
  }

  /**
   * @param {Array<number>} resolutions Resolutions.
   * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent} [maxExtent] Maximum allowed extent.
   * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createSnapToResolutions(
    resolutions,
    smooth,
    maxExtent,
    showFullExtent
  ) {
    smooth = smooth !== undefined ? smooth : true;
    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
          const maxResolution = resolutions[0];
          const minResolution = resolutions[resolutions.length - 1];
          const cappedMaxRes = maxExtent
            ? getViewportClampedResolution(
                maxResolution,
                maxExtent,
                size,
                showFullExtent
              )
            : maxResolution;

          // during interacting or animating, allow intermediary values
          if (isMoving) {
            if (!smooth) {
              return clamp(resolution, minResolution, cappedMaxRes);
            }
            return getSmoothClampedResolution(
              resolution,
              cappedMaxRes,
              minResolution
            );
          }

          const capped = Math.min(cappedMaxRes, resolution);
          const z = Math.floor(linearFindNearest(resolutions, capped, direction));
          if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
            return resolutions[z + 1];
          }
          return resolutions[z];
        }
        return undefined;
      }
    );
  }

  /**
   * @param {number} power Power.
   * @param {number} maxResolution Maximum resolution.
   * @param {number} [minResolution] Minimum resolution.
   * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent} [maxExtent] Maximum allowed extent.
   * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createSnapToPower(
    power,
    maxResolution,
    minResolution,
    smooth,
    maxExtent,
    showFullExtent
  ) {
    smooth = smooth !== undefined ? smooth : true;
    minResolution = minResolution !== undefined ? minResolution : 0;

    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
          const cappedMaxRes = maxExtent
            ? getViewportClampedResolution(
                maxResolution,
                maxExtent,
                size,
                showFullExtent
              )
            : maxResolution;

          // during interacting or animating, allow intermediary values
          if (isMoving) {
            if (!smooth) {
              return clamp(resolution, minResolution, cappedMaxRes);
            }
            return getSmoothClampedResolution(
              resolution,
              cappedMaxRes,
              minResolution
            );
          }

          const tolerance = 1e-9;
          const minZoomLevel = Math.ceil(
            Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance
          );
          const offset = -direction * (0.5 - tolerance) + 0.5;
          const capped = Math.min(cappedMaxRes, resolution);
          const cappedZoomLevel = Math.floor(
            Math.log(maxResolution / capped) / Math.log(power) + offset
          );
          const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
          const newResolution = maxResolution / Math.pow(power, zoomLevel);
          return clamp(newResolution, minResolution, cappedMaxRes);
        }
        return undefined;
      }
    );
  }

  /**
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent} [maxExtent] Maximum allowed extent.
   * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createMinMaxResolution(
    maxResolution,
    minResolution,
    smooth,
    maxExtent,
    showFullExtent
  ) {
    smooth = smooth !== undefined ? smooth : true;

    return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, isMoving) {
        if (resolution !== undefined) {
          const cappedMaxRes = maxExtent
            ? getViewportClampedResolution(
                maxResolution,
                maxExtent,
                size,
                showFullExtent
              )
            : maxResolution;

          if (!smooth || !isMoving) {
            return clamp(resolution, minResolution, cappedMaxRes);
          }
          return getSmoothClampedResolution(
            resolution,
            cappedMaxRes,
            minResolution
          );
        }
        return undefined;
      }
    );
  }

  /**
   * @module ol/rotationconstraint
   */

  /**
   * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
   */

  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function disable(rotation) {
    if (rotation !== undefined) {
      return 0;
    }
    return undefined;
  }

  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function none(rotation) {
    if (rotation !== undefined) {
      return rotation;
    }
    return undefined;
  }

  /**
   * @param {number} n N.
   * @return {Type} Rotation constraint.
   */
  function createSnapToN(n) {
    const theta = (2 * Math.PI) / n;
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function (rotation, isMoving) {
        if (isMoving) {
          return rotation;
        }

        if (rotation !== undefined) {
          rotation = Math.floor(rotation / theta + 0.5) * theta;
          return rotation;
        }
        return undefined;
      }
    );
  }

  /**
   * @param {number} [tolerance] Tolerance.
   * @return {Type} Rotation constraint.
   */
  function createSnapToZero(tolerance) {
    tolerance = tolerance || toRadians(5);
    return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean} [isMoving] True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function (rotation, isMoving) {
        if (isMoving) {
          return rotation;
        }

        if (rotation !== undefined) {
          if (Math.abs(rotation) <= tolerance) {
            return 0;
          }
          return rotation;
        }
        return undefined;
      }
    );
  }

  /**
   * @module ol/easing
   */

  /**
   * Start slow and speed up.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeIn(t) {
    return Math.pow(t, 3);
  }

  /**
   * Start fast and slow down.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeOut(t) {
    return 1 - easeIn(1 - t);
  }

  /**
   * Start slow, speed up, and then slow down again.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function inAndOut(t) {
    return 3 * t * t - 2 * t * t * t;
  }

  /**
   * Maintain a constant speed over time.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function linear(t) {
    return t;
  }

  /**
   * @module ol/View
   */

  /**
   * An animation configuration
   *
   * @typedef {Object} Animation
   * @property {import("./coordinate.js").Coordinate} [sourceCenter] Source center.
   * @property {import("./coordinate.js").Coordinate} [targetCenter] Target center.
   * @property {number} [sourceResolution] Source resolution.
   * @property {number} [targetResolution] Target resolution.
   * @property {number} [sourceRotation] Source rotation.
   * @property {number} [targetRotation] Target rotation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Anchor.
   * @property {number} start Start.
   * @property {number} duration Duration.
   * @property {boolean} complete Complete.
   * @property {function(number):number} easing Easing.
   * @property {function(boolean):void} callback Callback.
   */

  /**
   * @typedef {Object} Constraints
   * @property {import("./centerconstraint.js").Type} center Center.
   * @property {import("./resolutionconstraint.js").Type} resolution Resolution.
   * @property {import("./rotationconstraint.js").Type} rotation Rotation.
   */

  /**
   * @typedef {Object} FitOptions
   * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
   * the extent into. Default is the current size of the first map in the DOM that
   * uses this view, or `[100, 100]` if no such map is found.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
   * cleared inside the view. Values in the array are top, right, bottom and left
   * padding.
   * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
   * get the nearest extent instead of the closest that actually fits the view.
   * @property {number} [minResolution=0] Minimum resolution that we zoom to.
   * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
   * `minResolution` is given, this property is ignored.
   * @property {number} [duration] The duration of the animation in milliseconds.
   * By default, there is no animation to the target extent.
   * @property {function(number):number} [easing] The easing function used during
   * the animation (defaults to {@link module:ol/easing.inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   * @property {function(boolean):void} [callback] Function called when the view is in
   * its final position. The callback will be called with `true` if the animation
   * series completed on its own or `false` if it was cancelled.
   */

  /**
   * @typedef {Object} ViewOptions
   * @property {import("./coordinate.js").Coordinate} [center] The initial center for
   * the view. If a user projection is not set, the coordinate system for the center is
   * specified with the `projection` option. Layer sources will not be fetched if this
   * is not set, but the center can be set later with {@link #setCenter}.
   * @property {boolean|number} [constrainRotation=true] Rotation constraint.
   * `false` means no constraint. `true` means no constraint, but snap to zero
   * near zero. A number constrains the rotation to that number of values. For
   * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
   * @property {boolean} [enableRotation=true] Enable rotation.
   * If `false`, a rotation constraint that always sets the rotation to zero is
   * used. The `constrainRotation` option has no effect if `enableRotation` is
   * `false`.
   * @property {import("./extent.js").Extent} [extent] The extent that constrains the
   * view, in other words, nothing outside of this extent can be visible on the map.
   * @property {boolean} [constrainOnlyCenter=false] If true, the extent
   * constraint will only apply to the view center and not the whole extent.
   * @property {boolean} [smoothExtentConstraint=true] If true, the extent
   * constraint will be applied smoothly, i.e. allow the view to go slightly outside
   * of the given `extent`.
   * @property {number} [maxResolution] The maximum resolution used to determine
   * the resolution constraint. It is used together with `minResolution` (or
   * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
   * that the projection's validity extent fits in a 256x256 px tile. If the
   * projection is Spherical Mercator (the default) then `maxResolution` defaults
   * to `40075016.68557849 / 256 = 156543.03392804097`.
   * @property {number} [minResolution] The minimum resolution used to determine
   * the resolution constraint.  It is used together with `maxResolution` (or
   * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
   * zoom levels (with a factor of 2). If the projection is Spherical Mercator
   * (the default) then `minResolution` defaults to
   * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
   * @property {number} [maxZoom=28] The maximum zoom level used to determine the
   * resolution constraint. It is used together with `minZoom` (or
   * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
   * provided, it is given precedence over `maxZoom`.
   * @property {number} [minZoom=0] The minimum zoom level used to determine the
   * resolution constraint. It is used together with `maxZoom` (or
   * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
   * provided, it is given precedence over `minZoom`.
   * @property {boolean} [multiWorld=false] If `false` the view is constrained so
   * only one world is visible, and you cannot pan off the edge.  If `true` the map
   * may show multiple worlds at low zoom levels.  Only used if the `projection` is
   * global.  Note that if `extent` is also provided it is given precedence.
   * @property {boolean} [constrainResolution=false] If true, the view will always
   * animate to the closest zoom level after an interaction; false means
   * intermediary zoom levels are allowed.
   * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
   * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
   * the given resolution or zoom bounds.
   * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
   * show the full configured extent. By default, when a view is configured with an
   * extent, users will not be able to zoom out so the viewport exceeds the extent in
   * either dimension. This means the full extent may not be visible if the viewport
   * is taller or wider than the aspect ratio of the configured extent. If
   * showFullExtent is true, the user will be able to zoom out so that the viewport
   * exceeds the height or width of the configured extent, but not both, allowing the
   * full extent to be shown.
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
   * projection. The default is Spherical Mercator.
   * @property {number} [resolution] The initial resolution for the view. The
   * units are `projection` units per pixel (e.g. meters per pixel). An
   * alternative to setting this is to set `zoom`. Layer sources will not be
   * fetched if neither this nor `zoom` are defined, but they can be set later
   * with {@link #setZoom} or {@link #setResolution}.
   * @property {Array<number>} [resolutions] Resolutions that determine the
   * zoom levels if specified. The index in the array corresponds to the zoom level,
   * therefore the resolution values have to be in descending order. It also constrains
   * the resolution by the minimum and maximum value. If set the `maxResolution`,
   * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
   * @property {number} [rotation=0] The initial rotation for the view in radians
   * (positive rotation clockwise, 0 means North).
   * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
   * level used to calculate the initial resolution for the view.
   * @property {number} [zoomFactor=2] The zoom factor used to compute the
   * corresponding resolution.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).
   * If the map viewport is partially covered with other content (overlays) along
   * its edges, this setting allows to shift the center of the viewport away from
   * that content. The order of the values is top, right, bottom, left.
   */

  /**
   * @typedef {Object} AnimationOptions
   * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
   * the animation.
   * @property {number} [zoom] The zoom level of the view at the end of the
   * animation. This takes precedence over `resolution`.
   * @property {number} [resolution] The resolution of the view at the end
   * of the animation.  If `zoom` is also provided, this option will be ignored.
   * @property {number} [rotation] The rotation of the view at the end of
   * the animation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
   * during a rotation or resolution animation.
   * @property {number} [duration=1000] The duration of the animation in milliseconds.
   * @property {function(number):number} [easing] The easing function used
   * during the animation (defaults to {@link module:ol/easing.inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   */

  /**
   * @typedef {Object} State
   * @property {import("./coordinate.js").Coordinate} center Center.
   * @property {import("./proj/Projection.js").default} projection Projection.
   * @property {number} resolution Resolution.
   * @property {import("./coordinate.js").Coordinate} [nextCenter] The next center during an animation series.
   * @property {number} [nextResolution] The next resolution during an animation series.
   * @property {number} [nextRotation] The next rotation during an animation series.
   * @property {number} rotation Rotation.
   * @property {number} zoom Zoom.
   */

  /**
   * Like {@link import("./Map.js").FrameState}, but just `viewState` and `extent`.
   * @typedef {Object} ViewStateAndExtent
   * @property {State} viewState View state.
   * @property {import("./extent.js").Extent} extent Extent.
   */

  /**
   * Default min zoom level for the map view.
   * @type {number}
   */
  const DEFAULT_MIN_ZOOM = 0;

  /**
   * @typedef {import("./ObjectEventType").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<ViewObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature
   */

  /**
   * @classdesc
   * A View object represents a simple 2D view of the map.
   *
   * This is the object to act upon to change the center, resolution,
   * and rotation of the map.
   *
   * A View has a `projection`. The projection determines the
   * coordinate system of the center, and its units determine the units of the
   * resolution (projection units per pixel). The default projection is
   * Web Mercator (EPSG:3857).
   *
   * ### The view states
   *
   * A View is determined by three states: `center`, `resolution`,
   * and `rotation`. Each state has a corresponding getter and setter, e.g.
   * `getCenter` and `setCenter` for the `center` state.
   *
   * The `zoom` state is actually not saved on the view: all computations
   * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
   * methods are available, as well as `getResolutionForZoom` and
   * `getZoomForResolution` to switch from one system to the other.
   *
   * ### The constraints
   *
   * `setCenter`, `setResolution` and `setRotation` can be used to change the
   * states of the view, but any constraint defined in the constructor will
   * be applied along the way.
   *
   * A View object can have a *resolution constraint*, a *rotation constraint*
   * and a *center constraint*.
   *
   * The *resolution constraint* typically restricts min/max values and
   * snaps to specific resolutions. It is determined by the following
   * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
   * If `resolutions` is set, the other three options are ignored. See
   * documentation for each option for more information. By default, the view
   * only has a min/max restriction and allow intermediary zoom levels when
   * pinch-zooming for example.
   *
   * The *rotation constraint* snaps to specific angles. It is determined
   * by the following options: `enableRotation` and `constrainRotation`.
   * By default rotation is allowed and its value is snapped to zero when approaching the
   * horizontal.
   *
   * The *center constraint* is determined by the `extent` option. By
   * default the view center is not constrained at all.
   *
   * ### Changing the view state
   *
   * It is important to note that `setZoom`, `setResolution`, `setCenter` and
   * `setRotation` are subject to the above mentioned constraints. As such, it
   * may sometimes not be possible to know in advance the resulting state of the
   * View. For example, calling `setResolution(10)` does not guarantee that
   * `getResolution()` will return `10`.
   *
   * A consequence of this is that, when applying a delta on the view state, one
   * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
   * rather than the corresponding setters. This will let view do its internal
   * computations. Besides, the `adjust*` methods also take an `anchor`
   * argument which allows specifying an origin for the transformation.
   *
   * ### Interacting with the view
   *
   * View constraints are usually only applied when the view is *at rest*, meaning that
   * no interaction or animation is ongoing. As such, if the user puts the view in a
   * state that is not equivalent to a constrained one (e.g. rotating the view when
   * the snap angle is 0), an animation will be triggered at the interaction end to
   * put back the view to a stable state;
   *
   * @api
   */
  class View extends olObject {
    /**
     * @param {ViewOptions} [options] View options.
     */
    constructor(options) {
      super();

      /***
       * @type {ViewOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {ViewOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {ViewOnSignature<void>}
       */
      this.un;

      options = Object.assign({}, options);

      /**
       * @private
       * @type {Array<number>}
       */
      this.hints_ = [0, 0];

      /**
       * @private
       * @type {Array<Array<Animation>>}
       */
      this.animations_ = [];

      /**
       * @private
       * @type {number|undefined}
       */
      this.updateAnimationKey_;

      /**
       * @private
       * @const
       * @type {import("./proj/Projection.js").default}
       */
      this.projection_ = createProjection(options.projection, 'EPSG:3857');

      /**
       * @private
       * @type {import("./size.js").Size}
       */
      this.viewportSize_ = [100, 100];

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate|undefined}
       */
      this.targetCenter_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.targetResolution_;

      /**
       * @private
       * @type {number|undefined}
       */
      this.targetRotation_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate}
       */
      this.nextCenter_ = null;

      /**
       * @private
       * @type {number}
       */
      this.nextResolution_;

      /**
       * @private
       * @type {number}
       */
      this.nextRotation_;

      /**
       * @private
       * @type {import("./coordinate.js").Coordinate|undefined}
       */
      this.cancelAnchor_ = undefined;

      if (options.projection) {
        disableCoordinateWarning();
      }
      if (options.center) {
        options.center = fromUserCoordinate(options.center, this.projection_);
      }
      if (options.extent) {
        options.extent = fromUserExtent(options.extent, this.projection_);
      }

      this.applyOptions_(options);
    }

    /**
     * Set up the view with the given options.
     * @param {ViewOptions} options View options.
     */
    applyOptions_(options) {
      const properties = Object.assign({}, options);
      for (const key in ViewProperty) {
        delete properties[key];
      }
      this.setProperties(properties, true);

      const resolutionConstraintInfo = createResolutionConstraint(options);

      /**
       * @private
       * @type {number}
       */
      this.maxResolution_ = resolutionConstraintInfo.maxResolution;

      /**
       * @private
       * @type {number}
       */
      this.minResolution_ = resolutionConstraintInfo.minResolution;

      /**
       * @private
       * @type {number}
       */
      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;

      /**
       * @private
       * @type {Array<number>|undefined}
       */
      this.resolutions_ = options.resolutions;

      /**
       * @type {Array<number>|undefined}
       * @private
       */
      this.padding_ = options.padding;

      /**
       * @private
       * @type {number}
       */
      this.minZoom_ = resolutionConstraintInfo.minZoom;

      const centerConstraint = createCenterConstraint(options);
      const resolutionConstraint = resolutionConstraintInfo.constraint;
      const rotationConstraint = createRotationConstraint(options);

      /**
       * @private
       * @type {Constraints}
       */
      this.constraints_ = {
        center: centerConstraint,
        resolution: resolutionConstraint,
        rotation: rotationConstraint,
      };

      this.setRotation(options.rotation !== undefined ? options.rotation : 0);
      this.setCenterInternal(
        options.center !== undefined ? options.center : null
      );
      if (options.resolution !== undefined) {
        this.setResolution(options.resolution);
      } else if (options.zoom !== undefined) {
        this.setZoom(options.zoom);
      }
    }

    /**
     * Padding (in css pixels).
     * If the map viewport is partially covered with other content (overlays) along
     * its edges, this setting allows to shift the center of the viewport away from that
     * content. The order of the values in the array is top, right, bottom, left.
     * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.
     * @type {Array<number>|undefined}
     * @api
     */
    get padding() {
      return this.padding_;
    }
    set padding(padding) {
      let oldPadding = this.padding_;
      this.padding_ = padding;
      const center = this.getCenterInternal();
      if (center) {
        const newPadding = padding || [0, 0, 0, 0];
        oldPadding = oldPadding || [0, 0, 0, 0];
        const resolution = this.getResolution();
        const offsetX =
          (resolution / 2) *
          (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);
        const offsetY =
          (resolution / 2) *
          (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);
        this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);
      }
    }

    /**
     * Get an updated version of the view options used to construct the view.  The
     * current resolution (or zoom), center, and rotation are applied to any stored
     * options.  The provided options can be used to apply new min/max zoom or
     * resolution limits.
     * @param {ViewOptions} newOptions New options to be applied.
     * @return {ViewOptions} New options updated with the current view state.
     */
    getUpdatedOptions_(newOptions) {
      const options = this.getProperties();

      // preserve resolution (or zoom)
      if (options.resolution !== undefined) {
        options.resolution = this.getResolution();
      } else {
        options.zoom = this.getZoom();
      }

      // preserve center
      options.center = this.getCenterInternal();

      // preserve rotation
      options.rotation = this.getRotation();

      return Object.assign({}, options, newOptions);
    }

    /**
     * Animate the view.  The view's center, zoom (or resolution), and rotation
     * can be animated for smooth transitions between view states.  For example,
     * to animate the view to a new zoom level:
     *
     *     view.animate({zoom: view.getZoom() + 1});
     *
     * By default, the animation lasts one second and uses in-and-out easing.  You
     * can customize this behavior by including `duration` (in milliseconds) and
     * `easing` options (see {@link module:ol/easing}).
     *
     * To chain together multiple animations, call the method with multiple
     * animation objects.  For example, to first zoom and then pan:
     *
     *     view.animate({zoom: 10}, {center: [0, 0]});
     *
     * If you provide a function as the last argument to the animate method, it
     * will get called at the end of an animation series.  The callback will be
     * called with `true` if the animation series completed on its own or `false`
     * if it was cancelled.
     *
     * Animations are cancelled by user interactions (e.g. dragging the map) or by
     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
     * (or another method that calls one of these).
     *
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
     *     options.  Multiple animations can be run in series by passing multiple
     *     options objects.  To run multiple animations in parallel, call the method
     *     multiple times.  An optional callback can be provided as a final
     *     argument.  The callback will be called with a boolean indicating whether
     *     the animation completed without being cancelled.
     * @api
     */
    animate(var_args) {
      if (this.isDef() && !this.getAnimating()) {
        this.resolveConstraints(0);
      }
      const args = new Array(arguments.length);
      for (let i = 0; i < args.length; ++i) {
        let options = arguments[i];
        if (options.center) {
          options = Object.assign({}, options);
          options.center = fromUserCoordinate(
            options.center,
            this.getProjection()
          );
        }
        if (options.anchor) {
          options = Object.assign({}, options);
          options.anchor = fromUserCoordinate(
            options.anchor,
            this.getProjection()
          );
        }
        args[i] = options;
      }
      this.animateInternal.apply(this, args);
    }

    /**
     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
     */
    animateInternal(var_args) {
      let animationCount = arguments.length;
      let callback;
      if (
        animationCount > 1 &&
        typeof arguments[animationCount - 1] === 'function'
      ) {
        callback = arguments[animationCount - 1];
        --animationCount;
      }

      let i = 0;
      for (; i < animationCount && !this.isDef(); ++i) {
        // if view properties are not yet set, shortcut to the final state
        const state = arguments[i];
        if (state.center) {
          this.setCenterInternal(state.center);
        }
        if (state.zoom !== undefined) {
          this.setZoom(state.zoom);
        } else if (state.resolution) {
          this.setResolution(state.resolution);
        }
        if (state.rotation !== undefined) {
          this.setRotation(state.rotation);
        }
      }
      if (i === animationCount) {
        if (callback) {
          animationCallback(callback, true);
        }
        return;
      }

      let start = Date.now();
      let center = this.targetCenter_.slice();
      let resolution = this.targetResolution_;
      let rotation = this.targetRotation_;
      const series = [];
      for (; i < animationCount; ++i) {
        const options = /** @type {AnimationOptions} */ (arguments[i]);

        const animation = {
          start: start,
          complete: false,
          anchor: options.anchor,
          duration: options.duration !== undefined ? options.duration : 1000,
          easing: options.easing || inAndOut,
          callback: callback,
        };

        if (options.center) {
          animation.sourceCenter = center;
          animation.targetCenter = options.center.slice();
          center = animation.targetCenter;
        }

        if (options.zoom !== undefined) {
          animation.sourceResolution = resolution;
          animation.targetResolution = this.getResolutionForZoom(options.zoom);
          resolution = animation.targetResolution;
        } else if (options.resolution) {
          animation.sourceResolution = resolution;
          animation.targetResolution = options.resolution;
          resolution = animation.targetResolution;
        }

        if (options.rotation !== undefined) {
          animation.sourceRotation = rotation;
          const delta =
            modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
          animation.targetRotation = rotation + delta;
          rotation = animation.targetRotation;
        }

        // check if animation is a no-op
        if (isNoopAnimation(animation)) {
          animation.complete = true;
          // we still push it onto the series for callback handling
        } else {
          start += animation.duration;
        }
        series.push(animation);
      }
      this.animations_.push(series);
      this.setHint(ViewHint.ANIMATING, 1);
      this.updateAnimations_();
    }

    /**
     * Determine if the view is being animated.
     * @return {boolean} The view is being animated.
     * @api
     */
    getAnimating() {
      return this.hints_[ViewHint.ANIMATING] > 0;
    }

    /**
     * Determine if the user is interacting with the view, such as panning or zooming.
     * @return {boolean} The view is being interacted with.
     * @api
     */
    getInteracting() {
      return this.hints_[ViewHint.INTERACTING] > 0;
    }

    /**
     * Cancel any ongoing animations.
     * @api
     */
    cancelAnimations() {
      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
      let anchor;
      for (let i = 0, ii = this.animations_.length; i < ii; ++i) {
        const series = this.animations_[i];
        if (series[0].callback) {
          animationCallback(series[0].callback, false);
        }
        if (!anchor) {
          for (let j = 0, jj = series.length; j < jj; ++j) {
            const animation = series[j];
            if (!animation.complete) {
              anchor = animation.anchor;
              break;
            }
          }
        }
      }
      this.animations_.length = 0;
      this.cancelAnchor_ = anchor;
      this.nextCenter_ = null;
      this.nextResolution_ = NaN;
      this.nextRotation_ = NaN;
    }

    /**
     * Update all animations.
     */
    updateAnimations_() {
      if (this.updateAnimationKey_ !== undefined) {
        cancelAnimationFrame(this.updateAnimationKey_);
        this.updateAnimationKey_ = undefined;
      }
      if (!this.getAnimating()) {
        return;
      }
      const now = Date.now();
      let more = false;
      for (let i = this.animations_.length - 1; i >= 0; --i) {
        const series = this.animations_[i];
        let seriesComplete = true;
        for (let j = 0, jj = series.length; j < jj; ++j) {
          const animation = series[j];
          if (animation.complete) {
            continue;
          }
          const elapsed = now - animation.start;
          let fraction =
            animation.duration > 0 ? elapsed / animation.duration : 1;
          if (fraction >= 1) {
            animation.complete = true;
            fraction = 1;
          } else {
            seriesComplete = false;
          }
          const progress = animation.easing(fraction);
          if (animation.sourceCenter) {
            const x0 = animation.sourceCenter[0];
            const y0 = animation.sourceCenter[1];
            const x1 = animation.targetCenter[0];
            const y1 = animation.targetCenter[1];
            this.nextCenter_ = animation.targetCenter;
            const x = x0 + progress * (x1 - x0);
            const y = y0 + progress * (y1 - y0);
            this.targetCenter_ = [x, y];
          }
          if (animation.sourceResolution && animation.targetResolution) {
            const resolution =
              progress === 1
                ? animation.targetResolution
                : animation.sourceResolution +
                  progress *
                    (animation.targetResolution - animation.sourceResolution);
            if (animation.anchor) {
              const size = this.getViewportSize_(this.getRotation());
              const constrainedResolution = this.constraints_.resolution(
                resolution,
                0,
                size,
                true
              );
              this.targetCenter_ = this.calculateCenterZoom(
                constrainedResolution,
                animation.anchor
              );
            }
            this.nextResolution_ = animation.targetResolution;
            this.targetResolution_ = resolution;
            this.applyTargetState_(true);
          }
          if (
            animation.sourceRotation !== undefined &&
            animation.targetRotation !== undefined
          ) {
            const rotation =
              progress === 1
                ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -
                  Math.PI
                : animation.sourceRotation +
                  progress *
                    (animation.targetRotation - animation.sourceRotation);
            if (animation.anchor) {
              const constrainedRotation = this.constraints_.rotation(
                rotation,
                true
              );
              this.targetCenter_ = this.calculateCenterRotate(
                constrainedRotation,
                animation.anchor
              );
            }
            this.nextRotation_ = animation.targetRotation;
            this.targetRotation_ = rotation;
          }
          this.applyTargetState_(true);
          more = true;
          if (!animation.complete) {
            break;
          }
        }
        if (seriesComplete) {
          this.animations_[i] = null;
          this.setHint(ViewHint.ANIMATING, -1);
          this.nextCenter_ = null;
          this.nextResolution_ = NaN;
          this.nextRotation_ = NaN;
          const callback = series[0].callback;
          if (callback) {
            animationCallback(callback, true);
          }
        }
      }
      // prune completed series
      this.animations_ = this.animations_.filter(Boolean);
      if (more && this.updateAnimationKey_ === undefined) {
        this.updateAnimationKey_ = requestAnimationFrame(
          this.updateAnimations_.bind(this)
        );
      }
    }

    /**
     * @param {number} rotation Target rotation.
     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
     */
    calculateCenterRotate(rotation, anchor) {
      let center;
      const currentCenter = this.getCenterInternal();
      if (currentCenter !== undefined) {
        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
        rotate$1(center, rotation - this.getRotation());
        add(center, anchor);
      }
      return center;
    }

    /**
     * @param {number} resolution Target resolution.
     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
     */
    calculateCenterZoom(resolution, anchor) {
      let center;
      const currentCenter = this.getCenterInternal();
      const currentResolution = this.getResolution();
      if (currentCenter !== undefined && currentResolution !== undefined) {
        const x =
          anchor[0] -
          (resolution * (anchor[0] - currentCenter[0])) / currentResolution;
        const y =
          anchor[1] -
          (resolution * (anchor[1] - currentCenter[1])) / currentResolution;
        center = [x, y];
      }
      return center;
    }

    /**
     * Returns the current viewport size.
     * @private
     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
     */
    getViewportSize_(rotation) {
      const size = this.viewportSize_;
      if (rotation) {
        const w = size[0];
        const h = size[1];
        return [
          Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),
          Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),
        ];
      }
      return size;
    }

    /**
     * Stores the viewport size on the view. The viewport size is not read every time from the DOM
     * to avoid performance hit and layout reflow.
     * This should be done on map size change.
     * Note: the constraints are not resolved during an animation to avoid stopping it
     * @param {import("./size.js").Size} [size] Viewport size; if undefined, [100, 100] is assumed
     */
    setViewportSize(size) {
      this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];
      if (!this.getAnimating()) {
        this.resolveConstraints(0);
      }
    }

    /**
     * Get the view center.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     * @observable
     * @api
     */
    getCenter() {
      const center = this.getCenterInternal();
      if (!center) {
        return center;
      }
      return toUserCoordinate(center, this.getProjection());
    }

    /**
     * Get the view center without transforming to user projection.
     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
     */
    getCenterInternal() {
      return /** @type {import("./coordinate.js").Coordinate|undefined} */ (
        this.get(ViewProperty.CENTER)
      );
    }

    /**
     * @return {Constraints} Constraints.
     */
    getConstraints() {
      return this.constraints_;
    }

    /**
     * @return {boolean} Resolution constraint is set
     */
    getConstrainResolution() {
      return this.get('constrainResolution');
    }

    /**
     * @param {Array<number>} [hints] Destination array.
     * @return {Array<number>} Hint.
     */
    getHints(hints) {
      if (hints !== undefined) {
        hints[0] = this.hints_[0];
        hints[1] = this.hints_[1];
        return hints;
      }
      return this.hints_.slice();
    }

    /**
     * Calculate the extent for the current view state and the passed size.
     * The size is the pixel dimensions of the box into which the calculated extent
     * should fit. In most cases you want to get the extent of the entire map,
     * that is `map.getSize()`.
     * @param {import("./size.js").Size} [size] Box pixel size. If not provided, the size
     * of the map that uses this view will be used.
     * @return {import("./extent.js").Extent} Extent.
     * @api
     */
    calculateExtent(size) {
      const extent = this.calculateExtentInternal(size);
      return toUserExtent(extent, this.getProjection());
    }

    /**
     * @param {import("./size.js").Size} [size] Box pixel size. If not provided,
     * the map's last known viewport size will be used.
     * @return {import("./extent.js").Extent} Extent.
     */
    calculateExtentInternal(size) {
      size = size || this.getViewportSizeMinusPadding_();
      const center = /** @type {!import("./coordinate.js").Coordinate} */ (
        this.getCenterInternal()
      );
      assert(center, 1); // The view center is not defined
      const resolution = /** @type {!number} */ (this.getResolution());
      assert(resolution !== undefined, 2); // The view resolution is not defined
      const rotation = /** @type {!number} */ (this.getRotation());
      assert(rotation !== undefined, 3); // The view rotation is not defined

      return getForViewAndSize(center, resolution, rotation, size);
    }

    /**
     * Get the maximum resolution of the view.
     * @return {number} The maximum resolution of the view.
     * @api
     */
    getMaxResolution() {
      return this.maxResolution_;
    }

    /**
     * Get the minimum resolution of the view.
     * @return {number} The minimum resolution of the view.
     * @api
     */
    getMinResolution() {
      return this.minResolution_;
    }

    /**
     * Get the maximum zoom level for the view.
     * @return {number} The maximum zoom level.
     * @api
     */
    getMaxZoom() {
      return /** @type {number} */ (
        this.getZoomForResolution(this.minResolution_)
      );
    }

    /**
     * Set a new maximum zoom level for the view.
     * @param {number} zoom The maximum zoom level.
     * @api
     */
    setMaxZoom(zoom) {
      this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));
    }

    /**
     * Get the minimum zoom level for the view.
     * @return {number} The minimum zoom level.
     * @api
     */
    getMinZoom() {
      return /** @type {number} */ (
        this.getZoomForResolution(this.maxResolution_)
      );
    }

    /**
     * Set a new minimum zoom level for the view.
     * @param {number} zoom The minimum zoom level.
     * @api
     */
    setMinZoom(zoom) {
      this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));
    }

    /**
     * Set whether the view should allow intermediary zoom levels.
     * @param {boolean} enabled Whether the resolution is constrained.
     * @api
     */
    setConstrainResolution(enabled) {
      this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));
    }

    /**
     * Get the view projection.
     * @return {import("./proj/Projection.js").default} The projection of the view.
     * @api
     */
    getProjection() {
      return this.projection_;
    }

    /**
     * Get the view resolution.
     * @return {number|undefined} The resolution of the view.
     * @observable
     * @api
     */
    getResolution() {
      return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
    }

    /**
     * Get the resolutions for the view. This returns the array of resolutions
     * passed to the constructor of the View, or undefined if none were given.
     * @return {Array<number>|undefined} The resolutions of the view.
     * @api
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size} [size] Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     * @api
     */
    getResolutionForExtent(extent, size) {
      return this.getResolutionForExtentInternal(
        fromUserExtent(extent, this.getProjection()),
        size
      );
    }

    /**
     * Get the resolution for a provided extent (in map units) and size (in pixels).
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {import("./size.js").Size} [size] Box pixel size.
     * @return {number} The resolution at which the provided extent will render at
     *     the given size.
     */
    getResolutionForExtentInternal(extent, size) {
      size = size || this.getViewportSizeMinusPadding_();
      const xResolution = getWidth(extent) / size[0];
      const yResolution = getHeight(extent) / size[1];
      return Math.max(xResolution, yResolution);
    }

    /**
     * Return a function that returns a value between 0 and 1 for a
     * resolution. Exponential scaling is assumed.
     * @param {number} [power] Power.
     * @return {function(number): number} Resolution for value function.
     */
    getResolutionForValueFunction(power) {
      power = power || 2;
      const maxResolution = this.getConstrainedResolution(this.maxResolution_);
      const minResolution = this.minResolution_;
      const max = Math.log(maxResolution / minResolution) / Math.log(power);
      return (
        /**
         * @param {number} value Value.
         * @return {number} Resolution.
         */
        function (value) {
          const resolution = maxResolution / Math.pow(power, value * max);
          return resolution;
        }
      );
    }

    /**
     * Get the view rotation.
     * @return {number} The rotation of the view in radians.
     * @observable
     * @api
     */
    getRotation() {
      return /** @type {number} */ (this.get(ViewProperty.ROTATION));
    }

    /**
     * Return a function that returns a resolution for a value between
     * 0 and 1. Exponential scaling is assumed.
     * @param {number} [power] Power.
     * @return {function(number): number} Value for resolution function.
     */
    getValueForResolutionFunction(power) {
      const logPower = Math.log(power || 2);
      const maxResolution = this.getConstrainedResolution(this.maxResolution_);
      const minResolution = this.minResolution_;
      const max = Math.log(maxResolution / minResolution) / logPower;
      return (
        /**
         * @param {number} resolution Resolution.
         * @return {number} Value.
         */
        function (resolution) {
          const value = Math.log(maxResolution / resolution) / logPower / max;
          return value;
        }
      );
    }

    /**
     * Returns the size of the viewport minus padding.
     * @private
     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size
     * @return {import("./size.js").Size} Viewport size reduced by the padding.
     */
    getViewportSizeMinusPadding_(rotation) {
      let size = this.getViewportSize_(rotation);
      const padding = this.padding_;
      if (padding) {
        size = [
          size[0] - padding[1] - padding[3],
          size[1] - padding[0] - padding[2],
        ];
      }
      return size;
    }

    /**
     * @return {State} View state.
     */
    getState() {
      const projection = this.getProjection();
      const resolution = this.getResolution();
      const rotation = this.getRotation();
      let center = /** @type {import("./coordinate.js").Coordinate} */ (
        this.getCenterInternal()
      );
      const padding = this.padding_;
      if (padding) {
        const reducedSize = this.getViewportSizeMinusPadding_();
        center = calculateCenterOn(
          center,
          this.getViewportSize_(),
          [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],
          resolution,
          rotation
        );
      }
      return {
        center: center.slice(0),
        projection: projection !== undefined ? projection : null,
        resolution: resolution,
        nextCenter: this.nextCenter_,
        nextResolution: this.nextResolution_,
        nextRotation: this.nextRotation_,
        rotation: rotation,
        zoom: this.getZoom(),
      };
    }

    /**
     * @return {ViewStateAndExtent} Like `FrameState`, but just `viewState` and `extent`.
     */
    getViewStateAndExtent() {
      return {
        viewState: this.getState(),
        extent: this.calculateExtent(),
      };
    }

    /**
     * Get the current zoom level. This method may return non-integer zoom levels
     * if the view does not constrain the resolution, or if an interaction or
     * animation is underway.
     * @return {number|undefined} Zoom.
     * @api
     */
    getZoom() {
      let zoom;
      const resolution = this.getResolution();
      if (resolution !== undefined) {
        zoom = this.getZoomForResolution(resolution);
      }
      return zoom;
    }

    /**
     * Get the zoom level for a resolution.
     * @param {number} resolution The resolution.
     * @return {number|undefined} The zoom level for the provided resolution.
     * @api
     */
    getZoomForResolution(resolution) {
      let offset = this.minZoom_ || 0;
      let max, zoomFactor;
      if (this.resolutions_) {
        const nearest = linearFindNearest(this.resolutions_, resolution, 1);
        offset = nearest;
        max = this.resolutions_[nearest];
        if (nearest == this.resolutions_.length - 1) {
          zoomFactor = 2;
        } else {
          zoomFactor = max / this.resolutions_[nearest + 1];
        }
      } else {
        max = this.maxResolution_;
        zoomFactor = this.zoomFactor_;
      }
      return offset + Math.log(max / resolution) / Math.log(zoomFactor);
    }

    /**
     * Get the resolution for a zoom level.
     * @param {number} zoom Zoom level.
     * @return {number} The view resolution for the provided zoom level.
     * @api
     */
    getResolutionForZoom(zoom) {
      if (this.resolutions_) {
        if (this.resolutions_.length <= 1) {
          return 0;
        }
        const baseLevel = clamp(
          Math.floor(zoom),
          0,
          this.resolutions_.length - 2
        );
        const zoomFactor =
          this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
        return (
          this.resolutions_[baseLevel] /
          Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))
        );
      }
      return (
        this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)
      );
    }

    /**
     * Fit the given geometry or extent based on the given map size and border.
     * The size is pixel dimensions of the box to fit the extent into.
     * In most cases you will want to use the map size, that is `map.getSize()`.
     * Takes care of the map angle.
     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
     *     extent to fit the view to.
     * @param {FitOptions} [options] Options.
     * @api
     */
    fit(geometryOrExtent, options) {
      /** @type {import("./geom/SimpleGeometry.js").default} */
      let geometry;
      assert(
        Array.isArray(geometryOrExtent) ||
          typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===
            'function',
        24
      ); // Invalid extent or geometry provided as `geometry`
      if (Array.isArray(geometryOrExtent)) {
        assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
        const extent = fromUserExtent(geometryOrExtent, this.getProjection());
        geometry = fromExtent(extent);
      } else if (geometryOrExtent.getType() === 'Circle') {
        const extent = fromUserExtent(
          geometryOrExtent.getExtent(),
          this.getProjection()
        );
        geometry = fromExtent(extent);
        geometry.rotate(this.getRotation(), getCenter(extent));
      } else {
        const userProjection = getUserProjection();
        if (userProjection) {
          geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (
            geometryOrExtent
              .clone()
              .transform(userProjection, this.getProjection())
          );
        } else {
          geometry = geometryOrExtent;
        }
      }

      this.fitInternal(geometry, options);
    }

    /**
     * Calculate rotated extent
     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
     * @return {import("./extent").Extent} The rotated extent for the geometry.
     */
    rotatedExtentForGeometry(geometry) {
      const rotation = this.getRotation();
      const cosAngle = Math.cos(rotation);
      const sinAngle = Math.sin(-rotation);
      const coords = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      let minRotX = +Infinity;
      let minRotY = +Infinity;
      let maxRotX = -Infinity;
      let maxRotY = -Infinity;
      for (let i = 0, ii = coords.length; i < ii; i += stride) {
        const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
        const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
        minRotX = Math.min(minRotX, rotX);
        minRotY = Math.min(minRotY, rotY);
        maxRotX = Math.max(maxRotX, rotX);
        maxRotY = Math.max(maxRotY, rotY);
      }
      return [minRotX, minRotY, maxRotX, maxRotY];
    }

    /**
     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
     * @param {FitOptions} [options] Options.
     */
    fitInternal(geometry, options) {
      options = options || {};
      let size = options.size;
      if (!size) {
        size = this.getViewportSizeMinusPadding_();
      }
      const padding =
        options.padding !== undefined ? options.padding : [0, 0, 0, 0];
      const nearest = options.nearest !== undefined ? options.nearest : false;
      let minResolution;
      if (options.minResolution !== undefined) {
        minResolution = options.minResolution;
      } else if (options.maxZoom !== undefined) {
        minResolution = this.getResolutionForZoom(options.maxZoom);
      } else {
        minResolution = 0;
      }

      const rotatedExtent = this.rotatedExtentForGeometry(geometry);

      // calculate resolution
      let resolution = this.getResolutionForExtentInternal(rotatedExtent, [
        size[0] - padding[1] - padding[3],
        size[1] - padding[0] - padding[2],
      ]);
      resolution = isNaN(resolution)
        ? minResolution
        : Math.max(resolution, minResolution);
      resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);

      // calculate center
      const rotation = this.getRotation();
      const sinAngle = Math.sin(rotation);
      const cosAngle = Math.cos(rotation);
      const centerRot = getCenter(rotatedExtent);
      centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;
      centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;
      const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;
      const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;
      const center = this.getConstrainedCenter([centerX, centerY], resolution);
      const callback = options.callback ? options.callback : VOID;

      if (options.duration !== undefined) {
        this.animateInternal(
          {
            resolution: resolution,
            center: center,
            duration: options.duration,
            easing: options.easing,
          },
          callback
        );
      } else {
        this.targetResolution_ = resolution;
        this.targetCenter_ = center;
        this.applyTargetState_(false, true);
        animationCallback(callback, true);
      }
    }

    /**
     * Center on coordinate and view position.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     * @api
     */
    centerOn(coordinate, size, position) {
      this.centerOnInternal(
        fromUserCoordinate(coordinate, this.getProjection()),
        size,
        position
      );
    }

    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("./size.js").Size} size Box pixel size.
     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
     */
    centerOnInternal(coordinate, size, position) {
      this.setCenterInternal(
        calculateCenterOn(
          coordinate,
          size,
          position,
          this.getResolution(),
          this.getRotation()
        )
      );
    }

    /**
     * Calculates the shift between map and viewport center.
     * @param {import("./coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("./size.js").Size} size Size.
     * @return {Array<number>|undefined} Center shift.
     */
    calculateCenterShift(center, resolution, rotation, size) {
      let centerShift;
      const padding = this.padding_;
      if (padding && center) {
        const reducedSize = this.getViewportSizeMinusPadding_(-rotation);
        const shiftedCenter = calculateCenterOn(
          center,
          size,
          [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],
          resolution,
          rotation
        );
        centerShift = [
          center[0] - shiftedCenter[0],
          center[1] - shiftedCenter[1],
        ];
      }
      return centerShift;
    }

    /**
     * @return {boolean} Is defined.
     */
    isDef() {
      return !!this.getCenterInternal() && this.getResolution() !== undefined;
    }

    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     * @api
     */
    adjustCenter(deltaCoordinates) {
      const center = toUserCoordinate(this.targetCenter_, this.getProjection());
      this.setCenter([
        center[0] + deltaCoordinates[0],
        center[1] + deltaCoordinates[1],
      ]);
    }

    /**
     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
     */
    adjustCenterInternal(deltaCoordinates) {
      const center = this.targetCenter_;
      this.setCenterInternal([
        center[0] + deltaCoordinates[0],
        center[1] + deltaCoordinates[1],
      ]);
    }

    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     * @api
     */
    adjustResolution(ratio, anchor) {
      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());
      this.adjustResolutionInternal(ratio, anchor);
    }

    /**
     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} ratio The ratio to apply on the view resolution.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     */
    adjustResolutionInternal(ratio, anchor) {
      const isMoving = this.getAnimating() || this.getInteracting();
      const size = this.getViewportSize_(this.getRotation());
      const newResolution = this.constraints_.resolution(
        this.targetResolution_ * ratio,
        0,
        size,
        isMoving
      );

      if (anchor) {
        this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);
      }

      this.targetResolution_ *= ratio;
      this.applyTargetState_();
    }

    /**
     * Adds a value to the view zoom level, optionally using an anchor. Any resolution
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom level.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     * @api
     */
    adjustZoom(delta, anchor) {
      this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);
    }

    /**
     * Adds a value to the view rotation, optionally using an anchor. Any rotation
     * constraint will apply.
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
     * @api
     */
    adjustRotation(delta, anchor) {
      if (anchor) {
        anchor = fromUserCoordinate(anchor, this.getProjection());
      }
      this.adjustRotationInternal(delta, anchor);
    }

    /**
     * @param {number} delta Relative value to add to the zoom rotation, in radians.
     * @param {import("./coordinate.js").Coordinate} [anchor] The rotation center.
     */
    adjustRotationInternal(delta, anchor) {
      const isMoving = this.getAnimating() || this.getInteracting();
      const newRotation = this.constraints_.rotation(
        this.targetRotation_ + delta,
        isMoving
      );
      if (anchor) {
        this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);
      }
      this.targetRotation_ += delta;
      this.applyTargetState_();
    }

    /**
     * Set the center of the current view. Any extent constraint will apply.
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     * @observable
     * @api
     */
    setCenter(center) {
      this.setCenterInternal(
        center ? fromUserCoordinate(center, this.getProjection()) : center
      );
    }

    /**
     * Set the center using the view projection (not the user projection).
     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
     */
    setCenterInternal(center) {
      this.targetCenter_ = center;
      this.applyTargetState_();
    }

    /**
     * @param {import("./ViewHint.js").default} hint Hint.
     * @param {number} delta Delta.
     * @return {number} New value.
     */
    setHint(hint, delta) {
      this.hints_[hint] += delta;
      this.changed();
      return this.hints_[hint];
    }

    /**
     * Set the resolution for this view. Any resolution constraint will apply.
     * @param {number|undefined} resolution The resolution of the view.
     * @observable
     * @api
     */
    setResolution(resolution) {
      this.targetResolution_ = resolution;
      this.applyTargetState_();
    }

    /**
     * Set the rotation for this view. Any rotation constraint will apply.
     * @param {number} rotation The rotation of the view in radians.
     * @observable
     * @api
     */
    setRotation(rotation) {
      this.targetRotation_ = rotation;
      this.applyTargetState_();
    }

    /**
     * Zoom to a specific zoom level. Any resolution constrain will apply.
     * @param {number} zoom Zoom level.
     * @api
     */
    setZoom(zoom) {
      this.setResolution(this.getResolutionForZoom(zoom));
    }

    /**
     * Recompute rotation/resolution/center based on target values.
     * Note: we have to compute rotation first, then resolution and center considering that
     * parameters can influence one another in case a view extent constraint is present.
     * @param {boolean} [doNotCancelAnims] Do not cancel animations.
     * @param {boolean} [forceMoving] Apply constraints as if the view is moving.
     * @private
     */
    applyTargetState_(doNotCancelAnims, forceMoving) {
      const isMoving =
        this.getAnimating() || this.getInteracting() || forceMoving;

      // compute rotation
      const newRotation = this.constraints_.rotation(
        this.targetRotation_,
        isMoving
      );
      const size = this.getViewportSize_(newRotation);
      const newResolution = this.constraints_.resolution(
        this.targetResolution_,
        0,
        size,
        isMoving
      );
      const newCenter = this.constraints_.center(
        this.targetCenter_,
        newResolution,
        size,
        isMoving,
        this.calculateCenterShift(
          this.targetCenter_,
          newResolution,
          newRotation,
          size
        )
      );

      if (this.get(ViewProperty.ROTATION) !== newRotation) {
        this.set(ViewProperty.ROTATION, newRotation);
      }
      if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
        this.set(ViewProperty.RESOLUTION, newResolution);
        this.set('zoom', this.getZoom(), true);
      }
      if (
        !newCenter ||
        !this.get(ViewProperty.CENTER) ||
        !equals$1(this.get(ViewProperty.CENTER), newCenter)
      ) {
        this.set(ViewProperty.CENTER, newCenter);
      }

      if (this.getAnimating() && !doNotCancelAnims) {
        this.cancelAnimations();
      }
      this.cancelAnchor_ = undefined;
    }

    /**
     * If any constraints need to be applied, an animation will be triggered.
     * This is typically done on interaction end.
     * Note: calling this with a duration of 0 will apply the constrained values straight away,
     * without animation.
     * @param {number} [duration] The animation duration in ms.
     * @param {number} [resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     */
    resolveConstraints(duration, resolutionDirection, anchor) {
      duration = duration !== undefined ? duration : 200;
      const direction = resolutionDirection || 0;

      const newRotation = this.constraints_.rotation(this.targetRotation_);
      const size = this.getViewportSize_(newRotation);
      const newResolution = this.constraints_.resolution(
        this.targetResolution_,
        direction,
        size
      );
      const newCenter = this.constraints_.center(
        this.targetCenter_,
        newResolution,
        size,
        false,
        this.calculateCenterShift(
          this.targetCenter_,
          newResolution,
          newRotation,
          size
        )
      );

      if (duration === 0 && !this.cancelAnchor_) {
        this.targetResolution_ = newResolution;
        this.targetRotation_ = newRotation;
        this.targetCenter_ = newCenter;
        this.applyTargetState_();
        return;
      }

      anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
      this.cancelAnchor_ = undefined;

      if (
        this.getResolution() !== newResolution ||
        this.getRotation() !== newRotation ||
        !this.getCenterInternal() ||
        !equals$1(this.getCenterInternal(), newCenter)
      ) {
        if (this.getAnimating()) {
          this.cancelAnimations();
        }

        this.animateInternal({
          rotation: newRotation,
          center: newCenter,
          resolution: newResolution,
          duration: duration,
          easing: easeOut,
          anchor: anchor,
        });
      }
    }

    /**
     * Notify the View that an interaction has started.
     * The view state will be resolved to a stable one if needed
     * (depending on its constraints).
     * @api
     */
    beginInteraction() {
      this.resolveConstraints(0);

      this.setHint(ViewHint.INTERACTING, 1);
    }

    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number} [duration] Animation duration in ms.
     * @param {number} [resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     * @api
     */
    endInteraction(duration, resolutionDirection, anchor) {
      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());
      this.endInteractionInternal(duration, resolutionDirection, anchor);
    }

    /**
     * Notify the View that an interaction has ended. The view state will be resolved
     * to a stable one if needed (depending on its constraints).
     * @param {number} [duration] Animation duration in ms.
     * @param {number} [resolutionDirection] Which direction to zoom.
     * @param {import("./coordinate.js").Coordinate} [anchor] The origin of the transformation.
     */
    endInteractionInternal(duration, resolutionDirection, anchor) {
      if (!this.getInteracting()) {
        return;
      }
      this.setHint(ViewHint.INTERACTING, -1);
      this.resolveConstraints(duration, resolutionDirection, anchor);
    }

    /**
     * Get a valid position for the view center according to the current constraints.
     * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
     * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.
     * This is useful to guess a valid center position at a different zoom level.
     * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
     */
    getConstrainedCenter(targetCenter, targetResolution) {
      const size = this.getViewportSize_(this.getRotation());
      return this.constraints_.center(
        targetCenter,
        targetResolution || this.getResolution(),
        size
      );
    }

    /**
     * Get a valid zoom level according to the current view constraints.
     * @param {number|undefined} targetZoom Target zoom.
     * @param {number} [direction=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @return {number|undefined} Valid zoom level.
     */
    getConstrainedZoom(targetZoom, direction) {
      const targetRes = this.getResolutionForZoom(targetZoom);
      return this.getZoomForResolution(
        this.getConstrainedResolution(targetRes, direction)
      );
    }

    /**
     * Get a valid resolution according to the current view constraints.
     * @param {number|undefined} targetResolution Target resolution.
     * @param {number} [direction=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     * @return {number|undefined} Valid resolution.
     */
    getConstrainedResolution(targetResolution, direction) {
      direction = direction || 0;
      const size = this.getViewportSize_(this.getRotation());

      return this.constraints_.resolution(targetResolution, direction, size);
    }
  }

  /**
   * @param {Function} callback Callback.
   * @param {*} returnValue Return value.
   */
  function animationCallback(callback, returnValue) {
    setTimeout(function () {
      callback(returnValue);
    }, 0);
  }

  /**
   * @param {ViewOptions} options View options.
   * @return {import("./centerconstraint.js").Type} The constraint.
   */
  function createCenterConstraint(options) {
    if (options.extent !== undefined) {
      const smooth =
        options.smoothExtentConstraint !== undefined
          ? options.smoothExtentConstraint
          : true;
      return createExtent(options.extent, options.constrainOnlyCenter, smooth);
    }

    const projection = createProjection(options.projection, 'EPSG:3857');
    if (options.multiWorld !== true && projection.isGlobal()) {
      const extent = projection.getExtent().slice();
      extent[0] = -Infinity;
      extent[2] = Infinity;
      return createExtent(extent, false, false);
    }

    return none$1;
  }

  /**
   * @param {ViewOptions} options View options.
   * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
   *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
   */
  function createResolutionConstraint(options) {
    let resolutionConstraint;
    let maxResolution;
    let minResolution;

    // TODO: move these to be ol constants
    // see https://github.com/openlayers/openlayers/issues/2076
    const defaultMaxZoom = 28;
    const defaultZoomFactor = 2;

    let minZoom =
      options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;

    let maxZoom =
      options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;

    const zoomFactor =
      options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;

    const multiWorld =
      options.multiWorld !== undefined ? options.multiWorld : false;

    const smooth =
      options.smoothResolutionConstraint !== undefined
        ? options.smoothResolutionConstraint
        : true;

    const showFullExtent =
      options.showFullExtent !== undefined ? options.showFullExtent : false;

    const projection = createProjection(options.projection, 'EPSG:3857');
    const projExtent = projection.getExtent();
    let constrainOnlyCenter = options.constrainOnlyCenter;
    let extent = options.extent;
    if (!multiWorld && !extent && projection.isGlobal()) {
      constrainOnlyCenter = false;
      extent = projExtent;
    }

    if (options.resolutions !== undefined) {
      const resolutions = options.resolutions;
      maxResolution = resolutions[minZoom];
      minResolution =
        resolutions[maxZoom] !== undefined
          ? resolutions[maxZoom]
          : resolutions[resolutions.length - 1];

      if (options.constrainResolution) {
        resolutionConstraint = createSnapToResolutions(
          resolutions,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent
        );
      } else {
        resolutionConstraint = createMinMaxResolution(
          maxResolution,
          minResolution,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent
        );
      }
    } else {
      // calculate the default min and max resolution
      const size = !projExtent
        ? // use an extent that can fit the whole world if need be
          (360 * METERS_PER_UNIT$1.degrees) / projection.getMetersPerUnit()
        : Math.max(getWidth(projExtent), getHeight(projExtent));

      const defaultMaxResolution =
        size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);

      const defaultMinResolution =
        defaultMaxResolution /
        Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);

      // user provided maxResolution takes precedence
      maxResolution = options.maxResolution;
      if (maxResolution !== undefined) {
        minZoom = 0;
      } else {
        maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
      }

      // user provided minResolution takes precedence
      minResolution = options.minResolution;
      if (minResolution === undefined) {
        if (options.maxZoom !== undefined) {
          if (options.maxResolution !== undefined) {
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
          } else {
            minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
          }
        } else {
          minResolution = defaultMinResolution;
        }
      }

      // given discrete zoom levels, minResolution may be different than provided
      maxZoom =
        minZoom +
        Math.floor(
          Math.log(maxResolution / minResolution) / Math.log(zoomFactor)
        );
      minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);

      if (options.constrainResolution) {
        resolutionConstraint = createSnapToPower(
          zoomFactor,
          maxResolution,
          minResolution,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent
        );
      } else {
        resolutionConstraint = createMinMaxResolution(
          maxResolution,
          minResolution,
          smooth,
          !constrainOnlyCenter && extent,
          showFullExtent
        );
      }
    }
    return {
      constraint: resolutionConstraint,
      maxResolution: maxResolution,
      minResolution: minResolution,
      minZoom: minZoom,
      zoomFactor: zoomFactor,
    };
  }

  /**
   * @param {ViewOptions} options View options.
   * @return {import("./rotationconstraint.js").Type} Rotation constraint.
   */
  function createRotationConstraint(options) {
    const enableRotation =
      options.enableRotation !== undefined ? options.enableRotation : true;
    if (enableRotation) {
      const constrainRotation = options.constrainRotation;
      if (constrainRotation === undefined || constrainRotation === true) {
        return createSnapToZero();
      } else if (constrainRotation === false) {
        return none;
      } else if (typeof constrainRotation === 'number') {
        return createSnapToN(constrainRotation);
      }
      return none;
    }
    return disable;
  }

  /**
   * Determine if an animation involves no view change.
   * @param {Animation} animation The animation.
   * @return {boolean} The animation involves no view change.
   */
  function isNoopAnimation(animation) {
    if (animation.sourceCenter && animation.targetCenter) {
      if (!equals$1(animation.sourceCenter, animation.targetCenter)) {
        return false;
      }
    }
    if (animation.sourceResolution !== animation.targetResolution) {
      return false;
    }
    if (animation.sourceRotation !== animation.targetRotation) {
      return false;
    }
    return true;
  }

  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {import("./size.js").Size} size Box pixel size.
   * @param {import("./pixel.js").Pixel} position Position on the view to center on.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @return {import("./coordinate.js").Coordinate} Shifted center.
   */
  function calculateCenterOn(coordinate, size, position, resolution, rotation) {
    // calculate rotated position
    const cosAngle = Math.cos(-rotation);
    let sinAngle = Math.sin(-rotation);
    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
    rotX += (size[0] / 2 - position[0]) * resolution;
    rotY += (position[1] - size[1] / 2) * resolution;

    // go back to original angle
    sinAngle = -sinAngle; // go back to original rotation
    const centerX = rotX * cosAngle - rotY * sinAngle;
    const centerY = rotY * cosAngle + rotX * sinAngle;

    return [centerX, centerY];
  }

  var View$1 = View;

  /**
   * @module ol/layer/Layer
   */

  /**
   * @typedef {function(import("../Map.js").FrameState):HTMLElement} RenderFunction
   */

  /**
   * @typedef {'sourceready'|'change:source'} LayerEventType
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     LayerEventType, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|LayerEventType|
   *     import("../render/EventType").LayerRenderEventTypes, Return>} LayerOnSignature
   */

  /**
   * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,
   * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after
   * construction.
   * @property {import("../Map.js").default|null} [map] Map.
   * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
   * HTML element. Will overwrite the default rendering for the layer.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @typedef {Object} State
   * @property {import("./Layer.js").default} layer Layer.
   * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
   * @property {boolean} visible Visible.
   * @property {boolean} managed Managed.
   * @property {import("../extent.js").Extent} [extent] Extent.
   * @property {number} zIndex ZIndex.
   * @property {number} maxResolution Maximum resolution.
   * @property {number} minResolution Minimum resolution.
   * @property {number} minZoom Minimum zoom.
   * @property {number} maxZoom Maximum zoom.
   */

  /**
   * @classdesc
   * Base class from which all layer types are derived. This should only be instantiated
   * in the case where a custom layer is added to the map with a custom `render` function.
   * Such a function can be specified in the `options` object, and is expected to return an HTML element.
   *
   * A visual representation of raster or vector map data.
   * Layers group together those properties that pertain to how the data is to be
   * displayed, irrespective of the source of that data.
   *
   * Layers are usually added to a map with [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers
   * internally. These unmanaged layers are associated with the map using
   * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.
   *
   * A generic `change` event is fired when the state of the source changes.
   * A `sourceready` event is fired when the layer's source is ready.
   *
   * @fires import("../render/Event.js").RenderEvent#prerender
   * @fires import("../render/Event.js").RenderEvent#postrender
   * @fires import("../events/Event.js").BaseEvent#sourceready
   *
   * @template {import("../source/Source.js").default} [SourceType=import("../source/Source.js").default]
   * @template {import("../renderer/Layer.js").default} [RendererType=import("../renderer/Layer.js").default]
   * @api
   */
  class Layer extends BaseLayer$1 {
    /**
     * @param {Options<SourceType>} options Layer options.
     */
    constructor(options) {
      const baseOptions = Object.assign({}, options);
      delete baseOptions.source;

      super(baseOptions);

      /***
       * @type {LayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {LayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {LayerOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapPrecomposeKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.mapRenderKey_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceChangeKey_ = null;

      /**
       * @private
       * @type {RendererType}
       */
      this.renderer_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.sourceReady_ = false;

      /**
       * @protected
       * @type {boolean}
       */
      this.rendered = false;

      // Overwrite default render method with a custom one
      if (options.render) {
        this.render = options.render;
      }

      if (options.map) {
        this.setMap(options.map);
      }

      this.addChangeListener(
        LayerProperty.SOURCE,
        this.handleSourcePropertyChange_
      );

      const source = options.source
        ? /** @type {SourceType} */ (options.source)
        : null;
      this.setSource(source);
    }

    /**
     * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    getLayersArray(array) {
      array = array ? array : [];
      array.push(this);
      return array;
    }

    /**
     * @param {Array<import("./Layer.js").State>} [states] Optional list of layer states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    getLayerStatesArray(states) {
      states = states ? states : [];
      states.push(this.getLayerState());
      return states;
    }

    /**
     * Get the layer source.
     * @return {SourceType|null} The layer source (or `null` if not yet set).
     * @observable
     * @api
     */
    getSource() {
      return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
    }

    /**
     * @return {SourceType|null} The source being rendered.
     */
    getRenderSource() {
      return this.getSource();
    }

    /**
     * @return {import("../source/Source.js").State} Source state.
     */
    getSourceState() {
      const source = this.getSource();
      return !source ? 'undefined' : source.getState();
    }

    /**
     * @private
     */
    handleSourceChange_() {
      this.changed();
      if (this.sourceReady_ || this.getSource().getState() !== 'ready') {
        return;
      }
      this.sourceReady_ = true;
      this.dispatchEvent('sourceready');
    }

    /**
     * @private
     */
    handleSourcePropertyChange_() {
      if (this.sourceChangeKey_) {
        unlistenByKey(this.sourceChangeKey_);
        this.sourceChangeKey_ = null;
      }
      this.sourceReady_ = false;
      const source = this.getSource();
      if (source) {
        this.sourceChangeKey_ = listen(
          source,
          EventType.CHANGE,
          this.handleSourceChange_,
          this
        );
        if (source.getState() === 'ready') {
          this.sourceReady_ = true;
          setTimeout(() => {
            this.dispatchEvent('sourceready');
          }, 0);
        }
      }
      this.changed();
    }

    /**
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
     * an array of features.
     */
    getFeatures(pixel) {
      if (!this.renderer_) {
        return Promise.resolve([]);
      }
      return this.renderer_.getFeatures(pixel);
    }

    /**
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     */
    getData(pixel) {
      if (!this.renderer_ || !this.rendered) {
        return null;
      }
      return this.renderer_.getData(pixel);
    }

    /**
     * The layer is visible in the given view, i.e. within its min/max resolution or zoom and
     * extent, and `getVisible()` is `true`.
     * @param {View|import("../View.js").ViewStateAndExtent} view View or {@link import("../Map.js").FrameState}.
     * @return {boolean} The layer is visible in the current view.
     * @api
     */
    isVisible(view) {
      let frameState;
      if (view instanceof View$1) {
        frameState = {
          viewState: view.getState(),
          extent: view.calculateExtent(),
        };
      } else {
        frameState = view;
      }
      const layerExtent = this.getExtent();
      return (
        this.getVisible() &&
        inView(this.getLayerState(), frameState.viewState) &&
        (!layerExtent || intersects$2(layerExtent, frameState.extent))
      );
    }

    /**
     * Get the attributions of the source of this layer for the given view.
     * @param {View|import("../View.js").ViewStateAndExtent} view View or  {@link import("../Map.js").FrameState}.
     * @return {Array<string>} Attributions for this layer at the given view.
     * @api
     */
    getAttributions(view) {
      if (!this.isVisible(view)) {
        return [];
      }
      let getAttributions;
      const source = this.getSource();
      if (source) {
        getAttributions = source.getAttributions();
      }
      if (!getAttributions) {
        return [];
      }
      const frameState =
        view instanceof View$1 ? view.getViewStateAndExtent() : view;
      let attributions = getAttributions(frameState);
      if (!Array.isArray(attributions)) {
        attributions = [attributions];
      }
      return attributions;
    }

    /**
     * In charge to manage the rendering of the layer. One layer type is
     * bounded with one layer renderer.
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target which the renderer may (but need not) use
     * for rendering its content.
     * @return {HTMLElement} The rendered element.
     */
    render(frameState, target) {
      const layerRenderer = this.getRenderer();

      if (layerRenderer.prepareFrame(frameState)) {
        this.rendered = true;
        return layerRenderer.renderFrame(frameState, target);
      }
    }

    /**
     * Called when a layer is not visible during a map render.
     */
    unrender() {
      this.rendered = false;
    }

    /**
     * For use inside the library only.
     * @param {import("../Map.js").default|null} map Map.
     */
    setMapInternal(map) {
      if (!map) {
        this.unrender();
      }
      this.set(LayerProperty.MAP, map);
    }

    /**
     * For use inside the library only.
     * @return {import("../Map.js").default|null} Map.
     */
    getMapInternal() {
      return this.get(LayerProperty.MAP);
    }

    /**
     * Sets the layer to be rendered on top of other layers on a map. The map will
     * not manage this layer in its layers collection. This
     * is useful for temporary layers. To remove an unmanaged layer from the map,
     * use `#setMap(null)`.
     *
     * To add the layer to a map and have it managed by the map, use
     * {@link module:ol/Map~Map#addLayer} instead.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      if (this.mapPrecomposeKey_) {
        unlistenByKey(this.mapPrecomposeKey_);
        this.mapPrecomposeKey_ = null;
      }
      if (!map) {
        this.changed();
      }
      if (this.mapRenderKey_) {
        unlistenByKey(this.mapRenderKey_);
        this.mapRenderKey_ = null;
      }
      if (map) {
        this.mapPrecomposeKey_ = listen(
          map,
          RenderEventType.PRECOMPOSE,
          function (evt) {
            const renderEvent =
              /** @type {import("../render/Event.js").default} */ (evt);
            const layerStatesArray = renderEvent.frameState.layerStatesArray;
            const layerState = this.getLayerState(false);
            // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
            assert(
              !layerStatesArray.some(function (arrayLayerState) {
                return arrayLayerState.layer === layerState.layer;
              }),
              67
            );
            layerStatesArray.push(layerState);
          },
          this
        );
        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
        this.changed();
      }
    }

    /**
     * Set the layer source.
     * @param {SourceType|null} source The layer source.
     * @observable
     * @api
     */
    setSource(source) {
      this.set(LayerProperty.SOURCE, source);
    }

    /**
     * Get the renderer for this layer.
     * @return {RendererType|null} The layer renderer.
     */
    getRenderer() {
      if (!this.renderer_) {
        this.renderer_ = this.createRenderer();
      }
      return this.renderer_;
    }

    /**
     * @return {boolean} The layer has a renderer.
     */
    hasRenderer() {
      return !!this.renderer_;
    }

    /**
     * Create a renderer for this layer.
     * @return {RendererType} A layer renderer.
     * @protected
     */
    createRenderer() {
      return null;
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      if (this.renderer_) {
        this.renderer_.dispose();
        delete this.renderer_;
      }

      this.setSource(null);
      super.disposeInternal();
    }
  }

  /**
   * Return `true` if the layer is visible and if the provided view state
   * has resolution and zoom levels that are in range of the layer's min/max.
   * @param {State} layerState Layer state.
   * @param {import("../View.js").State} viewState View state.
   * @return {boolean} The layer is visible at the given view state.
   */
  function inView(layerState, viewState) {
    if (!layerState.visible) {
      return false;
    }
    const resolution = viewState.resolution;
    if (
      resolution < layerState.minResolution ||
      resolution >= layerState.maxResolution
    ) {
      return false;
    }
    const zoom = viewState.zoom;
    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
  }

  var Layer$1 = Layer;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var rbush_min = {exports: {}};

  (function (module, exports) {
  !function(t,i){module.exports=i();}(commonjsGlobal,function(){function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h);}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--;}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1);}}(t,r,e||0,a||t.length-1,h||n);}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r;}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear();};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return -1}function a(t,i){h(t,0,t.children.length,i,t);}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h);}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return (t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return {children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r);}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h));}i=e.pop();}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return !1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return !0;n.push(e);}}i=n.pop();}return !1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else {if(this.data.height<n.height){var r=this.data;this.data=n,n=r;}this._insert(n,this.data.height-n.height-1,!0);}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0]);}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1));}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s);}i=h||i.children[0];}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i);},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o);},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox);},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p);}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r);},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a);}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s);}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t);},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox);},r});
  }(rbush_min));

  var RBush$2 = rbush_min.exports;

  /**
   * @module ol/style/IconImageCache
   */

  /**
   * @classdesc
   * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.
   */
  class IconImageCache {
    constructor() {
      /**
       * @type {!Object<string, import("./IconImage.js").default>}
       * @private
       */
      this.cache_ = {};

      /**
       * @type {number}
       * @private
       */
      this.cacheSize_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.maxCacheSize_ = 32;
    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.cache_ = {};
      this.cacheSize_ = 0;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.cacheSize_ > this.maxCacheSize_;
    }

    /**
     * FIXME empty description for jsdoc
     */
    expire() {
      if (this.canExpireCache()) {
        let i = 0;
        for (const key in this.cache_) {
          const iconImage = this.cache_[key];
          if ((i++ & 3) === 0 && !iconImage.hasListener()) {
            delete this.cache_[key];
            --this.cacheSize_;
          }
        }
      }
    }

    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @return {import("./IconImage.js").default} Icon image.
     */
    get(src, crossOrigin, color) {
      const key = getKey$1(src, crossOrigin, color);
      return key in this.cache_ ? this.cache_[key] : null;
    }

    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @param {import("./IconImage.js").default} iconImage Icon image.
     */
    set(src, crossOrigin, color, iconImage) {
      const key = getKey$1(src, crossOrigin, color);
      this.cache_[key] = iconImage;
      ++this.cacheSize_;
    }

    /**
     * Set the cache size of the icon cache. Default is `32`. Change this value when
     * your map uses more than 32 different icon images and you are not caching icon
     * styles on the application level.
     * @param {number} maxCacheSize Cache max size.
     * @api
     */
    setSize(maxCacheSize) {
      this.maxCacheSize_ = maxCacheSize;
      this.expire();
    }
  }

  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @return {string} Cache key.
   */
  function getKey$1(src, crossOrigin, color) {
    const colorString = color ? asString(color) : 'null';
    return crossOrigin + ':' + src + ':' + colorString;
  }

  /**
   * The {@link module:ol/style/IconImageCache~IconImageCache} for
   * {@link module:ol/style/Icon~Icon} images.
   * @api
   */
  const shared = new IconImageCache();

  /**
   * @module ol/ImageBase
   */

  /**
   * @abstract
   */
  class ImageBase extends EventTarget {
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number|undefined} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./ImageState.js").default} state State.
     */
    constructor(extent, resolution, pixelRatio, state) {
      super();

      /**
       * @protected
       * @type {import("./extent.js").Extent}
       */
      this.extent = extent;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @protected
       * @type {number|undefined}
       */
      this.resolution = resolution;

      /**
       * @protected
       * @type {import("./ImageState.js").default}
       */
      this.state = state;
    }

    /**
     * @protected
     */
    changed() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * @return {import("./extent.js").Extent} Extent.
     */
    getExtent() {
      return this.extent;
    }

    /**
     * @abstract
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */
    getImage() {
      return abstract();
    }

    /**
     * @return {number} PixelRatio.
     */
    getPixelRatio() {
      return this.pixelRatio_;
    }

    /**
     * @return {number} Resolution.
     */
    getResolution() {
      return /** @type {number} */ (this.resolution);
    }

    /**
     * @return {import("./ImageState.js").default} State.
     */
    getState() {
      return this.state;
    }

    /**
     * Load not yet loaded URI.
     * @abstract
     */
    load() {
      abstract();
    }
  }

  var ImageBase$1 = ImageBase;

  /**
   * @module ol/Image
   */

  /**
   * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a
   * `{string}` for the src as arguments. It is supposed to make it so the
   * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the
   * content specified by the src. If not specified, the default is
   *
   *     function(image, src) {
   *       image.getImage().src = src;
   *     }
   *
   * Providing a custom `imageLoadFunction` can be useful to load images with
   * post requests or - in general - through XHR requests, where the src of the
   * image element would be set to a data URI when the content is loaded.
   *
   * @typedef {function(ImageWrapper, string): void} LoadFunction
   * @api
   */

  class ImageWrapper extends ImageBase$1 {
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number|undefined} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {LoadFunction} imageLoadFunction Image load function.
     * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be
     *    drawn into the context's canvas, and `getImage()` will return the canvas once the image
     *    has finished loading.
     */
    constructor(
      extent,
      resolution,
      pixelRatio,
      src,
      crossOrigin,
      imageLoadFunction,
      context
    ) {
      super(extent, resolution, pixelRatio, ImageState.IDLE);

      /**
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = context;

      /**
       * @private
       * @type {?function():void}
       */
      this.unlisten_ = null;

      /**
       * @protected
       * @type {import("./ImageState.js").default}
       */
      this.state = ImageState.IDLE;

      /**
       * @private
       * @type {LoadFunction}
       */
      this.imageLoadFunction_ = imageLoadFunction;
    }

    /**
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */
    getImage() {
      if (
        this.state == ImageState.LOADED &&
        this.context_ &&
        !(this.image_ instanceof HTMLCanvasElement)
      ) {
        const canvas = this.context_.canvas;
        canvas.width = this.image_.width;
        canvas.height = this.image_.height;
        this.context_.drawImage(this.image_, 0, 0);
        this.image_ = this.context_.canvas;
      }
      return this.image_;
    }

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    handleImageError_() {
      this.state = ImageState.ERROR;
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Tracks successful image load.
     *
     * @private
     */
    handleImageLoad_() {
      if (this.resolution === undefined) {
        this.resolution = getHeight(this.extent) / this.image_.height;
      }
      this.state = ImageState.LOADED;
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @api
     */
    load() {
      if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
        this.state = ImageState.LOADING;
        this.changed();
        this.imageLoadFunction_(this, this.src_);
        this.unlisten_ = listenImage(
          this.image_,
          this.handleImageLoad_.bind(this),
          this.handleImageError_.bind(this)
        );
      }
    }

    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
     */
    setImage(image) {
      this.image_ = image;
      this.resolution = getHeight(this.extent) / this.image_.height;
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }
  }

  /**
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
   * @param {function():any} loadHandler Load callback function.
   * @param {function():any} errorHandler Error callback function.
   * @return {function():void} Callback to stop listening.
   */
  function listenImage(image, loadHandler, errorHandler) {
    const img = /** @type {HTMLImageElement} */ (image);
    let listening = true;
    let decoding = false;
    let loaded = false;

    const listenerKeys = [
      listenOnce(img, EventType.LOAD, function () {
        loaded = true;
        if (!decoding) {
          loadHandler();
        }
      }),
    ];

    if (img.src && IMAGE_DECODE) {
      decoding = true;
      img
        .decode()
        .then(function () {
          if (listening) {
            loadHandler();
          }
        })
        .catch(function (error) {
          if (listening) {
            if (loaded) {
              loadHandler();
            } else {
              errorHandler();
            }
          }
        });
    } else {
      listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));
    }

    return function unlisten() {
      listening = false;
      listenerKeys.forEach(unlistenByKey);
    };
  }

  var Image$1 = ImageWrapper;

  /**
   * @module ol/style/IconImage
   */

  /**
   * @type {CanvasRenderingContext2D}
   */
  let taintedTestContext = null;

  class IconImage extends EventTarget {
    /**
     * @param {HTMLImageElement|HTMLCanvasElement} image Image.
     * @param {string|undefined} src Src.
     * @param {import("../size.js").Size} size Size.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../ImageState.js").default} imageState Image state.
     * @param {import("../color.js").Color} color Color.
     */
    constructor(image, src, size, crossOrigin, imageState, color) {
      super();

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = image;

      /**
       * @private
       * @type {string|null}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * @private
       * @type {Object<number, HTMLCanvasElement>}
       */
      this.canvas_ = {};

      /**
       * @private
       * @type {import("../color.js").Color}
       */
      this.color_ = color;

      /**
       * @private
       * @type {?function():void}
       */
      this.unlisten_ = null;

      /**
       * @private
       * @type {import("../ImageState.js").default}
       */
      this.imageState_ = imageState;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = size;

      /**
       * @private
       * @type {string|undefined}
       */
      this.src_ = src;

      /**
       * @private
       */
      this.tainted_;
    }

    /**
     * @private
     */
    initializeImage_() {
      this.image_ = new Image();
      if (this.crossOrigin_ !== null) {
        this.image_.crossOrigin = this.crossOrigin_;
      }
    }

    /**
     * @private
     * @return {boolean} The image canvas is tainted.
     */
    isTainted_() {
      if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {
        if (!taintedTestContext) {
          taintedTestContext = createCanvasContext2D(1, 1, undefined, {
            willReadFrequently: true,
          });
        }
        taintedTestContext.drawImage(this.image_, 0, 0);
        try {
          taintedTestContext.getImageData(0, 0, 1, 1);
          this.tainted_ = false;
        } catch (e) {
          taintedTestContext = null;
          this.tainted_ = true;
        }
      }
      return this.tainted_ === true;
    }

    /**
     * @private
     */
    dispatchChangeEvent_() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * @private
     */
    handleImageError_() {
      this.imageState_ = ImageState.ERROR;
      this.unlistenImage_();
      this.dispatchChangeEvent_();
    }

    /**
     * @private
     */
    handleImageLoad_() {
      this.imageState_ = ImageState.LOADED;
      if (this.size_) {
        this.image_.width = this.size_[0];
        this.image_.height = this.size_[1];
      } else {
        this.size_ = [this.image_.width, this.image_.height];
      }
      this.unlistenImage_();
      this.dispatchChangeEvent_();
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
     */
    getImage(pixelRatio) {
      if (!this.image_) {
        this.initializeImage_();
      }
      this.replaceColor_(pixelRatio);
      return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Image or Canvas element.
     */
    getPixelRatio(pixelRatio) {
      this.replaceColor_(pixelRatio);
      return this.canvas_[pixelRatio] ? pixelRatio : 1;
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return this.imageState_;
    }

    /**
     * @return {HTMLImageElement|HTMLCanvasElement} Image element.
     */
    getHitDetectionImage() {
      if (!this.image_) {
        this.initializeImage_();
      }
      if (!this.hitDetectionImage_) {
        if (this.isTainted_()) {
          const width = this.size_[0];
          const height = this.size_[1];
          const context = createCanvasContext2D(width, height);
          context.fillRect(0, 0, width, height);
          this.hitDetectionImage_ = context.canvas;
        } else {
          this.hitDetectionImage_ = this.image_;
        }
      }
      return this.hitDetectionImage_;
    }

    /**
     * Get the size of the icon (in pixels).
     * @return {import("../size.js").Size} Image size.
     */
    getSize() {
      return this.size_;
    }

    /**
     * @return {string|undefined} Image src.
     */
    getSrc() {
      return this.src_;
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.imageState_ !== ImageState.IDLE) {
        return;
      }
      if (!this.image_) {
        this.initializeImage_();
      }

      this.imageState_ = ImageState.LOADING;
      try {
        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
      } catch (e) {
        this.handleImageError_();
      }
      this.unlisten_ = listenImage(
        this.image_,
        this.handleImageLoad_.bind(this),
        this.handleImageError_.bind(this)
      );
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @private
     */
    replaceColor_(pixelRatio) {
      if (
        !this.color_ ||
        this.canvas_[pixelRatio] ||
        this.imageState_ !== ImageState.LOADED
      ) {
        return;
      }

      const image = this.image_;
      const canvas = document.createElement('canvas');
      canvas.width = Math.ceil(image.width * pixelRatio);
      canvas.height = Math.ceil(image.height * pixelRatio);

      const ctx = canvas.getContext('2d');
      ctx.scale(pixelRatio, pixelRatio);
      ctx.drawImage(image, 0, 0);

      ctx.globalCompositeOperation = 'multiply';
      ctx.fillStyle = asString(this.color_);
      ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);

      ctx.globalCompositeOperation = 'destination-in';
      ctx.drawImage(image, 0, 0);

      this.canvas_[pixelRatio] = canvas;
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }
  }

  /**
   * @param {HTMLImageElement|HTMLCanvasElement} image Image.
   * @param {string} src Src.
   * @param {import("../size.js").Size} size Size.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../ImageState.js").default} imageState Image state.
   * @param {import("../color.js").Color} color Color.
   * @return {IconImage} Icon image.
   */
  function get$1(image, src, size, crossOrigin, imageState, color) {
    let iconImage = shared.get(src, crossOrigin, color);
    if (!iconImage) {
      iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
      shared.set(src, crossOrigin, color, iconImage);
    }
    return iconImage;
  }

  var IconImage$1 = IconImage;

  /**
   * @module ol/style/Icon
   */

  /**
   * @typedef {'fraction' | 'pixels'} IconAnchorUnits
   * Anchor unit can be either a fraction of the icon size or in pixels.
   */

  /**
   * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin
   * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
   */

  /**
   * @typedef {Object} Options
   * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
   * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is
   * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
   * the x value in pixels.
   * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is
   * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
   * the y value in pixels.
   * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
   * the icon will be left as is.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
   * provided image must already be loaded. And in that case, it is required
   * to provide the size of the image, with the `imgSize` option.
   * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.
   * The provided `imgSize` needs to match the actual size of the image.
   * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.
   * Positive values will shift the icon right and up.
   * @property {number} [opacity=1] Opacity of the icon.
   * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.
   * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.
   * @property {number|import("../size.js").Size} [scale=1] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the
   * sub-rectangle to use from the original (sprite) image.
   * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {import("../size.js").Size} [size] Icon size in pixels. Used together with `offset` to define the
   * sub-rectangle to use from the original (sprite) image.
   * @property {string} [src] Image source URI.
   * @property {"declutter"|"obstacle"|"none"|undefined} [declutterMode] Declutter mode.
   */

  /**
   * @classdesc
   * Set icon style for vector features.
   * @api
   */
  class Icon extends ImageStyle$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      /**
       * @type {number}
       */
      const opacity = options.opacity !== undefined ? options.opacity : 1;

      /**
       * @type {number}
       */
      const rotation = options.rotation !== undefined ? options.rotation : 0;

      /**
       * @type {number|import("../size.js").Size}
       */
      const scale = options.scale !== undefined ? options.scale : 1;

      /**
       * @type {boolean}
       */
      const rotateWithView =
        options.rotateWithView !== undefined ? options.rotateWithView : false;

      super({
        opacity: opacity,
        rotation: rotation,
        scale: scale,
        displacement:
          options.displacement !== undefined ? options.displacement : [0, 0],
        rotateWithView: rotateWithView,
        declutterMode: options.declutterMode,
      });

      /**
       * @private
       * @type {Array<number>}
       */
      this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];

      /**
       * @private
       * @type {Array<number>}
       */
      this.normalizedAnchor_ = null;

      /**
       * @private
       * @type {IconOrigin}
       */
      this.anchorOrigin_ =
        options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';

      /**
       * @private
       * @type {IconAnchorUnits}
       */
      this.anchorXUnits_ =
        options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';

      /**
       * @private
       * @type {IconAnchorUnits}
       */
      this.anchorYUnits_ =
        options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      const image = options.img !== undefined ? options.img : null;

      /**
       * @private
       * @type {import("../size.js").Size|undefined}
       */
      this.imgSize_ = options.imgSize;

      /**
       * @type {string|undefined}
       */
      let src = options.src;

      assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
      assert(!image || (image && this.imgSize_), 5); // `imgSize` must be set when `image` is provided

      if ((src === undefined || src.length === 0) && image) {
        src = /** @type {HTMLImageElement} */ (image).src || getUid(image);
      }
      assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided

      // `width` or `height` cannot be provided together with `scale`
      assert(
        !(
          (options.width !== undefined || options.height !== undefined) &&
          options.scale !== undefined
        ),
        69
      );

      /**
       * @type {import("../ImageState.js").default}
       */
      const imageState =
        options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;

      /**
       * @private
       * @type {import("../color.js").Color}
       */
      this.color_ = options.color !== undefined ? asArray(options.color) : null;

      /**
       * @private
       * @type {import("./IconImage.js").default}
       */
      this.iconImage_ = get$1(
        image,
        /** @type {string} */ (src),
        this.imgSize_ !== undefined ? this.imgSize_ : null,
        this.crossOrigin_,
        imageState,
        this.color_
      );

      /**
       * @private
       * @type {Array<number>}
       */
      this.offset_ = options.offset !== undefined ? options.offset : [0, 0];
      /**
       * @private
       * @type {IconOrigin}
       */
      this.offsetOrigin_ =
        options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';

      /**
       * @private
       * @type {Array<number>}
       */
      this.origin_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.size_ = options.size !== undefined ? options.size : null;

      /**
       * @type {number|undefined}
       */
      this.width_ = options.width;

      /**
       * @type {number|undefined}
       */
      this.height_ = options.height;

      /**
       * Recalculate the scale if width or height were given.
       */
      if (this.width_ !== undefined || this.height_ !== undefined) {
        const image = this.getImage(1);
        const setScale = () => {
          this.updateScaleFromWidthAndHeight(this.width_, this.height_);
        };
        if (image.width > 0) {
          this.updateScaleFromWidthAndHeight(this.width_, this.height_);
        } else {
          image.addEventListener('load', setScale);
        }
      }
    }

    /**
     * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
     * @return {Icon} The cloned style.
     * @api
     */
    clone() {
      let scale = this.getScale();
      scale = Array.isArray(scale) ? scale.slice() : scale;
      // if either width or height are defined, do not pass scale.
      if (this.width_ !== undefined || this.height_ !== undefined) {
        scale = undefined;
      }
      return new Icon({
        anchor: this.anchor_.slice(),
        anchorOrigin: this.anchorOrigin_,
        anchorXUnits: this.anchorXUnits_,
        anchorYUnits: this.anchorYUnits_,
        color:
          this.color_ && this.color_.slice
            ? this.color_.slice()
            : this.color_ || undefined,
        crossOrigin: this.crossOrigin_,
        imgSize: this.imgSize_,
        offset: this.offset_.slice(),
        offsetOrigin: this.offsetOrigin_,
        opacity: this.getOpacity(),
        rotateWithView: this.getRotateWithView(),
        rotation: this.getRotation(),
        scale: scale,
        size: this.size_ !== null ? this.size_.slice() : undefined,
        src: this.getSrc(),
        displacement: this.getDisplacement().slice(),
        declutterMode: this.getDeclutterMode(),
        width: this.width_,
        height: this.height_,
      });
    }

    /**
     * Set the scale of the Icon by calculating it from given width and height and the
     * width and height of the image.
     *
     * @private
     * @param {number} width The width.
     * @param {number} height The height.
     */
    updateScaleFromWidthAndHeight(width, height) {
      const image = this.getImage(1);
      if (width !== undefined && height !== undefined) {
        super.setScale([width / image.width, height / image.height]);
      } else if (width !== undefined) {
        super.setScale([width / image.width, width / image.width]);
      } else if (height !== undefined) {
        super.setScale([height / image.height, height / image.height]);
      } else {
        super.setScale([1, 1]);
      }
    }

    /**
     * Get the anchor point in pixels. The anchor determines the center point for the
     * symbolizer.
     * @return {Array<number>} Anchor.
     * @api
     */
    getAnchor() {
      let anchor = this.normalizedAnchor_;
      if (!anchor) {
        anchor = this.anchor_;
        const size = this.getSize();
        if (
          this.anchorXUnits_ == 'fraction' ||
          this.anchorYUnits_ == 'fraction'
        ) {
          if (!size) {
            return null;
          }
          anchor = this.anchor_.slice();
          if (this.anchorXUnits_ == 'fraction') {
            anchor[0] *= size[0];
          }
          if (this.anchorYUnits_ == 'fraction') {
            anchor[1] *= size[1];
          }
        }

        if (this.anchorOrigin_ != 'top-left') {
          if (!size) {
            return null;
          }
          if (anchor === this.anchor_) {
            anchor = this.anchor_.slice();
          }
          if (
            this.anchorOrigin_ == 'top-right' ||
            this.anchorOrigin_ == 'bottom-right'
          ) {
            anchor[0] = -anchor[0] + size[0];
          }
          if (
            this.anchorOrigin_ == 'bottom-left' ||
            this.anchorOrigin_ == 'bottom-right'
          ) {
            anchor[1] = -anchor[1] + size[1];
          }
        }
        this.normalizedAnchor_ = anchor;
      }
      const displacement = this.getDisplacement();
      const scale = this.getScaleArray();
      // anchor is scaled by renderer but displacement should not be scaled
      // so divide by scale here
      return [
        anchor[0] - displacement[0] / scale[0],
        anchor[1] + displacement[1] / scale[1],
      ];
    }

    /**
     * Set the anchor point. The anchor determines the center point for the
     * symbolizer.
     *
     * @param {Array<number>} anchor Anchor.
     * @api
     */
    setAnchor(anchor) {
      this.anchor_ = anchor;
      this.normalizedAnchor_ = null;
    }

    /**
     * Get the icon color.
     * @return {import("../color.js").Color} Color.
     * @api
     */
    getColor() {
      return this.color_;
    }

    /**
     * Get the image icon.
     * @param {number} pixelRatio Pixel ratio.
     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
     * @api
     */
    getImage(pixelRatio) {
      return this.iconImage_.getImage(pixelRatio);
    }

    /**
     * Get the pixel ratio.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} The pixel ratio of the image.
     * @api
     */
    getPixelRatio(pixelRatio) {
      return this.iconImage_.getPixelRatio(pixelRatio);
    }

    /**
     * @return {import("../size.js").Size} Image size.
     */
    getImageSize() {
      return this.iconImage_.getSize();
    }

    /**
     * @return {import("../ImageState.js").default} Image state.
     */
    getImageState() {
      return this.iconImage_.getImageState();
    }

    /**
     * @return {HTMLImageElement|HTMLCanvasElement} Image element.
     */
    getHitDetectionImage() {
      return this.iconImage_.getHitDetectionImage();
    }

    /**
     * Get the origin of the symbolizer.
     * @return {Array<number>} Origin.
     * @api
     */
    getOrigin() {
      if (this.origin_) {
        return this.origin_;
      }
      let offset = this.offset_;

      if (this.offsetOrigin_ != 'top-left') {
        const size = this.getSize();
        const iconImageSize = this.iconImage_.getSize();
        if (!size || !iconImageSize) {
          return null;
        }
        offset = offset.slice();
        if (
          this.offsetOrigin_ == 'top-right' ||
          this.offsetOrigin_ == 'bottom-right'
        ) {
          offset[0] = iconImageSize[0] - size[0] - offset[0];
        }
        if (
          this.offsetOrigin_ == 'bottom-left' ||
          this.offsetOrigin_ == 'bottom-right'
        ) {
          offset[1] = iconImageSize[1] - size[1] - offset[1];
        }
      }
      this.origin_ = offset;
      return this.origin_;
    }

    /**
     * Get the image URL.
     * @return {string|undefined} Image src.
     * @api
     */
    getSrc() {
      return this.iconImage_.getSrc();
    }

    /**
     * Get the size of the icon (in pixels).
     * @return {import("../size.js").Size} Image size.
     * @api
     */
    getSize() {
      return !this.size_ ? this.iconImage_.getSize() : this.size_;
    }

    /**
     * Get the width of the icon (in pixels).
     * @return {number} Icon width (in pixels).
     * @api
     */
    getWidth() {
      return this.width_;
    }

    /**
     * Get the height of the icon (in pixels).
     * @return {number} Icon height (in pixels).
     * @api
     */
    getHeight() {
      return this.height_;
    }

    /**
     * Set the width of the icon in pixels.
     *
     * @param {number} width The width to set.
     */
    setWidth(width) {
      this.width_ = width;
      this.updateScaleFromWidthAndHeight(width, this.height_);
    }

    /**
     * Set the height of the icon in pixels.
     *
     * @param {number} height The height to set.
     */
    setHeight(height) {
      this.height_ = height;
      this.updateScaleFromWidthAndHeight(this.width_, height);
    }

    /**
     * Set the scale and updates the width and height correspondingly.
     *
     * @param {number|import("../size.js").Size} scale Scale.
     * @override
     * @api
     */
    setScale(scale) {
      super.setScale(scale);
      const image = this.getImage(1);
      if (image) {
        const widthScale = Array.isArray(scale) ? scale[0] : scale;
        if (widthScale !== undefined) {
          this.width_ = widthScale * image.width;
        }
        const heightScale = Array.isArray(scale) ? scale[1] : scale;
        if (heightScale !== undefined) {
          this.height_ = heightScale * image.height;
        }
      }
    }

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    listenImageChange(listener) {
      this.iconImage_.addEventListener(EventType.CHANGE, listener);
    }

    /**
     * Load not yet loaded URI.
     * When rendering a feature with an icon style, the vector renderer will
     * automatically call this method. However, you might want to call this
     * method yourself for preloading or other purposes.
     * @api
     */
    load() {
      this.iconImage_.load();
    }

    /**
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     */
    unlistenImageChange(listener) {
      this.iconImage_.removeEventListener(EventType.CHANGE, listener);
    }
  }

  var Icon$1 = Icon;

  /**
   * @module ol/style/flat
   */

  /**
   * For static styling, the [layer.setStyle()]{@link module:ol/layer/Vector~VectorLayer#setStyle} method
   * can be called with an object literal that has fill, stroke, text, icon, regular shape, and/or circle properties.
   * @api
   *
   * @typedef {FlatFill & FlatStroke & FlatText & FlatIcon & FlatShape & FlatCircle} FlatStyle
   */

  /**
   * A flat style literal or an array of the same.
   *
   * @typedef {FlatStyle|Array<FlatStyle>} FlatStyleLike
   */

  /**
   * Fill style properties applied to polygon features.
   *
   * @typedef {Object} FlatFill
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [fill-color] The fill color.
   */

  /**
   * Stroke style properties applied to line strings and polygon boundaries.  To apply a stroke, at least one of
   * `stroke-color` or `stroke-width` must be provided.
   *
   * @typedef {Object} FlatStroke
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [stroke-color] The stroke color.
   * @property {number} [stroke-width] Stroke pixel width.
   * @property {CanvasLineCap} [stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [stroke-line-dash] Line dash pattern.
   * @property {number} [stroke-line-dash-offset=0] Line dash offset.
   * @property {number} [stroke-miter-limit=10] Miter limit.
   */

  /**
   * Label style properties applied to all features.  At a minimum, a `text-value` must be provided.
   *
   * @typedef {Object} FlatText
   * @property {string|Array<string>} [text-value] Text content or rich text content. For plain text provide a string, which can
   * contain line breaks (`\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to
   * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\n', ''`).
   * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield "**foo** *bar* baz".
   * **Note:** Rich text is not supported for the immediate rendering API.
   * @property {string} [text-font] Font style as CSS `font` value, see:
   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`
   * @property {number} [text-max-angle=Math.PI/4] When `text-placement` is set to `'line'`, allow a maximum angle between adjacent characters.
   * The expected value is in radians, and the default is 45° (`Math.PI / 4`).
   * @property {number} [text-offset-x=0] Horizontal text offset in pixels. A positive will shift the text right.
   * @property {number} [text-offset-y=0] Vertical text offset in pixels. A positive will shift the text down.
   * @property {boolean} [text-overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
   * the width of the polygon at the label position or the length of the path that it follows.
   * @property {import("./Text.js").TextPlacement} [text-placement='point'] Text placement.
   * @property {number} [text-repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available when
   * `text-placement` is set to `'line'`. Overrides `text-align`.
   * @property {number|import("../size.js").Size} [text-scale] Scale.
   * @property {boolean} [text-rotate-with-view=false] Whether to rotate the text with the view.
   * @property {number} [text-rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {CanvasTextAlign} [text-align] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.
   * Default is `'center'` for `text-placement: 'point'`. For `text-placement: 'line'`, the default is to let the renderer choose a
   * placement where `text-max-angle` is not exceeded.
   * @property {import('./Text.js').TextJustify} [text-justify] Text justification within the text box.
   * If not set, text is justified towards the `textAlign` anchor.
   * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.
   * **Note:** `text-justify` is ignored for immediate rendering and also for `text-placement: 'line'`.
   * @property {CanvasTextBaseline} [text-baseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,
   * `'hanging'`, `'ideographic'`.
   * @property {Array<number>} [text-padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
   * values in the array is `[top, right, bottom, left]`.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [text-fill-color] The fill color.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [text-background-fill-color] The fill color.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [text-stroke-color] The stroke color.
   * @property {CanvasLineCap} [text-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [text-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [text-stroke-line-dash] Line dash pattern.
   * @property {number} [text-stroke-line-dash-offset=0] Line dash offset.
   * @property {number} [text-stroke-miter-limit=10] Miter limit.
   * @property {number} [text-stroke-width] Stroke pixel width.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [text-background-stroke-color] The stroke color.
   * @property {CanvasLineCap} [text-background-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [text-background-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [text-background-stroke-line-dash] Line dash pattern.
   * @property {number} [text-background-stroke-line-dash-offset=0] Line dash offset.
   * @property {number} [text-background-stroke-miter-limit=10] Miter limit.
   * @property {number} [text-background-stroke-width] Stroke pixel width.
   */

  /**
   * Icon style properties applied to point features.  One of `icon-src` or `icon-img` must be provided to render
   * points with an icon.
   *
   * @typedef {Object} FlatIcon
   * @property {string} [icon-src] Image source URI.
   * @property {HTMLImageElement|HTMLCanvasElement} [icon-img] Image object for the icon. If the `icon-src` option is not provided then the
   * provided image must already be loaded. And in that case, it is required
   * to provide the size of the image, with the `icon-img-size` option.
   * @property {import("../size.js").Size} [icon-img-size] Image size in pixels. Only required if `icon-img` is set and `icon-src` is not.
   * The provided size needs to match the actual size of the image.
   * @property {Array<number>} [icon-anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
   * @property {import("./Icon.js").IconOrigin} [icon-anchor-origin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {import("./Icon.js").IconAnchorUnits} [icon-anchor-x-units='fraction'] Units in which the anchor x value is
   * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
   * the x value in pixels.
   * @property {import("./Icon.js").IconAnchorUnits} [icon-anchor-y-units='fraction'] Units in which the anchor y value is
   * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
   * the y value in pixels.
   * @property {import("../color.js").Color|string} [icon-color] Color to tint the icon. If not specified,
   * the icon will be left as is.
   * @property {null|string} [icon-cross-origin] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `icon-cross-origin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {Array<number>} [icon-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
   * sub-rectangle to use from the original icon image.
   * @property {Array<number>} [icon-displacement=[0,0]] Displacement of the icon.
   * @property {import("./Icon.js").IconOrigin} [icon-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {number} [icon-opacity=1] Opacity of the icon.
   * @property {number|import("../size.js").Size} [icon-scale=1] Scale.
   * @property {number} [icon-rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [icon-rotate-with-view=false] Whether to rotate the icon with the view.
   * @property {import("../size.js").Size} [icon-size] Icon size in pixel. Can be used together with `icon-offset` to define the
   * sub-rectangle to use from the origin (sprite) icon image.
   * @property {"declutter"|"obstacle"|"none"|undefined} [icon-declutter-mode] Declutter mode
   */

  /**
   * Regular shape style properties for rendering point features.  At least `shape-points` must be provided.
   *
   * @typedef {Object} FlatShape
   * @property {number} [shape-points] Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [shape-fill-color] The fill color.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [shape-stroke-color] The stroke color.
   * @property {number} [shape-stroke-width] Stroke pixel width.
   * @property {CanvasLineCap} [shape-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [shape-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [shape-stroke-line-dash] Line dash pattern.
   * @property {number} [shape-stroke-line-dash-offset=0] Line dash offset.
   * @property {number} [shape-stroke-miter-limit=10] Miter limit.
   * @property {number} [shape-radius] Radius of a regular polygon.
   * @property {number} [shape-radius1] First radius of a star. Ignored if radius is set.
   * @property {number} [shape-radius2] Second radius of a star.
   * @property {number} [shape-angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
   * @property {Array<number>} [shape-displacement=[0,0]] Displacement of the shape
   * @property {number} [shape-rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [shape-rotate-with-view=false] Whether to rotate the shape with the view.
   * @property {number|import("../size.js").Size} [shape-scale=1] Scale. Unless two dimensional scaling is required a better
   * result may be obtained with appropriate settings for `shape-radius`, `shape-radius1` and `shape-radius2`.
   * @property {"declutter"|"obstacle"|"none"|undefined} [shape-declutter-mode] Declutter mode.
   */

  /**
   * Circle style properties for rendering point features.  At least `circle-radius` must be provided.
   *
   * @typedef {Object} FlatCircle
   * @property {number} [circle-radius] Circle radius.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [circle-fill-color] The fill color.
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [circle-stroke-color] The stroke color.
   * @property {number} [circle-stroke-width] Stroke pixel width.
   * @property {CanvasLineCap} [circle-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [circle-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [circle-stroke-line-dash] Line dash pattern.
   * @property {number} [circle-stroke-line-dash-offset=0] Line dash offset.
   * @property {number} [circle-stroke-miter-limit=10] Miter limit.
   * @property {Array<number>} [circle-displacement=[0,0]] displacement
   * @property {number|import("../size.js").Size} [circle-scale=1] Scale. A two dimensional scale will produce an ellipse.
   * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `circle-radius`.
   * @property {number} [circle-rotation=0] Rotation in radians
   * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).
   * @property {boolean} [circle-rotate-with-view=false] Whether to rotate the shape with the view
   * (meaningful only when used in conjunction with a two dimensional scale).
   * @property {"declutter"|"obstacle"|"none"|undefined} [circle-declutter-mode] Declutter mode
   */

  /**
   * @param {FlatStyle} flatStyle A flat style literal.
   * @return {import("./Style.js").default} A style instance.
   */
  function toStyle(flatStyle) {
    const style = new Style$1({
      fill: getFill(flatStyle, ''),
      stroke: getStroke(flatStyle, ''),
      text: getText$1(flatStyle),
      image: getImage(flatStyle),
    });

    return style;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} prefix The property prefix.
   * @return {Fill|undefined} The fill (if any).
   */
  function getFill(flatStyle, prefix) {
    const color = flatStyle[prefix + 'fill-color'];
    if (!color) {
      return;
    }

    return new Fill$1({color: color});
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @param {string} prefix The property prefix.
   * @return {Stroke|undefined} The stroke (if any).
   */
  function getStroke(flatStyle, prefix) {
    const width = flatStyle[prefix + 'stroke-width'];
    const color = flatStyle[prefix + 'stroke-color'];
    if (!width && !color) {
      return;
    }

    return new Stroke$1({
      width: width,
      color: color,
      lineCap: flatStyle[prefix + 'stroke-line-cap'],
      lineJoin: flatStyle[prefix + 'stroke-line-join'],
      lineDash: flatStyle[prefix + 'stroke-line-dash'],
      lineDashOffset: flatStyle[prefix + 'stroke-line-dash-offset'],
      miterLimit: flatStyle[prefix + 'stroke-miter-limit'],
    });
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @return {Text|undefined} The text (if any).
   */
  function getText$1(flatStyle) {
    const value = flatStyle['text-value'];
    if (!value) {
      return;
    }

    const text = new Text$1({
      text: value,
      font: flatStyle['text-font'],
      maxAngle: flatStyle['text-max-angle'],
      offsetX: flatStyle['text-offset-x'],
      offsetY: flatStyle['text-offset-y'],
      overflow: flatStyle['text-overflow'],
      placement: flatStyle['text-placement'],
      repeat: flatStyle['text-repeat'],
      scale: flatStyle['text-scale'],
      rotateWithView: flatStyle['text-rotate-with-view'],
      rotation: flatStyle['text-rotation'],
      textAlign: flatStyle['text-align'],
      justify: flatStyle['text-justify'],
      textBaseline: flatStyle['text-baseline'],
      padding: flatStyle['text-padding'],
      fill: getFill(flatStyle, 'text-'),
      backgroundFill: getFill(flatStyle, 'text-background-'),
      stroke: getStroke(flatStyle, 'text-'),
      backgroundStroke: getStroke(flatStyle, 'text-background-'),
    });

    return text;
  }

  /**
   * @param {FlatStyle} flatStyle The flat style.
   * @return {import("./Image.js").default|undefined} The image (if any).
   */
  function getImage(flatStyle) {
    const iconSrc = flatStyle['icon-src'];
    const iconImg = flatStyle['icon-img'];
    if (iconSrc || iconImg) {
      const icon = new Icon$1({
        src: iconSrc,
        img: iconImg,
        imgSize: flatStyle['icon-img-size'],
        anchor: flatStyle['icon-anchor'],
        anchorOrigin: flatStyle['icon-anchor-origin'],
        anchorXUnits: flatStyle['icon-anchor-x-units'],
        anchorYUnits: flatStyle['icon-anchor-y-units'],
        color: flatStyle['icon-color'],
        crossOrigin: flatStyle['icon-cross-origin'],
        offset: flatStyle['icon-offset'],
        displacement: flatStyle['icon-displacement'],
        opacity: flatStyle['icon-opacity'],
        scale: flatStyle['icon-scale'],
        rotation: flatStyle['icon-rotation'],
        rotateWithView: flatStyle['icon-rotate-with-view'],
        size: flatStyle['icon-size'],
        declutterMode: flatStyle['icon-declutter-mode'],
      });
      return icon;
    }

    const shapePoints = flatStyle['shape-points'];
    if (shapePoints) {
      const prefix = 'shape-';
      const shape = new RegularShape$1({
        points: shapePoints,
        fill: getFill(flatStyle, prefix),
        stroke: getStroke(flatStyle, prefix),
        radius: flatStyle['shape-radius'],
        radius1: flatStyle['shape-radius1'],
        radius2: flatStyle['shape-radius2'],
        angle: flatStyle['shape-angle'],
        displacement: flatStyle['shape-displacement'],
        rotation: flatStyle['shape-rotation'],
        rotateWithView: flatStyle['shape-rotate-with-view'],
        scale: flatStyle['shape-scale'],
        declutterMode: flatStyle['shape-declutter-mode'],
      });

      return shape;
    }

    const circleRadius = flatStyle['circle-radius'];
    if (circleRadius) {
      const prefix = 'circle-';
      const circle = new Circle$2({
        radius: circleRadius,
        fill: getFill(flatStyle, prefix),
        stroke: getStroke(flatStyle, prefix),
        displacement: flatStyle['circle-displacement'],
        scale: flatStyle['circle-scale'],
        rotation: flatStyle['circle-rotation'],
        rotateWithView: flatStyle['circle-rotate-with-view'],
        declutterMode: flatStyle['circle-declutter-mode'],
      });

      return circle;
    }

    return;
  }

  /**
   * @module ol/layer/BaseVector
   */

  /**
   * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {VectorSourceType} [source] Source.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   *
   * As an optimization decluttered features from layers with the same `className` are rendered above
   * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this
   * behavior and place declutterd features with their own layer configure the layer with a `className`
   * other than `ol-layer`.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style. When set to `null`, only
   * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
   * which will be used if this is not set.
   * @property {import("./Base.js").BackgroundColor} [background] Background color for the layer. If not specified, no background
   * will be rendered.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
   * be recreated during animations. This means that no vectors will be shown clipped, but the
   * setting will have a performance impact for large amounts of vector data. When set to `false`,
   * batches will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
   * be recreated during interactions. See also `updateWhileAnimating`.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @enum {string}
   * @private
   */
  const Property$3 = {
    RENDER_ORDER: 'renderOrder',
  };

  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
   * @template {import("../renderer/canvas/VectorLayer.js").default|import("../renderer/canvas/VectorTileLayer.js").default|import("../renderer/canvas/VectorImageLayer.js").default|import("../renderer/webgl/PointsLayer.js").default} RendererType
   * @extends {Layer<VectorSourceType, RendererType>}
   * @api
   */
  class BaseVectorLayer extends Layer$1 {
    /**
     * @param {Options<VectorSourceType>} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign({}, options);

      delete baseOptions.style;
      delete baseOptions.renderBuffer;
      delete baseOptions.updateWhileAnimating;
      delete baseOptions.updateWhileInteracting;
      super(baseOptions);

      /**
       * @private
       * @type {boolean}
       */
      this.declutter_ =
        options.declutter !== undefined ? options.declutter : false;

      /**
       * @type {number}
       * @private
       */
      this.renderBuffer_ =
        options.renderBuffer !== undefined ? options.renderBuffer : 100;

      /**
       * User provided style.
       * @type {import("../style/Style.js").StyleLike}
       * @private
       */
      this.style_ = null;

      /**
       * Style function for use within the library.
       * @type {import("../style/Style.js").StyleFunction|undefined}
       * @private
       */
      this.styleFunction_ = undefined;

      this.setStyle(options.style);

      /**
       * @type {boolean}
       * @private
       */
      this.updateWhileAnimating_ =
        options.updateWhileAnimating !== undefined
          ? options.updateWhileAnimating
          : false;

      /**
       * @type {boolean}
       * @private
       */
      this.updateWhileInteracting_ =
        options.updateWhileInteracting !== undefined
          ? options.updateWhileInteracting
          : false;
    }

    /**
     * @return {boolean} Declutter.
     */
    getDeclutter() {
      return this.declutter_;
    }

    /**
     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
     * that resolves with an array of features. The array will either contain the topmost feature
     * when a hit was detected, or it will be empty.
     *
     * The hit detection algorithm used for this method is optimized for performance, but is less
     * accurate than the one used in [map.getFeaturesAtPixel()]{@link import("../Map.js").default#getFeaturesAtPixel}.
     * Text is not considered, and icons are only represented by their bounding box instead of the exact
     * image.
     *
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with an array of features.
     * @api
     */
    getFeatures(pixel) {
      return super.getFeatures(pixel);
    }

    /**
     * @return {number|undefined} Render buffer.
     */
    getRenderBuffer() {
      return this.renderBuffer_;
    }

    /**
     * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
     *     order.
     */
    getRenderOrder() {
      return /** @type {import("../render.js").OrderFunction|null|undefined} */ (
        this.get(Property$3.RENDER_ORDER)
      );
    }

    /**
     * Get the style for features.  This returns whatever was passed to the `style`
     * option at construction or to the `setStyle` method.
     * @return {import("../style/Style.js").StyleLike|null|undefined} Layer style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Get the style function.
     * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
     * @api
     */
    getStyleFunction() {
      return this.styleFunction_;
    }

    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     animating.
     */
    getUpdateWhileAnimating() {
      return this.updateWhileAnimating_;
    }

    /**
     * @return {boolean} Whether the rendered layer should be updated while
     *     interacting.
     */
    getUpdateWhileInteracting() {
      return this.updateWhileInteracting_;
    }

    /**
     * Render declutter items for this layer
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    renderDeclutter(frameState) {
      if (!frameState.declutterTree) {
        frameState.declutterTree = new RBush$2(9);
      }
      /** @type {*} */ (this.getRenderer()).renderDeclutter(frameState);
    }

    /**
     * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
     *     Render order.
     */
    setRenderOrder(renderOrder) {
      this.set(Property$3.RENDER_ORDER, renderOrder);
    }

    /**
     * Set the style for features.  This can be a single style object, an array
     * of styles, or a function that takes a feature and resolution and returns
     * an array of styles. If set to `null`, the layer has no style (a `null` style),
     * so only features that have their own styles will be rendered in the layer. Call
     * `setStyle()` without arguments to reset to the default style. See
     * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.
     *
     * If your layer has a static style, you can use "flat" style object literals instead of
     * using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.).  See the documentation
     * for the [flat style types]{@link module:ol/style/flat~FlatStyle} to see what properties are supported.
     *
     * @param {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike|null} [style] Layer style.
     * @api
     */
    setStyle(style) {
      /**
       * @type {import("../style/Style.js").StyleLike|null}
       */
      let styleLike;

      if (style === undefined) {
        styleLike = createDefaultStyle;
      } else if (style === null) {
        styleLike = null;
      } else if (typeof style === 'function') {
        styleLike = style;
      } else if (style instanceof Style$1) {
        styleLike = style;
      } else if (Array.isArray(style)) {
        const len = style.length;

        /**
         * @type {Array<Style>}
         */
        const styles = new Array(len);

        for (let i = 0; i < len; ++i) {
          const s = style[i];
          if (s instanceof Style$1) {
            styles[i] = s;
          } else {
            styles[i] = toStyle(s);
          }
        }
        styleLike = styles;
      } else {
        styleLike = toStyle(style);
      }

      this.style_ = styleLike;
      this.styleFunction_ =
        style === null ? undefined : toFunction(this.style_);
      this.changed();
    }
  }

  var BaseVectorLayer$1 = BaseVectorLayer;

  /**
   * @module ol/render/canvas/Instruction
   */

  /**
   * @enum {number}
   */
  const Instruction = {
    BEGIN_GEOMETRY: 0,
    BEGIN_PATH: 1,
    CIRCLE: 2,
    CLOSE_PATH: 3,
    CUSTOM: 4,
    DRAW_CHARS: 5,
    DRAW_IMAGE: 6,
    END_GEOMETRY: 7,
    FILL: 8,
    MOVE_TO_LINE_TO: 9,
    SET_FILL_STYLE: 10,
    SET_STROKE_STYLE: 11,
    STROKE: 12,
  };

  /**
   * @type {Array<Instruction>}
   */
  const fillInstruction = [Instruction.FILL];

  /**
   * @type {Array<Instruction>}
   */
  const strokeInstruction = [Instruction.STROKE];

  /**
   * @type {Array<Instruction>}
   */
  const beginPathInstruction = [Instruction.BEGIN_PATH];

  /**
   * @type {Array<Instruction>}
   */
  const closePathInstruction = [Instruction.CLOSE_PATH];

  var CanvasInstruction = Instruction;

  /**
   * @module ol/render/VectorContext
   */

  /**
   * @classdesc
   * Context for drawing geometries.  A vector context is available on render
   * events and does not need to be constructed directly.
   * @api
   */
  class VectorContext {
    /**
     * Render a geometry with a custom renderer.
     *
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     * @param {Function} hitDetectionRenderer Renderer.
     */
    drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}

    /**
     * Render a geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
     */
    drawGeometry(geometry) {}

    /**
     * Set the rendering style.
     *
     * @param {import("../style/Style.js").default} style The rendering style.
     */
    setStyle(style) {}

    /**
     * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../Feature.js").default} feature Feature.
     */
    drawCircle(circleGeometry, feature) {}

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     */
    drawFeature(feature, style) {}

    /**
     * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
     * @param {import("../Feature.js").default} feature Feature.
     */
    drawGeometryCollection(geometryCollectionGeometry, feature) {}

    /**
     * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawLineString(lineStringGeometry, feature) {}

    /**
     * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiLineString(multiLineStringGeometry, feature) {}

    /**
     * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiPoint(multiPointGeometry, feature) {}

    /**
     * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiPolygon(multiPolygonGeometry, feature) {}

    /**
     * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawPoint(pointGeometry, feature) {}

    /**
     * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawPolygon(polygonGeometry, feature) {}

    /**
     * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    drawText(geometry, feature) {}

    /**
     * @param {import("../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {}

    /**
     * @param {import("../style/Image.js").default} imageStyle Image style.
     * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.
     */
    setImageStyle(imageStyle, declutterImageWithText) {}

    /**
     * @param {import("../style/Text.js").default} textStyle Text style.
     * @param {import("../render/canvas.js").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.
     */
    setTextStyle(textStyle, declutterImageWithText) {}
  }

  var VectorContext$1 = VectorContext;

  /**
   * @module ol/render/canvas/Builder
   */

  class CanvasBuilder extends VectorContext$1 {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super();

      /**
       * @protected
       * @type {number}
       */
      this.tolerance = tolerance;

      /**
       * @protected
       * @const
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent = maxExtent;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @type {number}
       */
      this.maxLineWidth = 0;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction1_ = null;

      /**
       * @private
       * @type {Array<*>}
       */
      this.beginGeometryInstruction2_ = null;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.bufferedMaxExtent_ = null;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = [];

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = [];

      /**
       * @private
       * @type {import("../../coordinate.js").Coordinate}
       */
      this.tmpCoordinate_ = [];

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = [];

      /**
       * @protected
       * @type {import("../canvas.js").FillStrokeState}
       */
      this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});
    }

    /**
     * @protected
     * @param {Array<number>} dashArray Dash array.
     * @return {Array<number>} Dash array with pixel ratio applied
     */
    applyPixelRatio(dashArray) {
      const pixelRatio = this.pixelRatio;
      return pixelRatio == 1
        ? dashArray
        : dashArray.map(function (dash) {
            return dash * pixelRatio;
          });
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} stride Stride.
     * @protected
     * @return {number} My end
     */
    appendFlatPointCoordinates(flatCoordinates, stride) {
      const extent = this.getBufferedMaxExtent();
      const tmpCoord = this.tmpCoordinate_;
      const coordinates = this.coordinates;
      let myEnd = coordinates.length;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        tmpCoord[0] = flatCoordinates[i];
        tmpCoord[1] = flatCoordinates[i + 1];
        if (containsCoordinate(extent, tmpCoord)) {
          coordinates[myEnd++] = tmpCoord[0];
          coordinates[myEnd++] = tmpCoord[1];
        }
      }
      return myEnd;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} closed Last input coordinate equals first.
     * @param {boolean} skipFirst Skip first coordinate.
     * @protected
     * @return {number} My end.
     */
    appendFlatLineCoordinates(
      flatCoordinates,
      offset,
      end,
      stride,
      closed,
      skipFirst
    ) {
      const coordinates = this.coordinates;
      let myEnd = coordinates.length;
      const extent = this.getBufferedMaxExtent();
      if (skipFirst) {
        offset += stride;
      }
      let lastXCoord = flatCoordinates[offset];
      let lastYCoord = flatCoordinates[offset + 1];
      const nextCoord = this.tmpCoordinate_;
      let skipped = true;

      let i, lastRel, nextRel;
      for (i = offset + stride; i < end; i += stride) {
        nextCoord[0] = flatCoordinates[i];
        nextCoord[1] = flatCoordinates[i + 1];
        nextRel = coordinateRelationship(extent, nextCoord);
        if (nextRel !== lastRel) {
          if (skipped) {
            coordinates[myEnd++] = lastXCoord;
            coordinates[myEnd++] = lastYCoord;
            skipped = false;
          }
          coordinates[myEnd++] = nextCoord[0];
          coordinates[myEnd++] = nextCoord[1];
        } else if (nextRel === Relationship.INTERSECTING) {
          coordinates[myEnd++] = nextCoord[0];
          coordinates[myEnd++] = nextCoord[1];
          skipped = false;
        } else {
          skipped = true;
        }
        lastXCoord = nextCoord[0];
        lastYCoord = nextCoord[1];
        lastRel = nextRel;
      }

      // Last coordinate equals first or only one point to append:
      if ((closed && skipped) || i === offset + stride) {
        coordinates[myEnd++] = lastXCoord;
        coordinates[myEnd++] = lastYCoord;
      }
      return myEnd;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} builderEnds Builder ends.
     * @return {number} Offset.
     */
    drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const builderEnd = this.appendFlatLineCoordinates(
          flatCoordinates,
          offset,
          end,
          stride,
          false,
          false
        );
        builderEnds.push(builderEnd);
        offset = end;
      }
      return offset;
    }

    /**
     * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {Function} renderer Renderer.
     * @param {Function} hitDetectionRenderer Renderer.
     */
    drawCustom(geometry, feature, renderer, hitDetectionRenderer) {
      this.beginGeometry(geometry, feature);

      const type = geometry.getType();
      const stride = geometry.getStride();
      const builderBegin = this.coordinates.length;

      let flatCoordinates, builderEnd, builderEnds, builderEndss;
      let offset;

      switch (type) {
        case 'MultiPolygon':
          flatCoordinates =
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ).getOrientedFlatCoordinates();
          builderEndss = [];
          const endss =
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ).getEndss();
          offset = 0;
          for (let i = 0, ii = endss.length; i < ii; ++i) {
            const myEnds = [];
            offset = this.drawCustomCoordinates_(
              flatCoordinates,
              offset,
              endss[i],
              stride,
              myEnds
            );
            builderEndss.push(myEnds);
          }
          this.instructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEndss,
            geometry,
            renderer,
            inflateMultiCoordinatesArray,
          ]);
          this.hitDetectionInstructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEndss,
            geometry,
            hitDetectionRenderer || renderer,
            inflateMultiCoordinatesArray,
          ]);
          break;
        case 'Polygon':
        case 'MultiLineString':
          builderEnds = [];
          flatCoordinates =
            type == 'Polygon'
              ? /** @type {import("../../geom/Polygon.js").default} */ (
                  geometry
                ).getOrientedFlatCoordinates()
              : geometry.getFlatCoordinates();
          offset = this.drawCustomCoordinates_(
            flatCoordinates,
            0,
            /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (
              geometry
            ).getEnds(),
            stride,
            builderEnds
          );
          this.instructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEnds,
            geometry,
            renderer,
            inflateCoordinatesArray,
          ]);
          this.hitDetectionInstructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEnds,
            geometry,
            hitDetectionRenderer || renderer,
            inflateCoordinatesArray,
          ]);
          break;
        case 'LineString':
        case 'Circle':
          flatCoordinates = geometry.getFlatCoordinates();
          builderEnd = this.appendFlatLineCoordinates(
            flatCoordinates,
            0,
            flatCoordinates.length,
            stride,
            false,
            false
          );
          this.instructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            renderer,
            inflateCoordinates,
          ]);
          this.hitDetectionInstructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            hitDetectionRenderer || renderer,
            inflateCoordinates,
          ]);
          break;
        case 'MultiPoint':
          flatCoordinates = geometry.getFlatCoordinates();
          builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);

          if (builderEnd > builderBegin) {
            this.instructions.push([
              CanvasInstruction.CUSTOM,
              builderBegin,
              builderEnd,
              geometry,
              renderer,
              inflateCoordinates,
            ]);
            this.hitDetectionInstructions.push([
              CanvasInstruction.CUSTOM,
              builderBegin,
              builderEnd,
              geometry,
              hitDetectionRenderer || renderer,
              inflateCoordinates,
            ]);
          }
          break;
        case 'Point':
          flatCoordinates = geometry.getFlatCoordinates();
          this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
          builderEnd = this.coordinates.length;

          this.instructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            renderer,
          ]);
          this.hitDetectionInstructions.push([
            CanvasInstruction.CUSTOM,
            builderBegin,
            builderEnd,
            geometry,
            hitDetectionRenderer || renderer,
          ]);
          break;
      }
      this.endGeometry(feature);
    }

    /**
     * @protected
     * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    beginGeometry(geometry, feature) {
      this.beginGeometryInstruction1_ = [
        CanvasInstruction.BEGIN_GEOMETRY,
        feature,
        0,
        geometry,
      ];
      this.instructions.push(this.beginGeometryInstruction1_);
      this.beginGeometryInstruction2_ = [
        CanvasInstruction.BEGIN_GEOMETRY,
        feature,
        0,
        geometry,
      ];
      this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */
    finish() {
      return {
        instructions: this.instructions,
        hitDetectionInstructions: this.hitDetectionInstructions,
        coordinates: this.coordinates,
      };
    }

    /**
     * Reverse the hit detection instructions.
     */
    reverseHitDetectionInstructions() {
      const hitDetectionInstructions = this.hitDetectionInstructions;
      // step 1 - reverse array
      hitDetectionInstructions.reverse();
      // step 2 - reverse instructions within geometry blocks
      let i;
      const n = hitDetectionInstructions.length;
      let instruction;
      let type;
      let begin = -1;
      for (i = 0; i < n; ++i) {
        instruction = hitDetectionInstructions[i];
        type = /** @type {import("./Instruction.js").default} */ (instruction[0]);
        if (type == CanvasInstruction.END_GEOMETRY) {
          begin = i;
        } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {
          instruction[2] = i;
          reverseSubArray(this.hitDetectionInstructions, begin, i);
          begin = -1;
        }
      }
    }

    /**
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {
      const state = this.state;
      if (fillStyle) {
        const fillStyleColor = fillStyle.getColor();
        state.fillStyle = asColorLike(
          fillStyleColor ? fillStyleColor : defaultFillStyle
        );
      } else {
        state.fillStyle = undefined;
      }
      if (strokeStyle) {
        const strokeStyleColor = strokeStyle.getColor();
        state.strokeStyle = asColorLike(
          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle
        );
        const strokeStyleLineCap = strokeStyle.getLineCap();
        state.lineCap =
          strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;
        const strokeStyleLineDash = strokeStyle.getLineDash();
        state.lineDash = strokeStyleLineDash
          ? strokeStyleLineDash.slice()
          : defaultLineDash;
        const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        state.lineDashOffset = strokeStyleLineDashOffset
          ? strokeStyleLineDashOffset
          : defaultLineDashOffset;
        const strokeStyleLineJoin = strokeStyle.getLineJoin();
        state.lineJoin =
          strokeStyleLineJoin !== undefined
            ? strokeStyleLineJoin
            : defaultLineJoin;
        const strokeStyleWidth = strokeStyle.getWidth();
        state.lineWidth =
          strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;
        const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        state.miterLimit =
          strokeStyleMiterLimit !== undefined
            ? strokeStyleMiterLimit
            : defaultMiterLimit;

        if (state.lineWidth > this.maxLineWidth) {
          this.maxLineWidth = state.lineWidth;
          // invalidate the buffered max extent cache
          this.bufferedMaxExtent_ = null;
        }
      } else {
        state.strokeStyle = undefined;
        state.lineCap = undefined;
        state.lineDash = null;
        state.lineDashOffset = undefined;
        state.lineJoin = undefined;
        state.lineWidth = undefined;
        state.miterLimit = undefined;
      }
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Fill instruction.
     */
    createFill(state) {
      const fillStyle = state.fillStyle;
      /** @type {Array<*>} */
      const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];
      if (typeof fillStyle !== 'string') {
        // Fill is a pattern or gradient - align it!
        fillInstruction.push(true);
      }
      return fillInstruction;
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */
    applyStroke(state) {
      this.instructions.push(this.createStroke(state));
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @return {Array<*>} Stroke instruction.
     */
    createStroke(state) {
      return [
        CanvasInstruction.SET_STROKE_STYLE,
        state.strokeStyle,
        state.lineWidth * this.pixelRatio,
        state.lineCap,
        state.lineJoin,
        state.miterLimit,
        this.applyPixelRatio(state.lineDash),
        state.lineDashOffset * this.pixelRatio,
      ];
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
     */
    updateFillStyle(state, createFill) {
      const fillStyle = state.fillStyle;
      if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
        if (fillStyle !== undefined) {
          this.instructions.push(createFill.call(this, state));
        }
        state.currentFillStyle = fillStyle;
      }
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
     */
    updateStrokeStyle(state, applyStroke) {
      const strokeStyle = state.strokeStyle;
      const lineCap = state.lineCap;
      const lineDash = state.lineDash;
      const lineDashOffset = state.lineDashOffset;
      const lineJoin = state.lineJoin;
      const lineWidth = state.lineWidth;
      const miterLimit = state.miterLimit;
      if (
        state.currentStrokeStyle != strokeStyle ||
        state.currentLineCap != lineCap ||
        (lineDash != state.currentLineDash &&
          !equals$3(state.currentLineDash, lineDash)) ||
        state.currentLineDashOffset != lineDashOffset ||
        state.currentLineJoin != lineJoin ||
        state.currentLineWidth != lineWidth ||
        state.currentMiterLimit != miterLimit
      ) {
        if (strokeStyle !== undefined) {
          applyStroke.call(this, state);
        }
        state.currentStrokeStyle = strokeStyle;
        state.currentLineCap = lineCap;
        state.currentLineDash = lineDash;
        state.currentLineDashOffset = lineDashOffset;
        state.currentLineJoin = lineJoin;
        state.currentLineWidth = lineWidth;
        state.currentMiterLimit = miterLimit;
      }
    }

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    endGeometry(feature) {
      this.beginGeometryInstruction1_[2] = this.instructions.length;
      this.beginGeometryInstruction1_ = null;
      this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
      this.beginGeometryInstruction2_ = null;
      const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];
      this.instructions.push(endGeometryInstruction);
      this.hitDetectionInstructions.push(endGeometryInstruction);
    }

    /**
     * Get the buffered rendering extent.  Rendering will be clipped to the extent
     * provided to the constructor.  To account for symbolizers that may intersect
     * this extent, we calculate a buffered extent (e.g. based on stroke width).
     * @return {import("../../extent.js").Extent} The buffered rendering extent.
     * @protected
     */
    getBufferedMaxExtent() {
      if (!this.bufferedMaxExtent_) {
        this.bufferedMaxExtent_ = clone(this.maxExtent);
        if (this.maxLineWidth > 0) {
          const width = (this.resolution * (this.maxLineWidth + 1)) / 2;
          buffer$2(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
        }
      }
      return this.bufferedMaxExtent_;
    }
  }

  var Builder = CanvasBuilder;

  /**
   * @module ol/render/canvas/ImageBuilder
   */

  class CanvasImageBuilder extends Builder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.hitDetectionImage_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.imagePixelRatio_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.anchorY_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.height_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.opacity_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originX_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.originY_ = undefined;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.rotateWithView_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      /**
       * @private
       * @type {import("../../size.js").Size|undefined}
       */
      this.scale_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.width_ = undefined;

      /**
       * @private
       * @type {"declutter"|"obstacle"|"none"|undefined}
       */
      this.declutterMode_ = undefined;

      /**
       * Data shared with a text builder for combined decluttering.
       * @private
       * @type {import("../canvas.js").DeclutterImageWithText}
       */
      this.declutterImageWithText_ = undefined;
    }

    /**
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawPoint(pointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(pointGeometry, feature);
      const flatCoordinates = pointGeometry.getFlatCoordinates();
      const stride = pointGeometry.getStride();
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
      this.instructions.push([
        CanvasInstruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_ * this.imagePixelRatio_,
        this.anchorY_ * this.imagePixelRatio_,
        Math.ceil(this.height_ * this.imagePixelRatio_),
        this.opacity_,
        this.originX_ * this.imagePixelRatio_,
        this.originY_ * this.imagePixelRatio_,
        this.rotateWithView_,
        this.rotation_,
        [
          (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
          (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
        ],
        Math.ceil(this.width_ * this.imagePixelRatio_),
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.hitDetectionInstructions.push([
        CanvasInstruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_,
        this.anchorY_,
        this.height_,
        this.opacity_,
        this.originX_,
        this.originY_,
        this.rotateWithView_,
        this.rotation_,
        this.scale_,
        this.width_,
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiPoint(multiPointGeometry, feature) {
      if (!this.image_) {
        return;
      }
      this.beginGeometry(multiPointGeometry, feature);
      const flatCoordinates = multiPointGeometry.getFlatCoordinates();
      const stride = multiPointGeometry.getStride();
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);
      this.instructions.push([
        CanvasInstruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.image_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_ * this.imagePixelRatio_,
        this.anchorY_ * this.imagePixelRatio_,
        Math.ceil(this.height_ * this.imagePixelRatio_),
        this.opacity_,
        this.originX_ * this.imagePixelRatio_,
        this.originY_ * this.imagePixelRatio_,
        this.rotateWithView_,
        this.rotation_,
        [
          (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
          (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
        ],
        Math.ceil(this.width_ * this.imagePixelRatio_),
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.hitDetectionInstructions.push([
        CanvasInstruction.DRAW_IMAGE,
        myBegin,
        myEnd,
        this.hitDetectionImage_,
        // Remaining arguments to DRAW_IMAGE are in alphabetical order
        this.anchorX_,
        this.anchorY_,
        this.height_,
        this.opacity_,
        this.originX_,
        this.originY_,
        this.rotateWithView_,
        this.rotation_,
        this.scale_,
        this.width_,
        this.declutterMode_,
        this.declutterImageWithText_,
      ]);
      this.endGeometry(feature);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */
    finish() {
      this.reverseHitDetectionInstructions();
      // FIXME this doesn't really protect us against further calls to draw*Geometry
      this.anchorX_ = undefined;
      this.anchorY_ = undefined;
      this.hitDetectionImage_ = null;
      this.image_ = null;
      this.imagePixelRatio_ = undefined;
      this.height_ = undefined;
      this.scale_ = undefined;
      this.opacity_ = undefined;
      this.originX_ = undefined;
      this.originY_ = undefined;
      this.rotateWithView_ = undefined;
      this.rotation_ = undefined;
      this.width_ = undefined;
      return super.finish();
    }

    /**
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     * @param {Object} [sharedData] Shared data.
     */
    setImageStyle(imageStyle, sharedData) {
      const anchor = imageStyle.getAnchor();
      const size = imageStyle.getSize();
      const origin = imageStyle.getOrigin();
      this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
      this.anchorX_ = anchor[0];
      this.anchorY_ = anchor[1];
      this.hitDetectionImage_ = imageStyle.getHitDetectionImage();
      this.image_ = imageStyle.getImage(this.pixelRatio);
      this.height_ = size[1];
      this.opacity_ = imageStyle.getOpacity();
      this.originX_ = origin[0];
      this.originY_ = origin[1];
      this.rotateWithView_ = imageStyle.getRotateWithView();
      this.rotation_ = imageStyle.getRotation();
      this.scale_ = imageStyle.getScaleArray();
      this.width_ = size[0];
      this.declutterMode_ = imageStyle.getDeclutterMode();
      this.declutterImageWithText_ = sharedData;
    }
  }

  var ImageBuilder = CanvasImageBuilder;

  /**
   * @module ol/render/canvas/LineStringBuilder
   */

  class CanvasLineStringBuilder extends Builder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     * @return {number} end.
     */
    drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
      const myBegin = this.coordinates.length;
      const myEnd = this.appendFlatLineCoordinates(
        flatCoordinates,
        offset,
        end,
        stride,
        false,
        false
      );
      const moveToLineToInstruction = [
        CanvasInstruction.MOVE_TO_LINE_TO,
        myBegin,
        myEnd,
      ];
      this.instructions.push(moveToLineToInstruction);
      this.hitDetectionInstructions.push(moveToLineToInstruction);
      return end;
    }

    /**
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawLineString(lineStringGeometry, feature) {
      const state = this.state;
      const strokeStyle = state.strokeStyle;
      const lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(lineStringGeometry, feature);
      this.hitDetectionInstructions.push(
        [
          CanvasInstruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          defaultLineDash,
          defaultLineDashOffset,
        ],
        beginPathInstruction
      );
      const flatCoordinates = lineStringGeometry.getFlatCoordinates();
      const stride = lineStringGeometry.getStride();
      this.drawFlatCoordinates_(
        flatCoordinates,
        0,
        flatCoordinates.length,
        stride
      );
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiLineString(multiLineStringGeometry, feature) {
      const state = this.state;
      const strokeStyle = state.strokeStyle;
      const lineWidth = state.lineWidth;
      if (strokeStyle === undefined || lineWidth === undefined) {
        return;
      }
      this.updateStrokeStyle(state, this.applyStroke);
      this.beginGeometry(multiLineStringGeometry, feature);
      this.hitDetectionInstructions.push(
        [
          CanvasInstruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          state.lineDash,
          state.lineDashOffset,
        ],
        beginPathInstruction
      );
      const ends = multiLineStringGeometry.getEnds();
      const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
      const stride = multiLineStringGeometry.getStride();
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.drawFlatCoordinates_(
          flatCoordinates,
          offset,
          /** @type {number} */ (ends[i]),
          stride
        );
      }
      this.hitDetectionInstructions.push(strokeInstruction);
      this.endGeometry(feature);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */
    finish() {
      const state = this.state;
      if (
        state.lastStroke != undefined &&
        state.lastStroke != this.coordinates.length
      ) {
        this.instructions.push(strokeInstruction);
      }
      this.reverseHitDetectionInstructions();
      this.state = null;
      return super.finish();
    }

    /**
     * @param {import("../canvas.js").FillStrokeState} state State.
     */
    applyStroke(state) {
      if (
        state.lastStroke != undefined &&
        state.lastStroke != this.coordinates.length
      ) {
        this.instructions.push(strokeInstruction);
        state.lastStroke = this.coordinates.length;
      }
      state.lastStroke = 0;
      super.applyStroke(state);
      this.instructions.push(beginPathInstruction);
    }
  }

  var LineStringBuilder = CanvasLineStringBuilder;

  /**
   * @module ol/render/canvas/PolygonBuilder
   */

  class CanvasPolygonBuilder extends Builder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {
      const state = this.state;
      const fill = state.fillStyle !== undefined;
      const stroke = state.strokeStyle !== undefined;
      const numEnds = ends.length;
      this.instructions.push(beginPathInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction);
      for (let i = 0; i < numEnds; ++i) {
        const end = ends[i];
        const myBegin = this.coordinates.length;
        const myEnd = this.appendFlatLineCoordinates(
          flatCoordinates,
          offset,
          end,
          stride,
          true,
          !stroke
        );
        const moveToLineToInstruction = [
          CanvasInstruction.MOVE_TO_LINE_TO,
          myBegin,
          myEnd,
        ];
        this.instructions.push(moveToLineToInstruction);
        this.hitDetectionInstructions.push(moveToLineToInstruction);
        if (stroke) {
          // Performance optimization: only call closePath() when we have a stroke.
          // Otherwise the ring is closed already (see appendFlatLineCoordinates above).
          this.instructions.push(closePathInstruction);
          this.hitDetectionInstructions.push(closePathInstruction);
        }
        offset = end;
      }
      if (fill) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (stroke) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      return offset;
    }

    /**
     * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
     * @param {import("../../Feature.js").default} feature Feature.
     */
    drawCircle(circleGeometry, feature) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(circleGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          CanvasInstruction.SET_FILL_STYLE,
          defaultFillStyle,
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          CanvasInstruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          state.lineDash,
          state.lineDashOffset,
        ]);
      }
      const flatCoordinates = circleGeometry.getFlatCoordinates();
      const stride = circleGeometry.getStride();
      const myBegin = this.coordinates.length;
      this.appendFlatLineCoordinates(
        flatCoordinates,
        0,
        flatCoordinates.length,
        stride,
        false,
        false
      );
      const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];
      this.instructions.push(beginPathInstruction, circleInstruction);
      this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
      if (state.fillStyle !== undefined) {
        this.instructions.push(fillInstruction);
        this.hitDetectionInstructions.push(fillInstruction);
      }
      if (state.strokeStyle !== undefined) {
        this.instructions.push(strokeInstruction);
        this.hitDetectionInstructions.push(strokeInstruction);
      }
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawPolygon(polygonGeometry, feature) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(polygonGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          CanvasInstruction.SET_FILL_STYLE,
          defaultFillStyle,
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          CanvasInstruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          state.lineDash,
          state.lineDashOffset,
        ]);
      }
      const ends = polygonGeometry.getEnds();
      const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
      const stride = polygonGeometry.getStride();
      this.drawFlatCoordinatess_(
        flatCoordinates,
        0,
        /** @type {Array<number>} */ (ends),
        stride
      );
      this.endGeometry(feature);
    }

    /**
     * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawMultiPolygon(multiPolygonGeometry, feature) {
      const state = this.state;
      const fillStyle = state.fillStyle;
      const strokeStyle = state.strokeStyle;
      if (fillStyle === undefined && strokeStyle === undefined) {
        return;
      }
      this.setFillStrokeStyles_();
      this.beginGeometry(multiPolygonGeometry, feature);
      if (state.fillStyle !== undefined) {
        this.hitDetectionInstructions.push([
          CanvasInstruction.SET_FILL_STYLE,
          defaultFillStyle,
        ]);
      }
      if (state.strokeStyle !== undefined) {
        this.hitDetectionInstructions.push([
          CanvasInstruction.SET_STROKE_STYLE,
          state.strokeStyle,
          state.lineWidth,
          state.lineCap,
          state.lineJoin,
          state.miterLimit,
          state.lineDash,
          state.lineDashOffset,
        ]);
      }
      const endss = multiPolygonGeometry.getEndss();
      const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
      const stride = multiPolygonGeometry.getStride();
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        offset = this.drawFlatCoordinatess_(
          flatCoordinates,
          offset,
          endss[i],
          stride
        );
      }
      this.endGeometry(feature);
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */
    finish() {
      this.reverseHitDetectionInstructions();
      this.state = null;
      // We want to preserve topology when drawing polygons.  Polygons are
      // simplified using quantization and point elimination. However, we might
      // have received a mix of quantized and non-quantized geometries, so ensure
      // that all are quantized by quantizing all coordinates in the batch.
      const tolerance = this.tolerance;
      if (tolerance !== 0) {
        const coordinates = this.coordinates;
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = snap(coordinates[i], tolerance);
        }
      }
      return super.finish();
    }

    /**
     * @private
     */
    setFillStrokeStyles_() {
      const state = this.state;
      const fillStyle = state.fillStyle;
      if (fillStyle !== undefined) {
        this.updateFillStyle(state, this.createFill);
      }
      if (state.strokeStyle !== undefined) {
        this.updateStrokeStyle(state, this.applyStroke);
      }
    }
  }

  var PolygonBuilder = CanvasPolygonBuilder;

  /**
   * Creates chunks of equal length from a linestring
   * @param {number} chunkLength Length of each chunk.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @return {Array<Array<number>>} Chunks of linestrings with stride 2.
   */
  function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {
    const chunks = [];
    let cursor = offset;
    let chunkM = 0;
    let currentChunk = flatCoordinates.slice(offset, 2);
    while (chunkM < chunkLength && cursor + stride < end) {
      const [x1, y1] = currentChunk.slice(-2);
      const x2 = flatCoordinates[cursor + stride];
      const y2 = flatCoordinates[cursor + stride + 1];
      const segmentLength = Math.sqrt(
        (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)
      );
      chunkM += segmentLength;
      if (chunkM >= chunkLength) {
        const m = (chunkLength - chunkM + segmentLength) / segmentLength;
        const x = lerp$1(x1, x2, m);
        const y = lerp$1(y1, y2, m);
        currentChunk.push(x, y);
        chunks.push(currentChunk);
        currentChunk = [x, y];
        if (chunkM == chunkLength) {
          cursor += stride;
        }
        chunkM = 0;
      } else if (chunkM < chunkLength) {
        currentChunk.push(
          flatCoordinates[cursor + stride],
          flatCoordinates[cursor + stride + 1]
        );
        cursor += stride;
      } else {
        const missing = segmentLength - chunkM;
        const x = lerp$1(x1, x2, missing / segmentLength);
        const y = lerp$1(y1, y2, missing / segmentLength);
        currentChunk.push(x, y);
        chunks.push(currentChunk);
        currentChunk = [x, y];
        chunkM = 0;
        cursor += stride;
      }
    }
    if (chunkM > 0) {
      chunks.push(currentChunk);
    }
    return chunks;
  }

  /**
   * @module ol/geom/flat/straightchunk
   */

  /**
   * @param {number} maxAngle Maximum acceptable angle delta between segments.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Array<number>} Start and end of the first suitable chunk of the
   * given `flatCoordinates`.
   */
  function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
    let chunkStart = offset;
    let chunkEnd = offset;
    let chunkM = 0;
    let m = 0;
    let start = offset;
    let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
    for (i = offset; i < end; i += stride) {
      const x2 = flatCoordinates[i];
      const y2 = flatCoordinates[i + 1];
      if (x1 !== undefined) {
        x23 = x2 - x1;
        y23 = y2 - y1;
        m23 = Math.sqrt(x23 * x23 + y23 * y23);
        if (x12 !== undefined) {
          m += m12;
          acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
          if (acos > maxAngle) {
            if (m > chunkM) {
              chunkM = m;
              chunkStart = start;
              chunkEnd = i;
            }
            m = 0;
            start = i - stride;
          }
        }
        m12 = m23;
        x12 = x23;
        y12 = y23;
      }
      x1 = x2;
      y1 = y2;
    }
    m += m23;
    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
  }

  /**
   * @module ol/render/canvas/TextBuilder
   */
  /**
   * @const
   * @enum {number}
   */
  const TEXT_ALIGN = {
    'left': 0,
    'end': 0,
    'center': 0.5,
    'right': 1,
    'start': 1,
    'top': 0,
    'middle': 0.5,
    'hanging': 0.2,
    'alphabetic': 0.8,
    'ideographic': 0.8,
    'bottom': 1,
  };

  class CanvasTextBuilder extends Builder {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      super(tolerance, maxExtent, resolution, pixelRatio);

      /**
       * @private
       * @type {Array<HTMLCanvasElement>}
       */
      this.labels_ = null;

      /**
       * @private
       * @type {string|Array<string>}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.textRotateWithView_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = {};

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = {};

      /**
       * @private
       * @type {import("../canvas.js").TextState}
       */
      this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = {};

      /**
       * @private
       * @type {string}
       */
      this.textKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.fillKey_ = '';

      /**
       * @private
       * @type {string}
       */
      this.strokeKey_ = '';

      /**
       * Data shared with an image builder for combined decluttering.
       * @private
       * @type {import("../canvas.js").DeclutterImageWithText}
       */
      this.declutterImageWithText_ = undefined;
    }

    /**
     * @return {import("../canvas.js").SerializableInstructions} the serializable instructions.
     */
    finish() {
      const instructions = super.finish();
      instructions.textStates = this.textStates;
      instructions.fillStates = this.fillStates;
      instructions.strokeStates = this.strokeStates;
      return instructions;
    }

    /**
     * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     */
    drawText(geometry, feature) {
      const fillState = this.textFillState_;
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;
      if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
        return;
      }

      const coordinates = this.coordinates;
      let begin = coordinates.length;

      const geometryType = geometry.getType();
      let flatCoordinates = null;
      let stride = geometry.getStride();

      if (
        textState.placement === 'line' &&
        (geometryType == 'LineString' ||
          geometryType == 'MultiLineString' ||
          geometryType == 'Polygon' ||
          geometryType == 'MultiPolygon')
      ) {
        if (!intersects$2(this.getBufferedMaxExtent(), geometry.getExtent())) {
          return;
        }
        let ends;
        flatCoordinates = geometry.getFlatCoordinates();
        if (geometryType == 'LineString') {
          ends = [flatCoordinates.length];
        } else if (geometryType == 'MultiLineString') {
          ends = /** @type {import("../../geom/MultiLineString.js").default} */ (
            geometry
          ).getEnds();
        } else if (geometryType == 'Polygon') {
          ends = /** @type {import("../../geom/Polygon.js").default} */ (geometry)
            .getEnds()
            .slice(0, 1);
        } else if (geometryType == 'MultiPolygon') {
          const endss =
            /** @type {import("../../geom/MultiPolygon.js").default} */ (
              geometry
            ).getEndss();
          ends = [];
          for (let i = 0, ii = endss.length; i < ii; ++i) {
            ends.push(endss[i][0]);
          }
        }
        this.beginGeometry(geometry, feature);
        const repeat = textState.repeat;
        const textAlign = repeat ? undefined : textState.textAlign;
        // No `justify` support for line placement.
        let flatOffset = 0;
        for (let o = 0, oo = ends.length; o < oo; ++o) {
          let chunks;
          if (repeat) {
            chunks = lineChunk(
              repeat * this.resolution,
              flatCoordinates,
              flatOffset,
              ends[o],
              stride
            );
          } else {
            chunks = [flatCoordinates.slice(flatOffset, ends[o])];
          }
          for (let c = 0, cc = chunks.length; c < cc; ++c) {
            const chunk = chunks[c];
            let chunkBegin = 0;
            let chunkEnd = chunk.length;
            if (textAlign == undefined) {
              const range = matchingChunk(
                textState.maxAngle,
                chunk,
                0,
                chunk.length,
                2
              );
              chunkBegin = range[0];
              chunkEnd = range[1];
            }
            for (let i = chunkBegin; i < chunkEnd; i += stride) {
              coordinates.push(chunk[i], chunk[i + 1]);
            }
            const end = coordinates.length;
            flatOffset = ends[o];
            this.drawChars_(begin, end);
            begin = end;
          }
        }
        this.endGeometry(feature);
      } else {
        let geometryWidths = textState.overflow ? null : [];
        switch (geometryType) {
          case 'Point':
          case 'MultiPoint':
            flatCoordinates =
              /** @type {import("../../geom/MultiPoint.js").default} */ (
                geometry
              ).getFlatCoordinates();
            break;
          case 'LineString':
            flatCoordinates =
              /** @type {import("../../geom/LineString.js").default} */ (
                geometry
              ).getFlatMidpoint();
            break;
          case 'Circle':
            flatCoordinates =
              /** @type {import("../../geom/Circle.js").default} */ (
                geometry
              ).getCenter();
            break;
          case 'MultiLineString':
            flatCoordinates =
              /** @type {import("../../geom/MultiLineString.js").default} */ (
                geometry
              ).getFlatMidpoints();
            stride = 2;
            break;
          case 'Polygon':
            flatCoordinates =
              /** @type {import("../../geom/Polygon.js").default} */ (
                geometry
              ).getFlatInteriorPoint();
            if (!textState.overflow) {
              geometryWidths.push(flatCoordinates[2] / this.resolution);
            }
            stride = 3;
            break;
          case 'MultiPolygon':
            const interiorPoints =
              /** @type {import("../../geom/MultiPolygon.js").default} */ (
                geometry
              ).getFlatInteriorPoints();
            flatCoordinates = [];
            for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {
              if (!textState.overflow) {
                geometryWidths.push(interiorPoints[i + 2] / this.resolution);
              }
              flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
            }
            if (flatCoordinates.length === 0) {
              return;
            }
            stride = 2;
            break;
        }
        const end = this.appendFlatPointCoordinates(flatCoordinates, stride);
        if (end === begin) {
          return;
        }
        if (
          geometryWidths &&
          (end - begin) / 2 !== flatCoordinates.length / stride
        ) {
          let beg = begin / 2;
          geometryWidths = geometryWidths.filter((w, i) => {
            const keep =
              coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&
              coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];
            if (!keep) {
              --beg;
            }
            return keep;
          });
        }

        this.saveTextStates_();

        if (textState.backgroundFill || textState.backgroundStroke) {
          this.setFillStrokeStyle(
            textState.backgroundFill,
            textState.backgroundStroke
          );
          if (textState.backgroundFill) {
            this.updateFillStyle(this.state, this.createFill);
            this.hitDetectionInstructions.push(this.createFill(this.state));
          }
          if (textState.backgroundStroke) {
            this.updateStrokeStyle(this.state, this.applyStroke);
            this.hitDetectionInstructions.push(this.createStroke(this.state));
          }
        }

        this.beginGeometry(geometry, feature);

        // adjust padding for negative scale
        let padding = textState.padding;
        if (
          padding != defaultPadding &&
          (textState.scale[0] < 0 || textState.scale[1] < 0)
        ) {
          let p0 = textState.padding[0];
          let p1 = textState.padding[1];
          let p2 = textState.padding[2];
          let p3 = textState.padding[3];
          if (textState.scale[0] < 0) {
            p1 = -p1;
            p3 = -p3;
          }
          if (textState.scale[1] < 0) {
            p0 = -p0;
            p2 = -p2;
          }
          padding = [p0, p1, p2, p3];
        }

        // The image is unknown at this stage so we pass null; it will be computed at render time.
        // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
        // render time.
        const pixelRatio = this.pixelRatio;
        this.instructions.push([
          CanvasInstruction.DRAW_IMAGE,
          begin,
          end,
          null,
          NaN,
          NaN,
          NaN,
          1,
          0,
          0,
          this.textRotateWithView_,
          this.textRotation_,
          [1, 1],
          NaN,
          undefined,
          this.declutterImageWithText_,
          padding == defaultPadding
            ? defaultPadding
            : padding.map(function (p) {
                return p * pixelRatio;
              }),
          !!textState.backgroundFill,
          !!textState.backgroundStroke,
          this.text_,
          this.textKey_,
          this.strokeKey_,
          this.fillKey_,
          this.textOffsetX_,
          this.textOffsetY_,
          geometryWidths,
        ]);
        const scale = 1 / pixelRatio;
        this.hitDetectionInstructions.push([
          CanvasInstruction.DRAW_IMAGE,
          begin,
          end,
          null,
          NaN,
          NaN,
          NaN,
          1,
          0,
          0,
          this.textRotateWithView_,
          this.textRotation_,
          [scale, scale],
          NaN,
          undefined,
          this.declutterImageWithText_,
          padding,
          !!textState.backgroundFill,
          !!textState.backgroundStroke,
          this.text_,
          this.textKey_,
          this.strokeKey_,
          this.fillKey_,
          this.textOffsetX_,
          this.textOffsetY_,
          geometryWidths,
        ]);

        this.endGeometry(feature);
      }
    }

    /**
     * @private
     */
    saveTextStates_() {
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;
      const fillState = this.textFillState_;

      const strokeKey = this.strokeKey_;
      if (strokeState) {
        if (!(strokeKey in this.strokeStates)) {
          this.strokeStates[strokeKey] = {
            strokeStyle: strokeState.strokeStyle,
            lineCap: strokeState.lineCap,
            lineDashOffset: strokeState.lineDashOffset,
            lineWidth: strokeState.lineWidth,
            lineJoin: strokeState.lineJoin,
            miterLimit: strokeState.miterLimit,
            lineDash: strokeState.lineDash,
          };
        }
      }
      const textKey = this.textKey_;
      if (!(textKey in this.textStates)) {
        this.textStates[textKey] = {
          font: textState.font,
          textAlign: textState.textAlign || defaultTextAlign,
          justify: textState.justify,
          textBaseline: textState.textBaseline || defaultTextBaseline,
          scale: textState.scale,
        };
      }
      const fillKey = this.fillKey_;
      if (fillState) {
        if (!(fillKey in this.fillStates)) {
          this.fillStates[fillKey] = {
            fillStyle: fillState.fillStyle,
          };
        }
      }
    }

    /**
     * @private
     * @param {number} begin Begin.
     * @param {number} end End.
     */
    drawChars_(begin, end) {
      const strokeState = this.textStrokeState_;
      const textState = this.textState_;

      const strokeKey = this.strokeKey_;
      const textKey = this.textKey_;
      const fillKey = this.fillKey_;
      this.saveTextStates_();

      const pixelRatio = this.pixelRatio;
      const baseline = TEXT_ALIGN[textState.textBaseline];

      const offsetY = this.textOffsetY_ * pixelRatio;
      const text = this.text_;
      const strokeWidth = strokeState
        ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2
        : 0;

      this.instructions.push([
        CanvasInstruction.DRAW_CHARS,
        begin,
        end,
        baseline,
        textState.overflow,
        fillKey,
        textState.maxAngle,
        pixelRatio,
        offsetY,
        strokeKey,
        strokeWidth * pixelRatio,
        text,
        textKey,
        1,
      ]);
      this.hitDetectionInstructions.push([
        CanvasInstruction.DRAW_CHARS,
        begin,
        end,
        baseline,
        textState.overflow,
        fillKey,
        textState.maxAngle,
        1,
        offsetY,
        strokeKey,
        strokeWidth,
        text,
        textKey,
        1 / pixelRatio,
      ]);
    }

    /**
     * @param {import("../../style/Text.js").default} textStyle Text style.
     * @param {Object} [sharedData] Shared data.
     */
    setTextStyle(textStyle, sharedData) {
      let textState, fillState, strokeState;
      if (!textStyle) {
        this.text_ = '';
      } else {
        const textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          fillState = null;
          this.textFillState_ = fillState;
        } else {
          fillState = this.textFillState_;
          if (!fillState) {
            fillState = /** @type {import("../canvas.js").FillState} */ ({});
            this.textFillState_ = fillState;
          }
          fillState.fillStyle = asColorLike(
            textFillStyle.getColor() || defaultFillStyle
          );
        }

        const textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          strokeState = null;
          this.textStrokeState_ = strokeState;
        } else {
          strokeState = this.textStrokeState_;
          if (!strokeState) {
            strokeState = /** @type {import("../canvas.js").StrokeState} */ ({});
            this.textStrokeState_ = strokeState;
          }
          const lineDash = textStrokeStyle.getLineDash();
          const lineDashOffset = textStrokeStyle.getLineDashOffset();
          const lineWidth = textStrokeStyle.getWidth();
          const miterLimit = textStrokeStyle.getMiterLimit();
          strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
          strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
          strokeState.lineDashOffset =
            lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
          strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
          strokeState.lineWidth =
            lineWidth === undefined ? defaultLineWidth : lineWidth;
          strokeState.miterLimit =
            miterLimit === undefined ? defaultMiterLimit : miterLimit;
          strokeState.strokeStyle = asColorLike(
            textStrokeStyle.getColor() || defaultStrokeStyle
          );
        }

        textState = this.textState_;
        const font = textStyle.getFont() || defaultFont;
        registerFont(font);
        const textScale = textStyle.getScaleArray();
        textState.overflow = textStyle.getOverflow();
        textState.font = font;
        textState.maxAngle = textStyle.getMaxAngle();
        textState.placement = textStyle.getPlacement();
        textState.textAlign = textStyle.getTextAlign();
        textState.repeat = textStyle.getRepeat();
        textState.justify = textStyle.getJustify();
        textState.textBaseline =
          textStyle.getTextBaseline() || defaultTextBaseline;
        textState.backgroundFill = textStyle.getBackgroundFill();
        textState.backgroundStroke = textStyle.getBackgroundStroke();
        textState.padding = textStyle.getPadding() || defaultPadding;
        textState.scale = textScale === undefined ? [1, 1] : textScale;

        const textOffsetX = textStyle.getOffsetX();
        const textOffsetY = textStyle.getOffsetY();
        const textRotateWithView = textStyle.getRotateWithView();
        const textRotation = textStyle.getRotation();
        this.text_ = textStyle.getText() || '';
        this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
        this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
        this.textRotateWithView_ =
          textRotateWithView === undefined ? false : textRotateWithView;
        this.textRotation_ = textRotation === undefined ? 0 : textRotation;

        this.strokeKey_ = strokeState
          ? (typeof strokeState.strokeStyle == 'string'
              ? strokeState.strokeStyle
              : getUid(strokeState.strokeStyle)) +
            strokeState.lineCap +
            strokeState.lineDashOffset +
            '|' +
            strokeState.lineWidth +
            strokeState.lineJoin +
            strokeState.miterLimit +
            '[' +
            strokeState.lineDash.join() +
            ']'
          : '';
        this.textKey_ =
          textState.font +
          textState.scale +
          (textState.textAlign || '?') +
          (textState.repeat || '?') +
          (textState.justify || '?') +
          (textState.textBaseline || '?');
        this.fillKey_ = fillState
          ? typeof fillState.fillStyle == 'string'
            ? fillState.fillStyle
            : '|' + getUid(fillState.fillStyle)
          : '';
      }
      this.declutterImageWithText_ = sharedData;
    }
  }

  /**
   * @module ol/render/canvas/BuilderGroup
   */

  /**
   * @type {Object<import("../canvas.js").BuilderType, typeof Builder>}
   */
  const BATCH_CONSTRUCTORS = {
    'Circle': PolygonBuilder,
    'Default': Builder,
    'Image': ImageBuilder,
    'LineString': LineStringBuilder,
    'Polygon': PolygonBuilder,
    'Text': CanvasTextBuilder,
  };

  class BuilderGroup {
    /**
     * @param {number} tolerance Tolerance.
     * @param {import("../../extent.js").Extent} maxExtent Max extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     */
    constructor(tolerance, maxExtent, resolution, pixelRatio) {
      /**
       * @private
       * @type {number}
       */
      this.tolerance_ = tolerance;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {!Object<string, !Object<import("../canvas.js").BuilderType, Builder>>}
       */
      this.buildersByZIndex_ = {};
    }

    /**
     * @return {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Builder.js").SerializableInstructions>>} The serializable instructions
     */
    finish() {
      const builderInstructions = {};
      for (const zKey in this.buildersByZIndex_) {
        builderInstructions[zKey] = builderInstructions[zKey] || {};
        const builders = this.buildersByZIndex_[zKey];
        for (const builderKey in builders) {
          const builderInstruction = builders[builderKey].finish();
          builderInstructions[zKey][builderKey] = builderInstruction;
        }
      }
      return builderInstructions;
    }

    /**
     * @param {number|undefined} zIndex Z index.
     * @param {import("../canvas.js").BuilderType} builderType Replay type.
     * @return {import("../VectorContext.js").default} Replay.
     */
    getBuilder(zIndex, builderType) {
      const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
      let replays = this.buildersByZIndex_[zIndexKey];
      if (replays === undefined) {
        replays = {};
        this.buildersByZIndex_[zIndexKey] = replays;
      }
      let replay = replays[builderType];
      if (replay === undefined) {
        const Constructor = BATCH_CONSTRUCTORS[builderType];
        replay = new Constructor(
          this.tolerance_,
          this.maxExtent_,
          this.resolution_,
          this.pixelRatio_
        );
        replays[builderType] = replay;
      }
      return replay;
    }
  }

  var CanvasBuilderGroup = BuilderGroup;

  /**
   * @module ol/renderer/Layer
   */

  /**
   * @template {import("../layer/Layer.js").default} LayerType
   */
  class LayerRenderer extends Observable$1 {
    /**
     * @param {LayerType} layer Layer.
     */
    constructor(layer) {
      super();

      /**
       * The renderer is initialized and ready to render.
       * @type {boolean}
       */
      this.ready = true;

      /** @private */
      this.boundHandleImageChange_ = this.handleImageChange_.bind(this);

      /**
       * @protected
       * @type {LayerType}
       */
      this.layer_ = layer;

      /**
       * @type {import("../render/canvas/ExecutorGroup").default}
       */
      this.declutterExecutorGroup = null;
    }

    /**
     * Asynchronous layer level hit detection.
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with
     * an array of features.
     */
    getFeatures(pixel) {
      return abstract();
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     */
    getData(pixel) {
      return null;
    }

    /**
     * Determine whether render should be called.
     * @abstract
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      return abstract();
    }

    /**
     * Render the layer.
     * @abstract
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      return abstract();
    }

    /**
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @param {number} zoom Zoom level.
     * @param {import("../Tile.js").default} tile Tile.
     * @return {boolean|void} If `false`, the tile will not be considered loaded.
     */
    loadedTileCallback(tiles, zoom, tile) {
      if (!tiles[zoom]) {
        tiles[zoom] = {};
      }
      tiles[zoom][tile.tileCoord.toString()] = tile;
      return undefined;
    }

    /**
     * Create a function that adds loaded tiles to the tile lookup.
     * @param {import("../source/Tile.js").default} source Tile source.
     * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
     *     called with a zoom level and a tile range to add loaded tiles to the lookup.
     * @protected
     */
    createLoadedTileFinder(source, projection, tiles) {
      return (
        /**
         * @param {number} zoom Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @return {boolean} The tile range is fully loaded.
         */
        (zoom, tileRange) => {
          const callback = this.loadedTileCallback.bind(this, tiles, zoom);
          return source.forEachLoadedTile(projection, zoom, tileRange, callback);
        }
      );
    }
    /**
     * @abstract
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("./Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches
    ) {
      return undefined;
    }

    /**
     * @return {LayerType} Layer.
     */
    getLayer() {
      return this.layer_;
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     * @abstract
     */
    handleFontsChanged() {}

    /**
     * Handle changes in image state.
     * @param {import("../events/Event.js").default} event Image change event.
     * @private
     */
    handleImageChange_(event) {
      const image = /** @type {import("../Image.js").default} */ (event.target);
      if (image.getState() === ImageState.LOADED) {
        this.renderIfReadyAndVisible();
      }
    }

    /**
     * Load the image if not already loaded, and register the image change
     * listener if needed.
     * @param {import("../ImageBase.js").default} image Image.
     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
     * @protected
     */
    loadImage(image) {
      let imageState = image.getState();
      if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
        image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);
      }
      if (imageState == ImageState.IDLE) {
        image.load();
        imageState = image.getState();
      }
      return imageState == ImageState.LOADED;
    }

    /**
     * @protected
     */
    renderIfReadyAndVisible() {
      const layer = this.getLayer();
      if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {
        layer.changed();
      }
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      delete this.layer_;
      super.disposeInternal();
    }
  }

  var LayerRenderer$1 = LayerRenderer;

  /**
   * @module ol/render/Event
   */

  class RenderEvent extends BaseEvent {
    /**
     * @param {import("./EventType.js").default} type Type.
     * @param {import("../transform.js").Transform} [inversePixelTransform] Transform for
     *     CSS pixels to rendered pixels.
     * @param {import("../Map.js").FrameState} [frameState] Frame state.
     * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.
     */
    constructor(type, inversePixelTransform, frameState, context) {
      super(type);

      /**
       * Transform from CSS pixels (relative to the top-left corner of the map viewport)
       * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.
       * @type {import("../transform.js").Transform|undefined}
       * @api
       */
      this.inversePixelTransform = inversePixelTransform;

      /**
       * An object representing the current render frame state.
       * @type {import("../Map.js").FrameState|undefined}
       * @api
       */
      this.frameState = frameState;

      /**
       * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,
       * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL
       * context.
       * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}
       * @api
       */
      this.context = context;
    }
  }

  var RenderEvent$1 = RenderEvent;

  /**
   * @module ol/renderer/canvas/Layer
   */

  /**
   * @type {Array<HTMLCanvasElement>}
   */
  const canvasPool$2 = [];

  /**
   * @type {CanvasRenderingContext2D}
   */
  let pixelContext$1 = null;

  function createPixelContext$1() {
    pixelContext$1 = createCanvasContext2D(1, 1, undefined, {
      willReadFrequently: true,
    });
  }

  /**
   * @abstract
   * @template {import("../../layer/Layer.js").default} LayerType
   * @extends {LayerRenderer<LayerType>}
   */
  class CanvasLayerRenderer extends LayerRenderer$1 {
    /**
     * @param {LayerType} layer Layer.
     */
    constructor(layer) {
      super(layer);

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.container = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedResolution;

      /**
       * A temporary transform.  The values in this transform should only be used in a
       * function that sets the values.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.tempTransform = create$3();

      /**
       * The transform for rendered pixels to viewport CSS pixels.  This transform must
       * be set when rendering a frame and may be used by other functions after rendering.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.pixelTransform = create$3();

      /**
       * The transform for viewport CSS pixels to rendered pixels.  This transform must
       * be set when rendering a frame and may be used by other functions after rendering.
       * @protected
       * @type {import("../../transform.js").Transform}
       */
      this.inversePixelTransform = create$3();

      /**
       * @type {CanvasRenderingContext2D}
       */
      this.context = null;

      /**
       * @type {boolean}
       */
      this.containerReused = false;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.pixelContext_ = null;

      /**
       * @protected
       * @type {import("../../Map.js").FrameState|null}
       */
      this.frameState = null;
    }

    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
     * @param {number} col The column index.
     * @param {number} row The row index.
     * @return {Uint8ClampedArray|null} The image data.
     */
    getImageData(image, col, row) {
      if (!pixelContext$1) {
        createPixelContext$1();
      }
      pixelContext$1.clearRect(0, 0, 1, 1);

      let data;
      try {
        pixelContext$1.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);
        data = pixelContext$1.getImageData(0, 0, 1, 1).data;
      } catch (err) {
        pixelContext$1 = null;
        return null;
      }
      return data;
    }

    /**
     * @param {import('../../Map.js').FrameState} frameState Frame state.
     * @return {string} Background color.
     */
    getBackground(frameState) {
      const layer = this.getLayer();
      let background = layer.getBackground();
      if (typeof background === 'function') {
        background = background(frameState.viewState.resolution);
      }
      return background || undefined;
    }

    /**
     * Get a rendering container from an existing target, if compatible.
     * @param {HTMLElement} target Potential render target.
     * @param {string} transform CSS Transform.
     * @param {string} [backgroundColor] Background color.
     */
    useContainer(target, transform, backgroundColor) {
      const layerClassName = this.getLayer().getClassName();
      let container, context;
      if (
        target &&
        target.className === layerClassName &&
        (!backgroundColor ||
          (target &&
            target.style.backgroundColor &&
            equals$3(
              asArray(target.style.backgroundColor),
              asArray(backgroundColor)
            )))
      ) {
        const canvas = target.firstElementChild;
        if (canvas instanceof HTMLCanvasElement) {
          context = canvas.getContext('2d');
        }
      }
      if (context && context.canvas.style.transform === transform) {
        // Container of the previous layer renderer can be used.
        this.container = target;
        this.context = context;
        this.containerReused = true;
      } else if (this.containerReused) {
        // Previously reused container cannot be used any more.
        this.container = null;
        this.context = null;
        this.containerReused = false;
      }
      if (!this.container) {
        container = document.createElement('div');
        container.className = layerClassName;
        let style = container.style;
        style.position = 'absolute';
        style.width = '100%';
        style.height = '100%';
        context = createCanvasContext2D();
        const canvas = context.canvas;
        container.appendChild(canvas);
        style = canvas.style;
        style.position = 'absolute';
        style.left = '0';
        style.transformOrigin = 'top left';
        this.container = container;
        this.context = context;
      }
      if (
        !this.containerReused &&
        backgroundColor &&
        !this.container.style.backgroundColor
      ) {
        this.container.style.backgroundColor = backgroundColor;
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent Clip extent.
     * @protected
     */
    clipUnrotated(context, frameState, extent) {
      const topLeft = getTopLeft(extent);
      const topRight = getTopRight(extent);
      const bottomRight = getBottomRight(extent);
      const bottomLeft = getBottomLeft(extent);

      apply(frameState.coordinateToPixelTransform, topLeft);
      apply(frameState.coordinateToPixelTransform, topRight);
      apply(frameState.coordinateToPixelTransform, bottomRight);
      apply(frameState.coordinateToPixelTransform, bottomLeft);

      const inverted = this.inversePixelTransform;
      apply(inverted, topLeft);
      apply(inverted, topRight);
      apply(inverted, bottomRight);
      apply(inverted, bottomLeft);

      context.save();
      context.beginPath();
      context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
      context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
      context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
      context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
      context.clip();
    }

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @private
     */
    dispatchRenderEvent_(type, context, frameState) {
      const layer = this.getLayer();
      if (layer.hasListener(type)) {
        const event = new RenderEvent$1(
          type,
          this.inversePixelTransform,
          frameState,
          context
        );
        layer.dispatchEvent(event);
      }
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    preRender(context, frameState) {
      this.frameState = frameState;
      this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    postRender(context, frameState) {
      this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
    }

    /**
     * Creates a transform for rendering to an element that will be rotated after rendering.
     * @param {import("../../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} width Width of the rendered element (in pixels).
     * @param {number} height Height of the rendered element (in pixels).
     * @param {number} offsetX Offset on the x-axis in view coordinates.
     * @protected
     * @return {!import("../../transform.js").Transform} Transform.
     */
    getRenderTransform(
      center,
      resolution,
      rotation,
      pixelRatio,
      width,
      height,
      offsetX
    ) {
      const dx1 = width / 2;
      const dy1 = height / 2;
      const sx = pixelRatio / resolution;
      const sy = -sx;
      const dx2 = -center[0] + offsetX;
      const dy2 = -center[1];
      return compose(
        this.tempTransform,
        dx1,
        dy1,
        sx,
        sy,
        -rotation,
        dx2,
        dy2
      );
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      delete this.frameState;
      super.disposeInternal();
    }
  }

  var CanvasLayerRenderer$1 = CanvasLayerRenderer;

  /**
   * @module ol/geom/flat/textpath
   */

  /**
   * @param {Array<number>} flatCoordinates Path to put text on.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @param {string} text Text to place on the path.
   * @param {number} startM m along the path where the text starts.
   * @param {number} maxAngle Max angle between adjacent chars in radians.
   * @param {number} scale The product of the text scale and the device pixel ratio.
   * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
   * @param {string} font The font.
   * @param {Object<string, number>} cache A cache of measured widths.
   * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.
   * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was
   * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
   */
  function drawTextOnPath(
    flatCoordinates,
    offset,
    end,
    stride,
    text,
    startM,
    maxAngle,
    scale,
    measureAndCacheTextWidth,
    font,
    cache,
    rotation
  ) {
    let x2 = flatCoordinates[offset];
    let y2 = flatCoordinates[offset + 1];
    let x1 = 0;
    let y1 = 0;
    let segmentLength = 0;
    let segmentM = 0;

    function advance() {
      x1 = x2;
      y1 = y2;
      offset += stride;
      x2 = flatCoordinates[offset];
      y2 = flatCoordinates[offset + 1];
      segmentM += segmentLength;
      segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    }
    do {
      advance();
    } while (offset < end - stride && segmentM + segmentLength < startM);

    let interpolate =
      segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;
    const beginX = lerp$1(x1, x2, interpolate);
    const beginY = lerp$1(y1, y2, interpolate);

    const startOffset = offset - stride;
    const startLength = segmentM;
    const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);
    while (offset < end - stride && segmentM + segmentLength < endM) {
      advance();
    }
    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;
    const endX = lerp$1(x1, x2, interpolate);
    const endY = lerp$1(y1, y2, interpolate);

    // Keep text upright
    let reverse;
    if (rotation) {
      const flat = [beginX, beginY, endX, endY];
      rotate(flat, 0, 4, 2, rotation, flat, flat);
      reverse = flat[0] > flat[2];
    } else {
      reverse = beginX > endX;
    }

    const PI = Math.PI;
    const result = [];
    const singleSegment = startOffset + stride === offset;

    offset = startOffset;
    segmentLength = 0;
    segmentM = startLength;
    x2 = flatCoordinates[offset];
    y2 = flatCoordinates[offset + 1];

    let previousAngle;
    // All on the same segment
    if (singleSegment) {
      advance();

      previousAngle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        previousAngle += previousAngle > 0 ? -PI : PI;
      }
      const x = (endX + beginX) / 2;
      const y = (endY + beginY) / 2;
      result[0] = [x, y, (endM - startM) / 2, previousAngle, text];
      return result;
    }

    // rendering across line segments
    text = text.replace(/\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines

    for (let i = 0, ii = text.length; i < ii; ) {
      advance();
      let angle = Math.atan2(y2 - y1, x2 - x1);
      if (reverse) {
        angle += angle > 0 ? -PI : PI;
      }
      if (previousAngle !== undefined) {
        let delta = angle - previousAngle;
        delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;
        if (Math.abs(delta) > maxAngle) {
          return null;
        }
      }
      previousAngle = angle;

      const iStart = i;
      let charLength = 0;
      for (; i < ii; ++i) {
        const index = reverse ? ii - i - 1 : i;
        const len = scale * measureAndCacheTextWidth(font, text[index], cache);
        if (
          offset + stride < end &&
          segmentM + segmentLength < startM + charLength + len / 2
        ) {
          break;
        }
        charLength += len;
      }
      if (i === iStart) {
        continue;
      }
      const chars = reverse
        ? text.substring(ii - iStart, ii - i)
        : text.substring(iStart, i);
      interpolate =
        segmentLength === 0
          ? 0
          : (startM + charLength / 2 - segmentM) / segmentLength;
      const x = lerp$1(x1, x2, interpolate);
      const y = lerp$1(y1, y2, interpolate);
      result.push([x, y, charLength / 2, angle, chars]);
      startM += charLength;
    }
    return result;
  }

  /**
   * @module ol/render/canvas/Executor
   */

  /**
   * @typedef {Object} BBox
   * @property {number} minX Minimal x.
   * @property {number} minY Minimal y.
   * @property {number} maxX Maximal x.
   * @property {number} maxY Maximal y
   * @property {*} value Value.
   */

  /**
   * @typedef {Object} ImageOrLabelDimensions
   * @property {number} drawImageX DrawImageX.
   * @property {number} drawImageY DrawImageY.
   * @property {number} drawImageW DrawImageW.
   * @property {number} drawImageH DrawImageH.
   * @property {number} originX OriginX.
   * @property {number} originY OriginY.
   * @property {Array<number>} scale Scale.
   * @property {BBox} declutterBox DeclutterBox.
   * @property {import("../../transform.js").Transform} canvasTransform CanvasTransform.
   */

  /**
   * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs
   */

  /**
   * @template T
   * @typedef {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default): T} FeatureCallback
   */

  /**
   * @type {import("../../extent.js").Extent}
   */
  const tmpExtent = createEmpty();

  /** @type {import("../../coordinate.js").Coordinate} */
  const p1 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p2 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p3 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  const p4 = [];

  /**
   * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel
   * @return {BBox} Declutter bbox.
   */
  function getDeclutterBox(replayImageOrLabelArgs) {
    return replayImageOrLabelArgs[3].declutterBox;
  }

  const rtlRegEx = new RegExp(
    /* eslint-disable prettier/prettier */
    '[' +
      String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +
      String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +
      String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +
      String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +
      String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +
    ']'
    /* eslint-enable prettier/prettier */
  );

  /**
   * @param {string} text Text.
   * @param {CanvasTextAlign} align Alignment.
   * @return {number} Text alignment.
   */
  function horizontalTextAlign(text, align) {
    if ((align === 'start' || align === 'end') && !rtlRegEx.test(text)) {
      align = align === 'start' ? 'left' : 'right';
    }
    return TEXT_ALIGN[align];
  }

  /**
   * @param {Array<string>} acc Accumulator.
   * @param {string} line Line of text.
   * @param {number} i Index
   * @return {Array<string>} Accumulator.
   */
  function createTextChunks(acc, line, i) {
    if (i > 0) {
      acc.push('\n', '');
    }
    acc.push(line, '');
    return acc;
  }

  class Executor {
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The replay can have overlapping geometries.
     * @param {import("../canvas.js").SerializableInstructions} instructions The serializable instructions
     */
    constructor(resolution, pixelRatio, overlaps, instructions) {
      /**
       * @protected
       * @type {boolean}
       */
      this.overlaps = overlaps;

      /**
       * @protected
       * @type {number}
       */
      this.pixelRatio = pixelRatio;

      /**
       * @protected
       * @const
       * @type {number}
       */
      this.resolution = resolution;

      /**
       * @private
       * @type {boolean}
       */
      this.alignFill_;

      /**
       * @protected
       * @type {Array<*>}
       */
      this.instructions = instructions.instructions;

      /**
       * @protected
       * @type {Array<number>}
       */
      this.coordinates = instructions.coordinates;

      /**
       * @private
       * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
       */
      this.coordinateCache_ = {};

      /**
       * @private
       * @type {!import("../../transform.js").Transform}
       */
      this.renderedTransform_ = create$3();

      /**
       * @protected
       * @type {Array<*>}
       */
      this.hitDetectionInstructions = instructions.hitDetectionInstructions;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = null;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = 0;

      /**
       * @type {!Object<string, import("../canvas.js").FillState>}
       */
      this.fillStates = instructions.fillStates || {};

      /**
       * @type {!Object<string, import("../canvas.js").StrokeState>}
       */
      this.strokeStates = instructions.strokeStates || {};

      /**
       * @type {!Object<string, import("../canvas.js").TextState>}
       */
      this.textStates = instructions.textStates || {};

      /**
       * @private
       * @type {Object<string, Object<string, number>>}
       */
      this.widths_ = {};

      /**
       * @private
       * @type {Object<string, import("../canvas.js").Label>}
       */
      this.labels_ = {};
    }

    /**
     * @param {string|Array<string>} text Text.
     * @param {string} textKey Text style key.
     * @param {string} fillKey Fill style key.
     * @param {string} strokeKey Stroke style key.
     * @return {import("../canvas.js").Label} Label.
     */
    createLabel(text, textKey, fillKey, strokeKey) {
      const key = text + textKey + fillKey + strokeKey;
      if (this.labels_[key]) {
        return this.labels_[key];
      }
      const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
      const fillState = fillKey ? this.fillStates[fillKey] : null;
      const textState = this.textStates[textKey];
      const pixelRatio = this.pixelRatio;
      const scale = [
        textState.scale[0] * pixelRatio,
        textState.scale[1] * pixelRatio,
      ];
      const textIsArray = Array.isArray(text);
      const align = textState.justify
        ? TEXT_ALIGN[textState.justify]
        : horizontalTextAlign(
            Array.isArray(text) ? text[0] : text,
            textState.textAlign || defaultTextAlign
          );
      const strokeWidth =
        strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;

      const chunks = textIsArray
        ? text
        : text.split('\n').reduce(createTextChunks, []);

      const {width, height, widths, heights, lineWidths} = getTextDimensions(
        textState,
        chunks
      );
      const renderWidth = width + strokeWidth;
      const contextInstructions = [];
      // make canvas 2 pixels wider to account for italic text width measurement errors
      const w = (renderWidth + 2) * scale[0];
      const h = (height + strokeWidth) * scale[1];
      /** @type {import("../canvas.js").Label} */
      const label = {
        width: w < 0 ? Math.floor(w) : Math.ceil(w),
        height: h < 0 ? Math.floor(h) : Math.ceil(h),
        contextInstructions: contextInstructions,
      };
      if (scale[0] != 1 || scale[1] != 1) {
        contextInstructions.push('scale', scale);
      }
      if (strokeKey) {
        contextInstructions.push('strokeStyle', strokeState.strokeStyle);
        contextInstructions.push('lineWidth', strokeWidth);
        contextInstructions.push('lineCap', strokeState.lineCap);
        contextInstructions.push('lineJoin', strokeState.lineJoin);
        contextInstructions.push('miterLimit', strokeState.miterLimit);
        contextInstructions.push('setLineDash', [strokeState.lineDash]);
        contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);
      }
      if (fillKey) {
        contextInstructions.push('fillStyle', fillState.fillStyle);
      }
      contextInstructions.push('textBaseline', 'middle');
      contextInstructions.push('textAlign', 'center');
      const leftRight = 0.5 - align;
      let x = align * renderWidth + leftRight * strokeWidth;
      const strokeInstructions = [];
      const fillInstructions = [];
      let lineHeight = 0;
      let lineOffset = 0;
      let widthHeightIndex = 0;
      let lineWidthIndex = 0;
      let previousFont;
      for (let i = 0, ii = chunks.length; i < ii; i += 2) {
        const text = chunks[i];
        if (text === '\n') {
          lineOffset += lineHeight;
          lineHeight = 0;
          x = align * renderWidth + leftRight * strokeWidth;
          ++lineWidthIndex;
          continue;
        }
        const font = chunks[i + 1] || textState.font;
        if (font !== previousFont) {
          if (strokeKey) {
            strokeInstructions.push('font', font);
          }
          if (fillKey) {
            fillInstructions.push('font', font);
          }
          previousFont = font;
        }
        lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);
        const fillStrokeArgs = [
          text,
          x +
            leftRight * widths[widthHeightIndex] +
            align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),
          0.5 * (strokeWidth + lineHeight) + lineOffset,
        ];
        x += widths[widthHeightIndex];
        if (strokeKey) {
          strokeInstructions.push('strokeText', fillStrokeArgs);
        }
        if (fillKey) {
          fillInstructions.push('fillText', fillStrokeArgs);
        }
        ++widthHeightIndex;
      }
      Array.prototype.push.apply(contextInstructions, strokeInstructions);
      Array.prototype.push.apply(contextInstructions, fillInstructions);
      this.labels_[key] = label;
      return label;
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     */
    replayTextBackground_(
      context,
      p1,
      p2,
      p3,
      p4,
      fillInstruction,
      strokeInstruction
    ) {
      context.beginPath();
      context.moveTo.apply(context, p1);
      context.lineTo.apply(context, p2);
      context.lineTo.apply(context, p3);
      context.lineTo.apply(context, p4);
      context.lineTo.apply(context, p1);
      if (fillInstruction) {
        this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
        this.fill_(context);
      }
      if (strokeInstruction) {
        this.setStrokeStyle_(
          context,
          /** @type {Array<*>} */ (strokeInstruction)
        );
        context.stroke();
      }
    }

    /**
     * @private
     * @param {number} sheetWidth Width of the sprite sheet.
     * @param {number} sheetHeight Height of the sprite sheet.
     * @param {number} centerX X.
     * @param {number} centerY Y.
     * @param {number} width Width.
     * @param {number} height Height.
     * @param {number} anchorX Anchor X.
     * @param {number} anchorY Anchor Y.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} rotation Rotation.
     * @param {import("../../size.js").Size} scale Scale.
     * @param {boolean} snapToPixel Snap to pixel.
     * @param {Array<number>} padding Padding.
     * @param {boolean} fillStroke Background fill or stroke.
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.
     */
    calculateImageOrLabelDimensions_(
      sheetWidth,
      sheetHeight,
      centerX,
      centerY,
      width,
      height,
      anchorX,
      anchorY,
      originX,
      originY,
      rotation,
      scale,
      snapToPixel,
      padding,
      fillStroke,
      feature
    ) {
      anchorX *= scale[0];
      anchorY *= scale[1];
      let x = centerX - anchorX;
      let y = centerY - anchorY;

      const w = width + originX > sheetWidth ? sheetWidth - originX : width;
      const h = height + originY > sheetHeight ? sheetHeight - originY : height;
      const boxW = padding[3] + w * scale[0] + padding[1];
      const boxH = padding[0] + h * scale[1] + padding[2];
      const boxX = x - padding[3];
      const boxY = y - padding[0];

      if (fillStroke || rotation !== 0) {
        p1[0] = boxX;
        p4[0] = boxX;
        p1[1] = boxY;
        p2[1] = boxY;
        p2[0] = boxX + boxW;
        p3[0] = p2[0];
        p3[1] = boxY + boxH;
        p4[1] = p3[1];
      }

      let transform;
      if (rotation !== 0) {
        transform = compose(
          create$3(),
          centerX,
          centerY,
          1,
          1,
          rotation,
          -centerX,
          -centerY
        );

        apply(transform, p1);
        apply(transform, p2);
        apply(transform, p3);
        apply(transform, p4);
        createOrUpdate$2(
          Math.min(p1[0], p2[0], p3[0], p4[0]),
          Math.min(p1[1], p2[1], p3[1], p4[1]),
          Math.max(p1[0], p2[0], p3[0], p4[0]),
          Math.max(p1[1], p2[1], p3[1], p4[1]),
          tmpExtent
        );
      } else {
        createOrUpdate$2(
          Math.min(boxX, boxX + boxW),
          Math.min(boxY, boxY + boxH),
          Math.max(boxX, boxX + boxW),
          Math.max(boxY, boxY + boxH),
          tmpExtent
        );
      }
      if (snapToPixel) {
        x = Math.round(x);
        y = Math.round(y);
      }
      return {
        drawImageX: x,
        drawImageY: y,
        drawImageW: w,
        drawImageH: h,
        originX: originX,
        originY: originY,
        declutterBox: {
          minX: tmpExtent[0],
          minY: tmpExtent[1],
          maxX: tmpExtent[2],
          maxY: tmpExtent[3],
          value: feature,
        },
        canvasTransform: transform,
        scale: scale,
      };
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
     * @param {ImageOrLabelDimensions} dimensions Dimensions.
     * @param {number} opacity Opacity.
     * @param {Array<*>} fillInstruction Fill instruction.
     * @param {Array<*>} strokeInstruction Stroke instruction.
     * @return {boolean} The image or label was rendered.
     */
    replayImageOrLabel_(
      context,
      contextScale,
      imageOrLabel,
      dimensions,
      opacity,
      fillInstruction,
      strokeInstruction
    ) {
      const fillStroke = !!(fillInstruction || strokeInstruction);

      const box = dimensions.declutterBox;
      const canvas = context.canvas;
      const strokePadding = strokeInstruction
        ? (strokeInstruction[2] * dimensions.scale[0]) / 2
        : 0;
      const intersects =
        box.minX - strokePadding <= canvas.width / contextScale &&
        box.maxX + strokePadding >= 0 &&
        box.minY - strokePadding <= canvas.height / contextScale &&
        box.maxY + strokePadding >= 0;

      if (intersects) {
        if (fillStroke) {
          this.replayTextBackground_(
            context,
            p1,
            p2,
            p3,
            p4,
            /** @type {Array<*>} */ (fillInstruction),
            /** @type {Array<*>} */ (strokeInstruction)
          );
        }
        drawImageOrLabel(
          context,
          dimensions.canvasTransform,
          opacity,
          imageOrLabel,
          dimensions.originX,
          dimensions.originY,
          dimensions.drawImageW,
          dimensions.drawImageH,
          dimensions.drawImageX,
          dimensions.drawImageY,
          dimensions.scale
        );
      }
      return true;
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     */
    fill_(context) {
      if (this.alignFill_) {
        const origin = apply(this.renderedTransform_, [0, 0]);
        const repeatSize = 512 * this.pixelRatio;
        context.save();
        context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
        context.rotate(this.viewRotation_);
      }
      context.fill();
      if (this.alignFill_) {
        context.restore();
      }
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {Array<*>} instruction Instruction.
     */
    setStrokeStyle_(context, instruction) {
      context['strokeStyle'] =
        /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
      context.lineWidth = /** @type {number} */ (instruction[2]);
      context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
      context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
      context.miterLimit = /** @type {number} */ (instruction[5]);
      context.lineDashOffset = /** @type {number} */ (instruction[7]);
      context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
    }

    /**
     * @private
     * @param {string|Array<string>} text The text to draw.
     * @param {string} textKey The key of the text state.
     * @param {string} strokeKey The key for the stroke state.
     * @param {string} fillKey The key for the fill state.
     * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
     */
    drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {
      const textState = this.textStates[textKey];

      const label = this.createLabel(text, textKey, fillKey, strokeKey);

      const strokeState = this.strokeStates[strokeKey];
      const pixelRatio = this.pixelRatio;
      const align = horizontalTextAlign(
        Array.isArray(text) ? text[0] : text,
        textState.textAlign || defaultTextAlign
      );
      const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];
      const strokeWidth =
        strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;

      // Remove the 2 pixels we added in createLabel() for the anchor
      const width = label.width / pixelRatio - 2 * textState.scale[0];
      const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
      const anchorY =
        (baseline * label.height) / pixelRatio +
        2 * (0.5 - baseline) * strokeWidth;

      return {
        label: label,
        anchorX: anchorX,
        anchorY: anchorY,
      };
    }

    /**
     * @private
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Array<*>} instructions Instructions array.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {FeatureCallback<T>} [featureCallback] Feature callback.
     * @param {import("../../extent.js").Extent} [hitExtent] Only check
     *     features that intersect this extent.
     * @param {import("rbush").default} [declutterTree] Declutter tree.
     * @return {T|undefined} Callback result.
     * @template T
     */
    execute_(
      context,
      contextScale,
      transform,
      instructions,
      snapToPixel,
      featureCallback,
      hitExtent,
      declutterTree
    ) {
      /** @type {Array<number>} */
      let pixelCoordinates;
      if (this.pixelCoordinates_ && equals$3(transform, this.renderedTransform_)) {
        pixelCoordinates = this.pixelCoordinates_;
      } else {
        if (!this.pixelCoordinates_) {
          this.pixelCoordinates_ = [];
        }
        pixelCoordinates = transform2D(
          this.coordinates,
          0,
          this.coordinates.length,
          2,
          transform,
          this.pixelCoordinates_
        );
        setFromArray(this.renderedTransform_, transform);
      }
      let i = 0; // instruction index
      const ii = instructions.length; // end of instructions
      let d = 0; // data index
      let dd; // end of per-instruction data
      let anchorX,
        anchorY,
        prevX,
        prevY,
        roundX,
        roundY,
        image,
        text,
        textKey,
        strokeKey,
        fillKey;
      let pendingFill = 0;
      let pendingStroke = 0;
      let lastFillInstruction = null;
      let lastStrokeInstruction = null;
      const coordinateCache = this.coordinateCache_;
      const viewRotation = this.viewRotation_;
      const viewRotationFromTransform =
        Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;

      const state = /** @type {import("../../render.js").State} */ ({
        context: context,
        pixelRatio: this.pixelRatio,
        resolution: this.resolution,
        rotation: viewRotation,
      });

      // When the batch size gets too big, performance decreases. 200 is a good
      // balance between batch size and number of fill/stroke instructions.
      const batchSize =
        this.instructions != instructions || this.overlaps ? 0 : 200;
      let /** @type {import("../../Feature.js").FeatureLike} */ feature;
      let x, y, currentGeometry;
      while (i < ii) {
        const instruction = instructions[i];
        const type = /** @type {import("./Instruction.js").default} */ (
          instruction[0]
        );
        switch (type) {
          case CanvasInstruction.BEGIN_GEOMETRY:
            feature = /** @type {import("../../Feature.js").FeatureLike} */ (
              instruction[1]
            );
            currentGeometry = instruction[3];
            if (!feature.getGeometry()) {
              i = /** @type {number} */ (instruction[2]);
            } else if (
              hitExtent !== undefined &&
              !intersects$2(hitExtent, currentGeometry.getExtent())
            ) {
              i = /** @type {number} */ (instruction[2]) + 1;
            } else {
              ++i;
            }
            break;
          case CanvasInstruction.BEGIN_PATH:
            if (pendingFill > batchSize) {
              this.fill_(context);
              pendingFill = 0;
            }
            if (pendingStroke > batchSize) {
              context.stroke();
              pendingStroke = 0;
            }
            if (!pendingFill && !pendingStroke) {
              context.beginPath();
              prevX = NaN;
              prevY = NaN;
            }
            ++i;
            break;
          case CanvasInstruction.CIRCLE:
            d = /** @type {number} */ (instruction[1]);
            const x1 = pixelCoordinates[d];
            const y1 = pixelCoordinates[d + 1];
            const x2 = pixelCoordinates[d + 2];
            const y2 = pixelCoordinates[d + 3];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const r = Math.sqrt(dx * dx + dy * dy);
            context.moveTo(x1 + r, y1);
            context.arc(x1, y1, r, 0, 2 * Math.PI, true);
            ++i;
            break;
          case CanvasInstruction.CLOSE_PATH:
            context.closePath();
            ++i;
            break;
          case CanvasInstruction.CUSTOM:
            d = /** @type {number} */ (instruction[1]);
            dd = instruction[2];
            const geometry =
              /** @type {import("../../geom/SimpleGeometry.js").default} */ (
                instruction[3]
              );
            const renderer = instruction[4];
            const fn = instruction.length == 6 ? instruction[5] : undefined;
            state.geometry = geometry;
            state.feature = feature;
            if (!(i in coordinateCache)) {
              coordinateCache[i] = [];
            }
            const coords = coordinateCache[i];
            if (fn) {
              fn(pixelCoordinates, d, dd, 2, coords);
            } else {
              coords[0] = pixelCoordinates[d];
              coords[1] = pixelCoordinates[d + 1];
              coords.length = 2;
            }
            renderer(coords, state);
            ++i;
            break;
          case CanvasInstruction.DRAW_IMAGE:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            image =
              /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (
                instruction[3]
              );

            // Remaining arguments in DRAW_IMAGE are in alphabetical order
            anchorX = /** @type {number} */ (instruction[4]);
            anchorY = /** @type {number} */ (instruction[5]);
            let height = /** @type {number} */ (instruction[6]);
            const opacity = /** @type {number} */ (instruction[7]);
            const originX = /** @type {number} */ (instruction[8]);
            const originY = /** @type {number} */ (instruction[9]);
            const rotateWithView = /** @type {boolean} */ (instruction[10]);
            let rotation = /** @type {number} */ (instruction[11]);
            const scale = /** @type {import("../../size.js").Size} */ (
              instruction[12]
            );
            let width = /** @type {number} */ (instruction[13]);
            const declutterMode =
              /** @type {"declutter"|"obstacle"|"none"|undefined} */ (
                instruction[14]
              );
            const declutterImageWithText =
              /** @type {import("../canvas.js").DeclutterImageWithText} */ (
                instruction[15]
              );

            if (!image && instruction.length >= 20) {
              // create label images
              text = /** @type {string} */ (instruction[19]);
              textKey = /** @type {string} */ (instruction[20]);
              strokeKey = /** @type {string} */ (instruction[21]);
              fillKey = /** @type {string} */ (instruction[22]);
              const labelWithAnchor = this.drawLabelWithPointPlacement_(
                text,
                textKey,
                strokeKey,
                fillKey
              );
              image = labelWithAnchor.label;
              instruction[3] = image;
              const textOffsetX = /** @type {number} */ (instruction[23]);
              anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
              instruction[4] = anchorX;
              const textOffsetY = /** @type {number} */ (instruction[24]);
              anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
              instruction[5] = anchorY;
              height = image.height;
              instruction[6] = height;
              width = image.width;
              instruction[13] = width;
            }

            let geometryWidths;
            if (instruction.length > 25) {
              geometryWidths = /** @type {number} */ (instruction[25]);
            }

            let padding, backgroundFill, backgroundStroke;
            if (instruction.length > 17) {
              padding = /** @type {Array<number>} */ (instruction[16]);
              backgroundFill = /** @type {boolean} */ (instruction[17]);
              backgroundStroke = /** @type {boolean} */ (instruction[18]);
            } else {
              padding = defaultPadding;
              backgroundFill = false;
              backgroundStroke = false;
            }

            if (rotateWithView && viewRotationFromTransform) {
              // Canvas is expected to be rotated to reverse view rotation.
              rotation += viewRotation;
            } else if (!rotateWithView && !viewRotationFromTransform) {
              // Canvas is not rotated, images need to be rotated back to be north-up.
              rotation -= viewRotation;
            }
            let widthIndex = 0;
            for (; d < dd; d += 2) {
              if (
                geometryWidths &&
                geometryWidths[widthIndex++] < width / this.pixelRatio
              ) {
                continue;
              }
              const dimensions = this.calculateImageOrLabelDimensions_(
                image.width,
                image.height,
                pixelCoordinates[d],
                pixelCoordinates[d + 1],
                width,
                height,
                anchorX,
                anchorY,
                originX,
                originY,
                rotation,
                scale,
                snapToPixel,
                padding,
                backgroundFill || backgroundStroke,
                feature
              );
              /** @type {ReplayImageOrLabelArgs} */
              const args = [
                context,
                contextScale,
                image,
                dimensions,
                opacity,
                backgroundFill
                  ? /** @type {Array<*>} */ (lastFillInstruction)
                  : null,
                backgroundStroke
                  ? /** @type {Array<*>} */ (lastStrokeInstruction)
                  : null,
              ];
              if (declutterTree) {
                if (declutterMode === 'none') {
                  // not rendered in declutter group
                  continue;
                } else if (declutterMode === 'obstacle') {
                  // will always be drawn, thus no collision detection, but insert as obstacle
                  declutterTree.insert(dimensions.declutterBox);
                  continue;
                } else {
                  let imageArgs;
                  let imageDeclutterBox;
                  if (declutterImageWithText) {
                    const index = dd - d;
                    if (!declutterImageWithText[index]) {
                      // We now have the image for an image+text combination.
                      declutterImageWithText[index] = args;
                      // Don't render anything for now, wait for the text.
                      continue;
                    }
                    imageArgs = declutterImageWithText[index];
                    delete declutterImageWithText[index];
                    imageDeclutterBox = getDeclutterBox(imageArgs);
                    if (declutterTree.collides(imageDeclutterBox)) {
                      continue;
                    }
                  }
                  if (declutterTree.collides(dimensions.declutterBox)) {
                    continue;
                  }
                  if (imageArgs) {
                    // We now have image and text for an image+text combination.
                    declutterTree.insert(imageDeclutterBox);
                    // Render the image before we render the text.
                    this.replayImageOrLabel_.apply(this, imageArgs);
                  }
                  declutterTree.insert(dimensions.declutterBox);
                }
              }
              this.replayImageOrLabel_.apply(this, args);
            }
            ++i;
            break;
          case CanvasInstruction.DRAW_CHARS:
            const begin = /** @type {number} */ (instruction[1]);
            const end = /** @type {number} */ (instruction[2]);
            const baseline = /** @type {number} */ (instruction[3]);
            const overflow = /** @type {number} */ (instruction[4]);
            fillKey = /** @type {string} */ (instruction[5]);
            const maxAngle = /** @type {number} */ (instruction[6]);
            const measurePixelRatio = /** @type {number} */ (instruction[7]);
            const offsetY = /** @type {number} */ (instruction[8]);
            strokeKey = /** @type {string} */ (instruction[9]);
            const strokeWidth = /** @type {number} */ (instruction[10]);
            text = /** @type {string} */ (instruction[11]);
            textKey = /** @type {string} */ (instruction[12]);
            const pixelRatioScale = [
              /** @type {number} */ (instruction[13]),
              /** @type {number} */ (instruction[13]),
            ];

            const textState = this.textStates[textKey];
            const font = textState.font;
            const textScale = [
              textState.scale[0] * measurePixelRatio,
              textState.scale[1] * measurePixelRatio,
            ];

            let cachedWidths;
            if (font in this.widths_) {
              cachedWidths = this.widths_[font];
            } else {
              cachedWidths = {};
              this.widths_[font] = cachedWidths;
            }

            const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
            const textLength =
              Math.abs(textScale[0]) *
              measureAndCacheTextWidth(font, text, cachedWidths);
            if (overflow || textLength <= pathLength) {
              const textAlign = this.textStates[textKey].textAlign;
              const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
              const parts = drawTextOnPath(
                pixelCoordinates,
                begin,
                end,
                2,
                text,
                startM,
                maxAngle,
                Math.abs(textScale[0]),
                measureAndCacheTextWidth,
                font,
                cachedWidths,
                viewRotationFromTransform ? 0 : this.viewRotation_
              );
              drawChars: if (parts) {
                /** @type {Array<ReplayImageOrLabelArgs>} */
                const replayImageOrLabelArgs = [];
                let c, cc, chars, label, part;
                if (strokeKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = this.createLabel(chars, textKey, '', strokeKey);
                    anchorX =
                      /** @type {number} */ (part[2]) +
                      (textScale[0] < 0 ? -strokeWidth : strokeWidth);
                    anchorY =
                      baseline * label.height +
                      ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /
                        textScale[0] -
                      offsetY;
                    const dimensions = this.calculateImageOrLabelDimensions_(
                      label.width,
                      label.height,
                      part[0],
                      part[1],
                      label.width,
                      label.height,
                      anchorX,
                      anchorY,
                      0,
                      0,
                      part[3],
                      pixelRatioScale,
                      false,
                      defaultPadding,
                      false,
                      feature
                    );
                    if (
                      declutterTree &&
                      declutterTree.collides(dimensions.declutterBox)
                    ) {
                      break drawChars;
                    }
                    replayImageOrLabelArgs.push([
                      context,
                      contextScale,
                      label,
                      dimensions,
                      1,
                      null,
                      null,
                    ]);
                  }
                }
                if (fillKey) {
                  for (c = 0, cc = parts.length; c < cc; ++c) {
                    part = parts[c]; // x, y, anchorX, rotation, chunk
                    chars = /** @type {string} */ (part[4]);
                    label = this.createLabel(chars, textKey, fillKey, '');
                    anchorX = /** @type {number} */ (part[2]);
                    anchorY = baseline * label.height - offsetY;
                    const dimensions = this.calculateImageOrLabelDimensions_(
                      label.width,
                      label.height,
                      part[0],
                      part[1],
                      label.width,
                      label.height,
                      anchorX,
                      anchorY,
                      0,
                      0,
                      part[3],
                      pixelRatioScale,
                      false,
                      defaultPadding,
                      false,
                      feature
                    );
                    if (
                      declutterTree &&
                      declutterTree.collides(dimensions.declutterBox)
                    ) {
                      break drawChars;
                    }
                    replayImageOrLabelArgs.push([
                      context,
                      contextScale,
                      label,
                      dimensions,
                      1,
                      null,
                      null,
                    ]);
                  }
                }
                if (declutterTree) {
                  declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));
                }
                for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {
                  this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);
                }
              }
            }
            ++i;
            break;
          case CanvasInstruction.END_GEOMETRY:
            if (featureCallback !== undefined) {
              feature = /** @type {import("../../Feature.js").FeatureLike} */ (
                instruction[1]
              );
              const result = featureCallback(feature, currentGeometry);
              if (result) {
                return result;
              }
            }
            ++i;
            break;
          case CanvasInstruction.FILL:
            if (batchSize) {
              pendingFill++;
            } else {
              this.fill_(context);
            }
            ++i;
            break;
          case CanvasInstruction.MOVE_TO_LINE_TO:
            d = /** @type {number} */ (instruction[1]);
            dd = /** @type {number} */ (instruction[2]);
            x = pixelCoordinates[d];
            y = pixelCoordinates[d + 1];
            roundX = (x + 0.5) | 0;
            roundY = (y + 0.5) | 0;
            if (roundX !== prevX || roundY !== prevY) {
              context.moveTo(x, y);
              prevX = roundX;
              prevY = roundY;
            }
            for (d += 2; d < dd; d += 2) {
              x = pixelCoordinates[d];
              y = pixelCoordinates[d + 1];
              roundX = (x + 0.5) | 0;
              roundY = (y + 0.5) | 0;
              if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                context.lineTo(x, y);
                prevX = roundX;
                prevY = roundY;
              }
            }
            ++i;
            break;
          case CanvasInstruction.SET_FILL_STYLE:
            lastFillInstruction = instruction;
            this.alignFill_ = instruction[2];

            if (pendingFill) {
              this.fill_(context);
              pendingFill = 0;
              if (pendingStroke) {
                context.stroke();
                pendingStroke = 0;
              }
            }

            context.fillStyle =
              /** @type {import("../../colorlike.js").ColorLike} */ (
                instruction[1]
              );
            ++i;
            break;
          case CanvasInstruction.SET_STROKE_STYLE:
            lastStrokeInstruction = instruction;
            if (pendingStroke) {
              context.stroke();
              pendingStroke = 0;
            }
            this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
            ++i;
            break;
          case CanvasInstruction.STROKE:
            if (batchSize) {
              pendingStroke++;
            } else {
              context.stroke();
            }
            ++i;
            break;
          default: // consume the instruction anyway, to avoid an infinite loop
            ++i;
            break;
        }
      }
      if (pendingFill) {
        this.fill_(context);
      }
      if (pendingStroke) {
        context.stroke();
      }
      return undefined;
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {import("rbush").default} [declutterTree] Declutter tree.
     */
    execute(
      context,
      contextScale,
      transform,
      viewRotation,
      snapToPixel,
      declutterTree
    ) {
      this.viewRotation_ = viewRotation;
      this.execute_(
        context,
        contextScale,
        transform,
        this.instructions,
        snapToPixel,
        undefined,
        undefined,
        declutterTree
      );
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {FeatureCallback<T>} [featureCallback] Feature callback.
     * @param {import("../../extent.js").Extent} [hitExtent] Only check
     *     features that intersect this extent.
     * @return {T|undefined} Callback result.
     * @template T
     */
    executeHitDetection(
      context,
      transform,
      viewRotation,
      featureCallback,
      hitExtent
    ) {
      this.viewRotation_ = viewRotation;
      return this.execute_(
        context,
        1,
        transform,
        this.hitDetectionInstructions,
        true,
        featureCallback,
        hitExtent
      );
    }
  }

  var Executor$1 = Executor;

  /**
   * @module ol/render/canvas/ExecutorGroup
   */

  /**
   * @const
   * @type {Array<import("../canvas.js").BuilderType>}
   */
  const ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];

  class ExecutorGroup {
    /**
     * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
     * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`
     * should be set here, unless the target context does not exceed that extent (which
     * can be the case when rendering to tiles).
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {boolean} overlaps The executor group can have overlapping geometries.
     * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions
     * The serializable instructions.
     * @param {number} [renderBuffer] Optional rendering buffer.
     */
    constructor(
      maxExtent,
      resolution,
      pixelRatio,
      overlaps,
      allInstructions,
      renderBuffer
    ) {
      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.maxExtent_ = maxExtent;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = overlaps;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.resolution_ = resolution;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderBuffer_ = renderBuffer;

      /**
       * @private
       * @type {!Object<string, !Object<import("../canvas.js").BuilderType, import("./Executor").default>>}
       */
      this.executorsByZIndex_ = {};

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.hitDetectionContext_ = null;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.hitDetectionTransform_ = create$3();

      this.createExecutors_(allInstructions);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    clip(context, transform) {
      const flatClipCoords = this.getClipCoords(transform);
      context.beginPath();
      context.moveTo(flatClipCoords[0], flatClipCoords[1]);
      context.lineTo(flatClipCoords[2], flatClipCoords[3]);
      context.lineTo(flatClipCoords[4], flatClipCoords[5]);
      context.lineTo(flatClipCoords[6], flatClipCoords[7]);
      context.clip();
    }

    /**
     * Create executors and populate them using the provided instructions.
     * @private
     * @param {!Object<string, !Object<import("../canvas.js").BuilderType, import("../canvas.js").SerializableInstructions>>} allInstructions The serializable instructions
     */
    createExecutors_(allInstructions) {
      for (const zIndex in allInstructions) {
        let executors = this.executorsByZIndex_[zIndex];
        if (executors === undefined) {
          executors = {};
          this.executorsByZIndex_[zIndex] = executors;
        }
        const instructionByZindex = allInstructions[zIndex];
        for (const builderType in instructionByZindex) {
          const instructions = instructionByZindex[builderType];
          executors[builderType] = new Executor$1(
            this.resolution_,
            this.pixelRatio_,
            this.overlaps_,
            instructions
          );
        }
      }
    }

    /**
     * @param {Array<import("../canvas.js").BuilderType>} executors Executors.
     * @return {boolean} Has executors of the provided types.
     */
    hasExecutors(executors) {
      for (const zIndex in this.executorsByZIndex_) {
        const candidates = this.executorsByZIndex_[zIndex];
        for (let i = 0, ii = executors.length; i < ii; ++i) {
          if (executors[i] in candidates) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {function(import("../../Feature.js").FeatureLike, import("../../geom/SimpleGeometry.js").default, number): T} callback Feature callback.
     * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      resolution,
      rotation,
      hitTolerance,
      callback,
      declutteredFeatures
    ) {
      hitTolerance = Math.round(hitTolerance);
      const contextSize = hitTolerance * 2 + 1;
      const transform = compose(
        this.hitDetectionTransform_,
        hitTolerance + 0.5,
        hitTolerance + 0.5,
        1 / resolution,
        -1 / resolution,
        -rotation,
        -coordinate[0],
        -coordinate[1]
      );

      const newContext = !this.hitDetectionContext_;
      if (newContext) {
        this.hitDetectionContext_ = createCanvasContext2D(
          contextSize,
          contextSize,
          undefined,
          {willReadFrequently: true}
        );
      }
      const context = this.hitDetectionContext_;

      if (
        context.canvas.width !== contextSize ||
        context.canvas.height !== contextSize
      ) {
        context.canvas.width = contextSize;
        context.canvas.height = contextSize;
      } else if (!newContext) {
        context.clearRect(0, 0, contextSize, contextSize);
      }

      /**
       * @type {import("../../extent.js").Extent}
       */
      let hitExtent;
      if (this.renderBuffer_ !== undefined) {
        hitExtent = createEmpty();
        extendCoordinate(hitExtent, coordinate);
        buffer$2(
          hitExtent,
          resolution * (this.renderBuffer_ + hitTolerance),
          hitExtent
        );
      }

      const indexes = getPixelIndexArray(hitTolerance);

      let builderType;

      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
       * @return {T|undefined} Callback result.
       */
      function featureCallback(feature, geometry) {
        const imageData = context.getImageData(
          0,
          0,
          contextSize,
          contextSize
        ).data;
        for (let i = 0, ii = indexes.length; i < ii; i++) {
          if (imageData[indexes[i]] > 0) {
            if (
              !declutteredFeatures ||
              (builderType !== 'Image' && builderType !== 'Text') ||
              declutteredFeatures.includes(feature)
            ) {
              const idx = (indexes[i] - 3) / 4;
              const x = hitTolerance - (idx % contextSize);
              const y = hitTolerance - ((idx / contextSize) | 0);
              const result = callback(feature, geometry, x * x + y * y);
              if (result) {
                return result;
              }
            }
            context.clearRect(0, 0, contextSize, contextSize);
            break;
          }
        }
        return undefined;
      }

      /** @type {Array<number>} */
      const zs = Object.keys(this.executorsByZIndex_).map(Number);
      zs.sort(ascending);

      let i, j, executors, executor, result;
      for (i = zs.length - 1; i >= 0; --i) {
        const zIndexKey = zs[i].toString();
        executors = this.executorsByZIndex_[zIndexKey];
        for (j = ORDER.length - 1; j >= 0; --j) {
          builderType = ORDER[j];
          executor = executors[builderType];
          if (executor !== undefined) {
            result = executor.executeHitDetection(
              context,
              transform,
              rotation,
              featureCallback,
              hitExtent
            );
            if (result) {
              return result;
            }
          }
        }
      }
      return undefined;
    }

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     * @return {Array<number>|null} Clip coordinates.
     */
    getClipCoords(transform) {
      const maxExtent = this.maxExtent_;
      if (!maxExtent) {
        return null;
      }
      const minX = maxExtent[0];
      const minY = maxExtent[1];
      const maxX = maxExtent[2];
      const maxY = maxExtent[3];
      const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
      transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
      return flatClipCoords;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return isEmpty$1(this.executorsByZIndex_);
    }

    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} contextScale Scale of the context.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
     * @param {Array<import("../canvas.js").BuilderType>} [builderTypes] Ordered replay types to replay.
     *     Default is {@link module:ol/render/replay~ORDER}
     * @param {import("rbush").default} [declutterTree] Declutter tree.
     */
    execute(
      context,
      contextScale,
      transform,
      viewRotation,
      snapToPixel,
      builderTypes,
      declutterTree
    ) {
      /** @type {Array<number>} */
      const zs = Object.keys(this.executorsByZIndex_).map(Number);
      zs.sort(ascending);

      // setup clipping so that the parts of over-simplified geometries are not
      // visible outside the current extent when panning
      if (this.maxExtent_) {
        context.save();
        this.clip(context, transform);
      }

      builderTypes = builderTypes ? builderTypes : ORDER;
      let i, ii, j, jj, replays, replay;
      if (declutterTree) {
        zs.reverse();
      }
      for (i = 0, ii = zs.length; i < ii; ++i) {
        const zIndexKey = zs[i].toString();
        replays = this.executorsByZIndex_[zIndexKey];
        for (j = 0, jj = builderTypes.length; j < jj; ++j) {
          const builderType = builderTypes[j];
          replay = replays[builderType];
          if (replay !== undefined) {
            replay.execute(
              context,
              contextScale,
              transform,
              viewRotation,
              snapToPixel,
              declutterTree
            );
          }
        }
      }

      if (this.maxExtent_) {
        context.restore();
      }
    }
  }

  /**
   * This cache is used to store arrays of indexes for calculated pixel circles
   * to increase performance.
   * It is a static property to allow each Replaygroup to access it.
   * @type {Object<number, Array<number>>}
   */
  const circlePixelIndexArrayCache = {};

  /**
   * This methods creates an array with indexes of all pixels within a circle,
   * ordered by how close they are to the center.
   * A cache is used to increase performance.
   * @param {number} radius Radius.
   * @return {Array<number>} An array with indexes within a circle.
   */
  function getPixelIndexArray(radius) {
    if (circlePixelIndexArrayCache[radius] !== undefined) {
      return circlePixelIndexArrayCache[radius];
    }

    const size = radius * 2 + 1;
    const maxDistanceSq = radius * radius;
    const distances = new Array(maxDistanceSq + 1);
    for (let i = 0; i <= radius; ++i) {
      for (let j = 0; j <= radius; ++j) {
        const distanceSq = i * i + j * j;
        if (distanceSq > maxDistanceSq) {
          break;
        }
        let distance = distances[distanceSq];
        if (!distance) {
          distance = [];
          distances[distanceSq] = distance;
        }
        distance.push(((radius + i) * size + (radius + j)) * 4 + 3);
        if (i > 0) {
          distance.push(((radius - i) * size + (radius + j)) * 4 + 3);
        }
        if (j > 0) {
          distance.push(((radius + i) * size + (radius - j)) * 4 + 3);
          if (i > 0) {
            distance.push(((radius - i) * size + (radius - j)) * 4 + 3);
          }
        }
      }
    }

    const pixelIndex = [];
    for (let i = 0, ii = distances.length; i < ii; ++i) {
      if (distances[i]) {
        pixelIndex.push(...distances[i]);
      }
    }

    circlePixelIndexArrayCache[radius] = pixelIndex;
    return pixelIndex;
  }

  var CanvasExecutorGroup = ExecutorGroup;

  /**
   * @module ol/render/canvas/Immediate
   */

  /**
   * @classdesc
   * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements
   * direct rendering of features and geometries to an HTML5 Canvas context.
   * Instances of this class are created internally by the library and
   * provided to application code as vectorContext member of the
   * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
   * render events emitted by layers and maps.
   */
  class CanvasImmediateRenderer extends VectorContext$1 {
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {number} viewRotation View rotation.
     * @param {number} [squaredTolerance] Optional squared tolerance for simplification.
     * @param {import("../../proj.js").TransformFunction} [userTransform] Transform from user to view projection.
     */
    constructor(
      context,
      pixelRatio,
      extent,
      transform,
      viewRotation,
      squaredTolerance,
      userTransform
    ) {
      super();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = context;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.extent_ = extent;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.transform_ = transform;

      /**
       * @private
       * @type {number}
       */
      this.transformRotation_ = transform
        ? toFixed(Math.atan2(transform[1], transform[0]), 10)
        : 0;

      /**
       * @private
       * @type {number}
       */
      this.viewRotation_ = viewRotation;

      /**
       * @private
       * @type {number}
       */
      this.squaredTolerance_ = squaredTolerance;

      /**
       * @private
       * @type {import("../../proj.js").TransformFunction}
       */
      this.userTransform_ = userTransform;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.contextFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.contextStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.contextTextState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.fillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.strokeState_ = null;

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageAnchorY_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageHeight_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOpacity_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.imageOriginY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.imageRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.imageRotation_ = 0;

      /**
       * @private
       * @type {import("../../size.js").Size}
       */
      this.imageScale_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.imageWidth_ = 0;

      /**
       * @private
       * @type {string}
       */
      this.text_ = '';

      /**
       * @private
       * @type {number}
       */
      this.textOffsetX_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.textOffsetY_ = 0;

      /**
       * @private
       * @type {boolean}
       */
      this.textRotateWithView_ = false;

      /**
       * @private
       * @type {number}
       */
      this.textRotation_ = 0;

      /**
       * @private
       * @type {import("../../size.js").Size}
       */
      this.textScale_ = [0, 0];

      /**
       * @private
       * @type {?import("../canvas.js").FillState}
       */
      this.textFillState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").StrokeState}
       */
      this.textStrokeState_ = null;

      /**
       * @private
       * @type {?import("../canvas.js").TextState}
       */
      this.textState_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.pixelCoordinates_ = [];

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpLocalTransform_ = create$3();
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    drawImages_(flatCoordinates, offset, end, stride) {
      if (!this.image_) {
        return;
      }
      const pixelCoordinates = transform2D(
        flatCoordinates,
        offset,
        end,
        stride,
        this.transform_,
        this.pixelCoordinates_
      );
      const context = this.context_;
      const localTransform = this.tmpLocalTransform_;
      const alpha = context.globalAlpha;
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha * this.imageOpacity_;
      }
      let rotation = this.imageRotation_;
      if (this.transformRotation_ === 0) {
        rotation -= this.viewRotation_;
      }
      if (this.imageRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
        const x = pixelCoordinates[i] - this.imageAnchorX_;
        const y = pixelCoordinates[i + 1] - this.imageAnchorY_;
        if (
          rotation !== 0 ||
          this.imageScale_[0] != 1 ||
          this.imageScale_[1] != 1
        ) {
          const centerX = x + this.imageAnchorX_;
          const centerY = y + this.imageAnchorY_;
          compose(
            localTransform,
            centerX,
            centerY,
            1,
            1,
            rotation,
            -centerX,
            -centerY
          );
          context.setTransform.apply(context, localTransform);
          context.translate(centerX, centerY);
          context.scale(this.imageScale_[0], this.imageScale_[1]);
          context.drawImage(
            this.image_,
            this.imageOriginX_,
            this.imageOriginY_,
            this.imageWidth_,
            this.imageHeight_,
            -this.imageAnchorX_,
            -this.imageAnchorY_,
            this.imageWidth_,
            this.imageHeight_
          );
          context.setTransform(1, 0, 0, 1, 0, 0);
        } else {
          context.drawImage(
            this.image_,
            this.imageOriginX_,
            this.imageOriginY_,
            this.imageWidth_,
            this.imageHeight_,
            x,
            y,
            this.imageWidth_,
            this.imageHeight_
          );
        }
      }
      if (this.imageOpacity_ != 1) {
        context.globalAlpha = alpha;
      }
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @private
     */
    drawText_(flatCoordinates, offset, end, stride) {
      if (!this.textState_ || this.text_ === '') {
        return;
      }
      if (this.textFillState_) {
        this.setContextFillState_(this.textFillState_);
      }
      if (this.textStrokeState_) {
        this.setContextStrokeState_(this.textStrokeState_);
      }
      this.setContextTextState_(this.textState_);
      const pixelCoordinates = transform2D(
        flatCoordinates,
        offset,
        end,
        stride,
        this.transform_,
        this.pixelCoordinates_
      );
      const context = this.context_;
      let rotation = this.textRotation_;
      if (this.transformRotation_ === 0) {
        rotation -= this.viewRotation_;
      }
      if (this.textRotateWithView_) {
        rotation += this.viewRotation_;
      }
      for (; offset < end; offset += stride) {
        const x = pixelCoordinates[offset] + this.textOffsetX_;
        const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
        if (
          rotation !== 0 ||
          this.textScale_[0] != 1 ||
          this.textScale_[1] != 1
        ) {
          context.translate(x - this.textOffsetX_, y - this.textOffsetY_);
          context.rotate(rotation);
          context.translate(this.textOffsetX_, this.textOffsetY_);
          context.scale(this.textScale_[0], this.textScale_[1]);
          if (this.textStrokeState_) {
            context.strokeText(this.text_, 0, 0);
          }
          if (this.textFillState_) {
            context.fillText(this.text_, 0, 0);
          }
          context.setTransform(1, 0, 0, 1, 0, 0);
        } else {
          if (this.textStrokeState_) {
            context.strokeText(this.text_, x, y);
          }
          if (this.textFillState_) {
            context.fillText(this.text_, x, y);
          }
        }
      }
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {boolean} close Close.
     * @private
     * @return {number} end End.
     */
    moveToLineTo_(flatCoordinates, offset, end, stride, close) {
      const context = this.context_;
      const pixelCoordinates = transform2D(
        flatCoordinates,
        offset,
        end,
        stride,
        this.transform_,
        this.pixelCoordinates_
      );
      context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
      let length = pixelCoordinates.length;
      if (close) {
        length -= 2;
      }
      for (let i = 2; i < length; i += 2) {
        context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
      }
      if (close) {
        context.closePath();
      }
      return end;
    }

    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @private
     * @return {number} End.
     */
    drawRings_(flatCoordinates, offset, ends, stride) {
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        offset = this.moveToLineTo_(
          flatCoordinates,
          offset,
          ends[i],
          stride,
          true
        );
      }
      return offset;
    }

    /**
     * Render a circle geometry into the canvas.  Rendering is immediate and uses
     * the current fill and stroke styles.
     *
     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
     * @api
     */
    drawCircle(geometry) {
      if (!intersects$2(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.fillState_ || this.strokeState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const pixelCoordinates = transformGeom2D(
          geometry,
          this.transform_,
          this.pixelCoordinates_
        );
        const dx = pixelCoordinates[2] - pixelCoordinates[0];
        const dy = pixelCoordinates[3] - pixelCoordinates[1];
        const radius = Math.sqrt(dx * dx + dy * dy);
        const context = this.context_;
        context.beginPath();
        context.arc(
          pixelCoordinates[0],
          pixelCoordinates[1],
          radius,
          0,
          2 * Math.PI
        );
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        this.drawText_(geometry.getCenter(), 0, 2, 2);
      }
    }

    /**
     * Set the rendering style.  Note that since this is an immediate rendering API,
     * any `zIndex` on the provided style will be ignored.
     *
     * @param {import("../../style/Style.js").default} style The rendering style.
     * @api
     */
    setStyle(style) {
      this.setFillStrokeStyle(style.getFill(), style.getStroke());
      this.setImageStyle(style.getImage());
      this.setTextStyle(style.getText());
    }

    /**
     * @param {import("../../transform.js").Transform} transform Transform.
     */
    setTransform(transform) {
      this.transform_ = transform;
    }

    /**
     * Render a geometry into the canvas.  Call
     * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.
     *
     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
     * @api
     */
    drawGeometry(geometry) {
      const type = geometry.getType();
      switch (type) {
        case 'Point':
          this.drawPoint(
            /** @type {import("../../geom/Point.js").default} */ (geometry)
          );
          break;
        case 'LineString':
          this.drawLineString(
            /** @type {import("../../geom/LineString.js").default} */ (geometry)
          );
          break;
        case 'Polygon':
          this.drawPolygon(
            /** @type {import("../../geom/Polygon.js").default} */ (geometry)
          );
          break;
        case 'MultiPoint':
          this.drawMultiPoint(
            /** @type {import("../../geom/MultiPoint.js").default} */ (geometry)
          );
          break;
        case 'MultiLineString':
          this.drawMultiLineString(
            /** @type {import("../../geom/MultiLineString.js").default} */ (
              geometry
            )
          );
          break;
        case 'MultiPolygon':
          this.drawMultiPolygon(
            /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry)
          );
          break;
        case 'GeometryCollection':
          this.drawGeometryCollection(
            /** @type {import("../../geom/GeometryCollection.js").default} */ (
              geometry
            )
          );
          break;
        case 'Circle':
          this.drawCircle(
            /** @type {import("../../geom/Circle.js").default} */ (geometry)
          );
          break;
      }
    }

    /**
     * Render a feature into the canvas.  Note that any `zIndex` on the provided
     * style will be ignored - features are rendered immediately in the order that
     * this method is called.  If you need `zIndex` support, you should be using an
     * {@link module:ol/layer/Vector~VectorLayer} instead.
     *
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {import("../../style/Style.js").default} style Style.
     * @api
     */
    drawFeature(feature, style) {
      const geometry = style.getGeometryFunction()(feature);
      if (!geometry || !intersects$2(this.extent_, geometry.getExtent())) {
        return;
      }
      this.setStyle(style);
      this.drawGeometry(geometry);
    }

    /**
     * Render a GeometryCollection to the canvas.  Rendering is immediate and
     * uses the current styles appropriate for each geometry in the collection.
     *
     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
     */
    drawGeometryCollection(geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        this.drawGeometry(geometries[i]);
      }
    }

    /**
     * Render a Point geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
     */
    drawPoint(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/Point.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_
          )
        );
      }
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    }

    /**
     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
     * uses the current style.
     *
     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
     */
    drawMultiPoint(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_
          )
        );
      }
      const flatCoordinates = geometry.getFlatCoordinates();
      const stride = geometry.getStride();
      if (this.image_) {
        this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
      if (this.text_ !== '') {
        this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
      }
    }

    /**
     * Render a LineString into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
     */
    drawLineString(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/LineString.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_
          )
        );
      }
      if (!intersects$2(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const context = this.context_;
        const flatCoordinates = geometry.getFlatCoordinates();
        context.beginPath();
        this.moveToLineTo_(
          flatCoordinates,
          0,
          flatCoordinates.length,
          geometry.getStride(),
          false
        );
        context.stroke();
      }
      if (this.text_ !== '') {
        const flatMidpoint = geometry.getFlatMidpoint();
        this.drawText_(flatMidpoint, 0, 2, 2);
      }
    }

    /**
     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
     * and uses the current style.
     *
     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
     */
    drawMultiLineString(geometry) {
      if (this.squaredTolerance_) {
        geometry =
          /** @type {import("../../geom/MultiLineString.js").default} */ (
            geometry.simplifyTransformed(
              this.squaredTolerance_,
              this.userTransform_
            )
          );
      }
      const geometryExtent = geometry.getExtent();
      if (!intersects$2(this.extent_, geometryExtent)) {
        return;
      }
      if (this.strokeState_) {
        this.setContextStrokeState_(this.strokeState_);
        const context = this.context_;
        const flatCoordinates = geometry.getFlatCoordinates();
        let offset = 0;
        const ends = /** @type {Array<number>} */ (geometry.getEnds());
        const stride = geometry.getStride();
        context.beginPath();
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          offset = this.moveToLineTo_(
            flatCoordinates,
            offset,
            ends[i],
            stride,
            false
          );
        }
        context.stroke();
      }
      if (this.text_ !== '') {
        const flatMidpoints = geometry.getFlatMidpoints();
        this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
      }
    }

    /**
     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
     * the current style.
     *
     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
     */
    drawPolygon(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/Polygon.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_
          )
        );
      }
      if (!intersects$2(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const context = this.context_;
        context.beginPath();
        this.drawRings_(
          geometry.getOrientedFlatCoordinates(),
          0,
          /** @type {Array<number>} */ (geometry.getEnds()),
          geometry.getStride()
        );
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        const flatInteriorPoint = geometry.getFlatInteriorPoint();
        this.drawText_(flatInteriorPoint, 0, 2, 2);
      }
    }

    /**
     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
     * uses the current style.
     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     */
    drawMultiPolygon(geometry) {
      if (this.squaredTolerance_) {
        geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (
          geometry.simplifyTransformed(
            this.squaredTolerance_,
            this.userTransform_
          )
        );
      }
      if (!intersects$2(this.extent_, geometry.getExtent())) {
        return;
      }
      if (this.strokeState_ || this.fillState_) {
        if (this.fillState_) {
          this.setContextFillState_(this.fillState_);
        }
        if (this.strokeState_) {
          this.setContextStrokeState_(this.strokeState_);
        }
        const context = this.context_;
        const flatCoordinates = geometry.getOrientedFlatCoordinates();
        let offset = 0;
        const endss = geometry.getEndss();
        const stride = geometry.getStride();
        context.beginPath();
        for (let i = 0, ii = endss.length; i < ii; ++i) {
          const ends = endss[i];
          offset = this.drawRings_(flatCoordinates, offset, ends, stride);
        }
        if (this.fillState_) {
          context.fill();
        }
        if (this.strokeState_) {
          context.stroke();
        }
      }
      if (this.text_ !== '') {
        const flatInteriorPoints = geometry.getFlatInteriorPoints();
        this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
      }
    }

    /**
     * @param {import("../canvas.js").FillState} fillState Fill state.
     * @private
     */
    setContextFillState_(fillState) {
      const context = this.context_;
      const contextFillState = this.contextFillState_;
      if (!contextFillState) {
        context.fillStyle = fillState.fillStyle;
        this.contextFillState_ = {
          fillStyle: fillState.fillStyle,
        };
      } else {
        if (contextFillState.fillStyle != fillState.fillStyle) {
          contextFillState.fillStyle = fillState.fillStyle;
          context.fillStyle = fillState.fillStyle;
        }
      }
    }

    /**
     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
     * @private
     */
    setContextStrokeState_(strokeState) {
      const context = this.context_;
      const contextStrokeState = this.contextStrokeState_;
      if (!contextStrokeState) {
        context.lineCap = strokeState.lineCap;
        context.setLineDash(strokeState.lineDash);
        context.lineDashOffset = strokeState.lineDashOffset;
        context.lineJoin = strokeState.lineJoin;
        context.lineWidth = strokeState.lineWidth;
        context.miterLimit = strokeState.miterLimit;
        context.strokeStyle = strokeState.strokeStyle;
        this.contextStrokeState_ = {
          lineCap: strokeState.lineCap,
          lineDash: strokeState.lineDash,
          lineDashOffset: strokeState.lineDashOffset,
          lineJoin: strokeState.lineJoin,
          lineWidth: strokeState.lineWidth,
          miterLimit: strokeState.miterLimit,
          strokeStyle: strokeState.strokeStyle,
        };
      } else {
        if (contextStrokeState.lineCap != strokeState.lineCap) {
          contextStrokeState.lineCap = strokeState.lineCap;
          context.lineCap = strokeState.lineCap;
        }
        if (!equals$3(contextStrokeState.lineDash, strokeState.lineDash)) {
          context.setLineDash(
            (contextStrokeState.lineDash = strokeState.lineDash)
          );
        }
        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
          contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
          context.lineDashOffset = strokeState.lineDashOffset;
        }
        if (contextStrokeState.lineJoin != strokeState.lineJoin) {
          contextStrokeState.lineJoin = strokeState.lineJoin;
          context.lineJoin = strokeState.lineJoin;
        }
        if (contextStrokeState.lineWidth != strokeState.lineWidth) {
          contextStrokeState.lineWidth = strokeState.lineWidth;
          context.lineWidth = strokeState.lineWidth;
        }
        if (contextStrokeState.miterLimit != strokeState.miterLimit) {
          contextStrokeState.miterLimit = strokeState.miterLimit;
          context.miterLimit = strokeState.miterLimit;
        }
        if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
          contextStrokeState.strokeStyle = strokeState.strokeStyle;
          context.strokeStyle = strokeState.strokeStyle;
        }
      }
    }

    /**
     * @param {import("../canvas.js").TextState} textState Text state.
     * @private
     */
    setContextTextState_(textState) {
      const context = this.context_;
      const contextTextState = this.contextTextState_;
      const textAlign = textState.textAlign
        ? textState.textAlign
        : defaultTextAlign;
      if (!contextTextState) {
        context.font = textState.font;
        context.textAlign = textAlign;
        context.textBaseline = textState.textBaseline;
        this.contextTextState_ = {
          font: textState.font,
          textAlign: textAlign,
          textBaseline: textState.textBaseline,
        };
      } else {
        if (contextTextState.font != textState.font) {
          contextTextState.font = textState.font;
          context.font = textState.font;
        }
        if (contextTextState.textAlign != textAlign) {
          contextTextState.textAlign = textAlign;
          context.textAlign = textAlign;
        }
        if (contextTextState.textBaseline != textState.textBaseline) {
          contextTextState.textBaseline = textState.textBaseline;
          context.textBaseline = textState.textBaseline;
        }
      }
    }

    /**
     * Set the fill and stroke style for subsequent draw operations.  To clear
     * either fill or stroke styles, pass null for the appropriate parameter.
     *
     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
     */
    setFillStrokeStyle(fillStyle, strokeStyle) {
      if (!fillStyle) {
        this.fillState_ = null;
      } else {
        const fillStyleColor = fillStyle.getColor();
        this.fillState_ = {
          fillStyle: asColorLike(
            fillStyleColor ? fillStyleColor : defaultFillStyle
          ),
        };
      }
      if (!strokeStyle) {
        this.strokeState_ = null;
      } else {
        const strokeStyleColor = strokeStyle.getColor();
        const strokeStyleLineCap = strokeStyle.getLineCap();
        const strokeStyleLineDash = strokeStyle.getLineDash();
        const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
        const strokeStyleLineJoin = strokeStyle.getLineJoin();
        const strokeStyleWidth = strokeStyle.getWidth();
        const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
        const lineDash = strokeStyleLineDash
          ? strokeStyleLineDash
          : defaultLineDash;
        this.strokeState_ = {
          lineCap:
            strokeStyleLineCap !== undefined
              ? strokeStyleLineCap
              : defaultLineCap,
          lineDash:
            this.pixelRatio_ === 1
              ? lineDash
              : lineDash.map((n) => n * this.pixelRatio_),
          lineDashOffset:
            (strokeStyleLineDashOffset
              ? strokeStyleLineDashOffset
              : defaultLineDashOffset) * this.pixelRatio_,
          lineJoin:
            strokeStyleLineJoin !== undefined
              ? strokeStyleLineJoin
              : defaultLineJoin,
          lineWidth:
            (strokeStyleWidth !== undefined
              ? strokeStyleWidth
              : defaultLineWidth) * this.pixelRatio_,
          miterLimit:
            strokeStyleMiterLimit !== undefined
              ? strokeStyleMiterLimit
              : defaultMiterLimit,
          strokeStyle: asColorLike(
            strokeStyleColor ? strokeStyleColor : defaultStrokeStyle
          ),
        };
      }
    }

    /**
     * Set the image style for subsequent draw operations.  Pass null to remove
     * the image style.
     *
     * @param {import("../../style/Image.js").default} imageStyle Image style.
     */
    setImageStyle(imageStyle) {
      let imageSize;
      if (!imageStyle || !(imageSize = imageStyle.getSize())) {
        this.image_ = null;
        return;
      }
      const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);
      const imageAnchor = imageStyle.getAnchor();
      const imageOrigin = imageStyle.getOrigin();
      this.image_ = imageStyle.getImage(this.pixelRatio_);
      this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;
      this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;
      this.imageHeight_ = imageSize[1] * imagePixelRatio;
      this.imageOpacity_ = imageStyle.getOpacity();
      this.imageOriginX_ = imageOrigin[0];
      this.imageOriginY_ = imageOrigin[1];
      this.imageRotateWithView_ = imageStyle.getRotateWithView();
      this.imageRotation_ = imageStyle.getRotation();
      const imageScale = imageStyle.getScaleArray();
      this.imageScale_ = [
        (imageScale[0] * this.pixelRatio_) / imagePixelRatio,
        (imageScale[1] * this.pixelRatio_) / imagePixelRatio,
      ];
      this.imageWidth_ = imageSize[0] * imagePixelRatio;
    }

    /**
     * Set the text style for subsequent draw operations.  Pass null to
     * remove the text style.
     *
     * @param {import("../../style/Text.js").default} textStyle Text style.
     */
    setTextStyle(textStyle) {
      if (!textStyle) {
        this.text_ = '';
      } else {
        const textFillStyle = textStyle.getFill();
        if (!textFillStyle) {
          this.textFillState_ = null;
        } else {
          const textFillStyleColor = textFillStyle.getColor();
          this.textFillState_ = {
            fillStyle: asColorLike(
              textFillStyleColor ? textFillStyleColor : defaultFillStyle
            ),
          };
        }
        const textStrokeStyle = textStyle.getStroke();
        if (!textStrokeStyle) {
          this.textStrokeState_ = null;
        } else {
          const textStrokeStyleColor = textStrokeStyle.getColor();
          const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
          const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
          const textStrokeStyleLineDashOffset =
            textStrokeStyle.getLineDashOffset();
          const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
          const textStrokeStyleWidth = textStrokeStyle.getWidth();
          const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
          this.textStrokeState_ = {
            lineCap:
              textStrokeStyleLineCap !== undefined
                ? textStrokeStyleLineCap
                : defaultLineCap,
            lineDash: textStrokeStyleLineDash
              ? textStrokeStyleLineDash
              : defaultLineDash,
            lineDashOffset: textStrokeStyleLineDashOffset
              ? textStrokeStyleLineDashOffset
              : defaultLineDashOffset,
            lineJoin:
              textStrokeStyleLineJoin !== undefined
                ? textStrokeStyleLineJoin
                : defaultLineJoin,
            lineWidth:
              textStrokeStyleWidth !== undefined
                ? textStrokeStyleWidth
                : defaultLineWidth,
            miterLimit:
              textStrokeStyleMiterLimit !== undefined
                ? textStrokeStyleMiterLimit
                : defaultMiterLimit,
            strokeStyle: asColorLike(
              textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle
            ),
          };
        }
        const textFont = textStyle.getFont();
        const textOffsetX = textStyle.getOffsetX();
        const textOffsetY = textStyle.getOffsetY();
        const textRotateWithView = textStyle.getRotateWithView();
        const textRotation = textStyle.getRotation();
        const textScale = textStyle.getScaleArray();
        const textText = textStyle.getText();
        const textTextAlign = textStyle.getTextAlign();
        const textTextBaseline = textStyle.getTextBaseline();
        this.textState_ = {
          font: textFont !== undefined ? textFont : defaultFont,
          textAlign:
            textTextAlign !== undefined ? textTextAlign : defaultTextAlign,
          textBaseline:
            textTextBaseline !== undefined
              ? textTextBaseline
              : defaultTextBaseline,
        };
        this.text_ =
          textText !== undefined
            ? Array.isArray(textText)
              ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')
              : textText
            : '';
        this.textOffsetX_ =
          textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
        this.textOffsetY_ =
          textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
        this.textRotateWithView_ =
          textRotateWithView !== undefined ? textRotateWithView : false;
        this.textRotation_ = textRotation !== undefined ? textRotation : 0;
        this.textScale_ = [
          this.pixelRatio_ * textScale[0],
          this.pixelRatio_ * textScale[1],
        ];
      }
    }
  }

  var CanvasImmediateRenderer$1 = CanvasImmediateRenderer;

  /**
   * @module ol/style
   */

  var style0 = {
    __proto__: null,
    Circle: Circle$2,
    Fill: Fill$1,
    Icon: Icon$1,
    IconImage: IconImage$1,
    Image: ImageStyle$1,
    RegularShape: RegularShape$1,
    Stroke: Stroke$1,
    Style: Style$1,
    Text: Text$1
  };

  /**
   * @module ol/render/canvas/hitdetect
   */

  const HIT_DETECT_RESOLUTION = 0.5;

  /**
   * @param {import("../../size.js").Size} size Canvas size in css pixels.
   * @param {Array<import("../../transform.js").Transform>} transforms Transforms
   * for rendering features to all worlds of the viewport, from coordinates to css
   * pixels.
   * @param {Array<import("../../Feature.js").FeatureLike>} features
   * Features to consider for hit detection.
   * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
   * Layer style function.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @return {ImageData} Hit detection image data.
   */
  function createHitDetectionImageData(
    size,
    transforms,
    features,
    styleFunction,
    extent,
    resolution,
    rotation
  ) {
    const width = size[0] * HIT_DETECT_RESOLUTION;
    const height = size[1] * HIT_DETECT_RESOLUTION;
    const context = createCanvasContext2D(width, height);
    context.imageSmoothingEnabled = false;
    const canvas = context.canvas;
    const renderer = new CanvasImmediateRenderer$1(
      context,
      HIT_DETECT_RESOLUTION,
      extent,
      null,
      rotation
    );
    const featureCount = features.length;
    // Stretch hit detection index to use the whole available color range
    const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
    const featuresByZIndex = {};
    for (let i = 1; i <= featureCount; ++i) {
      const feature = features[i - 1];
      const featureStyleFunction = feature.getStyleFunction() || styleFunction;
      if (!styleFunction) {
        continue;
      }
      let styles = featureStyleFunction(feature, resolution);
      if (!styles) {
        continue;
      }
      if (!Array.isArray(styles)) {
        styles = [styles];
      }
      const index = i * indexFactor;
      const color = index.toString(16).padStart(7, '#00000');
      for (let j = 0, jj = styles.length; j < jj; ++j) {
        const originalStyle = styles[j];
        const geometry = originalStyle.getGeometryFunction()(feature);
        if (!geometry || !intersects$2(extent, geometry.getExtent())) {
          continue;
        }
        const style = originalStyle.clone();
        const fill = style.getFill();
        if (fill) {
          fill.setColor(color);
        }
        const stroke = style.getStroke();
        if (stroke) {
          stroke.setColor(color);
          stroke.setLineDash(null);
        }
        style.setText(undefined);
        const image = originalStyle.getImage();
        if (image && image.getOpacity() !== 0) {
          const imgSize = image.getImageSize();
          if (!imgSize) {
            continue;
          }

          const imgContext = createCanvasContext2D(
            imgSize[0],
            imgSize[1],
            undefined,
            {alpha: false}
          );
          const img = imgContext.canvas;
          imgContext.fillStyle = color;
          imgContext.fillRect(0, 0, img.width, img.height);
          style.setImage(
            new Icon$1({
              img: img,
              imgSize: imgSize,
              anchor: image.getAnchor(),
              anchorXUnits: 'pixels',
              anchorYUnits: 'pixels',
              offset: image.getOrigin(),
              opacity: 1,
              size: image.getSize(),
              scale: image.getScale(),
              rotation: image.getRotation(),
              rotateWithView: image.getRotateWithView(),
            })
          );
        }
        const zIndex = style.getZIndex() || 0;
        let byGeometryType = featuresByZIndex[zIndex];
        if (!byGeometryType) {
          byGeometryType = {};
          featuresByZIndex[zIndex] = byGeometryType;
          byGeometryType['Polygon'] = [];
          byGeometryType['Circle'] = [];
          byGeometryType['LineString'] = [];
          byGeometryType['Point'] = [];
        }
        const type = geometry.getType();
        if (type === 'GeometryCollection') {
          const geometries =
            /** @type {import("../../geom/GeometryCollection.js").default} */ (
              geometry
            ).getGeometriesArrayRecursive();
          for (let i = 0, ii = geometries.length; i < ii; ++i) {
            const geometry = geometries[i];
            byGeometryType[geometry.getType().replace('Multi', '')].push(
              geometry,
              style
            );
          }
        } else {
          byGeometryType[type.replace('Multi', '')].push(geometry, style);
        }
      }
    }

    const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);
    for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {
      const byGeometryType = featuresByZIndex[zIndexKeys[i]];
      for (const type in byGeometryType) {
        const geomAndStyle = byGeometryType[type];
        for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
          renderer.setStyle(geomAndStyle[j + 1]);
          for (let k = 0, kk = transforms.length; k < kk; ++k) {
            renderer.setTransform(transforms[k]);
            renderer.drawGeometry(geomAndStyle[j]);
          }
        }
      }
    }
    return context.getImageData(0, 0, canvas.width, canvas.height);
  }

  /**
   * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
   * detection canvas in css pixels.
   * @param {Array<F>} features Features. Has to
   * match the `features` array that was passed to `createHitDetectionImageData()`.
   * @param {ImageData} imageData Hit detection image data generated by
   * `createHitDetectionImageData()`.
   * @return {Array<F>} Features.
   * @template {import("../../Feature.js").FeatureLike} F
   */
  function hitDetect(pixel, features, imageData) {
    const resultFeatures = [];
    if (imageData) {
      const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);
      const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);
      // The pixel coordinate is clamped down to the hit-detect canvas' size to account
      // for browsers returning coordinates slightly larger than the actual canvas size
      // due to a non-integer pixel ratio.
      const index =
        (clamp(x, 0, imageData.width - 1) +
          clamp(y, 0, imageData.height - 1) * imageData.width) *
        4;
      const r = imageData.data[index];
      const g = imageData.data[index + 1];
      const b = imageData.data[index + 2];
      const i = b + 256 * (g + 256 * r);
      const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
      if (i && i % indexFactor === 0) {
        resultFeatures.push(features[i / indexFactor - 1]);
      }
    }
    // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same
    return resultFeatures;
  }

  /**
   * @module ol/renderer/vector
   */

  /**
   * Feature callback. The callback will be called with three arguments. The first
   * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}
   * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
   * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features
   * with a GeometryCollection geometry, it will be the first detected geometry from the collection.
   * @template T
   * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default<import("../source/Source").default>, import("../geom/SimpleGeometry.js").default): T} FeatureCallback
   */

  /**
   * Tolerance for geometry simplification in device pixels.
   * @type {number}
   */
  const SIMPLIFY_TOLERANCE = 0.5;

  /**
   * @const
   * @type {Object<import("../geom/Geometry.js").Type,
   *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
   *                         import("../style/Style.js").default, Object): void>}
   */
  const GEOMETRY_RENDERERS = {
    'Point': renderPointGeometry,
    'LineString': renderLineStringGeometry,
    'Polygon': renderPolygonGeometry,
    'MultiPoint': renderMultiPointGeometry,
    'MultiLineString': renderMultiLineStringGeometry,
    'MultiPolygon': renderMultiPolygonGeometry,
    'GeometryCollection': renderGeometryCollectionGeometry,
    'Circle': renderCircleGeometry,
  };

  /**
   * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
   * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
   * @return {number} Order.
   */
  function defaultOrder(feature1, feature2) {
    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
  }

  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Squared pixel tolerance.
   */
  function getSquaredTolerance(resolution, pixelRatio) {
    const tolerance = getTolerance(resolution, pixelRatio);
    return tolerance * tolerance;
  }

  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel tolerance.
   */
  function getTolerance(resolution, pixelRatio) {
    return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../geom/Circle.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderCircleGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');
      circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      circleReplay.drawCircle(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(
        style.getZIndex(),
        'Text'
      );
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   * @param {import("../proj.js").TransformFunction} [transform] Transform from user to view projection.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   * @return {boolean} `true` if style is loading.
   */
  function renderFeature$1(
    replayGroup,
    feature,
    style,
    squaredTolerance,
    listener,
    transform,
    declutterBuilderGroup
  ) {
    let loading = false;
    const imageStyle = style.getImage();
    if (imageStyle) {
      const imageState = imageStyle.getImageState();
      if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
        imageStyle.unlistenImageChange(listener);
      } else {
        if (imageState == ImageState.IDLE) {
          imageStyle.load();
        }
        imageStyle.listenImageChange(listener);
        loading = true;
      }
    }
    renderFeatureInternal(
      replayGroup,
      feature,
      style,
      squaredTolerance,
      transform,
      declutterBuilderGroup
    );

    return loading;
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderFeatureInternal(
    replayGroup,
    feature,
    style,
    squaredTolerance,
    transform,
    declutterBuilderGroup
  ) {
    const geometry = style.getGeometryFunction()(feature);
    if (!geometry) {
      return;
    }
    const simplifiedGeometry = geometry.simplifyTransformed(
      squaredTolerance,
      transform
    );
    const renderer = style.getRenderer();
    if (renderer) {
      renderGeometry(replayGroup, simplifiedGeometry, style, feature);
    } else {
      const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
      geometryRenderer(
        replayGroup,
        simplifiedGeometry,
        style,
        feature,
        declutterBuilderGroup
      );
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderGeometry(replayGroup, geometry, style, feature) {
    if (geometry.getType() == 'GeometryCollection') {
      const geometries =
        /** @type {import("../geom/GeometryCollection.js").default} */ (
          geometry
        ).getGeometries();
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        renderGeometry(replayGroup, geometries[i], style, feature);
      }
      return;
    }
    const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');
    replay.drawCustom(
      /** @type {import("../geom/SimpleGeometry.js").default} */ (geometry),
      feature,
      style.getRenderer(),
      style.getHitDetectionRenderer()
    );
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderGeometryCollectionGeometry(
    replayGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const geometries = geometry.getGeometriesArray();
    let i, ii;
    for (i = 0, ii = geometries.length; i < ii; ++i) {
      const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
      geometryRenderer(
        replayGroup,
        geometries[i],
        style,
        feature,
        declutterBuilderGroup
      );
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderLineStringGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
      const lineStringReplay = builderGroup.getBuilder(
        style.getZIndex(),
        'LineString'
      );
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawLineString(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(
        style.getZIndex(),
        'Text'
      );
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderMultiLineStringGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const strokeStyle = style.getStroke();
    if (strokeStyle) {
      const lineStringReplay = builderGroup.getBuilder(
        style.getZIndex(),
        'LineString'
      );
      lineStringReplay.setFillStrokeStyle(null, strokeStyle);
      lineStringReplay.drawMultiLineString(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(
        style.getZIndex(),
        'Text'
      );
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderMultiPolygonGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (strokeStyle || fillStyle) {
      const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawMultiPolygon(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(
        style.getZIndex(),
        'Text'
      );
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderPointGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */
    let declutterImageWithText;
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      let imageBuilderGroup = builderGroup;
      if (declutterBuilderGroup) {
        const declutterMode = imageStyle.getDeclutterMode();
        if (declutterMode !== 'none') {
          imageBuilderGroup = declutterBuilderGroup;
          if (declutterMode === 'obstacle') {
            // draw in non-declutter group:
            const imageReplay = builderGroup.getBuilder(
              style.getZIndex(),
              'Image'
            );
            imageReplay.setImageStyle(imageStyle, declutterImageWithText);
            imageReplay.drawPoint(geometry, feature);
          } else if (textStyle && textStyle.getText()) {
            declutterImageWithText = {};
          }
        }
      }
      const imageReplay = imageBuilderGroup.getBuilder(
        style.getZIndex(),
        'Image'
      );
      imageReplay.setImageStyle(imageStyle, declutterImageWithText);
      imageReplay.drawPoint(geometry, feature);
    }
    if (textStyle && textStyle.getText()) {
      let textBuilderGroup = builderGroup;
      if (declutterBuilderGroup) {
        textBuilderGroup = declutterBuilderGroup;
      }
      const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle, declutterImageWithText);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderMultiPointGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const imageStyle = style.getImage();
    const textStyle = style.getText();
    /** @type {import("../render/canvas.js").DeclutterImageWithText} */
    let declutterImageWithText;
    if (imageStyle) {
      if (imageStyle.getImageState() != ImageState.LOADED) {
        return;
      }
      let imageBuilderGroup = builderGroup;
      if (declutterBuilderGroup) {
        const declutterMode = imageStyle.getDeclutterMode();
        if (declutterMode !== 'none') {
          imageBuilderGroup = declutterBuilderGroup;
          if (declutterMode === 'obstacle') {
            // draw in non-declutter group:
            const imageReplay = builderGroup.getBuilder(
              style.getZIndex(),
              'Image'
            );
            imageReplay.setImageStyle(imageStyle, declutterImageWithText);
            imageReplay.drawMultiPoint(geometry, feature);
          } else if (textStyle && textStyle.getText()) {
            declutterImageWithText = {};
          }
        }
      }
      const imageReplay = imageBuilderGroup.getBuilder(
        style.getZIndex(),
        'Image'
      );
      imageReplay.setImageStyle(imageStyle, declutterImageWithText);
      imageReplay.drawMultiPoint(geometry, feature);
    }
    if (textStyle && textStyle.getText()) {
      let textBuilderGroup = builderGroup;
      if (declutterBuilderGroup) {
        textBuilderGroup = declutterBuilderGroup;
      }
      const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');
      textReplay.setTextStyle(textStyle, declutterImageWithText);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
   */
  function renderPolygonGeometry(
    builderGroup,
    geometry,
    style,
    feature,
    declutterBuilderGroup
  ) {
    const fillStyle = style.getFill();
    const strokeStyle = style.getStroke();
    if (fillStyle || strokeStyle) {
      const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');
      polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
      polygonReplay.drawPolygon(geometry, feature);
    }
    const textStyle = style.getText();
    if (textStyle && textStyle.getText()) {
      const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(
        style.getZIndex(),
        'Text'
      );
      textReplay.setTextStyle(textStyle);
      textReplay.drawText(geometry, feature);
    }
  }

  /**
   * @module ol/renderer/canvas/VectorLayer
   */

  /**
   * @classdesc
   * Canvas renderer for vector layers.
   * @api
   */
  class CanvasVectorLayerRenderer extends CanvasLayerRenderer$1 {
    /**
     * @param {import("../../layer/BaseVector.js").default} vectorLayer Vector layer.
     */
    constructor(vectorLayer) {
      super(vectorLayer);

      /** @private */
      this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);

      /**
       * @type {boolean}
       */
      this.animatingOrInteracting_;

      /**
       * @type {ImageData|null}
       */
      this.hitDetectionImageData_ = null;

      /**
       * @type {Array<import("../../Feature.js").default>}
       */
      this.renderedFeatures_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.renderedResolution_ = NaN;

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.renderedExtent_ = createEmpty();

      /**
       * @private
       * @type {import("../../extent.js").Extent}
       */
      this.wrappedRenderedExtent_ = createEmpty();

      /**
       * @private
       * @type {number}
       */
      this.renderedRotation_;

      /**
       * @private
       * @type {import("../../coordinate").Coordinate}
       */
      this.renderedCenter_ = null;

      /**
       * @private
       * @type {import("../../proj/Projection").default}
       */
      this.renderedProjection_ = null;

      /**
       * @private
       * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
       */
      this.renderedRenderOrder_ = null;

      /**
       * @private
       * @type {import("../../render/canvas/ExecutorGroup").default}
       */
      this.replayGroup_ = null;

      /**
       * A new replay group had to be created by `prepareFrame()`
       * @type {boolean}
       */
      this.replayGroupChanged = true;

      /**
       * @type {import("../../render/canvas/ExecutorGroup").default}
       */
      this.declutterExecutorGroup = null;

      /**
       * Clipping to be performed by `renderFrame()`
       * @type {boolean}
       */
      this.clipping = true;

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.compositionContext_ = null;

      /**
       * @private
       * @type {number}
       */
      this.opacity_ = 1;
    }

    /**
     * @param {ExecutorGroup} executorGroup Executor group.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("rbush").default} [declutterTree] Declutter tree.
     */
    renderWorlds(executorGroup, frameState, declutterTree) {
      const extent = frameState.extent;
      const viewState = frameState.viewState;
      const center = viewState.center;
      const resolution = viewState.resolution;
      const projection = viewState.projection;
      const rotation = viewState.rotation;
      const projectionExtent = projection.getExtent();
      const vectorSource = this.getLayer().getSource();
      const pixelRatio = frameState.pixelRatio;
      const viewHints = frameState.viewHints;
      const snapToPixel = !(
        viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]
      );
      const context = this.compositionContext_;
      const width = Math.round(frameState.size[0] * pixelRatio);
      const height = Math.round(frameState.size[1] * pixelRatio);

      const multiWorld = vectorSource.getWrapX() && projection.canWrapX();
      const worldWidth = multiWorld ? getWidth(projectionExtent) : null;
      const endWorld = multiWorld
        ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1
        : 1;
      let world = multiWorld
        ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)
        : 0;
      do {
        const transform = this.getRenderTransform(
          center,
          resolution,
          rotation,
          pixelRatio,
          width,
          height,
          world * worldWidth
        );
        executorGroup.execute(
          context,
          1,
          transform,
          rotation,
          snapToPixel,
          undefined,
          declutterTree
        );
      } while (++world < endWorld);
    }

    setupCompositionContext_() {
      if (this.opacity_ !== 1) {
        const compositionContext = createCanvasContext2D(
          this.context.canvas.width,
          this.context.canvas.height,
          canvasPool$2
        );
        this.compositionContext_ = compositionContext;
      } else {
        this.compositionContext_ = this.context;
      }
    }

    releaseCompositionContext_() {
      if (this.opacity_ !== 1) {
        const alpha = this.context.globalAlpha;
        this.context.globalAlpha = this.opacity_;
        this.context.drawImage(this.compositionContext_.canvas, 0, 0);
        this.context.globalAlpha = alpha;
        releaseCanvas$1(this.compositionContext_);
        canvasPool$2.push(this.compositionContext_.canvas);
        this.compositionContext_ = null;
      }
    }

    /**
     * Render declutter items for this layer
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     */
    renderDeclutter(frameState) {
      if (this.declutterExecutorGroup) {
        this.setupCompositionContext_();
        this.renderWorlds(
          this.declutterExecutorGroup,
          frameState,
          frameState.declutterTree
        );
        this.releaseCompositionContext_();
      }
    }

    /**
     * Render the layer.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      const pixelRatio = frameState.pixelRatio;
      const layerState = frameState.layerStatesArray[frameState.layerIndex];

      // set forward and inverse pixel transforms
      makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
      makeInverse(this.inversePixelTransform, this.pixelTransform);

      const canvasTransform = toString$4(this.pixelTransform);

      this.useContainer(target, canvasTransform, this.getBackground(frameState));
      const context = this.context;
      const canvas = context.canvas;

      const replayGroup = this.replayGroup_;
      const declutterExecutorGroup = this.declutterExecutorGroup;
      if (
        (!replayGroup || replayGroup.isEmpty()) &&
        (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())
      ) {
        return null;
      }

      // resize and clear
      const width = Math.round(frameState.size[0] * pixelRatio);
      const height = Math.round(frameState.size[1] * pixelRatio);
      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
        if (canvas.style.transform !== canvasTransform) {
          canvas.style.transform = canvasTransform;
        }
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }

      this.preRender(context, frameState);

      const viewState = frameState.viewState;
      const projection = viewState.projection;

      this.opacity_ = layerState.opacity;
      this.setupCompositionContext_();

      // clipped rendering if layer extent is set
      let clipped = false;
      let render = true;
      if (layerState.extent && this.clipping) {
        const layerExtent = fromUserExtent(layerState.extent, projection);
        render = intersects$2(layerExtent, frameState.extent);
        clipped = render && !containsExtent(layerExtent, frameState.extent);
        if (clipped) {
          this.clipUnrotated(this.compositionContext_, frameState, layerExtent);
        }
      }

      if (render) {
        this.renderWorlds(replayGroup, frameState);
      }

      if (clipped) {
        this.compositionContext_.restore();
      }

      this.releaseCompositionContext_();

      this.postRender(context, frameState);

      if (this.renderedRotation_ !== viewState.rotation) {
        this.renderedRotation_ = viewState.rotation;
        this.hitDetectionImageData_ = null;
      }
      return this.container;
    }

    /**
     * Asynchronous layer level hit detection.
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../../Feature").default>>} Promise
     * that resolves with an array of features.
     */
    getFeatures(pixel) {
      return new Promise((resolve) => {
        if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
          const size = [this.context.canvas.width, this.context.canvas.height];
          apply(this.pixelTransform, size);
          const center = this.renderedCenter_;
          const resolution = this.renderedResolution_;
          const rotation = this.renderedRotation_;
          const projection = this.renderedProjection_;
          const extent = this.wrappedRenderedExtent_;
          const layer = this.getLayer();
          const transforms = [];
          const width = size[0] * HIT_DETECT_RESOLUTION;
          const height = size[1] * HIT_DETECT_RESOLUTION;
          transforms.push(
            this.getRenderTransform(
              center,
              resolution,
              rotation,
              HIT_DETECT_RESOLUTION,
              width,
              height,
              0
            ).slice()
          );
          const source = layer.getSource();
          const projectionExtent = projection.getExtent();
          if (
            source.getWrapX() &&
            projection.canWrapX() &&
            !containsExtent(projectionExtent, extent)
          ) {
            let startX = extent[0];
            const worldWidth = getWidth(projectionExtent);
            let world = 0;
            let offsetX;
            while (startX < projectionExtent[0]) {
              --world;
              offsetX = worldWidth * world;
              transforms.push(
                this.getRenderTransform(
                  center,
                  resolution,
                  rotation,
                  HIT_DETECT_RESOLUTION,
                  width,
                  height,
                  offsetX
                ).slice()
              );
              startX += worldWidth;
            }
            world = 0;
            startX = extent[2];
            while (startX > projectionExtent[2]) {
              ++world;
              offsetX = worldWidth * world;
              transforms.push(
                this.getRenderTransform(
                  center,
                  resolution,
                  rotation,
                  HIT_DETECT_RESOLUTION,
                  width,
                  height,
                  offsetX
                ).slice()
              );
              startX -= worldWidth;
            }
          }

          this.hitDetectionImageData_ = createHitDetectionImageData(
            size,
            transforms,
            this.renderedFeatures_,
            layer.getStyleFunction(),
            extent,
            resolution,
            rotation
          );
        }
        resolve(
          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)
        );
      });
    }

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches
    ) {
      if (!this.replayGroup_) {
        return undefined;
      }
      const resolution = frameState.viewState.resolution;
      const rotation = frameState.viewState.rotation;
      const layer = this.getLayer();

      /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */
      const features = {};

      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
       * @param {number} distanceSq The squared distance to the click position
       * @return {T|undefined} Callback result.
       */
      const featureCallback = function (feature, geometry, distanceSq) {
        const key = getUid(feature);
        const match = features[key];
        if (!match) {
          if (distanceSq === 0) {
            features[key] = true;
            return callback(feature, layer, geometry);
          }
          matches.push(
            (features[key] = {
              feature: feature,
              layer: layer,
              geometry: geometry,
              distanceSq: distanceSq,
              callback: callback,
            })
          );
        } else if (match !== true && distanceSq < match.distanceSq) {
          if (distanceSq === 0) {
            features[key] = true;
            matches.splice(matches.lastIndexOf(match), 1);
            return callback(feature, layer, geometry);
          }
          match.geometry = geometry;
          match.distanceSq = distanceSq;
        }
        return undefined;
      };

      let result;
      const executorGroups = [this.replayGroup_];
      if (this.declutterExecutorGroup) {
        executorGroups.push(this.declutterExecutorGroup);
      }
      executorGroups.some((executorGroup) => {
        return (result = executorGroup.forEachFeatureAtCoordinate(
          coordinate,
          resolution,
          rotation,
          hitTolerance,
          featureCallback,
          executorGroup === this.declutterExecutorGroup &&
            frameState.declutterTree
            ? frameState.declutterTree.all().map((item) => item.value)
            : null
        ));
      });

      return result;
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     */
    handleFontsChanged() {
      const layer = this.getLayer();
      if (layer.getVisible() && this.replayGroup_) {
        layer.changed();
      }
    }

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    handleStyleImageChange_(event) {
      this.renderIfReadyAndVisible();
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      const vectorLayer = this.getLayer();
      const vectorSource = vectorLayer.getSource();
      if (!vectorSource) {
        return false;
      }

      const animating = frameState.viewHints[ViewHint.ANIMATING];
      const interacting = frameState.viewHints[ViewHint.INTERACTING];
      const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
      const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();

      if (
        (this.ready && !updateWhileAnimating && animating) ||
        (!updateWhileInteracting && interacting)
      ) {
        this.animatingOrInteracting_ = true;
        return true;
      }
      this.animatingOrInteracting_ = false;

      const frameStateExtent = frameState.extent;
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const resolution = viewState.resolution;
      const pixelRatio = frameState.pixelRatio;
      const vectorLayerRevision = vectorLayer.getRevision();
      const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
      let vectorLayerRenderOrder = vectorLayer.getRenderOrder();

      if (vectorLayerRenderOrder === undefined) {
        vectorLayerRenderOrder = defaultOrder;
      }

      const center = viewState.center.slice();
      const extent = buffer$2(
        frameStateExtent,
        vectorLayerRenderBuffer * resolution
      );
      const renderedExtent = extent.slice();
      const loadExtents = [extent.slice()];
      const projectionExtent = projection.getExtent();

      if (
        vectorSource.getWrapX() &&
        projection.canWrapX() &&
        !containsExtent(projectionExtent, frameState.extent)
      ) {
        // For the replay group, we need an extent that intersects the real world
        // (-180° to +180°). To support geometries in a coordinate range from -540°
        // to +540°, we add at least 1 world width on each side of the projection
        // extent. If the viewport is wider than the world, we need to add half of
        // the viewport width to make sure we cover the whole viewport.
        const worldWidth = getWidth(projectionExtent);
        const gutter = Math.max(getWidth(extent) / 2, worldWidth);
        extent[0] = projectionExtent[0] - gutter;
        extent[2] = projectionExtent[2] + gutter;
        wrapX$1(center, projection);
        const loadExtent = wrapX$2(loadExtents[0], projection);
        // If the extent crosses the date line, we load data for both edges of the worlds
        if (
          loadExtent[0] < projectionExtent[0] &&
          loadExtent[2] < projectionExtent[2]
        ) {
          loadExtents.push([
            loadExtent[0] + worldWidth,
            loadExtent[1],
            loadExtent[2] + worldWidth,
            loadExtent[3],
          ]);
        } else if (
          loadExtent[0] > projectionExtent[0] &&
          loadExtent[2] > projectionExtent[2]
        ) {
          loadExtents.push([
            loadExtent[0] - worldWidth,
            loadExtent[1],
            loadExtent[2] - worldWidth,
            loadExtent[3],
          ]);
        }
      }

      if (
        this.ready &&
        this.renderedResolution_ == resolution &&
        this.renderedRevision_ == vectorLayerRevision &&
        this.renderedRenderOrder_ == vectorLayerRenderOrder &&
        containsExtent(this.wrappedRenderedExtent_, extent)
      ) {
        if (!equals$3(this.renderedExtent_, renderedExtent)) {
          this.hitDetectionImageData_ = null;
          this.renderedExtent_ = renderedExtent;
        }
        this.renderedCenter_ = center;
        this.replayGroupChanged = false;
        return true;
      }

      this.replayGroup_ = null;

      const replayGroup = new CanvasBuilderGroup(
        getTolerance(resolution, pixelRatio),
        extent,
        resolution,
        pixelRatio
      );

      let declutterBuilderGroup;
      if (this.getLayer().getDeclutter()) {
        declutterBuilderGroup = new CanvasBuilderGroup(
          getTolerance(resolution, pixelRatio),
          extent,
          resolution,
          pixelRatio
        );
      }

      const userProjection = getUserProjection();
      let userTransform;
      if (userProjection) {
        for (let i = 0, ii = loadExtents.length; i < ii; ++i) {
          const extent = loadExtents[i];
          const userExtent = toUserExtent(extent, projection);
          vectorSource.loadFeatures(
            userExtent,
            toUserResolution(resolution, projection),
            userProjection
          );
        }
        userTransform = getTransformFromProjections(userProjection, projection);
      } else {
        for (let i = 0, ii = loadExtents.length; i < ii; ++i) {
          vectorSource.loadFeatures(loadExtents[i], resolution, projection);
        }
      }

      const squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
      let ready = true;
      const render =
        /**
         * @param {import("../../Feature.js").default} feature Feature.
         */
        (feature) => {
          let styles;
          const styleFunction =
            feature.getStyleFunction() || vectorLayer.getStyleFunction();
          if (styleFunction) {
            styles = styleFunction(feature, resolution);
          }
          if (styles) {
            const dirty = this.renderFeature(
              feature,
              squaredTolerance,
              styles,
              replayGroup,
              userTransform,
              declutterBuilderGroup
            );
            ready = ready && !dirty;
          }
        };

      const userExtent = toUserExtent(extent, projection);
      /** @type {Array<import("../../Feature.js").default>} */
      const features = vectorSource.getFeaturesInExtent(userExtent);
      if (vectorLayerRenderOrder) {
        features.sort(vectorLayerRenderOrder);
      }
      for (let i = 0, ii = features.length; i < ii; ++i) {
        render(features[i]);
      }
      this.renderedFeatures_ = features;
      this.ready = ready;

      const replayGroupInstructions = replayGroup.finish();
      const executorGroup = new CanvasExecutorGroup(
        extent,
        resolution,
        pixelRatio,
        vectorSource.getOverlaps(),
        replayGroupInstructions,
        vectorLayer.getRenderBuffer()
      );

      if (declutterBuilderGroup) {
        this.declutterExecutorGroup = new CanvasExecutorGroup(
          extent,
          resolution,
          pixelRatio,
          vectorSource.getOverlaps(),
          declutterBuilderGroup.finish(),
          vectorLayer.getRenderBuffer()
        );
      }

      this.renderedResolution_ = resolution;
      this.renderedRevision_ = vectorLayerRevision;
      this.renderedRenderOrder_ = vectorLayerRenderOrder;
      this.renderedExtent_ = renderedExtent;
      this.wrappedRenderedExtent_ = extent;
      this.renderedCenter_ = center;
      this.renderedProjection_ = projection;
      this.replayGroup_ = executorGroup;
      this.hitDetectionImageData_ = null;

      this.replayGroupChanged = true;
      return true;
    }

    /**
     * @param {import("../../Feature.js").default} feature Feature.
     * @param {number} squaredTolerance Squared render tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
     * @param {import("../../proj.js").TransformFunction} [transform] Transform from user to view projection.
     * @param {import("../../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder for decluttering.
     * @return {boolean} `true` if an image is loading.
     */
    renderFeature(
      feature,
      squaredTolerance,
      styles,
      builderGroup,
      transform,
      declutterBuilderGroup
    ) {
      if (!styles) {
        return false;
      }
      let loading = false;
      if (Array.isArray(styles)) {
        for (let i = 0, ii = styles.length; i < ii; ++i) {
          loading =
            renderFeature$1(
              builderGroup,
              feature,
              styles[i],
              squaredTolerance,
              this.boundHandleStyleImageChange_,
              transform,
              declutterBuilderGroup
            ) || loading;
        }
      } else {
        loading = renderFeature$1(
          builderGroup,
          feature,
          styles,
          squaredTolerance,
          this.boundHandleStyleImageChange_,
          transform,
          declutterBuilderGroup
        );
      }
      return loading;
    }
  }

  var CanvasVectorLayerRenderer$1 = CanvasVectorLayerRenderer;

  /**
   * @module ol/layer/Vector
   */

  /**
   * @classdesc
   * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering
   * even during animations. Points and labels stay upright on rotated views. For very large
   * amounts of vector data, performance may suffer during pan and zoom animations. In this case,
   * try {@link module:ol/layer/VectorImage~VectorImageLayer}.
   *
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default} VectorSourceType
   * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}
   * @api
   */
  class VectorLayer extends BaseVectorLayer$1 {
    /**
     * @param {import("./BaseVector.js").Options<VectorSourceType>} [options] Options.
     */
    constructor(options) {
      super(options);
    }

    createRenderer() {
      return new CanvasVectorLayerRenderer$1(this);
    }
  }

  var VectorLayer$1 = VectorLayer;

  /**
   * @module ol/structs/RBush
   */

  /**
   * @typedef {Object} Entry
   * @property {number} minX MinX.
   * @property {number} minY MinY.
   * @property {number} maxX MaxX.
   * @property {number} maxY MaxY.
   * @property {Object} [value] Value.
   */

  /**
   * @classdesc
   * Wrapper around the RBush by Vladimir Agafonkin.
   * See https://github.com/mourner/rbush.
   *
   * @template T
   */
  class RBush {
    /**
     * @param {number} [maxEntries] Max entries.
     */
    constructor(maxEntries) {
      /**
       * @private
       */
      this.rbush_ = new RBush$2(maxEntries);

      /**
       * A mapping between the objects added to this rbush wrapper
       * and the objects that are actually added to the internal rbush.
       * @private
       * @type {Object<string, Entry>}
       */
      this.items_ = {};
    }

    /**
     * Insert a value into the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */
    insert(extent, value) {
      /** @type {Entry} */
      const item = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
        value: value,
      };

      this.rbush_.insert(item);
      this.items_[getUid(value)] = item;
    }

    /**
     * Bulk-insert values into the RBush.
     * @param {Array<import("../extent.js").Extent>} extents Extents.
     * @param {Array<T>} values Values.
     */
    load(extents, values) {
      const items = new Array(values.length);
      for (let i = 0, l = values.length; i < l; i++) {
        const extent = extents[i];
        const value = values[i];

        /** @type {Entry} */
        const item = {
          minX: extent[0],
          minY: extent[1],
          maxX: extent[2],
          maxY: extent[3],
          value: value,
        };
        items[i] = item;
        this.items_[getUid(value)] = item;
      }
      this.rbush_.load(items);
    }

    /**
     * Remove a value from the RBush.
     * @param {T} value Value.
     * @return {boolean} Removed.
     */
    remove(value) {
      const uid = getUid(value);

      // get the object in which the value was wrapped when adding to the
      // internal rbush. then use that object to do the removal.
      const item = this.items_[uid];
      delete this.items_[uid];
      return this.rbush_.remove(item) !== null;
    }

    /**
     * Update the extent of a value in the RBush.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {T} value Value.
     */
    update(extent, value) {
      const item = this.items_[getUid(value)];
      const bbox = [item.minX, item.minY, item.maxX, item.maxY];
      if (!equals$2(bbox, extent)) {
        this.remove(value);
        this.insert(extent, value);
      }
    }

    /**
     * Return all values in the RBush.
     * @return {Array<T>} All.
     */
    getAll() {
      const items = this.rbush_.all();
      return items.map(function (item) {
        return item.value;
      });
    }

    /**
     * Return all values in the given extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<T>} All in extent.
     */
    getInExtent(extent) {
      /** @type {Entry} */
      const bbox = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
      };
      const items = this.rbush_.search(bbox);
      return items.map(function (item) {
        return item.value;
      });
    }

    /**
     * Calls a callback function with each value in the tree.
     * If the callback returns a truthy value, this value is returned without
     * checking the rest of the tree.
     * @param {function(T): *} callback Callback.
     * @return {*} Callback return value.
     */
    forEach(callback) {
      return this.forEach_(this.getAll(), callback);
    }

    /**
     * Calls a callback function with each value in the provided extent.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(T): *} callback Callback.
     * @return {*} Callback return value.
     */
    forEachInExtent(extent, callback) {
      return this.forEach_(this.getInExtent(extent), callback);
    }

    /**
     * @param {Array<T>} values Values.
     * @param {function(T): *} callback Callback.
     * @private
     * @return {*} Callback return value.
     */
    forEach_(values, callback) {
      let result;
      for (let i = 0, l = values.length; i < l; i++) {
        result = callback(values[i]);
        if (result) {
          return result;
        }
      }
      return result;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return isEmpty$1(this.items_);
    }

    /**
     * Remove all values from the RBush.
     */
    clear() {
      this.rbush_.clear();
      this.items_ = {};
    }

    /**
     * @param {import("../extent.js").Extent} [extent] Extent.
     * @return {import("../extent.js").Extent} Extent.
     */
    getExtent(extent) {
      const data = this.rbush_.toJSON();
      return createOrUpdate$2(data.minX, data.minY, data.maxX, data.maxY, extent);
    }

    /**
     * @param {RBush} rbush R-Tree.
     */
    concat(rbush) {
      this.rbush_.load(rbush.rbush_.all());
      for (const i in rbush.items_) {
        this.items_[i] = rbush.items_[i];
      }
    }
  }

  var RBush$1 = RBush;

  /**
   * @module ol/source/Source
   */

  /**
   * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State
   * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
   */

  /**
   * A function that takes a {@link import("../View.js").ViewStateAndExtent} and returns a string or
   * an array of strings representing source attributions.
   *
   * @typedef {function(import("../View.js").ViewStateAndExtent): (string|Array<string>)} Attribution
   */

  /**
   * A type that can be used to provide attribution information for data sources.
   *
   * It represents either
   * * a simple string (e.g. `'© Acme Inc.'`)
   * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
   * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
   *
   * @typedef {string|Array<string>|Attribution} AttributionLike
   */

  /**
   * @typedef {Object} Options
   * @property {AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {import("./Source.js").State} [state='ready'] State.
   * @property {boolean} [wrapX=false] WrapX.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for {@link module:ol/layer/Layer~Layer} sources.
   *
   * A generic `change` event is triggered when the state of the source changes.
   * @abstract
   * @api
   */
  class Source extends olObject {
    /**
     * @param {Options} options Source options.
     */
    constructor(options) {
      super();

      /**
       * @protected
       * @type {import("../proj/Projection.js").default|null}
       */
      this.projection = get$2(options.projection);

      /**
       * @private
       * @type {?Attribution}
       */
      this.attributions_ = adaptAttributions(options.attributions);

      /**
       * @private
       * @type {boolean}
       */
      this.attributionsCollapsible_ =
        options.attributionsCollapsible !== undefined
          ? options.attributionsCollapsible
          : true;

      /**
       * This source is currently loading data. Sources that defer loading to the
       * map's tile queue never set this to `true`.
       * @type {boolean}
       */
      this.loading = false;

      /**
       * @private
       * @type {import("./Source.js").State}
       */
      this.state_ = options.state !== undefined ? options.state : 'ready';

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;

      /**
       * @private
       * @type {boolean}
       */
      this.interpolate_ = !!options.interpolate;

      /**
       * @protected
       * @type {function(import("../View.js").ViewOptions):void}
       */
      this.viewResolver = null;

      /**
       * @protected
       * @type {function(Error):void}
       */
      this.viewRejector = null;

      const self = this;
      /**
       * @private
       * @type {Promise<import("../View.js").ViewOptions>}
       */
      this.viewPromise_ = new Promise(function (resolve, reject) {
        self.viewResolver = resolve;
        self.viewRejector = reject;
      });
    }

    /**
     * Get the attribution function for the source.
     * @return {?Attribution} Attribution function.
     * @api
     */
    getAttributions() {
      return this.attributions_;
    }

    /**
     * @return {boolean} Attributions are collapsible.
     * @api
     */
    getAttributionsCollapsible() {
      return this.attributionsCollapsible_;
    }

    /**
     * Get the projection of the source.
     * @return {import("../proj/Projection.js").default|null} Projection.
     * @api
     */
    getProjection() {
      return this.projection;
    }

    /**
     * @param {import("../proj/Projection").default} [projection] Projection.
     * @return {Array<number>|null} Resolutions.
     */
    getResolutions(projection) {
      return null;
    }

    /**
     * @return {Promise<import("../View.js").ViewOptions>} A promise for view-related properties.
     */
    getView() {
      return this.viewPromise_;
    }

    /**
     * Get the state of the source, see {@link import("./Source.js").State} for possible states.
     * @return {import("./Source.js").State} State.
     * @api
     */
    getState() {
      return this.state_;
    }

    /**
     * @return {boolean|undefined} Wrap X.
     */
    getWrapX() {
      return this.wrapX_;
    }

    /**
     * @return {boolean} Use linear interpolation when resampling.
     */
    getInterpolate() {
      return this.interpolate_;
    }

    /**
     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
     * @api
     */
    refresh() {
      this.changed();
    }

    /**
     * Set the attributions of the source.
     * @param {AttributionLike|undefined} attributions Attributions.
     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
     *     or `undefined`.
     * @api
     */
    setAttributions(attributions) {
      this.attributions_ = adaptAttributions(attributions);
      this.changed();
    }

    /**
     * Set the state of the source.
     * @param {import("./Source.js").State} state State.
     */
    setState(state) {
      this.state_ = state;
      this.changed();
    }
  }

  /**
   * Turns the attributions option into an attributions function.
   * @param {AttributionLike|undefined} attributionLike The attribution option.
   * @return {Attribution|null} An attribution function (or null).
   */
  function adaptAttributions(attributionLike) {
    if (!attributionLike) {
      return null;
    }
    if (Array.isArray(attributionLike)) {
      return function (frameState) {
        return attributionLike;
      };
    }

    if (typeof attributionLike === 'function') {
      return attributionLike;
    }

    return function (frameState) {
      return [attributionLike];
    };
  }

  var Source$1 = Source;

  /**
   * @module ol/source/VectorEventType
   */

  /**
   * @enum {string}
   */
  var VectorEventType = {
    /**
     * Triggered when a feature is added to the source.
     * @event module:ol/source/Vector.VectorSourceEvent#addfeature
     * @api
     */
    ADDFEATURE: 'addfeature',

    /**
     * Triggered when a feature is updated.
     * @event module:ol/source/Vector.VectorSourceEvent#changefeature
     * @api
     */
    CHANGEFEATURE: 'changefeature',

    /**
     * Triggered when the clear method is called on the source.
     * @event module:ol/source/Vector.VectorSourceEvent#clear
     * @api
     */
    CLEAR: 'clear',

    /**
     * Triggered when a feature is removed from the source.
     * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.
     * @event module:ol/source/Vector.VectorSourceEvent#removefeature
     * @api
     */
    REMOVEFEATURE: 'removefeature',

    /**
     * Triggered when features starts loading.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart
     * @api
     */
    FEATURESLOADSTART: 'featuresloadstart',

    /**
     * Triggered when features finishes loading.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend
     * @api
     */
    FEATURESLOADEND: 'featuresloadend',

    /**
     * Triggered if feature loading results in an error.
     * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror
     * @api
     */
    FEATURESLOADERROR: 'featuresloaderror',
  };

  /**
   * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes
   */

  /**
   * @module ol/loadingstrategy
   */

  /**
   * Strategy function for loading all features with a single request.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function all$1(extent, resolution) {
    return [[-Infinity, -Infinity, Infinity, Infinity]];
  }

  /**
   * Strategy function for loading features based on the view's extent and
   * resolution.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function bbox$1(extent, resolution) {
    return [extent];
  }

  /**
   * Creates a strategy function for loading features based on a tile grid.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {function(import("./extent.js").Extent, number, import("./proj.js").Projection): Array<import("./extent.js").Extent>} Loading strategy.
   * @api
   */
  function tile(tileGrid) {
    return (
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("./proj.js").Projection} projection Projection.
       * @return {Array<import("./extent.js").Extent>} Extents.
       */
      function (extent, resolution, projection) {
        const z = tileGrid.getZForResolution(
          fromUserResolution(resolution, projection)
        );
        const tileRange = tileGrid.getTileRangeForExtentAndZ(
          fromUserExtent(extent, projection),
          z
        );
        /** @type {Array<import("./extent.js").Extent>} */
        const extents = [];
        /** @type {import("./tilecoord.js").TileCoord} */
        const tileCoord = [z, 0, 0];
        for (
          tileCoord[1] = tileRange.minX;
          tileCoord[1] <= tileRange.maxX;
          ++tileCoord[1]
        ) {
          for (
            tileCoord[2] = tileRange.minY;
            tileCoord[2] <= tileRange.maxY;
            ++tileCoord[2]
          ) {
            extents.push(
              toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection)
            );
          }
        }
        return extents;
      }
    );
  }

  var nsLoadingstrategy = {
    __proto__: null,
    all: all$1,
    bbox: bbox$1,
    tile: tile
  };

  /**
   * @module ol/featureloader
   */

  /**
   *
   * @type {boolean}
   * @private
   */
  let withCredentials = false;

  /**
   * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to
   * load features.
   *
   * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing
   * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an
   * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get
   * the loaded features passed as an argument and an optional failure callback with no arguments. If
   * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and
   * `'featuresloaderror'` events. `this` within the function is bound to the
   * {@link module:ol/source/Vector~VectorSource} it's called from.
   *
   * The function is responsible for loading the features and adding them to the
   * source.
   * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default),
   *           import("./extent.js").Extent,
   *           number,
   *           import("./proj/Projection.js").default,
   *           function(Array<import("./Feature.js").default>): void=,
   *           function(): void=): void} FeatureLoader
   * @api
   */

  /**
   * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to
   * get the url to load features from.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area
   * to be loaded, a `{number}` representing the resolution (map units per pixel)
   * and an {@link module:ol/proj/Projection~Projection} for the projection  as
   * arguments and returns a `{string}` representing the URL.
   * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
   * @api
   */

  /**
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @param {function(Array<import("./Feature.js").default>, import("./proj/Projection.js").default): void} success Success
   *      Function called with the loaded features and optionally with the data projection.
   * @param {function(): void} failure Failure
   *      Function called when loading failed.
   */
  function loadFeaturesXhr(
    url,
    format,
    extent,
    resolution,
    projection,
    success,
    failure
  ) {
    const xhr = new XMLHttpRequest();
    xhr.open(
      'GET',
      typeof url === 'function' ? url(extent, resolution, projection) : url,
      true
    );
    if (format.getType() == 'arraybuffer') {
      xhr.responseType = 'arraybuffer';
    }
    xhr.withCredentials = withCredentials;
    /**
     * @param {Event} event Event.
     * @private
     */
    xhr.onload = function (event) {
      // status will be 0 for file:// urls
      if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {
        const type = format.getType();
        /** @type {Document|Node|Object|string|undefined} */
        let source;
        if (type == 'json' || type == 'text') {
          source = xhr.responseText;
        } else if (type == 'xml') {
          source = xhr.responseXML;
          if (!source) {
            source = new DOMParser().parseFromString(
              xhr.responseText,
              'application/xml'
            );
          }
        } else if (type == 'arraybuffer') {
          source = /** @type {ArrayBuffer} */ (xhr.response);
        }
        if (source) {
          success(
            /** @type {Array<import("./Feature.js").default>} */
            (
              format.readFeatures(source, {
                extent: extent,
                featureProjection: projection,
              })
            ),
            format.readProjection(source)
          );
        } else {
          failure();
        }
      } else {
        failure();
      }
    };
    /**
     * @private
     */
    xhr.onerror = failure;
    xhr.send();
  }

  /**
   * Create an XHR feature loader for a `url` and `format`. The feature loader
   * loads features (with XHR), parses the features, and adds them to the
   * vector source.
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @return {FeatureLoader} The feature loader.
   * @api
   */
  function xhr(url, format) {
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {function(Array<import("./Feature.js").default>): void} [success] Success
     *      Function called when loading succeeded.
     * @param {function(): void} [failure] Failure
     *      Function called when loading failed.
     */
    return function (extent, resolution, projection, success, failure) {
      const source = /** @type {import("./source/Vector").default} */ (this);
      loadFeaturesXhr(
        url,
        format,
        extent,
        resolution,
        projection,
        /**
         * @param {Array<import("./Feature.js").default>} features The loaded features.
         * @param {import("./proj/Projection.js").default} dataProjection Data
         * projection.
         */
        function (features, dataProjection) {
          source.addFeatures(features);
          if (success !== undefined) {
            success(features);
          }
        },
        /* FIXME handle error */ failure ? failure : VOID
      );
    };
  }

  /**
   * @module ol/source/Vector
   */

  /**
   * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
   * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
   * is one of the standard {@link module:ol/loadingstrategy} strategies.
   *
   * @typedef {function(import("../extent.js").Extent, number, import("../proj/Projection.js").default): Array<import("../extent.js").Extent>} LoadingStrategy
   * @api
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this
   * type.
   * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
   */
  class VectorSourceEvent extends BaseEvent {
    /**
     * @param {string} type Type.
     * @param {import("../Feature.js").default<Geometry>} [feature] Feature.
     * @param {Array<import("../Feature.js").default<Geometry>>} [features] Features.
     */
    constructor(type, feature, features) {
      super(type);

      /**
       * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.
       * @type {import("../Feature.js").default<Geometry>|undefined}
       * @api
       */
      this.feature = feature;

      /**
       * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.
       * @type {Array<import("../Feature.js").default<Geometry>>|undefined}
       * @api
       */
      this.features = features;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("./VectorEventType").VectorSourceEventTypes, VectorSourceEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     import("./VectorEventType").VectorSourceEventTypes, Return>} VectorSourceOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {Array<import("../Feature.js").default<Geometry>>|Collection<import("../Feature.js").default<Geometry>>} [features]
   * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source
   * and the collection will stay in sync.
   * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
   * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
   * @property {import("../featureloader.js").FeatureLoader} [loader]
   * The loader function used to load features, from a remote source for example.
   * If this is not set and `url` is set, the source will create and use an XHR
   * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events
   * will only fire if the `success` and `failure` callbacks are used.
   *
   * Example:
   *
   * ```js
   * import Vector from 'ol/source/Vector.js';
   * import GeoJSON from 'ol/format/GeoJSON.js';
   * import {bbox} from 'ol/loadingstrategy.js';
   *
   * const vectorSource = new Vector({
   *   format: new GeoJSON(),
   *   loader: function(extent, resolution, projection, success, failure) {
   *      const proj = projection.getCode();
   *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
   *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
   *          'outputFormat=application/json&srsname=' + proj + '&' +
   *          'bbox=' + extent.join(',') + ',' + proj;
   *      const xhr = new XMLHttpRequest();
   *      xhr.open('GET', url);
   *      const onError = function() {
   *        vectorSource.removeLoadedExtent(extent);
   *        failure();
   *      }
   *      xhr.onerror = onError;
   *      xhr.onload = function() {
   *        if (xhr.status == 200) {
   *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);
   *          vectorSource.addFeatures(features);
   *          success(features);
   *        } else {
   *          onError();
   *        }
   *      }
   *      xhr.send();
   *    },
   *    strategy: bbox,
   *  });
   * ```
   * @property {boolean} [overlaps=true] This source may have overlapping geometries.
   * Setting this to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {LoadingStrategy} [strategy] The loading strategy to use.
   * By default an {@link module:ol/loadingstrategy.all}
   * strategy is used, a one-off strategy which loads all features at once.
   * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
   * Setting this option instructs the source to load features using an XHR loader
   * (see {@link module:ol/featureloader.xhr}). Use a `string` and an
   * {@link module:ol/loadingstrategy.all} for a one-off download of all features from
   * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
   * other loading strategies.
   * Requires `format` to be set as well.
   * When default XHR feature loader is provided, the features will
   * be transformed from the data projection to the view projection
   * during parsing. If your remote data source does not advertise its projection
   * properly, this transformation will be incorrect. For some formats, the
   * default projection (usually EPSG:4326) can be overridden by setting the
   * dataProjection constructor option on the format.
   * Note that if a source contains non-feature data, such as a GeoJSON geometry
   * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
   * @property {boolean} [useSpatialIndex=true]
   * By default, an RTree is used as spatial index. When features are removed and
   * added frequently, and the total number of features is low, setting this to
   * `false` may improve performance.
   *
   * Note that
   * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
   * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
   * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
   * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
   * through all features.
   *
   * When set to `false`, the features will be maintained in an
   * {@link module:ol/Collection~Collection}, which can be retrieved through
   * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
   * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
   * -180° and 180° meridians to work properly, this should be set to `false`. The
   * resulting geometry coordinates will then exceed the world bounds.
   * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
   */

  /**
   * @classdesc
   * Provides a source of features for vector layers. Vector features provided
   * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
   * vector data that is optimized for rendering.
   *
   * @fires VectorSourceEvent
   * @api
   * @template {import("../geom/Geometry.js").default} [Geometry=import("../geom/Geometry.js").default]
   */
  class VectorSource extends Source$1 {
    /**
     * @param {Options<Geometry>} [options] Vector source options.
     */
    constructor(options) {
      options = options || {};

      super({
        attributions: options.attributions,
        interpolate: true,
        projection: undefined,
        state: 'ready',
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
      });

      /***
       * @type {VectorSourceOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {VectorSourceOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {VectorSourceOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {import("../featureloader.js").FeatureLoader}
       */
      this.loader_ = VOID;

      /**
       * @private
       * @type {import("../format/Feature.js").default|undefined}
       */
      this.format_ = options.format;

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;

      /**
       * @private
       * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
       */
      this.url_ = options.url;

      if (options.loader !== undefined) {
        this.loader_ = options.loader;
      } else if (this.url_ !== undefined) {
        assert(this.format_, 7); // `format` must be set when `url` is set
        // create a XHR feature loader for "url" and "format"
        this.loader_ = xhr(
          this.url_,
          /** @type {import("../format/Feature.js").default} */ (this.format_)
        );
      }

      /**
       * @private
       * @type {LoadingStrategy}
       */
      this.strategy_ =
        options.strategy !== undefined ? options.strategy : all$1;

      const useSpatialIndex =
        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;

      /**
       * @private
       * @type {RBush<import("../Feature.js").default<Geometry>>}
       */
      this.featuresRtree_ = useSpatialIndex ? new RBush$1() : null;

      /**
       * @private
       * @type {RBush<{extent: import("../extent.js").Extent}>}
       */
      this.loadedExtentsRtree_ = new RBush$1();

      /**
       * @type {number}
       * @private
       */
      this.loadingExtentsCount_ = 0;

      /**
       * @private
       * @type {!Object<string, import("../Feature.js").default<Geometry>>}
       */
      this.nullGeometryFeatures_ = {};

      /**
       * A lookup of features by id (the return from feature.getId()).
       * @private
       * @type {!Object<string, import("../Feature.js").default<Geometry>>}
       */
      this.idIndex_ = {};

      /**
       * A lookup of features by uid (using getUid(feature)).
       * @private
       * @type {!Object<string, import("../Feature.js").default<Geometry>>}
       */
      this.uidIndex_ = {};

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.featureChangeKeys_ = {};

      /**
       * @private
       * @type {Collection<import("../Feature.js").default<Geometry>>|null}
       */
      this.featuresCollection_ = null;

      /** @type {Collection<import("../Feature.js").default<Geometry>>} */
      let collection;
      /** @type {Array<import("../Feature.js").default<Geometry>>} */
      let features;
      if (Array.isArray(options.features)) {
        features = options.features;
      } else if (options.features) {
        collection = options.features;
        features = collection.getArray();
      }
      if (!useSpatialIndex && collection === undefined) {
        collection = new Collection$1(features);
      }
      if (features !== undefined) {
        this.addFeaturesInternal(features);
      }
      if (collection !== undefined) {
        this.bindFeaturesCollection_(collection);
      }
    }

    /**
     * Add a single feature to the source.  If you want to add a batch of features
     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
     * instead. A feature will not be added to the source if feature with
     * the same id is already there. The reason for this behavior is to avoid
     * feature duplication when using bbox or tile loading strategies.
     * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,
     * meaning that if a feature with a duplicate id is added in the collection, it will
     * be removed from it right away.
     * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
     * @api
     */
    addFeature(feature) {
      this.addFeatureInternal(feature);
      this.changed();
    }

    /**
     * Add a feature without firing a `change` event.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @protected
     */
    addFeatureInternal(feature) {
      const featureKey = getUid(feature);

      if (!this.addToIndex_(featureKey, feature)) {
        if (this.featuresCollection_) {
          this.featuresCollection_.remove(feature);
        }
        return;
      }

      this.setupChangeEvents_(featureKey, feature);

      const geometry = feature.getGeometry();
      if (geometry) {
        const extent = geometry.getExtent();
        if (this.featuresRtree_) {
          this.featuresRtree_.insert(extent, feature);
        }
      } else {
        this.nullGeometryFeatures_[featureKey] = feature;
      }

      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)
      );
    }

    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @private
     */
    setupChangeEvents_(featureKey, feature) {
      this.featureChangeKeys_[featureKey] = [
        listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),
        listen(
          feature,
          ObjectEventType.PROPERTYCHANGE,
          this.handleFeatureChange_,
          this
        ),
      ];
    }

    /**
     * @param {string} featureKey Unique identifier for the feature.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @return {boolean} The feature is "valid", in the sense that it is also a
     *     candidate for insertion into the Rtree.
     * @private
     */
    addToIndex_(featureKey, feature) {
      let valid = true;
      const id = feature.getId();
      if (id !== undefined) {
        if (!(id.toString() in this.idIndex_)) {
          this.idIndex_[id.toString()] = feature;
        } else {
          valid = false;
        }
      }
      if (valid) {
        assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
        this.uidIndex_[featureKey] = feature;
      }
      return valid;
    }

    /**
     * Add a batch of features to the source.
     * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
     * @api
     */
    addFeatures(features) {
      this.addFeaturesInternal(features);
      this.changed();
    }

    /**
     * Add features without firing a `change` event.
     * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
     * @protected
     */
    addFeaturesInternal(features) {
      const extents = [];
      const newFeatures = [];
      const geometryFeatures = [];

      for (let i = 0, length = features.length; i < length; i++) {
        const feature = features[i];
        const featureKey = getUid(feature);
        if (this.addToIndex_(featureKey, feature)) {
          newFeatures.push(feature);
        }
      }

      for (let i = 0, length = newFeatures.length; i < length; i++) {
        const feature = newFeatures[i];
        const featureKey = getUid(feature);
        this.setupChangeEvents_(featureKey, feature);

        const geometry = feature.getGeometry();
        if (geometry) {
          const extent = geometry.getExtent();
          extents.push(extent);
          geometryFeatures.push(feature);
        } else {
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      }
      if (this.featuresRtree_) {
        this.featuresRtree_.load(extents, geometryFeatures);
      }

      if (this.hasListener(VectorEventType.ADDFEATURE)) {
        for (let i = 0, length = newFeatures.length; i < length; i++) {
          this.dispatchEvent(
            new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])
          );
        }
      }
    }

    /**
     * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
     * @private
     */
    bindFeaturesCollection_(collection) {
      let modifyingCollection = false;
      this.addEventListener(
        VectorEventType.ADDFEATURE,
        /**
         * @param {VectorSourceEvent<Geometry>} evt The vector source event
         */
        function (evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.push(evt.feature);
            modifyingCollection = false;
          }
        }
      );
      this.addEventListener(
        VectorEventType.REMOVEFEATURE,
        /**
         * @param {VectorSourceEvent<Geometry>} evt The vector source event
         */
        function (evt) {
          if (!modifyingCollection) {
            modifyingCollection = true;
            collection.remove(evt.feature);
            modifyingCollection = false;
          }
        }
      );
      collection.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("../Collection.js").CollectionEvent<import("../Feature.js").default<Geometry>>} evt The collection event
         */
        (evt) => {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.addFeature(evt.element);
            modifyingCollection = false;
          }
        }
      );
      collection.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("../Collection.js").CollectionEvent<import("../Feature.js").default<Geometry>>} evt The collection event
         */
        (evt) => {
          if (!modifyingCollection) {
            modifyingCollection = true;
            this.removeFeature(evt.element);
            modifyingCollection = false;
          }
        }
      );
      this.featuresCollection_ = collection;
    }

    /**
     * Remove all features from the source.
     * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.
     * @api
     */
    clear(fast) {
      if (fast) {
        for (const featureId in this.featureChangeKeys_) {
          const keys = this.featureChangeKeys_[featureId];
          keys.forEach(unlistenByKey);
        }
        if (!this.featuresCollection_) {
          this.featureChangeKeys_ = {};
          this.idIndex_ = {};
          this.uidIndex_ = {};
        }
      } else {
        if (this.featuresRtree_) {
          const removeAndIgnoreReturn = (feature) => {
            this.removeFeatureInternal(feature);
          };
          this.featuresRtree_.forEach(removeAndIgnoreReturn);
          for (const id in this.nullGeometryFeatures_) {
            this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
          }
        }
      }
      if (this.featuresCollection_) {
        this.featuresCollection_.clear();
      }

      if (this.featuresRtree_) {
        this.featuresRtree_.clear();
      }
      this.nullGeometryFeatures_ = {};

      const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
      this.dispatchEvent(clearEvent);
      this.changed();
    }

    /**
     * Iterate through all features on the source, calling the provided callback
     * with each one.  If the callback returns any "truthy" value, iteration will
     * stop and the function will return the same value.
     * Note: this function only iterate through the feature that have a defined geometry.
     *
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     on the source.  Return a truthy value to stop iteration.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeature(callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEach(callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    }

    /**
     * Iterate through all features whose geometries contain the provided
     * coordinate, calling the callback with each feature.  If the callback returns
     * a "truthy" value, iteration will stop and the function will return the same
     * value.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose goemetry contains the provided coordinate.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     */
    forEachFeatureAtCoordinateDirect(coordinate, callback) {
      const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
      return this.forEachFeatureInExtent(extent, function (feature) {
        const geometry = feature.getGeometry();
        if (geometry.intersectsCoordinate(coordinate)) {
          return callback(feature);
        }
        return undefined;
      });
    }

    /**
     * Iterate through all features whose bounding box intersects the provided
     * extent (note that the feature's geometry may not intersect the extent),
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you are interested in features whose geometry intersects an extent, call
     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
     *
     * When `useSpatialIndex` is set to false, this method will loop through all
     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose bounding box intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeatureInExtent(extent, callback) {
      if (this.featuresRtree_) {
        return this.featuresRtree_.forEachInExtent(extent, callback);
      } else if (this.featuresCollection_) {
        this.featuresCollection_.forEach(callback);
      }
    }

    /**
     * Iterate through all features whose geometry intersects the provided extent,
     * calling the callback with each feature.  If the callback returns a "truthy"
     * value, iteration will stop and the function will return the same value.
     *
     * If you only want to test for bounding box intersection, call the
     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
     *     whose geometry intersects the provided extent.
     * @return {T|undefined} The return value from the last call to the callback.
     * @template T
     * @api
     */
    forEachFeatureIntersectingExtent(extent, callback) {
      return this.forEachFeatureInExtent(
        extent,
        /**
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @return {T|undefined} The return value from the last call to the callback.
         */
        function (feature) {
          const geometry = feature.getGeometry();
          if (geometry.intersectsExtent(extent)) {
            const result = callback(feature);
            if (result) {
              return result;
            }
          }
        }
      );
    }

    /**
     * Get the features collection associated with this source. Will be `null`
     * unless the source was configured with `useSpatialIndex` set to `false`, or
     * with an {@link module:ol/Collection~Collection} as `features`.
     * @return {Collection<import("../Feature.js").default<Geometry>>|null} The collection of features.
     * @api
     */
    getFeaturesCollection() {
      return this.featuresCollection_;
    }

    /**
     * Get a snapshot of the features currently on the source in random order. The returned array
     * is a copy, the features are references to the features in the source.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */
    getFeatures() {
      let features;
      if (this.featuresCollection_) {
        features = this.featuresCollection_.getArray().slice(0);
      } else if (this.featuresRtree_) {
        features = this.featuresRtree_.getAll();
        if (!isEmpty$1(this.nullGeometryFeatures_)) {
          extend$1(features, Object.values(this.nullGeometryFeatures_));
        }
      }
      return /** @type {Array<import("../Feature.js").default<Geometry>>} */ (
        features
      );
    }

    /**
     * Get all features whose geometry intersects the provided coordinate.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */
    getFeaturesAtCoordinate(coordinate) {
      const features = [];
      this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {
        features.push(feature);
      });
      return features;
    }

    /**
     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
     * all features intersecting the given extent in random order (so it may include
     * features whose geometries do not intersect the extent).
     *
     * When `useSpatialIndex` is set to false, this method will return all
     * features.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../proj/Projection.js").default} [projection] Include features
     * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.
     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
     * @api
     */
    getFeaturesInExtent(extent, projection) {
      if (this.featuresRtree_) {
        const multiWorld = projection && projection.canWrapX() && this.getWrapX();

        if (!multiWorld) {
          return this.featuresRtree_.getInExtent(extent);
        }

        const extents = wrapAndSliceX(extent, projection);

        return [].concat(
          ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent))
        );
      } else if (this.featuresCollection_) {
        return this.featuresCollection_.getArray().slice(0);
      }
      return [];
    }

    /**
     * Get the closest feature to the provided coordinate.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(import("../Feature.js").default<Geometry>):boolean} [filter] Feature filter function.
     *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}
     *     and it should return a boolean value. By default, no filtering is made.
     * @return {import("../Feature.js").default<Geometry>} Closest feature.
     * @api
     */
    getClosestFeatureToCoordinate(coordinate, filter) {
      // Find the closest feature using branch and bound.  We start searching an
      // infinite extent, and find the distance from the first feature found.  This
      // becomes the closest feature.  We then compute a smaller extent which any
      // closer feature must intersect.  We continue searching with this smaller
      // extent, trying to find a closer feature.  Every time we find a closer
      // feature, we update the extent being searched so that any even closer
      // feature must intersect it.  We continue until we run out of features.
      const x = coordinate[0];
      const y = coordinate[1];
      let closestFeature = null;
      const closestPoint = [NaN, NaN];
      let minSquaredDistance = Infinity;
      const extent = [-Infinity, -Infinity, Infinity, Infinity];
      filter = filter ? filter : TRUE;
      this.featuresRtree_.forEachInExtent(
        extent,
        /**
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         */
        function (feature) {
          if (filter(feature)) {
            const geometry = feature.getGeometry();
            const previousMinSquaredDistance = minSquaredDistance;
            minSquaredDistance = geometry.closestPointXY(
              x,
              y,
              closestPoint,
              minSquaredDistance
            );
            if (minSquaredDistance < previousMinSquaredDistance) {
              closestFeature = feature;
              // This is sneaky.  Reduce the extent that it is currently being
              // searched while the R-Tree traversal using this same extent object
              // is still in progress.  This is safe because the new extent is
              // strictly contained by the old extent.
              const minDistance = Math.sqrt(minSquaredDistance);
              extent[0] = x - minDistance;
              extent[1] = y - minDistance;
              extent[2] = x + minDistance;
              extent[3] = y + minDistance;
            }
          }
        }
      );
      return closestFeature;
    }

    /**
     * Get the extent of the features currently in the source.
     *
     * This method is not available when the source is configured with
     * `useSpatialIndex` set to `false`.
     * @param {import("../extent.js").Extent} [extent] Destination extent. If provided, no new extent
     *     will be created. Instead, that extent's coordinates will be overwritten.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent(extent) {
      return this.featuresRtree_.getExtent(extent);
    }

    /**
     * Get a feature by its identifier (the value returned by feature.getId()).
     * Note that the index treats string and numeric identifiers as the same.  So
     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
     *
     * @param {string|number} id Feature identifier.
     * @return {import("../Feature.js").default<Geometry>|null} The feature (or `null` if not found).
     * @api
     */
    getFeatureById(id) {
      const feature = this.idIndex_[id.toString()];
      return feature !== undefined ? feature : null;
    }

    /**
     * Get a feature by its internal unique identifier (using `getUid`).
     *
     * @param {string} uid Feature identifier.
     * @return {import("../Feature.js").default<Geometry>|null} The feature (or `null` if not found).
     */
    getFeatureByUid(uid) {
      const feature = this.uidIndex_[uid];
      return feature !== undefined ? feature : null;
    }

    /**
     * Get the format associated with this source.
     *
     * @return {import("../format/Feature.js").default|undefined} The feature format.
     * @api
     */
    getFormat() {
      return this.format_;
    }

    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    getOverlaps() {
      return this.overlaps_;
    }

    /**
     * Get the url associated with this source.
     *
     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * @param {Event} event Event.
     * @private
     */
    handleFeatureChange_(event) {
      const feature = /** @type {import("../Feature.js").default<Geometry>} */ (
        event.target
      );
      const featureKey = getUid(feature);
      const geometry = feature.getGeometry();
      if (!geometry) {
        if (!(featureKey in this.nullGeometryFeatures_)) {
          if (this.featuresRtree_) {
            this.featuresRtree_.remove(feature);
          }
          this.nullGeometryFeatures_[featureKey] = feature;
        }
      } else {
        const extent = geometry.getExtent();
        if (featureKey in this.nullGeometryFeatures_) {
          delete this.nullGeometryFeatures_[featureKey];
          if (this.featuresRtree_) {
            this.featuresRtree_.insert(extent, feature);
          }
        } else {
          if (this.featuresRtree_) {
            this.featuresRtree_.update(extent, feature);
          }
        }
      }
      const id = feature.getId();
      if (id !== undefined) {
        const sid = id.toString();
        if (this.idIndex_[sid] !== feature) {
          this.removeFromIdIndex_(feature);
          this.idIndex_[sid] = feature;
        }
      } else {
        this.removeFromIdIndex_(feature);
        this.uidIndex_[featureKey] = feature;
      }
      this.changed();
      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)
      );
    }

    /**
     * Returns true if the feature is contained within the source.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @return {boolean} Has feature.
     * @api
     */
    hasFeature(feature) {
      const id = feature.getId();
      if (id !== undefined) {
        return id in this.idIndex_;
      }
      return getUid(feature) in this.uidIndex_;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      if (this.featuresRtree_) {
        return (
          this.featuresRtree_.isEmpty() && isEmpty$1(this.nullGeometryFeatures_)
        );
      }
      if (this.featuresCollection_) {
        return this.featuresCollection_.getLength() === 0;
      }
      return true;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    loadFeatures(extent, resolution, projection) {
      const loadedExtentsRtree = this.loadedExtentsRtree_;
      const extentsToLoad = this.strategy_(extent, resolution, projection);
      for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {
        const extentToLoad = extentsToLoad[i];
        const alreadyLoaded = loadedExtentsRtree.forEachInExtent(
          extentToLoad,
          /**
           * @param {{extent: import("../extent.js").Extent}} object Object.
           * @return {boolean} Contains.
           */
          function (object) {
            return containsExtent(object.extent, extentToLoad);
          }
        );
        if (!alreadyLoaded) {
          ++this.loadingExtentsCount_;
          this.dispatchEvent(
            new VectorSourceEvent(VectorEventType.FEATURESLOADSTART)
          );
          this.loader_.call(
            this,
            extentToLoad,
            resolution,
            projection,
            (features) => {
              --this.loadingExtentsCount_;
              this.dispatchEvent(
                new VectorSourceEvent(
                  VectorEventType.FEATURESLOADEND,
                  undefined,
                  features
                )
              );
            },
            () => {
              --this.loadingExtentsCount_;
              this.dispatchEvent(
                new VectorSourceEvent(VectorEventType.FEATURESLOADERROR)
              );
            }
          );
          loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});
        }
      }
      this.loading =
        this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;
    }

    refresh() {
      this.clear(true);
      this.loadedExtentsRtree_.clear();
      super.refresh();
    }

    /**
     * Remove an extent from the list of loaded extents.
     * @param {import("../extent.js").Extent} extent Extent.
     * @api
     */
    removeLoadedExtent(extent) {
      const loadedExtentsRtree = this.loadedExtentsRtree_;
      let obj;
      loadedExtentsRtree.forEachInExtent(extent, function (object) {
        if (equals$2(object.extent, extent)) {
          obj = object;
          return true;
        }
      });
      if (obj) {
        loadedExtentsRtree.remove(obj);
      }
    }

    /**
     * Remove a single feature from the source.  If you want to remove all features
     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
     * instead.
     * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
     * @api
     */
    removeFeature(feature) {
      if (!feature) {
        return;
      }
      const featureKey = getUid(feature);
      if (featureKey in this.nullGeometryFeatures_) {
        delete this.nullGeometryFeatures_[featureKey];
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.remove(feature);
        }
      }
      const result = this.removeFeatureInternal(feature);
      if (result) {
        this.changed();
      }
    }

    /**
     * Remove feature without firing a `change` event.
     * @param {import("../Feature.js").default<Geometry>} feature Feature.
     * @return {import("../Feature.js").default<Geometry>|undefined} The removed feature
     *     (or undefined if the feature was not found).
     * @protected
     */
    removeFeatureInternal(feature) {
      const featureKey = getUid(feature);
      const featureChangeKeys = this.featureChangeKeys_[featureKey];
      if (!featureChangeKeys) {
        return;
      }
      featureChangeKeys.forEach(unlistenByKey);
      delete this.featureChangeKeys_[featureKey];
      const id = feature.getId();
      if (id !== undefined) {
        delete this.idIndex_[id.toString()];
      }
      delete this.uidIndex_[featureKey];
      this.dispatchEvent(
        new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)
      );
      return feature;
    }

    /**
     * Remove a feature from the id index.  Called internally when the feature id
     * may have changed.
     * @param {import("../Feature.js").default<Geometry>} feature The feature.
     * @return {boolean} Removed the feature from the index.
     * @private
     */
    removeFromIdIndex_(feature) {
      let removed = false;
      for (const id in this.idIndex_) {
        if (this.idIndex_[id] === feature) {
          delete this.idIndex_[id];
          removed = true;
          break;
        }
      }
      return removed;
    }

    /**
     * Set the new loader of the source. The next render cycle will use the
     * new loader.
     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
     * @api
     */
    setLoader(loader) {
      this.loader_ = loader;
    }

    /**
     * Points the source to a new url. The next render cycle will use the new url.
     * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
     * @api
     */
    setUrl(url) {
      assert(this.format_, 7); // `format` must be set when `url` is set
      this.url_ = url;
      this.setLoader(xhr(url, this.format_));
    }
  }

  var VectorSource$1 = VectorSource;

  /**
   * @module ol/render
   */

  /**
   * Gets a vector context for drawing to the event's canvas.
   * @param {import("./render/Event.js").default} event Render event.
   * @return {CanvasImmediateRenderer} Vector context.
   * @api
   */
  function getVectorContext(event) {
    if (!(event.context instanceof CanvasRenderingContext2D)) {
      throw new Error('Only works for render events from Canvas 2D layers');
    }

    // canvas may be at a different pixel ratio than frameState.pixelRatio
    const a = event.inversePixelTransform[0];
    const b = event.inversePixelTransform[1];
    const canvasPixelRatio = Math.sqrt(a * a + b * b);
    const frameState = event.frameState;
    const transform = multiply(
      event.inversePixelTransform.slice(),
      frameState.coordinateToPixelTransform
    );
    const squaredTolerance = getSquaredTolerance(
      frameState.viewState.resolution,
      canvasPixelRatio
    );
    let userTransform;
    const userProjection = getUserProjection();
    if (userProjection) {
      userTransform = getTransformFromProjections(
        userProjection,
        frameState.viewState.projection
      );
    }

    return new CanvasImmediateRenderer$1(
      event.context,
      canvasPixelRatio,
      frameState.extent,
      transform,
      frameState.viewState.rotation,
      squaredTolerance,
      userTransform
    );
  }

  /**
   * @module ol/geom/flat/geodesic
   */

  /**
   * @param {function(number): import("../../coordinate.js").Coordinate} interpolate Interpolate function.
   * @param {import("../../proj.js").TransformFunction} transform Transform from longitude/latitude to
   *     projected coordinates.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Array<number>} Flat coordinates.
   */
  function line(interpolate, transform, squaredTolerance) {
    // FIXME reduce garbage generation
    // FIXME optimize stack operations

    /** @type {Array<number>} */
    const flatCoordinates = [];

    let geoA = interpolate(0);
    let geoB = interpolate(1);

    let a = transform(geoA);
    let b = transform(geoB);

    /** @type {Array<import("../../coordinate.js").Coordinate>} */
    const geoStack = [geoB, geoA];
    /** @type {Array<import("../../coordinate.js").Coordinate>} */
    const stack = [b, a];
    /** @type {Array<number>} */
    const fractionStack = [1, 0];

    /** @type {!Object<string, boolean>} */
    const fractions = {};

    let maxIterations = 1e5;
    let geoM, m, fracA, fracB, fracM, key;

    while (--maxIterations > 0 && fractionStack.length > 0) {
      // Pop the a coordinate off the stack
      fracA = fractionStack.pop();
      geoA = geoStack.pop();
      a = stack.pop();
      // Add the a coordinate if it has not been added yet
      key = fracA.toString();
      if (!(key in fractions)) {
        flatCoordinates.push(a[0], a[1]);
        fractions[key] = true;
      }
      // Pop the b coordinate off the stack
      fracB = fractionStack.pop();
      geoB = geoStack.pop();
      b = stack.pop();
      // Find the m point between the a and b coordinates
      fracM = (fracA + fracB) / 2;
      geoM = interpolate(fracM);
      m = transform(geoM);
      if (
        squaredSegmentDistance(m[0], m[1], a[0], a[1], b[0], b[1]) <
        squaredTolerance
      ) {
        // If the m point is sufficiently close to the straight line, then we
        // discard it.  Just use the b coordinate and move on to the next line
        // segment.
        flatCoordinates.push(b[0], b[1]);
        key = fracB.toString();
        fractions[key] = true;
      } else {
        // Otherwise, we need to subdivide the current line segment.  Split it
        // into two and push the two line segments onto the stack.
        fractionStack.push(fracB, fracM, fracM, fracA);
        stack.push(b, m, m, a);
        geoStack.push(geoB, geoM, geoM, geoA);
      }
    }

    return flatCoordinates;
  }

  /**
   * Generate a meridian (line at constant longitude).
   * @param {number} lon Longitude.
   * @param {number} lat1 Latitude 1.
   * @param {number} lat2 Latitude 2.
   * @param {import("../../proj/Projection.js").default} projection Projection.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Array<number>} Flat coordinates.
   */
  function meridian(lon, lat1, lat2, projection, squaredTolerance) {
    const epsg4326Projection = get$2('EPSG:4326');
    return line(
      /**
       * @param {number} frac Fraction.
       * @return {import("../../coordinate.js").Coordinate} Coordinate.
       */
      function (frac) {
        return [lon, lat1 + (lat2 - lat1) * frac];
      },
      getTransform(epsg4326Projection, projection),
      squaredTolerance
    );
  }

  /**
   * Generate a parallel (line at constant latitude).
   * @param {number} lat Latitude.
   * @param {number} lon1 Longitude 1.
   * @param {number} lon2 Longitude 2.
   * @param {import("../../proj/Projection.js").default} projection Projection.
   * @param {number} squaredTolerance Squared tolerance.
   * @return {Array<number>} Flat coordinates.
   */
  function parallel(lat, lon1, lon2, projection, squaredTolerance) {
    const epsg4326Projection = get$2('EPSG:4326');
    return line(
      /**
       * @param {number} frac Fraction.
       * @return {import("../../coordinate.js").Coordinate} Coordinate.
       */
      function (frac) {
        return [lon1 + (lon2 - lon1) * frac, lat];
      },
      getTransform(epsg4326Projection, projection),
      squaredTolerance
    );
  }

  /**
   * @module ol/layer/Graticule
   */

  /**
   * @type {Stroke}
   * @private
   * @const
   */
  const DEFAULT_STROKE_STYLE$1 = new Stroke$1({
    color: 'rgba(0,0,0,0.2)',
  });

  /**
   * @type {Array<number>}
   * @private
   */
  const INTERVALS = [
    90,
    45,
    30,
    20,
    10,
    5,
    2,
    1,
    30 / 60,
    20 / 60,
    10 / 60,
    5 / 60,
    2 / 60,
    1 / 60,
    30 / 3600,
    20 / 3600,
    10 / 3600,
    5 / 3600,
    2 / 3600,
    1 / 3600,
  ];

  /**
   * @typedef {Object} GraticuleLabelDataType
   * @property {Point} geom Geometry.
   * @property {string} text Text.
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {number} [maxLines=100] The maximum number of meridians and
   * parallels from the center of the map. The default value of 100 means that at
   * most 200 meridians and 200 parallels will be displayed. The default value is
   * appropriate for conformal projections like Spherical Mercator. If you
   * increase the value, more lines will be drawn and the drawing performance will
   * decrease.
   * @property {Stroke} [strokeStyle] The
   * stroke style to use for drawing the graticule. If not provided, the following stroke will be used:
   * ```js
   * new Stroke({
   *   color: 'rgba(0, 0, 0, 0.2)' // a not fully opaque black
   * });
   * ```
   * @property {number} [targetSize=100] The target size of the graticule cells,
   * in pixels.
   * @property {boolean} [showLabels=false] Render a label with the respective
   * latitude/longitude for each graticule line.
   * @property {function(number):string} [lonLabelFormatter] Label formatter for
   * longitudes. This function is called with the longitude as argument, and
   * should return a formatted string representing the longitude. By default,
   * labels are formatted as degrees, minutes, seconds and hemisphere.
   * @property {function(number):string} [latLabelFormatter] Label formatter for
   * latitudes. This function is called with the latitude as argument, and
   * should return a formatted string representing the latitude. By default,
   * labels are formatted as degrees, minutes, seconds and hemisphere.
   * @property {number} [lonLabelPosition=0] Longitude label position in fractions
   * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the
   * top.
   * @property {number} [latLabelPosition=1] Latitude label position in fractions
   * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the
   * right.
   * @property {Text} [lonLabelStyle] Longitude label text
   * style. If not provided, the following style will be used:
   * ```js
   * new Text({
   *   font: '12px Calibri,sans-serif',
   *   textBaseline: 'bottom',
   *   fill: new Fill({
   *     color: 'rgba(0,0,0,1)'
   *   }),
   *   stroke: new Stroke({
   *     color: 'rgba(255,255,255,1)',
   *     width: 3
   *   })
   * });
   * ```
   * Note that the default's `textBaseline` configuration will not work well for
   * `lonLabelPosition` configurations that position labels close to the top of
   * the viewport.
   * @property {Text} [latLabelStyle] Latitude label text style.
   * If not provided, the following style will be used:
   * ```js
   * new Text({
   *   font: '12px Calibri,sans-serif',
   *   textAlign: 'end',
   *   fill: new Fill({
   *     color: 'rgba(0,0,0,1)'
   *   }),
   *   stroke: Stroke({
   *     color: 'rgba(255,255,255,1)',
   *     width: 3
   *   })
   * });
   * ```
   * Note that the default's `textAlign` configuration will not work well for
   * `latLabelPosition` configurations that position labels close to the left of
   * the viewport.
   * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 30/60, 20/60, 10/60, 5/60, 2/60, 1/60, 30/3600, 20/3600, 10/3600, 5/3600, 2/3600, 1/3600]]
   * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:
   * ```js
   * [30, 10]
   * ```
   * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Layer that renders a grid for a coordinate system (currently only EPSG:4326 is supported).
   * Note that the view projection must define both extent and worldExtent.
   *
   * @fires import("../render/Event.js").RenderEvent
   * @extends {VectorLayer<import("../source/Vector.js").default>}
   * @api
   */
  class Graticule extends VectorLayer$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign(
        {
          updateWhileAnimating: true,
          updateWhileInteracting: true,
          renderBuffer: 0,
        },
        options
      );

      delete baseOptions.maxLines;
      delete baseOptions.strokeStyle;
      delete baseOptions.targetSize;
      delete baseOptions.showLabels;
      delete baseOptions.lonLabelFormatter;
      delete baseOptions.latLabelFormatter;
      delete baseOptions.lonLabelPosition;
      delete baseOptions.latLabelPosition;
      delete baseOptions.lonLabelStyle;
      delete baseOptions.latLabelStyle;
      delete baseOptions.intervals;
      super(baseOptions);

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = null;

      /**
       * @type {number}
       * @private
       */
      this.maxLat_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.maxLon_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minLat_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minLon_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.maxX_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.maxY_ = Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minX_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.minY_ = -Infinity;

      /**
       * @type {number}
       * @private
       */
      this.targetSize_ =
        options.targetSize !== undefined ? options.targetSize : 100;

      /**
       * @type {number}
       * @private
       */
      this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;

      /**
       * @type {Array<LineString>}
       * @private
       */
      this.meridians_ = [];

      /**
       * @type {Array<LineString>}
       * @private
       */
      this.parallels_ = [];

      /**
       * @type {Stroke}
       * @private
       */
      this.strokeStyle_ =
        options.strokeStyle !== undefined
          ? options.strokeStyle
          : DEFAULT_STROKE_STYLE$1;

      /**
       * @type {import("../proj.js").TransformFunction|undefined}
       * @private
       */
      this.fromLonLatTransform_ = undefined;

      /**
       * @type {import("../proj.js").TransformFunction|undefined}
       * @private
       */
      this.toLonLatTransform_ = undefined;

      /**
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.projectionCenterLonLat_ = null;

      /**
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.bottomLeft_ = null;

      /**
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.bottomRight_ = null;

      /**
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.topLeft_ = null;

      /**
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.topRight_ = null;

      /**
       * @type {Array<GraticuleLabelDataType>}
       * @private
       */
      this.meridiansLabels_ = null;

      /**
       * @type {Array<GraticuleLabelDataType>}
       * @private
       */
      this.parallelsLabels_ = null;

      if (options.showLabels) {
        /**
         * @type {null|function(number):string}
         * @private
         */
        this.lonLabelFormatter_ =
          options.lonLabelFormatter == undefined
            ? degreesToStringHDMS.bind(this, 'EW')
            : options.lonLabelFormatter;

        /**
         * @type {function(number):string}
         * @private
         */
        this.latLabelFormatter_ =
          options.latLabelFormatter == undefined
            ? degreesToStringHDMS.bind(this, 'NS')
            : options.latLabelFormatter;

        /**
         * Longitude label position in fractions (0..1) of view extent. 0 means
         * bottom, 1 means top.
         * @type {number}
         * @private
         */
        this.lonLabelPosition_ =
          options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;

        /**
         * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1
         * means right.
         * @type {number}
         * @private
         */
        this.latLabelPosition_ =
          options.latLabelPosition == undefined ? 1 : options.latLabelPosition;

        /**
         * @type {Style}
         * @private
         */
        this.lonLabelStyleBase_ = new Style$1({
          text:
            options.lonLabelStyle !== undefined
              ? options.lonLabelStyle.clone()
              : new Text$1({
                  font: '12px Calibri,sans-serif',
                  textBaseline: 'bottom',
                  fill: new Fill$1({
                    color: 'rgba(0,0,0,1)',
                  }),
                  stroke: new Stroke$1({
                    color: 'rgba(255,255,255,1)',
                    width: 3,
                  }),
                }),
        });

        /**
         * @private
         * @param {import("../Feature").default} feature Feature
         * @return {Style} style
         */
        this.lonLabelStyle_ = (feature) => {
          const label = feature.get('graticule_label');
          this.lonLabelStyleBase_.getText().setText(label);
          return this.lonLabelStyleBase_;
        };

        /**
         * @type {Style}
         * @private
         */
        this.latLabelStyleBase_ = new Style$1({
          text:
            options.latLabelStyle !== undefined
              ? options.latLabelStyle.clone()
              : new Text$1({
                  font: '12px Calibri,sans-serif',
                  textAlign: 'right',
                  fill: new Fill$1({
                    color: 'rgba(0,0,0,1)',
                  }),
                  stroke: new Stroke$1({
                    color: 'rgba(255,255,255,1)',
                    width: 3,
                  }),
                }),
        });

        /**
         * @private
         * @param {import("../Feature").default} feature Feature
         * @return {Style} style
         */
        this.latLabelStyle_ = (feature) => {
          const label = feature.get('graticule_label');
          this.latLabelStyleBase_.getText().setText(label);
          return this.latLabelStyleBase_;
        };

        this.meridiansLabels_ = [];
        this.parallelsLabels_ = [];

        this.addEventListener(RenderEventType.POSTRENDER, this.drawLabels_.bind(this));
      }

      /**
       * @type {Array<number>}
       * @private
       */
      this.intervals_ =
        options.intervals !== undefined ? options.intervals : INTERVALS;

      // use a source with a custom loader for lines & text
      this.setSource(
        new VectorSource$1({
          loader: this.loaderFunction.bind(this),
          strategy: this.strategyFunction.bind(this),
          features: new Collection$1(),
          overlaps: false,
          useSpatialIndex: false,
          wrapX: options.wrapX,
        })
      );

      /**
       * feature pool to use when updating graticule
       * @type {Array<Feature>}
       * @private
       */
      this.featurePool_ = [];

      /**
       * @type {Style}
       * @private
       */
      this.lineStyle_ = new Style$1({
        stroke: this.strokeStyle_,
      });

      /**
       * @type {?import("../extent.js").Extent}
       * @private
       */
      this.loadedExtent_ = null;

      /**
       * @type {?import("../extent.js").Extent}
       * @private
       */
      this.renderedExtent_ = null;

      /**
       * @type {?number}
       * @private
       */
      this.renderedResolution_ = null;

      this.setRenderOrder(null);
    }

    /**
     * Strategy function for loading features based on the view's extent and
     * resolution.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @return {Array<import("../extent.js").Extent>} Extents.
     */
    strategyFunction(extent, resolution) {
      // extents may be passed in different worlds, to avoid endless loop we use only one
      let realWorldExtent = extent.slice();
      if (this.projection_ && this.getSource().getWrapX()) {
        wrapX$2(realWorldExtent, this.projection_);
      }
      if (this.loadedExtent_) {
        if (
          approximatelyEquals(this.loadedExtent_, realWorldExtent, resolution)
        ) {
          // make sure result is exactly equal to previous extent
          realWorldExtent = this.loadedExtent_.slice();
        } else {
          // we should not keep track of loaded extents
          this.getSource().removeLoadedExtent(this.loadedExtent_);
        }
      }
      return [realWorldExtent];
    }

    /**
     * Update geometries in the source based on current view
     * @param {import("../extent").Extent} extent Extent
     * @param {number} resolution Resolution
     * @param {import("../proj/Projection.js").default} projection Projection
     */
    loaderFunction(extent, resolution, projection) {
      this.loadedExtent_ = extent;
      const source = this.getSource();

      // only consider the intersection between our own extent & the requested one
      const layerExtent = this.getExtent() || [
        -Infinity,
        -Infinity,
        Infinity,
        Infinity,
      ];
      const renderExtent = getIntersection(layerExtent, extent);

      if (
        this.renderedExtent_ &&
        equals$2(this.renderedExtent_, renderExtent) &&
        this.renderedResolution_ === resolution
      ) {
        return;
      }
      this.renderedExtent_ = renderExtent;
      this.renderedResolution_ = resolution;

      // bail out if nothing to render
      if (isEmpty(renderExtent)) {
        return;
      }

      // update projection info
      const center = getCenter(renderExtent);
      const squaredTolerance = (resolution * resolution) / 4;

      const updateProjectionInfo =
        !this.projection_ || !equivalent(this.projection_, projection);

      if (updateProjectionInfo) {
        this.updateProjectionInfo_(projection);
      }

      this.createGraticule_(renderExtent, center, resolution, squaredTolerance);

      // first make sure we have enough features in the pool
      let featureCount = this.meridians_.length + this.parallels_.length;
      if (this.meridiansLabels_) {
        featureCount += this.meridians_.length;
      }
      if (this.parallelsLabels_) {
        featureCount += this.parallels_.length;
      }

      let feature;
      while (featureCount > this.featurePool_.length) {
        feature = new Feature$1();
        this.featurePool_.push(feature);
      }

      const featuresColl = source.getFeaturesCollection();
      featuresColl.clear();
      let poolIndex = 0;

      // add features for the lines & labels
      let i, l;
      for (i = 0, l = this.meridians_.length; i < l; ++i) {
        feature = this.featurePool_[poolIndex++];
        feature.setGeometry(this.meridians_[i]);
        feature.setStyle(this.lineStyle_);
        featuresColl.push(feature);
      }
      for (i = 0, l = this.parallels_.length; i < l; ++i) {
        feature = this.featurePool_[poolIndex++];
        feature.setGeometry(this.parallels_[i]);
        feature.setStyle(this.lineStyle_);
        featuresColl.push(feature);
      }
    }

    /**
     * @param {number} lon Longitude.
     * @param {number} minLat Minimal latitude.
     * @param {number} maxLat Maximal latitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {number} Index.
     * @private
     */
    addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, index) {
      const lineString = this.getMeridian_(
        lon,
        minLat,
        maxLat,
        squaredTolerance,
        index
      );
      if (intersects$2(lineString.getExtent(), extent)) {
        if (this.meridiansLabels_) {
          const text = this.lonLabelFormatter_(lon);
          if (index in this.meridiansLabels_) {
            this.meridiansLabels_[index].text = text;
          } else {
            this.meridiansLabels_[index] = {
              geom: new Point$1([]),
              text: text,
            };
          }
        }
        this.meridians_[index++] = lineString;
      }
      return index;
    }

    /**
     * @param {number} lat Latitude.
     * @param {number} minLon Minimal longitude.
     * @param {number} maxLon Maximal longitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {number} Index.
     * @private
     */
    addParallel_(lat, minLon, maxLon, squaredTolerance, extent, index) {
      const lineString = this.getParallel_(
        lat,
        minLon,
        maxLon,
        squaredTolerance,
        index
      );
      if (intersects$2(lineString.getExtent(), extent)) {
        if (this.parallelsLabels_) {
          const text = this.latLabelFormatter_(lat);
          if (index in this.parallelsLabels_) {
            this.parallelsLabels_[index].text = text;
          } else {
            this.parallelsLabels_[index] = {
              geom: new Point$1([]),
              text: text,
            };
          }
        }
        this.parallels_[index++] = lineString;
      }
      return index;
    }

    /**
     * @param {import("../render/Event.js").default} event Render event.
     * @private
     */
    drawLabels_(event) {
      const rotation = event.frameState.viewState.rotation;
      const resolution = event.frameState.viewState.resolution;
      const size = event.frameState.size;
      const extent = event.frameState.extent;
      const rotationCenter = getCenter(extent);
      let rotationExtent = extent;
      if (rotation) {
        const unrotatedWidth = size[0] * resolution;
        const unrotatedHeight = size[1] * resolution;
        rotationExtent = [
          rotationCenter[0] - unrotatedWidth / 2,
          rotationCenter[1] - unrotatedHeight / 2,
          rotationCenter[0] + unrotatedWidth / 2,
          rotationCenter[1] + unrotatedHeight / 2,
        ];
      }

      let startWorld = 0;
      let endWorld = 0;
      let labelsAtStart = this.latLabelPosition_ < 0.5;
      const projectionExtent = this.projection_.getExtent();
      const worldWidth = getWidth(projectionExtent);
      if (
        this.getSource().getWrapX() &&
        this.projection_.canWrapX() &&
        !containsExtent(projectionExtent, extent)
      ) {
        startWorld = Math.floor((extent[0] - projectionExtent[0]) / worldWidth);
        endWorld = Math.ceil((extent[2] - projectionExtent[2]) / worldWidth);
        const inverted = Math.abs(rotation) > Math.PI / 2;
        labelsAtStart = labelsAtStart !== inverted;
      }
      const vectorContext = getVectorContext(event);

      for (let world = startWorld; world <= endWorld; ++world) {
        let poolIndex = this.meridians_.length + this.parallels_.length;
        let feature, index, l, textPoint;

        if (this.meridiansLabels_) {
          for (index = 0, l = this.meridiansLabels_.length; index < l; ++index) {
            const lineString = this.meridians_[index];
            if (!rotation && world === 0) {
              textPoint = this.getMeridianPoint_(lineString, extent, index);
            } else {
              const clone = lineString.clone();
              clone.translate(world * worldWidth, 0);
              clone.rotate(-rotation, rotationCenter);
              textPoint = this.getMeridianPoint_(clone, rotationExtent, index);
              textPoint.rotate(rotation, rotationCenter);
            }
            feature = this.featurePool_[poolIndex++];
            feature.setGeometry(textPoint);
            feature.set('graticule_label', this.meridiansLabels_[index].text);
            vectorContext.drawFeature(feature, this.lonLabelStyle_(feature));
          }
        }
        if (this.parallelsLabels_) {
          if (
            (world === startWorld && labelsAtStart) ||
            (world === endWorld && !labelsAtStart)
          ) {
            for (index = 0, l = this.parallels_.length; index < l; ++index) {
              const lineString = this.parallels_[index];
              if (!rotation && world === 0) {
                textPoint = this.getParallelPoint_(lineString, extent, index);
              } else {
                const clone = lineString.clone();
                clone.translate(world * worldWidth, 0);
                clone.rotate(-rotation, rotationCenter);
                textPoint = this.getParallelPoint_(clone, rotationExtent, index);
                textPoint.rotate(rotation, rotationCenter);
              }
              feature = this.featurePool_[poolIndex++];
              feature.setGeometry(textPoint);
              feature.set('graticule_label', this.parallelsLabels_[index].text);
              vectorContext.drawFeature(feature, this.latLabelStyle_(feature));
            }
          }
        }
      }
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} squaredTolerance Squared tolerance.
     * @private
     */
    createGraticule_(extent, center, resolution, squaredTolerance) {
      const interval = this.getInterval_(resolution);
      if (interval == -1) {
        this.meridians_.length = 0;
        this.parallels_.length = 0;
        if (this.meridiansLabels_) {
          this.meridiansLabels_.length = 0;
        }
        if (this.parallelsLabels_) {
          this.parallelsLabels_.length = 0;
        }
        return;
      }

      let wrapX = false;
      const projectionExtent = this.projection_.getExtent();
      const worldWidth = getWidth(projectionExtent);
      if (
        this.getSource().getWrapX() &&
        this.projection_.canWrapX() &&
        !containsExtent(projectionExtent, extent)
      ) {
        if (getWidth(extent) >= worldWidth) {
          extent[0] = projectionExtent[0];
          extent[2] = projectionExtent[2];
        } else {
          wrapX = true;
        }
      }

      // Constrain the center to fit into the extent available to the graticule

      const validCenterP = [
        clamp(center[0], this.minX_, this.maxX_),
        clamp(center[1], this.minY_, this.maxY_),
      ];

      // Transform the center to lon lat
      // Some projections may have a void area at the poles
      // so replace any NaN latitudes with the min or max value closest to a pole

      const centerLonLat = this.toLonLatTransform_(validCenterP);
      if (isNaN(centerLonLat[1])) {
        centerLonLat[1] =
          Math.abs(this.maxLat_) >= Math.abs(this.minLat_)
            ? this.maxLat_
            : this.minLat_;
      }
      let centerLon = clamp(centerLonLat[0], this.minLon_, this.maxLon_);
      let centerLat = clamp(centerLonLat[1], this.minLat_, this.maxLat_);
      const maxLines = this.maxLines_;
      let cnt, idx, lat, lon;

      // Limit the extent to fit into the extent available to the graticule

      let validExtentP = extent;
      if (!wrapX) {
        validExtentP = [
          clamp(extent[0], this.minX_, this.maxX_),
          clamp(extent[1], this.minY_, this.maxY_),
          clamp(extent[2], this.minX_, this.maxX_),
          clamp(extent[3], this.minY_, this.maxY_),
        ];
      }

      // Transform the extent to get the lon lat ranges for the edges of the extent

      const validExtent = applyTransform(
        validExtentP,
        this.toLonLatTransform_,
        undefined,
        8
      );

      let maxLat = validExtent[3];
      let maxLon = validExtent[2];
      let minLat = validExtent[1];
      let minLon = validExtent[0];

      if (!wrapX) {
        // Check if extremities of the world extent lie inside the extent
        // (for example the pole in a polar projection)
        // and extend the extent as appropriate

        if (containsCoordinate(validExtentP, this.bottomLeft_)) {
          minLon = this.minLon_;
          minLat = this.minLat_;
        }
        if (containsCoordinate(validExtentP, this.bottomRight_)) {
          maxLon = this.maxLon_;
          minLat = this.minLat_;
        }
        if (containsCoordinate(validExtentP, this.topLeft_)) {
          minLon = this.minLon_;
          maxLat = this.maxLat_;
        }
        if (containsCoordinate(validExtentP, this.topRight_)) {
          maxLon = this.maxLon_;
          maxLat = this.maxLat_;
        }

        // The transformed center may also extend the lon lat ranges used for rendering

        maxLat = clamp(maxLat, centerLat, this.maxLat_);
        maxLon = clamp(maxLon, centerLon, this.maxLon_);
        minLat = clamp(minLat, this.minLat_, centerLat);
        minLon = clamp(minLon, this.minLon_, centerLon);
      }

      // Create meridians

      centerLon = Math.floor(centerLon / interval) * interval;
      lon = clamp(centerLon, this.minLon_, this.maxLon_);

      idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);

      cnt = 0;
      if (wrapX) {
        while ((lon -= interval) >= minLon && cnt++ < maxLines) {
          idx = this.addMeridian_(
            lon,
            minLat,
            maxLat,
            squaredTolerance,
            extent,
            idx
          );
        }
      } else {
        while (lon != this.minLon_ && cnt++ < maxLines) {
          lon = Math.max(lon - interval, this.minLon_);
          idx = this.addMeridian_(
            lon,
            minLat,
            maxLat,
            squaredTolerance,
            extent,
            idx
          );
        }
      }

      lon = clamp(centerLon, this.minLon_, this.maxLon_);

      cnt = 0;
      if (wrapX) {
        while ((lon += interval) <= maxLon && cnt++ < maxLines) {
          idx = this.addMeridian_(
            lon,
            minLat,
            maxLat,
            squaredTolerance,
            extent,
            idx
          );
        }
      } else {
        while (lon != this.maxLon_ && cnt++ < maxLines) {
          lon = Math.min(lon + interval, this.maxLon_);
          idx = this.addMeridian_(
            lon,
            minLat,
            maxLat,
            squaredTolerance,
            extent,
            idx
          );
        }
      }

      this.meridians_.length = idx;
      if (this.meridiansLabels_) {
        this.meridiansLabels_.length = idx;
      }

      // Create parallels

      centerLat = Math.floor(centerLat / interval) * interval;
      lat = clamp(centerLat, this.minLat_, this.maxLat_);

      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);

      cnt = 0;
      while (lat != this.minLat_ && cnt++ < maxLines) {
        lat = Math.max(lat - interval, this.minLat_);
        idx = this.addParallel_(
          lat,
          minLon,
          maxLon,
          squaredTolerance,
          extent,
          idx
        );
      }

      lat = clamp(centerLat, this.minLat_, this.maxLat_);

      cnt = 0;
      while (lat != this.maxLat_ && cnt++ < maxLines) {
        lat = Math.min(lat + interval, this.maxLat_);
        idx = this.addParallel_(
          lat,
          minLon,
          maxLon,
          squaredTolerance,
          extent,
          idx
        );
      }

      this.parallels_.length = idx;
      if (this.parallelsLabels_) {
        this.parallelsLabels_.length = idx;
      }
    }

    /**
     * @param {number} resolution Resolution.
     * @return {number} The interval in degrees.
     * @private
     */
    getInterval_(resolution) {
      const centerLon = this.projectionCenterLonLat_[0];
      const centerLat = this.projectionCenterLonLat_[1];
      let interval = -1;
      const target = Math.pow(this.targetSize_ * resolution, 2);
      /** @type {Array<number>} **/
      const p1 = [];
      /** @type {Array<number>} **/
      const p2 = [];
      for (let i = 0, ii = this.intervals_.length; i < ii; ++i) {
        const delta = clamp(this.intervals_[i] / 2, 0, 90);
        // Don't attempt to transform latitudes beyond the poles!
        const clampedLat = clamp(centerLat, -90 + delta, 90 - delta);
        p1[0] = centerLon - delta;
        p1[1] = clampedLat - delta;
        p2[0] = centerLon + delta;
        p2[1] = clampedLat + delta;
        this.fromLonLatTransform_(p1, p1);
        this.fromLonLatTransform_(p2, p2);
        const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);
        if (dist <= target) {
          break;
        }
        interval = this.intervals_[i];
      }
      return interval;
    }

    /**
     * @param {number} lon Longitude.
     * @param {number} minLat Minimal latitude.
     * @param {number} maxLat Maximal latitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} The meridian line string.
     * @param {number} index Index.
     * @private
     */
    getMeridian_(lon, minLat, maxLat, squaredTolerance, index) {
      const flatCoordinates = meridian(
        lon,
        minLat,
        maxLat,
        this.projection_,
        squaredTolerance
      );
      let lineString = this.meridians_[index];
      if (!lineString) {
        lineString = new LineString$1(flatCoordinates, 'XY');
        this.meridians_[index] = lineString;
      } else {
        lineString.setFlatCoordinates('XY', flatCoordinates);
        lineString.changed();
      }
      return lineString;
    }

    /**
     * @param {LineString} lineString Meridian
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {Point} Meridian point.
     * @private
     */
    getMeridianPoint_(lineString, extent, index) {
      const flatCoordinates = lineString.getFlatCoordinates();
      let bottom = 1;
      let top = flatCoordinates.length - 1;
      if (flatCoordinates[bottom] > flatCoordinates[top]) {
        bottom = top;
        top = 1;
      }
      const clampedBottom = Math.max(extent[1], flatCoordinates[bottom]);
      const clampedTop = Math.min(extent[3], flatCoordinates[top]);
      const lat = clamp(
        extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_,
        clampedBottom,
        clampedTop
      );
      const coordinate0 =
        flatCoordinates[bottom - 1] +
        ((flatCoordinates[top - 1] - flatCoordinates[bottom - 1]) *
          (lat - flatCoordinates[bottom])) /
          (flatCoordinates[top] - flatCoordinates[bottom]);
      const coordinate = [coordinate0, lat];
      const point = this.meridiansLabels_[index].geom;
      point.setCoordinates(coordinate);
      return point;
    }

    /**
     * Get the list of meridians.  Meridians are lines of equal longitude.
     * @return {Array<LineString>} The meridians.
     * @api
     */
    getMeridians() {
      return this.meridians_;
    }

    /**
     * @param {number} lat Latitude.
     * @param {number} minLon Minimal longitude.
     * @param {number} maxLon Maximal longitude.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {LineString} The parallel line string.
     * @param {number} index Index.
     * @private
     */
    getParallel_(lat, minLon, maxLon, squaredTolerance, index) {
      const flatCoordinates = parallel(
        lat,
        minLon,
        maxLon,
        this.projection_,
        squaredTolerance
      );
      let lineString = this.parallels_[index];
      if (!lineString) {
        lineString = new LineString$1(flatCoordinates, 'XY');
      } else {
        lineString.setFlatCoordinates('XY', flatCoordinates);
        lineString.changed();
      }
      return lineString;
    }

    /**
     * @param {LineString} lineString Parallels.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} index Index.
     * @return {Point} Parallel point.
     * @private
     */
    getParallelPoint_(lineString, extent, index) {
      const flatCoordinates = lineString.getFlatCoordinates();
      let left = 0;
      let right = flatCoordinates.length - 2;
      if (flatCoordinates[left] > flatCoordinates[right]) {
        left = right;
        right = 0;
      }
      const clampedLeft = Math.max(extent[0], flatCoordinates[left]);
      const clampedRight = Math.min(extent[2], flatCoordinates[right]);
      const lon = clamp(
        extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_,
        clampedLeft,
        clampedRight
      );
      const coordinate1 =
        flatCoordinates[left + 1] +
        ((flatCoordinates[right + 1] - flatCoordinates[left + 1]) *
          (lon - flatCoordinates[left])) /
          (flatCoordinates[right] - flatCoordinates[left]);
      const coordinate = [lon, coordinate1];
      const point = this.parallelsLabels_[index].geom;
      point.setCoordinates(coordinate);
      return point;
    }

    /**
     * Get the list of parallels.  Parallels are lines of equal latitude.
     * @return {Array<LineString>} The parallels.
     * @api
     */
    getParallels() {
      return this.parallels_;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @private
     */
    updateProjectionInfo_(projection) {
      const epsg4326Projection = get$2('EPSG:4326');

      const worldExtent = projection.getWorldExtent();

      this.maxLat_ = worldExtent[3];
      this.maxLon_ = worldExtent[2];
      this.minLat_ = worldExtent[1];
      this.minLon_ = worldExtent[0];

      // If the world extent crosses the dateline define a custom transform to
      // return longitudes which wrap the dateline

      const toLonLatTransform = getTransform(projection, epsg4326Projection);
      if (this.minLon_ < this.maxLon_) {
        this.toLonLatTransform_ = toLonLatTransform;
      } else {
        const split = this.minLon_ + this.maxLon_ / 2;
        this.maxLon_ += 360;
        this.toLonLatTransform_ = function (coordinates, output, dimension) {
          dimension = dimension || 2;
          const lonLatCoordinates = toLonLatTransform(
            coordinates,
            output,
            dimension
          );
          for (let i = 0, l = lonLatCoordinates.length; i < l; i += dimension) {
            if (lonLatCoordinates[i] < split) {
              lonLatCoordinates[i] += 360;
            }
          }
          return lonLatCoordinates;
        };
      }

      // Transform the extent to get the limits of the view projection extent
      // which should be available to the graticule

      this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);
      const worldExtentP = applyTransform(
        [this.minLon_, this.minLat_, this.maxLon_, this.maxLat_],
        this.fromLonLatTransform_,
        undefined,
        8
      );

      this.minX_ = worldExtentP[0];
      this.maxX_ = worldExtentP[2];
      this.minY_ = worldExtentP[1];
      this.maxY_ = worldExtentP[3];

      // Determine the view projection coordinates of the extremities of the world extent
      // as these may lie inside a view extent (for example the pole in a polar projection)

      this.bottomLeft_ = this.fromLonLatTransform_([this.minLon_, this.minLat_]);
      this.bottomRight_ = this.fromLonLatTransform_([this.maxLon_, this.minLat_]);
      this.topLeft_ = this.fromLonLatTransform_([this.minLon_, this.maxLat_]);
      this.topRight_ = this.fromLonLatTransform_([this.maxLon_, this.maxLat_]);

      // Transform the projection center to lon lat
      // Some projections may have a void area at the poles
      // so replace any NaN latitudes with the min or max value closest to a pole

      this.projectionCenterLonLat_ = this.toLonLatTransform_(
        getCenter(projection.getExtent())
      );
      if (isNaN(this.projectionCenterLonLat_[1])) {
        this.projectionCenterLonLat_[1] =
          Math.abs(this.maxLat_) >= Math.abs(this.minLat_)
            ? this.maxLat_
            : this.minLat_;
      }

      this.projection_ = projection;
    }
  }

  var Graticule$1 = Graticule;

  /**
   * @module ol/ImageCanvas
   */

  /**
   * A function that is called to trigger asynchronous canvas drawing.  It is
   * called with a "done" callback that should be called when drawing is done.
   * If any error occurs during drawing, the "done" callback should be called with
   * that error.
   *
   * @typedef {function(function(Error=): void): void} Loader
   */

  class ImageCanvas extends ImageBase$1 {
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {HTMLCanvasElement} canvas Canvas.
     * @param {Loader} [loader] Optional loader function to
     *     support asynchronous canvas drawing.
     */
    constructor(extent, resolution, pixelRatio, canvas, loader) {
      const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;

      super(extent, resolution, pixelRatio, state);

      /**
       * Optional canvas loader function.
       * @type {?Loader}
       * @private
       */
      this.loader_ = loader !== undefined ? loader : null;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = canvas;

      /**
       * @private
       * @type {?Error}
       */
      this.error_ = null;
    }

    /**
     * Get any error associated with asynchronous rendering.
     * @return {?Error} Any error that occurred during rendering.
     */
    getError() {
      return this.error_;
    }

    /**
     * Handle async drawing complete.
     * @param {Error} [err] Any error during drawing.
     * @private
     */
    handleLoad_(err) {
      if (err) {
        this.error_ = err;
        this.state = ImageState.ERROR;
      } else {
        this.state = ImageState.LOADED;
      }
      this.changed();
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.state == ImageState.IDLE) {
        this.state = ImageState.LOADING;
        this.changed();
        this.loader_(this.handleLoad_.bind(this));
      }
    }

    /**
     * @return {HTMLCanvasElement} Canvas element.
     */
    getImage() {
      return this.canvas_;
    }
  }

  var ImageCanvas$1 = ImageCanvas;

  /**
   * @module ol/TileState
   */

  /**
   * @enum {number}
   */
  var TileState = {
    IDLE: 0,
    LOADING: 1,
    LOADED: 2,
    /**
     * Indicates that tile loading failed
     * @type {number}
     */
    ERROR: 3,
    EMPTY: 4,
  };

  /**
   * @module ol/Tile
   */

  /**
   * A function that takes an {@link module:ol/Tile~Tile} for the tile and a
   * `{string}` for the url as arguments. The default is
   * ```js
   * source.setTileLoadFunction(function(tile, src) {
   *   tile.getImage().src = src;
   * });
   * ```
   * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
   * error handling:
   *
   * ```js
   * import TileState from 'ol/TileState.js';
   *
   * source.setTileLoadFunction(function(tile, src) {
   *   const xhr = new XMLHttpRequest();
   *   xhr.responseType = 'blob';
   *   xhr.addEventListener('loadend', function (evt) {
   *     const data = this.response;
   *     if (data !== undefined) {
   *       tile.getImage().src = URL.createObjectURL(data);
   *     } else {
   *       tile.setState(TileState.ERROR);
   *     }
   *   });
   *   xhr.addEventListener('error', function () {
   *     tile.setState(TileState.ERROR);
   *   });
   *   xhr.open('GET', src);
   *   xhr.send();
   * });
   * ```
   *
   * @typedef {function(Tile, string): void} LoadFunction
   * @api
   */

  /**
   * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get
   * the url that provides a tile for a given tile coordinate.
   *
   * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
   * coordinate, a `{number}` representing the pixel ratio and a
   * {@link module:ol/proj/Projection~Projection} for the projection  as arguments
   * and returns a `{string}` representing the tile URL, or undefined if no tile
   * should be requested for the passed tile coordinate.
   *
   * @typedef {function(import("./tilecoord.js").TileCoord, number,
   *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
   * @api
   */

  /**
   * @typedef {Object} Options
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   * @api
   */

  /**
   * @classdesc
   * Base class for tiles.
   *
   * @abstract
   */
  class Tile extends EventTarget {
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {Options} [options] Tile options.
     */
    constructor(tileCoord, state, options) {
      super();

      options = options ? options : {};

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.tileCoord = tileCoord;

      /**
       * @protected
       * @type {import("./TileState.js").default}
       */
      this.state = state;

      /**
       * An "interim" tile for this tile. The interim tile may be used while this
       * one is loading, for "smooth" transitions when changing params/dimensions
       * on the source.
       * @type {Tile}
       */
      this.interimTile = null;

      /**
       * A key assigned to the tile. This is used by the tile source to determine
       * if this tile can effectively be used, or if a new tile should be created
       * and this one be used as an interim tile for this new tile.
       * @type {string}
       */
      this.key = '';

      /**
       * The duration for the opacity transition.
       * @type {number}
       */
      this.transition_ =
        options.transition === undefined ? 250 : options.transition;

      /**
       * Lookup of start times for rendering transitions.  If the start time is
       * equal to -1, the transition is complete.
       * @type {Object<string, number>}
       */
      this.transitionStarts_ = {};

      /**
       * @type {boolean}
       */
      this.interpolate = !!options.interpolate;
    }

    /**
     * @protected
     */
    changed() {
      this.dispatchEvent(EventType.CHANGE);
    }

    /**
     * Called by the tile cache when the tile is removed from the cache due to expiry
     */
    release() {
      if (this.state === TileState.ERROR) {
        // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`
        this.setState(TileState.EMPTY);
      }
    }

    /**
     * @return {string} Key.
     */
    getKey() {
      return this.key + '/' + this.tileCoord;
    }

    /**
     * Get the interim tile most suitable for rendering using the chain of interim
     * tiles. This corresponds to the  most recent tile that has been loaded, if no
     * such tile exists, the original tile is returned.
     * @return {!Tile} Best tile for rendering.
     */
    getInterimTile() {
      if (!this.interimTile) {
        //empty chain
        return this;
      }
      let tile = this.interimTile;

      // find the first loaded tile and return it. Since the chain is sorted in
      // decreasing order of creation time, there is no need to search the remainder
      // of the list (all those tiles correspond to older requests and will be
      // cleaned up by refreshInterimChain)
      do {
        if (tile.getState() == TileState.LOADED) {
          // Show tile immediately instead of fading it in after loading, because
          // the interim tile is in place already
          this.transition_ = 0;
          return tile;
        }
        tile = tile.interimTile;
      } while (tile);

      // we can not find a better tile
      return this;
    }

    /**
     * Goes through the chain of interim tiles and discards sections of the chain
     * that are no longer relevant.
     */
    refreshInterimChain() {
      if (!this.interimTile) {
        return;
      }

      let tile = this.interimTile;

      /**
       * @type {Tile}
       */
      let prev = this;

      do {
        if (tile.getState() == TileState.LOADED) {
          //we have a loaded tile, we can discard the rest of the list
          //we would could abort any LOADING tile request
          //older than this tile (i.e. any LOADING tile following this entry in the chain)
          tile.interimTile = null;
          break;
        } else if (tile.getState() == TileState.LOADING) {
          //keep this LOADING tile any loaded tiles later in the chain are
          //older than this tile, so we're still interested in the request
          prev = tile;
        } else if (tile.getState() == TileState.IDLE) {
          //the head of the list is the most current tile, we don't need
          //to start any other requests for this chain
          prev.interimTile = tile.interimTile;
        } else {
          prev = tile;
        }
        tile = prev.interimTile;
      } while (tile);
    }

    /**
     * Get the tile coordinate for this tile.
     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
     * @api
     */
    getTileCoord() {
      return this.tileCoord;
    }

    /**
     * @return {import("./TileState.js").default} State.
     */
    getState() {
      return this.state;
    }

    /**
     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
     * the tile queue and will block other requests.
     * @param {import("./TileState.js").default} state State.
     * @api
     */
    setState(state) {
      if (this.state !== TileState.ERROR && this.state > state) {
        throw new Error('Tile load sequence violation');
      }
      this.state = state;
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     * @abstract
     * @api
     */
    load() {
      abstract();
    }

    /**
     * Get the alpha value for rendering.
     * @param {string} id An id for the renderer.
     * @param {number} time The render frame time.
     * @return {number} A number between 0 and 1.
     */
    getAlpha(id, time) {
      if (!this.transition_) {
        return 1;
      }

      let start = this.transitionStarts_[id];
      if (!start) {
        start = time;
        this.transitionStarts_[id] = start;
      } else if (start === -1) {
        return 1;
      }

      const delta = time - start + 1000 / 60; // avoid rendering at 0
      if (delta >= this.transition_) {
        return 1;
      }
      return easeIn(delta / this.transition_);
    }

    /**
     * Determine if a tile is in an alpha transition.  A tile is considered in
     * transition if tile.getAlpha() has not yet been called or has been called
     * and returned 1.
     * @param {string} id An id for the renderer.
     * @return {boolean} The tile is in transition.
     */
    inTransition(id) {
      if (!this.transition_) {
        return false;
      }
      return this.transitionStarts_[id] !== -1;
    }

    /**
     * Mark a transition as complete.
     * @param {string} id An id for the renderer.
     */
    endTransition(id) {
      if (this.transition_) {
        this.transitionStarts_[id] = -1;
      }
    }
  }

  var Tile$1 = Tile;

  /**
   * @module ol/ImageTile
   */

  class ImageTile extends Tile$1 {
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("./Tile.js").Options} [options] Tile options.
     */
    constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {
      super(tileCoord, state, options);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ = crossOrigin;

      /**
       * Image URI
       *
       * @private
       * @type {string}
       */
      this.src_ = src;

      this.key = src;

      /**
       * @private
       * @type {HTMLImageElement|HTMLCanvasElement}
       */
      this.image_ = new Image();
      if (crossOrigin !== null) {
        this.image_.crossOrigin = crossOrigin;
      }

      /**
       * @private
       * @type {?function():void}
       */
      this.unlisten_ = null;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;
    }

    /**
     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @api
     */
    getImage() {
      return this.image_;
    }

    /**
     * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).
     * @param {HTMLCanvasElement|HTMLImageElement} element Element.
     */
    setImage(element) {
      this.image_ = element;
      this.state = TileState.LOADED;
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Tracks loading or read errors.
     *
     * @private
     */
    handleImageError_() {
      this.state = TileState.ERROR;
      this.unlistenImage_();
      this.image_ = getBlankImage();
      this.changed();
    }

    /**
     * Tracks successful image load.
     *
     * @private
     */
    handleImageLoad_() {
      const image = /** @type {HTMLImageElement} */ (this.image_);
      if (image.naturalWidth && image.naturalHeight) {
        this.state = TileState.LOADED;
      } else {
        this.state = TileState.EMPTY;
      }
      this.unlistenImage_();
      this.changed();
    }

    /**
     * Load the image or retry if loading previously failed.
     * Loading is taken care of by the tile queue, and calling this method is
     * only needed for preloading or for reloading in case of an error.
     *
     * To retry loading tiles on failed requests, use a custom `tileLoadFunction`
     * that checks for error status codes and reloads only when the status code is
     * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been
     * made already:
     *
     * ```js
     * const retryCodes = [408, 429, 500, 502, 503, 504];
     * const retries = {};
     * source.setTileLoadFunction((tile, src) => {
     *   const image = tile.getImage();
     *   fetch(src)
     *     .then((response) => {
     *       if (retryCodes.includes(response.status)) {
     *         retries[src] = (retries[src] || 0) + 1;
     *         if (retries[src] <= 3) {
     *           setTimeout(() => tile.load(), retries[src] * 1000);
     *         }
     *         return Promise.reject();
     *       }
     *       return response.blob();
     *     })
     *     .then((blob) => {
     *       const imageUrl = URL.createObjectURL(blob);
     *       image.src = imageUrl;
     *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);
     *     })
     *     .catch(() => tile.setState(3)); // error
     * });
     * ```
     *
     * @api
     */
    load() {
      if (this.state == TileState.ERROR) {
        this.state = TileState.IDLE;
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) {
          this.image_.crossOrigin = this.crossOrigin_;
        }
      }
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();
        this.tileLoadFunction_(this, this.src_);
        this.unlisten_ = listenImage(
          this.image_,
          this.handleImageLoad_.bind(this),
          this.handleImageError_.bind(this)
        );
      }
    }

    /**
     * Discards event handlers which listen for load completion or errors.
     *
     * @private
     */
    unlistenImage_() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    }
  }

  /**
   * Get a 1-pixel blank image.
   * @return {HTMLCanvasElement} Blank image.
   */
  function getBlankImage() {
    const ctx = createCanvasContext2D(1, 1);
    ctx.fillStyle = 'rgba(0,0,0,0)';
    ctx.fillRect(0, 0, 1, 1);
    return ctx.canvas;
  }

  var ImageTile$1 = ImageTile;

  /**
   * @module ol/Kinetic
   */

  /**
   * @classdesc
   * Implementation of inertial deceleration for map movement.
   *
   * @api
   */
  class Kinetic {
    /**
     * @param {number} decay Rate of decay (must be negative).
     * @param {number} minVelocity Minimum velocity (pixels/millisecond).
     * @param {number} delay Delay to consider to calculate the kinetic
     *     initial values (milliseconds).
     */
    constructor(decay, minVelocity, delay) {
      /**
       * @private
       * @type {number}
       */
      this.decay_ = decay;

      /**
       * @private
       * @type {number}
       */
      this.minVelocity_ = minVelocity;

      /**
       * @private
       * @type {number}
       */
      this.delay_ = delay;

      /**
       * @private
       * @type {Array<number>}
       */
      this.points_ = [];

      /**
       * @private
       * @type {number}
       */
      this.angle_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.initialVelocity_ = 0;
    }

    /**
     * FIXME empty description for jsdoc
     */
    begin() {
      this.points_.length = 0;
      this.angle_ = 0;
      this.initialVelocity_ = 0;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     */
    update(x, y) {
      this.points_.push(x, y, Date.now());
    }

    /**
     * @return {boolean} Whether we should do kinetic animation.
     */
    end() {
      if (this.points_.length < 6) {
        // at least 2 points are required (i.e. there must be at least 6 elements
        // in the array)
        return false;
      }
      const delay = Date.now() - this.delay_;
      const lastIndex = this.points_.length - 3;
      if (this.points_[lastIndex + 2] < delay) {
        // the last tracked point is too old, which means that the user stopped
        // panning before releasing the map
        return false;
      }

      // get the first point which still falls into the delay time
      let firstIndex = lastIndex - 3;
      while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
        firstIndex -= 3;
      }

      const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
      // we don't want a duration of 0 (divide by zero)
      // we also make sure the user panned for a duration of at least one frame
      // (1/60s) to compute sane displacement values
      if (duration < 1000 / 60) {
        return false;
      }

      const dx = this.points_[lastIndex] - this.points_[firstIndex];
      const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
      this.angle_ = Math.atan2(dy, dx);
      this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
      return this.initialVelocity_ > this.minVelocity_;
    }

    /**
     * @return {number} Total distance travelled (pixels).
     */
    getDistance() {
      return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
    }

    /**
     * @return {number} Angle of the kinetic panning animation (radians).
     */
    getAngle() {
      return this.angle_;
    }
  }

  var Kinetic$1 = Kinetic;

  /**
   * @module ol/renderer/Map
   */

  /**
   * @typedef HitMatch
   * @property {import("../Feature.js").FeatureLike} feature Feature.
   * @property {import("../layer/Layer.js").default} layer Layer.
   * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @property {number} distanceSq Squared distance.
   * @property {import("./vector.js").FeatureCallback<T>} callback Callback.
   * @template T
   */

  /**
   * @abstract
   */
  class MapRenderer extends Disposable$1 {
    /**
     * @param {import("../Map.js").default} map Map.
     */
    constructor(map) {
      super();

      /**
       * @private
       * @type {import("../Map.js").default}
       */
      this.map_ = map;
    }

    /**
     * @abstract
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    dispatchRenderEvent(type, frameState) {
      abstract();
    }

    /**
     * @param {import("../Map.js").FrameState} frameState FrameState.
     * @protected
     */
    calculateMatrices2D(frameState) {
      const viewState = frameState.viewState;
      const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
      const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;

      compose(
        coordinateToPixelTransform,
        frameState.size[0] / 2,
        frameState.size[1] / 2,
        1 / viewState.resolution,
        -1 / viewState.resolution,
        -viewState.rotation,
        -viewState.center[0],
        -viewState.center[1]
      );

      makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../Map.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {boolean} checkWrapped Check for wrapped geometries.
     * @param {import("./vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {S} thisArg Value to use as `this` when executing `callback`.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
     * @return {T|undefined} Callback result.
     * @template S,T,U
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      checkWrapped,
      callback,
      thisArg,
      layerFilter,
      thisArg2
    ) {
      let result;
      const viewState = frameState.viewState;

      /**
       * @param {boolean} managed Managed layer.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       * @param {import("../layer/Layer.js").default} layer Layer.
       * @param {import("../geom/Geometry.js").default} geometry Geometry.
       * @return {T|undefined} Callback result.
       */
      function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {
        return callback.call(thisArg, feature, managed ? layer : null, geometry);
      }

      const projection = viewState.projection;

      const translatedCoordinate = wrapX$1(coordinate.slice(), projection);
      const offsets = [[0, 0]];
      if (projection.canWrapX() && checkWrapped) {
        const projectionExtent = projection.getExtent();
        const worldWidth = getWidth(projectionExtent);
        offsets.push([-worldWidth, 0], [worldWidth, 0]);
      }

      const layerStates = frameState.layerStatesArray;
      const numLayers = layerStates.length;

      const matches = /** @type {Array<HitMatch<T>>} */ ([]);
      const tmpCoord = [];
      for (let i = 0; i < offsets.length; i++) {
        for (let j = numLayers - 1; j >= 0; --j) {
          const layerState = layerStates[j];
          const layer = layerState.layer;
          if (
            layer.hasRenderer() &&
            inView(layerState, viewState) &&
            layerFilter.call(thisArg2, layer)
          ) {
            const layerRenderer = layer.getRenderer();
            const source = layer.getSource();
            if (layerRenderer && source) {
              const coordinates = source.getWrapX()
                ? translatedCoordinate
                : coordinate;
              const callback = forEachFeatureAtCoordinate.bind(
                null,
                layerState.managed
              );
              tmpCoord[0] = coordinates[0] + offsets[i][0];
              tmpCoord[1] = coordinates[1] + offsets[i][1];
              result = layerRenderer.forEachFeatureAtCoordinate(
                tmpCoord,
                frameState,
                hitTolerance,
                callback,
                matches
              );
            }
            if (result) {
              return result;
            }
          }
        }
      }
      if (matches.length === 0) {
        return undefined;
      }
      const order = 1 / matches.length;
      matches.forEach((m, i) => (m.distanceSq += i * order));
      matches.sort((a, b) => a.distanceSq - b.distanceSq);
      matches.some((m) => {
        return (result = m.callback(m.feature, m.layer, m.geometry));
      });
      return result;
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../Map.js").FrameState} frameState FrameState.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {boolean} checkWrapped Check for wrapped geometries.
     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
     *     function, only layers which are visible and for which this function
     *     returns `true` will be tested for features.  By default, all visible
     *     layers will be tested.
     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
     * @return {boolean} Is there a feature at the given coordinate?
     * @template U
     */
    hasFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      checkWrapped,
      layerFilter,
      thisArg
    ) {
      const hasFeature = this.forEachFeatureAtCoordinate(
        coordinate,
        frameState,
        hitTolerance,
        checkWrapped,
        TRUE,
        this,
        layerFilter,
        thisArg
      );

      return hasFeature !== undefined;
    }

    /**
     * @return {import("../Map.js").default} Map.
     */
    getMap() {
      return this.map_;
    }

    /**
     * Render.
     * @abstract
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     */
    renderFrame(frameState) {
      abstract();
    }

    /**
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    scheduleExpireIconCache(frameState) {
      if (shared.canExpireCache()) {
        frameState.postRenderFunctions.push(expireIconCache);
      }
    }
  }

  /**
   * @param {import("../Map.js").default} map Map.
   * @param {import("../Map.js").FrameState} frameState Frame state.
   */
  function expireIconCache(map, frameState) {
    shared.expire();
  }

  var MapRenderer$1 = MapRenderer;

  /**
   * @module ol/renderer/Composite
   */

  /**
   * @classdesc
   * Canvas map renderer.
   * @api
   */
  class CompositeMapRenderer extends MapRenderer$1 {
    /**
     * @param {import("../Map.js").default} map Map.
     */
    constructor(map) {
      super(map);

      /**
       * @type {import("../events.js").EventsKey}
       */
      this.fontChangeListenerKey_ = listen(
        checkedFonts,
        ObjectEventType.PROPERTYCHANGE,
        map.redrawText.bind(map)
      );

      /**
       * @private
       * @type {HTMLDivElement}
       */
      this.element_ = document.createElement('div');
      const style = this.element_.style;
      style.position = 'absolute';
      style.width = '100%';
      style.height = '100%';
      style.zIndex = '0';

      this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';

      const container = map.getViewport();
      container.insertBefore(this.element_, container.firstChild || null);

      /**
       * @private
       * @type {Array<HTMLElement>}
       */
      this.children_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;
    }

    /**
     * @param {import("../render/EventType.js").default} type Event type.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    dispatchRenderEvent(type, frameState) {
      const map = this.getMap();
      if (map.hasListener(type)) {
        const event = new RenderEvent$1(type, undefined, frameState);
        map.dispatchEvent(event);
      }
    }

    disposeInternal() {
      unlistenByKey(this.fontChangeListenerKey_);
      this.element_.parentNode.removeChild(this.element_);
      super.disposeInternal();
    }

    /**
     * Render.
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     */
    renderFrame(frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element_.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      this.calculateMatrices2D(frameState);
      this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);

      const layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
        return a.zIndex - b.zIndex;
      });
      const viewState = frameState.viewState;

      this.children_.length = 0;
      /**
       * @type {Array<import("../layer/BaseVector.js").default>}
       */
      const declutterLayers = [];
      let previousElement = null;
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const layerState = layerStatesArray[i];
        frameState.layerIndex = i;

        const layer = layerState.layer;
        const sourceState = layer.getSourceState();
        if (
          !inView(layerState, viewState) ||
          (sourceState != 'ready' && sourceState != 'undefined')
        ) {
          layer.unrender();
          continue;
        }

        const element = layer.render(frameState, previousElement);
        if (!element) {
          continue;
        }
        if (element !== previousElement) {
          this.children_.push(element);
          previousElement = element;
        }
        if ('getDeclutter' in layer) {
          declutterLayers.push(
            /** @type {import("../layer/BaseVector.js").default} */ (layer)
          );
        }
      }
      for (let i = declutterLayers.length - 1; i >= 0; --i) {
        declutterLayers[i].renderDeclutter(frameState);
      }

      replaceChildren(this.element_, this.children_);

      this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);

      if (!this.renderedVisible_) {
        this.element_.style.display = '';
        this.renderedVisible_ = true;
      }

      this.scheduleExpireIconCache(frameState);
    }
  }

  var CompositeMapRenderer$1 = CompositeMapRenderer;

  /**
   * @module ol/layer/Group
   */

  /**
   * @typedef {'addlayer'|'removelayer'} EventType
   */

  /**
   * @classdesc
   * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from
   * the group or one of its child groups.  When a layer group is added to or removed from another layer group,
   * a single event will be triggered (instead of one per layer in the group added or removed).
   */
  class GroupEvent extends BaseEvent {
    /**
     * @param {EventType} type The event type.
     * @param {BaseLayer} layer The layer.
     */
    constructor(type, layer) {
      super(type);

      /**
       * The added or removed layer.
       * @type {BaseLayer}
       * @api
       */
      this.layer = layer;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     'change:layers', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {Array<import("./Base.js").default>|Collection<import("./Base.js").default>} [layers] Child layers.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @enum {string}
   * @private
   */
  const Property$2 = {
    LAYERS: 'layers',
  };

  /**
   * @classdesc
   * A {@link module:ol/Collection~Collection} of layers that are handled together.
   *
   * A generic `change` event is triggered when the group/Collection changes.
   *
   * @api
   */
  class LayerGroup extends BaseLayer$1 {
    /**
     * @param {Options} [options] Layer options.
     */
    constructor(options) {
      options = options || {};
      const baseOptions = /** @type {Options} */ (Object.assign({}, options));
      delete baseOptions.layers;

      let layers = options.layers;

      super(baseOptions);

      /***
       * @type {GroupOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {GroupOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {GroupOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.layersListenerKeys_ = [];

      /**
       * @private
       * @type {Object<string, Array<import("../events.js").EventsKey>>}
       */
      this.listenerKeys_ = {};

      this.addChangeListener(Property$2.LAYERS, this.handleLayersChanged_);

      if (layers) {
        if (Array.isArray(layers)) {
          layers = new Collection$1(layers.slice(), {unique: true});
        } else {
          assert(typeof (/** @type {?} */ (layers).getArray) === 'function', 43); // Expected `layers` to be an array or a `Collection`
        }
      } else {
        layers = new Collection$1(undefined, {unique: true});
      }

      this.setLayers(layers);
    }

    /**
     * @private
     */
    handleLayerChange_() {
      this.changed();
    }

    /**
     * @private
     */
    handleLayersChanged_() {
      this.layersListenerKeys_.forEach(unlistenByKey);
      this.layersListenerKeys_.length = 0;

      const layers = this.getLayers();
      this.layersListenerKeys_.push(
        listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),
        listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)
      );

      for (const id in this.listenerKeys_) {
        this.listenerKeys_[id].forEach(unlistenByKey);
      }
      clear$2(this.listenerKeys_);

      const layersArray = layers.getArray();
      for (let i = 0, ii = layersArray.length; i < ii; i++) {
        const layer = layersArray[i];
        this.registerLayerListeners_(layer);
        this.dispatchEvent(new GroupEvent('addlayer', layer));
      }
      this.changed();
    }

    /**
     * @param {BaseLayer} layer The layer.
     */
    registerLayerListeners_(layer) {
      const listenerKeys = [
        listen(
          layer,
          ObjectEventType.PROPERTYCHANGE,
          this.handleLayerChange_,
          this
        ),
        listen(layer, EventType.CHANGE, this.handleLayerChange_, this),
      ];

      if (layer instanceof LayerGroup) {
        listenerKeys.push(
          listen(layer, 'addlayer', this.handleLayerGroupAdd_, this),
          listen(layer, 'removelayer', this.handleLayerGroupRemove_, this)
        );
      }

      this.listenerKeys_[getUid(layer)] = listenerKeys;
    }

    /**
     * @param {GroupEvent} event The layer group event.
     */
    handleLayerGroupAdd_(event) {
      this.dispatchEvent(new GroupEvent('addlayer', event.layer));
    }

    /**
     * @param {GroupEvent} event The layer group event.
     */
    handleLayerGroupRemove_(event) {
      this.dispatchEvent(new GroupEvent('removelayer', event.layer));
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
     * @private
     */
    handleLayersAdd_(collectionEvent) {
      const layer = collectionEvent.element;
      this.registerLayerListeners_(layer);
      this.dispatchEvent(new GroupEvent('addlayer', layer));
      this.changed();
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<import("./Base.js").default>} collectionEvent CollectionEvent.
     * @private
     */
    handleLayersRemove_(collectionEvent) {
      const layer = collectionEvent.element;
      const key = getUid(layer);
      this.listenerKeys_[key].forEach(unlistenByKey);
      delete this.listenerKeys_[key];
      this.dispatchEvent(new GroupEvent('removelayer', layer));
      this.changed();
    }

    /**
     * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @return {!Collection<import("./Base.js").default>} Collection of
     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
     * @observable
     * @api
     */
    getLayers() {
      return /** @type {!Collection<import("./Base.js").default>} */ (
        this.get(Property$2.LAYERS)
      );
    }

    /**
     * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}
     * in this group.
     * @param {!Collection<import("./Base.js").default>} layers Collection of
     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.
     * @observable
     * @api
     */
    setLayers(layers) {
      const collection = this.getLayers();
      if (collection) {
        const currentLayers = collection.getArray();
        for (let i = 0, ii = currentLayers.length; i < ii; ++i) {
          this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));
        }
      }

      this.set(Property$2.LAYERS, layers);
    }

    /**
     * @param {Array<import("./Layer.js").default>} [array] Array of layers (to be modified in place).
     * @return {Array<import("./Layer.js").default>} Array of layers.
     */
    getLayersArray(array) {
      array = array !== undefined ? array : [];
      this.getLayers().forEach(function (layer) {
        layer.getLayersArray(array);
      });
      return array;
    }

    /**
     * Get the layer states list and use this groups z-index as the default
     * for all layers in this and nested groups, if it is unset at this point.
     * If dest is not provided and this group's z-index is undefined
     * 0 is used a the default z-index.
     * @param {Array<import("./Layer.js").State>} [dest] Optional list
     * of layer states (to be modified in place).
     * @return {Array<import("./Layer.js").State>} List of layer states.
     */
    getLayerStatesArray(dest) {
      const states = dest !== undefined ? dest : [];
      const pos = states.length;

      this.getLayers().forEach(function (layer) {
        layer.getLayerStatesArray(states);
      });

      const ownLayerState = this.getLayerState();
      let defaultZIndex = ownLayerState.zIndex;
      if (!dest && ownLayerState.zIndex === undefined) {
        defaultZIndex = 0;
      }
      for (let i = pos, ii = states.length; i < ii; i++) {
        const layerState = states[i];
        layerState.opacity *= ownLayerState.opacity;
        layerState.visible = layerState.visible && ownLayerState.visible;
        layerState.maxResolution = Math.min(
          layerState.maxResolution,
          ownLayerState.maxResolution
        );
        layerState.minResolution = Math.max(
          layerState.minResolution,
          ownLayerState.minResolution
        );
        layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
        layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
        if (ownLayerState.extent !== undefined) {
          if (layerState.extent !== undefined) {
            layerState.extent = getIntersection(
              layerState.extent,
              ownLayerState.extent
            );
          } else {
            layerState.extent = ownLayerState.extent;
          }
        }
        if (layerState.zIndex === undefined) {
          layerState.zIndex = defaultZIndex;
        }
      }

      return states;
    }

    /**
     * @return {import("../source/Source.js").State} Source state.
     */
    getSourceState() {
      return 'ready';
    }
  }

  var LayerGroup$1 = LayerGroup;

  /**
   * @module ol/MapEvent
   */

  /**
   * @classdesc
   * Events emitted as map events are instances of this type.
   * See {@link module:ol/Map~Map} for which events trigger a map event.
   */
  class MapEvent extends BaseEvent {
    /**
     * @param {string} type Event type.
     * @param {import("./Map.js").default} map Map.
     * @param {?import("./Map.js").FrameState} [frameState] Frame state.
     */
    constructor(type, map, frameState) {
      super(type);

      /**
       * The map where the event occurred.
       * @type {import("./Map.js").default}
       * @api
       */
      this.map = map;

      /**
       * The frame state at the time of the event.
       * @type {?import("./Map.js").FrameState}
       * @api
       */
      this.frameState = frameState !== undefined ? frameState : null;
    }
  }

  var MapEvent$1 = MapEvent;

  /**
   * @module ol/MapBrowserEvent
   */

  /**
   * @classdesc
   * Events emitted as map browser events are instances of this type.
   * See {@link module:ol/Map~Map} for which events trigger a map browser event.
   * @template {UIEvent} EVENT
   */
  class MapBrowserEvent extends MapEvent$1 {
    /**
     * @param {string} type Event type.
     * @param {import("./Map.js").default} map Map.
     * @param {EVENT} originalEvent Original event.
     * @param {boolean} [dragging] Is the map currently being dragged?
     * @param {import("./Map.js").FrameState} [frameState] Frame state.
     * @param {Array<PointerEvent>} [activePointers] Active pointers.
     */
    constructor(type, map, originalEvent, dragging, frameState, activePointers) {
      super(type, map, frameState);

      /**
       * The original browser event.
       * @const
       * @type {EVENT}
       * @api
       */
      this.originalEvent = originalEvent;

      /**
       * The map pixel relative to the viewport corresponding to the original browser event.
       * @type {?import("./pixel.js").Pixel}
       */
      this.pixel_ = null;

      /**
       * The coordinate in the user projection corresponding to the original browser event.
       * @type {?import("./coordinate.js").Coordinate}
       */
      this.coordinate_ = null;

      /**
       * Indicates if the map is currently being dragged. Only set for
       * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
       *
       * @type {boolean}
       * @api
       */
      this.dragging = dragging !== undefined ? dragging : false;

      /**
       * @type {Array<PointerEvent>|undefined}
       */
      this.activePointers = activePointers;
    }

    /**
     * The map pixel relative to the viewport corresponding to the original event.
     * @type {import("./pixel.js").Pixel}
     * @api
     */
    get pixel() {
      if (!this.pixel_) {
        this.pixel_ = this.map.getEventPixel(this.originalEvent);
      }
      return this.pixel_;
    }
    set pixel(pixel) {
      this.pixel_ = pixel;
    }

    /**
     * The coordinate corresponding to the original browser event.  This will be in the user
     * projection if one is set.  Otherwise it will be in the view projection.
     * @type {import("./coordinate.js").Coordinate}
     * @api
     */
    get coordinate() {
      if (!this.coordinate_) {
        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
      }
      return this.coordinate_;
    }
    set coordinate(coordinate) {
      this.coordinate_ = coordinate;
    }

    /**
     * Prevents the default browser action.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
     * @api
     */
    preventDefault() {
      super.preventDefault();
      if ('preventDefault' in this.originalEvent) {
        /** @type {UIEvent} */ (this.originalEvent).preventDefault();
      }
    }

    /**
     * Prevents further propagation of the current event.
     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
     * @api
     */
    stopPropagation() {
      super.stopPropagation();
      if ('stopPropagation' in this.originalEvent) {
        /** @type {UIEvent} */ (this.originalEvent).stopPropagation();
      }
    }
  }

  var MapBrowserEvent$1 = MapBrowserEvent;

  /**
   * @module ol/MapBrowserEventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var MapBrowserEventType = {
    /**
     * A true single click with no dragging and no double click. Note that this
     * event is delayed by 250 ms to ensure that it is not a double click.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
     * @api
     */
    SINGLECLICK: 'singleclick',

    /**
     * A click with no dragging. A double click will fire two of this.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
     * @api
     */
    CLICK: EventType.CLICK,

    /**
     * A true double click, with no dragging.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
     * @api
     */
    DBLCLICK: EventType.DBLCLICK,

    /**
     * Triggered when a pointer is dragged.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
     * @api
     */
    POINTERDRAG: 'pointerdrag',

    /**
     * Triggered when a pointer is moved. Note that on touch devices this is
     * triggered when the map is panned, so is not the same as mousemove.
     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
     * @api
     */
    POINTERMOVE: 'pointermove',

    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel',
  };

  /***
   * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types
   */

  /**
   * @module ol/pointer/EventType
   */

  /**
   * Constants for event names.
   * @enum {string}
   */
  var PointerEventType = {
    POINTERMOVE: 'pointermove',
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    POINTERCANCEL: 'pointercancel',
  };

  /**
   * @module ol/MapBrowserEventHandler
   */

  class MapBrowserEventHandler extends EventTarget {
    /**
     * @param {import("./Map.js").default} map The map with the viewport to listen to events on.
     * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.
     */
    constructor(map, moveTolerance) {
      super(map);

      /**
       * This is the element that we will listen to the real events on.
       * @type {import("./Map.js").default}
       * @private
       */
      this.map_ = map;

      /**
       * @type {any}
       * @private
       */
      this.clickTimeoutId_;

      /**
       * Emulate dblclick and singleclick. Will be true when only one pointer is active.
       * @type {boolean}
       */
      this.emulateClicks_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_ = false;

      /**
       * @type {!Array<import("./events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * @type {number}
       * @private
       */
      this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;

      /**
       * The most recent "down" type event (or null if none have occurred).
       * Set on pointerdown.
       * @type {PointerEvent|null}
       * @private
       */
      this.down_ = null;

      const element = this.map_.getViewport();

      /**
       * @type {Array<PointerEvent>}
       * @private
       */
      this.activePointers_ = [];

      /**
       * @type {!Object<number, Event>}
       * @private
       */
      this.trackedTouches_ = {};

      this.element_ = element;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.pointerdownListenerKey_ = listen(
        element,
        PointerEventType.POINTERDOWN,
        this.handlePointerDown_,
        this
      );

      /**
       * @type {PointerEvent}
       * @private
       */
      this.originalPointerMoveEvent_;

      /**
       * @type {?import("./events.js").EventsKey}
       * @private
       */
      this.relayedListenerKey_ = listen(
        element,
        PointerEventType.POINTERMOVE,
        this.relayMoveEvent_,
        this
      );

      /**
       * @private
       */
      this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);

      this.element_.addEventListener(
        EventType.TOUCHMOVE,
        this.boundHandleTouchMove_,
        PASSIVE_EVENT_LISTENERS ? {passive: false} : false
      );
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    emulateClick_(pointerEvent) {
      let newEvent = new MapBrowserEvent$1(
        MapBrowserEventType.CLICK,
        this.map_,
        pointerEvent
      );
      this.dispatchEvent(newEvent);
      if (this.clickTimeoutId_ !== undefined) {
        // double-click
        clearTimeout(this.clickTimeoutId_);
        this.clickTimeoutId_ = undefined;
        newEvent = new MapBrowserEvent$1(
          MapBrowserEventType.DBLCLICK,
          this.map_,
          pointerEvent
        );
        this.dispatchEvent(newEvent);
      } else {
        // click
        this.clickTimeoutId_ = setTimeout(() => {
          this.clickTimeoutId_ = undefined;
          const newEvent = new MapBrowserEvent$1(
            MapBrowserEventType.SINGLECLICK,
            this.map_,
            pointerEvent
          );
          this.dispatchEvent(newEvent);
        }, 250);
      }
    }

    /**
     * Keeps track on how many pointers are currently active.
     *
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    updateActivePointers_(pointerEvent) {
      const event = pointerEvent;
      const id = event.pointerId;

      if (
        event.type == MapBrowserEventType.POINTERUP ||
        event.type == MapBrowserEventType.POINTERCANCEL
      ) {
        delete this.trackedTouches_[id];
        for (const pointerId in this.trackedTouches_) {
          if (this.trackedTouches_[pointerId].target !== event.target) {
            // Some platforms assign a new pointerId when the target changes.
            // If this happens, delete one tracked pointer. If there is more
            // than one tracked pointer for the old target, it will be cleared
            // by subsequent POINTERUP events from other pointers.
            delete this.trackedTouches_[pointerId];
            break;
          }
        }
      } else if (
        event.type == MapBrowserEventType.POINTERDOWN ||
        event.type == MapBrowserEventType.POINTERMOVE
      ) {
        this.trackedTouches_[id] = event;
      }
      this.activePointers_ = Object.values(this.trackedTouches_);
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerUp_(pointerEvent) {
      this.updateActivePointers_(pointerEvent);
      const newEvent = new MapBrowserEvent$1(
        MapBrowserEventType.POINTERUP,
        this.map_,
        pointerEvent,
        undefined,
        undefined,
        this.activePointers_
      );
      this.dispatchEvent(newEvent);

      // We emulate click events on left mouse button click, touch contact, and pen
      // contact. isMouseActionButton returns true in these cases (evt.button is set
      // to 0).
      // See http://www.w3.org/TR/pointerevents/#button-states
      // We only fire click, singleclick, and doubleclick if nobody has called
      // event.preventDefault().
      if (
        this.emulateClicks_ &&
        !newEvent.defaultPrevented &&
        !this.dragging_ &&
        this.isMouseActionButton_(pointerEvent)
      ) {
        this.emulateClick_(this.down_);
      }

      if (this.activePointers_.length === 0) {
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
        this.dragging_ = false;
        this.down_ = null;
      }
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @return {boolean} If the left mouse button was pressed.
     * @private
     */
    isMouseActionButton_(pointerEvent) {
      return pointerEvent.button === 0;
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerDown_(pointerEvent) {
      this.emulateClicks_ = this.activePointers_.length === 0;
      this.updateActivePointers_(pointerEvent);
      const newEvent = new MapBrowserEvent$1(
        MapBrowserEventType.POINTERDOWN,
        this.map_,
        pointerEvent,
        undefined,
        undefined,
        this.activePointers_
      );
      this.dispatchEvent(newEvent);

      this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);
      Object.defineProperty(this.down_, 'target', {
        writable: false,
        value: pointerEvent.target,
      });

      if (this.dragListenerKeys_.length === 0) {
        const doc = this.map_.getOwnerDocument();
        this.dragListenerKeys_.push(
          listen(
            doc,
            MapBrowserEventType.POINTERMOVE,
            this.handlePointerMove_,
            this
          ),
          listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),
          /* Note that the listener for `pointercancel is set up on
           * `pointerEventHandler_` and not `documentPointerEventHandler_` like
           * the `pointerup` and `pointermove` listeners.
           *
           * The reason for this is the following: `TouchSource.vacuumTouches_()`
           * issues `pointercancel` events, when there was no `touchend` for a
           * `touchstart`. Now, let's say a first `touchstart` is registered on
           * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
           * But `documentPointerEventHandler_` doesn't know about the first
           * `touchstart`. If there is no `touchend` for the `touchstart`, we can
           * only receive a `touchcancel` from `pointerEventHandler_`, because it is
           * only registered there.
           */
          listen(
            this.element_,
            MapBrowserEventType.POINTERCANCEL,
            this.handlePointerUp_,
            this
          )
        );
        if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {
          this.dragListenerKeys_.push(
            listen(
              this.element_.getRootNode(),
              MapBrowserEventType.POINTERUP,
              this.handlePointerUp_,
              this
            )
          );
        }
      }
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    handlePointerMove_(pointerEvent) {
      // Between pointerdown and pointerup, pointermove events are triggered.
      // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
      // moved a significant distance.
      if (this.isMoving_(pointerEvent)) {
        this.updateActivePointers_(pointerEvent);
        this.dragging_ = true;
        const newEvent = new MapBrowserEvent$1(
          MapBrowserEventType.POINTERDRAG,
          this.map_,
          pointerEvent,
          this.dragging_,
          undefined,
          this.activePointers_
        );
        this.dispatchEvent(newEvent);
      }
    }

    /**
     * Wrap and relay a pointermove event.
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @private
     */
    relayMoveEvent_(pointerEvent) {
      this.originalPointerMoveEvent_ = pointerEvent;
      const dragging = !!(this.down_ && this.isMoving_(pointerEvent));
      this.dispatchEvent(
        new MapBrowserEvent$1(
          MapBrowserEventType.POINTERMOVE,
          this.map_,
          pointerEvent,
          dragging
        )
      );
    }

    /**
     * Flexible handling of a `touch-action: none` css equivalent: because calling
     * `preventDefault()` on a `pointermove` event does not stop native page scrolling
     * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
     * when an interaction (currently `DragPan` handles the event.
     * @param {TouchEvent} event Event.
     * @private
     */
    handleTouchMove_(event) {
      // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
      // may not be initialized yet when we get here on a platform without native pointer events.
      const originalEvent = this.originalPointerMoveEvent_;
      if (
        (!originalEvent || originalEvent.defaultPrevented) &&
        (typeof event.cancelable !== 'boolean' || event.cancelable === true)
      ) {
        event.preventDefault();
      }
    }

    /**
     * @param {PointerEvent} pointerEvent Pointer
     * event.
     * @return {boolean} Is moving.
     * @private
     */
    isMoving_(pointerEvent) {
      return (
        this.dragging_ ||
        Math.abs(pointerEvent.clientX - this.down_.clientX) >
          this.moveTolerance_ ||
        Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_
      );
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      if (this.relayedListenerKey_) {
        unlistenByKey(this.relayedListenerKey_);
        this.relayedListenerKey_ = null;
      }
      this.element_.removeEventListener(
        EventType.TOUCHMOVE,
        this.boundHandleTouchMove_
      );

      if (this.pointerdownListenerKey_) {
        unlistenByKey(this.pointerdownListenerKey_);
        this.pointerdownListenerKey_ = null;
      }

      this.dragListenerKeys_.forEach(unlistenByKey);
      this.dragListenerKeys_.length = 0;

      this.element_ = null;
      super.disposeInternal();
    }
  }

  var MapBrowserEventHandler$1 = MapBrowserEventHandler;

  /**
   * @module ol/MapEventType
   */

  /**
   * @enum {string}
   */
  var MapEventType = {
    /**
     * Triggered after a map frame is rendered.
     * @event module:ol/MapEvent~MapEvent#postrender
     * @api
     */
    POSTRENDER: 'postrender',

    /**
     * Triggered when the map starts moving.
     * @event module:ol/MapEvent~MapEvent#movestart
     * @api
     */
    MOVESTART: 'movestart',

    /**
     * Triggered after the map is moved.
     * @event module:ol/MapEvent~MapEvent#moveend
     * @api
     */
    MOVEEND: 'moveend',

    /**
     * Triggered when loading of additional map data (tiles, images, features) starts.
     * @event module:ol/MapEvent~MapEvent#loadstart
     * @api
     */
    LOADSTART: 'loadstart',

    /**
     * Triggered when loading of additional map data has completed.
     * @event module:ol/MapEvent~MapEvent#loadend
     * @api
     */
    LOADEND: 'loadend',
  };

  /***
   * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types
   */

  /**
   * @module ol/MapProperty
   */

  /**
   * @enum {string}
   */
  var MapProperty = {
    LAYERGROUP: 'layergroup',
    SIZE: 'size',
    TARGET: 'target',
    VIEW: 'view',
  };

  /**
   * @module ol/structs/PriorityQueue
   */

  /**
   * @type {number}
   */
  const DROP = Infinity;

  /**
   * @classdesc
   * Priority queue.
   *
   * The implementation is inspired from the Closure Library's Heap class and
   * Python's heapq module.
   *
   * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js
   * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.
   *
   * @template T
   */
  class PriorityQueue {
    /**
     * @param {function(T): number} priorityFunction Priority function.
     * @param {function(T): string} keyFunction Key function.
     */
    constructor(priorityFunction, keyFunction) {
      /**
       * @type {function(T): number}
       * @private
       */
      this.priorityFunction_ = priorityFunction;

      /**
       * @type {function(T): string}
       * @private
       */
      this.keyFunction_ = keyFunction;

      /**
       * @type {Array<T>}
       * @private
       */
      this.elements_ = [];

      /**
       * @type {Array<number>}
       * @private
       */
      this.priorities_ = [];

      /**
       * @type {!Object<string, boolean>}
       * @private
       */
      this.queuedElements_ = {};
    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.elements_.length = 0;
      this.priorities_.length = 0;
      clear$2(this.queuedElements_);
    }

    /**
     * Remove and return the highest-priority element. O(log N).
     * @return {T} Element.
     */
    dequeue() {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const element = elements[0];
      if (elements.length == 1) {
        elements.length = 0;
        priorities.length = 0;
      } else {
        elements[0] = elements.pop();
        priorities[0] = priorities.pop();
        this.siftUp_(0);
      }
      const elementKey = this.keyFunction_(element);
      delete this.queuedElements_[elementKey];
      return element;
    }

    /**
     * Enqueue an element. O(log N).
     * @param {T} element Element.
     * @return {boolean} The element was added to the queue.
     */
    enqueue(element) {
      assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
      const priority = this.priorityFunction_(element);
      if (priority != DROP) {
        this.elements_.push(element);
        this.priorities_.push(priority);
        this.queuedElements_[this.keyFunction_(element)] = true;
        this.siftDown_(0, this.elements_.length - 1);
        return true;
      }
      return false;
    }

    /**
     * @return {number} Count.
     */
    getCount() {
      return this.elements_.length;
    }

    /**
     * Gets the index of the left child of the node at the given index.
     * @param {number} index The index of the node to get the left child for.
     * @return {number} The index of the left child.
     * @private
     */
    getLeftChildIndex_(index) {
      return index * 2 + 1;
    }

    /**
     * Gets the index of the right child of the node at the given index.
     * @param {number} index The index of the node to get the right child for.
     * @return {number} The index of the right child.
     * @private
     */
    getRightChildIndex_(index) {
      return index * 2 + 2;
    }

    /**
     * Gets the index of the parent of the node at the given index.
     * @param {number} index The index of the node to get the parent for.
     * @return {number} The index of the parent.
     * @private
     */
    getParentIndex_(index) {
      return (index - 1) >> 1;
    }

    /**
     * Make this a heap. O(N).
     * @private
     */
    heapify_() {
      let i;
      for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
        this.siftUp_(i);
      }
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.elements_.length === 0;
    }

    /**
     * @param {string} key Key.
     * @return {boolean} Is key queued.
     */
    isKeyQueued(key) {
      return key in this.queuedElements_;
    }

    /**
     * @param {T} element Element.
     * @return {boolean} Is queued.
     */
    isQueued(element) {
      return this.isKeyQueued(this.keyFunction_(element));
    }

    /**
     * @param {number} index The index of the node to move down.
     * @private
     */
    siftUp_(index) {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const count = elements.length;
      const element = elements[index];
      const priority = priorities[index];
      const startIndex = index;

      while (index < count >> 1) {
        const lIndex = this.getLeftChildIndex_(index);
        const rIndex = this.getRightChildIndex_(index);

        const smallerChildIndex =
          rIndex < count && priorities[rIndex] < priorities[lIndex]
            ? rIndex
            : lIndex;

        elements[index] = elements[smallerChildIndex];
        priorities[index] = priorities[smallerChildIndex];
        index = smallerChildIndex;
      }

      elements[index] = element;
      priorities[index] = priority;
      this.siftDown_(startIndex, index);
    }

    /**
     * @param {number} startIndex The index of the root.
     * @param {number} index The index of the node to move up.
     * @private
     */
    siftDown_(startIndex, index) {
      const elements = this.elements_;
      const priorities = this.priorities_;
      const element = elements[index];
      const priority = priorities[index];

      while (index > startIndex) {
        const parentIndex = this.getParentIndex_(index);
        if (priorities[parentIndex] > priority) {
          elements[index] = elements[parentIndex];
          priorities[index] = priorities[parentIndex];
          index = parentIndex;
        } else {
          break;
        }
      }
      elements[index] = element;
      priorities[index] = priority;
    }

    /**
     * FIXME empty description for jsdoc
     */
    reprioritize() {
      const priorityFunction = this.priorityFunction_;
      const elements = this.elements_;
      const priorities = this.priorities_;
      let index = 0;
      const n = elements.length;
      let element, i, priority;
      for (i = 0; i < n; ++i) {
        element = elements[i];
        priority = priorityFunction(element);
        if (priority == DROP) {
          delete this.queuedElements_[this.keyFunction_(element)];
        } else {
          priorities[index] = priority;
          elements[index++] = element;
        }
      }
      elements.length = index;
      priorities.length = index;
      this.heapify_();
    }
  }

  var PriorityQueue$1 = PriorityQueue;

  /**
   * @module ol/TileQueue
   */

  /**
   * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
   */

  class TileQueue extends PriorityQueue$1 {
    /**
     * @param {PriorityFunction} tilePriorityFunction Tile priority function.
     * @param {function(): ?} tileChangeCallback Function called on each tile change event.
     */
    constructor(tilePriorityFunction, tileChangeCallback) {
      super(
        /**
         * @param {Array} element Element.
         * @return {number} Priority.
         */
        function (element) {
          return tilePriorityFunction.apply(null, element);
        },
        /**
         * @param {Array} element Element.
         * @return {string} Key.
         */
        function (element) {
          return /** @type {import("./Tile.js").default} */ (element[0]).getKey();
        }
      );

      /** @private */
      this.boundHandleTileChange_ = this.handleTileChange.bind(this);

      /**
       * @private
       * @type {function(): ?}
       */
      this.tileChangeCallback_ = tileChangeCallback;

      /**
       * @private
       * @type {number}
       */
      this.tilesLoading_ = 0;

      /**
       * @private
       * @type {!Object<string,boolean>}
       */
      this.tilesLoadingKeys_ = {};
    }

    /**
     * @param {Array} element Element.
     * @return {boolean} The element was added to the queue.
     */
    enqueue(element) {
      const added = super.enqueue(element);
      if (added) {
        const tile = element[0];
        tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);
      }
      return added;
    }

    /**
     * @return {number} Number of tiles loading.
     */
    getTilesLoading() {
      return this.tilesLoading_;
    }

    /**
     * @param {import("./events/Event.js").default} event Event.
     * @protected
     */
    handleTileChange(event) {
      const tile = /** @type {import("./Tile.js").default} */ (event.target);
      const state = tile.getState();
      if (
        state === TileState.LOADED ||
        state === TileState.ERROR ||
        state === TileState.EMPTY
      ) {
        if (state !== TileState.ERROR) {
          tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);
        }
        const tileKey = tile.getKey();
        if (tileKey in this.tilesLoadingKeys_) {
          delete this.tilesLoadingKeys_[tileKey];
          --this.tilesLoading_;
        }
        this.tileChangeCallback_();
      }
    }

    /**
     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
     * @param {number} maxNewLoads Maximum number of new tiles to load.
     */
    loadMoreTiles(maxTotalLoading, maxNewLoads) {
      let newLoads = 0;
      let state, tile, tileKey;
      while (
        this.tilesLoading_ < maxTotalLoading &&
        newLoads < maxNewLoads &&
        this.getCount() > 0
      ) {
        tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
        tileKey = tile.getKey();
        state = tile.getState();
        if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
          this.tilesLoadingKeys_[tileKey] = true;
          ++this.tilesLoading_;
          ++newLoads;
          tile.load();
        }
      }
    }
  }

  var TileQueue$1 = TileQueue;

  /**
   * @param {import('./Map.js').FrameState} frameState Frame state.
   * @param {import("./Tile.js").default} tile Tile.
   * @param {string} tileSourceKey Tile source key.
   * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
   * @param {number} tileResolution Tile resolution.
   * @return {number} Tile priority.
   */
  function getTilePriority(
    frameState,
    tile,
    tileSourceKey,
    tileCenter,
    tileResolution
  ) {
    // Filter out tiles at higher zoom levels than the current zoom level, or that
    // are outside the visible extent.
    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
      return DROP;
    }
    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
      return DROP;
    }
    // Prioritize the highest zoom level tiles closest to the focus.
    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
    // Within a zoom level, tiles are prioritized by the distance in pixels between
    // the center of the tile and the center of the viewport.  The factor of 65536
    // means that the prioritization should behave as desired for tiles up to
    // 65536 * Math.log(2) = 45426 pixels from the focus.
    const center = frameState.viewState.center;
    const deltaX = tileCenter[0] - center[0];
    const deltaY = tileCenter[1] - center[1];
    return (
      65536 * Math.log(tileResolution) +
      Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution
    );
  }

  /**
   * @module ol/control/Control
   */

  /**
   * @typedef {Object} Options
   * @property {HTMLElement} [element] The element is the control's
   * container element. This only needs to be specified if you're developing
   * a custom control.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want
   * the control to be rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A control is a visible widget with a DOM element in a fixed position on the
   * screen. They can involve user input (buttons), or be informational only;
   * the position is determined using CSS. By default these are placed in the
   * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
   * any outside DOM element.
   *
   * This is the base class for controls. You can use it for simple custom
   * controls by creating the element with listeners, creating an instance:
   * ```js
   * const myControl = new Control({element: myElement});
   * ```
   * and then adding this to the map.
   *
   * The main advantage of having this as a control rather than a simple separate
   * DOM element is that preventing propagation is handled for you. Controls
   * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
   *
   * You can also extend this base for your own control class. See
   * examples/custom-controls for an example of how to do this.
   *
   * @api
   */
  class Control extends olObject {
    /**
     * @param {Options} options Control options.
     */
    constructor(options) {
      super();

      const element = options.element;
      if (element && !options.target && !element.style.pointerEvents) {
        element.style.pointerEvents = 'auto';
      }

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = element ? element : null;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.target_ = null;

      /**
       * @private
       * @type {import("../Map.js").default|null}
       */
      this.map_ = null;

      /**
       * @protected
       * @type {!Array<import("../events.js").EventsKey>}
       */
      this.listenerKeys = [];

      if (options.render) {
        this.render = options.render;
      }

      if (options.target) {
        this.setTarget(options.target);
      }
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      removeNode$1(this.element);
      super.disposeInternal();
    }

    /**
     * Get the map associated with this control.
     * @return {import("../Map.js").default|null} Map.
     * @api
     */
    getMap() {
      return this.map_;
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      if (this.map_) {
        removeNode$1(this.element);
      }
      for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
        unlistenByKey(this.listenerKeys[i]);
      }
      this.listenerKeys.length = 0;
      this.map_ = map;
      if (map) {
        const target = this.target_
          ? this.target_
          : map.getOverlayContainerStopEvent();
        target.appendChild(this.element);
        if (this.render !== VOID) {
          this.listenerKeys.push(
            listen(map, MapEventType.POSTRENDER, this.render, this)
          );
        }
        map.render();
      }
    }

    /**
     * Renders the control.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @api
     */
    render(mapEvent) {}

    /**
     * This function is used to set a target element for the control. It has no
     * effect if it is called after the control has been added to the map (i.e.
     * after `setMap` is called on the control). If no `target` is set in the
     * options passed to the control constructor and if `setTarget` is not called
     * then the control is added to the map's overlay container.
     * @param {HTMLElement|string} target Target.
     * @api
     */
    setTarget(target) {
      this.target_ =
        typeof target === 'string' ? document.getElementById(target) : target;
    }
  }

  var Control$1 = Control;

  /**
   * @module ol/control/Attribution
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-attribution'] CSS class name.
   * @property {HTMLElement|string} [target] Specify a target if you
   * want the control to be rendered outside of the map's
   * viewport.
   * @property {boolean} [collapsible] Specify if attributions can
   * be collapsed. If not specified, sources control this behavior with their
   * `attributionsCollapsible` setting.
   * @property {boolean} [collapsed=true] Specify if attributions should
   * be collapsed at startup.
   * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
   * @property {string|HTMLElement} [label='i'] Text label to use for the
   * collapsed attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [expandClassName=className + '-expand'] CSS class name for the
   * collapsed attributions button.
   * @property {string|HTMLElement} [collapseLabel='›'] Text label to use
   * for the expanded attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the
   * expanded attributions button.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   */

  /**
   * @classdesc
   * Control to show all the attributions associated with the layer sources
   * in the map. This control is one of the default controls included in maps.
   * By default it will show in the bottom right portion of the map, but this can
   * be changed by using a css selector for `.ol-attribution`.
   *
   * @api
   */
  class Attribution extends Control$1 {
    /**
     * @param {Options} [options] Attribution options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
        target: options.target,
      });

      /**
       * @private
       * @type {HTMLElement}
       */
      this.ulElement_ = document.createElement('ul');

      /**
       * @private
       * @type {boolean}
       */
      this.collapsed_ =
        options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.userCollapsed_ = this.collapsed_;

      /**
       * @private
       * @type {boolean}
       */
      this.overrideCollapsible_ = options.collapsible !== undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ =
        options.collapsible !== undefined ? options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      const className =
        options.className !== undefined ? options.className : 'ol-attribution';

      const tipLabel =
        options.tipLabel !== undefined ? options.tipLabel : 'Attributions';

      const expandClassName =
        options.expandClassName !== undefined
          ? options.expandClassName
          : className + '-expand';

      const collapseLabel =
        options.collapseLabel !== undefined ? options.collapseLabel : '\u203A';

      const collapseClassName =
        options.collapseClassName !== undefined
          ? options.collapseClassName
          : className + '-collapse';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
        this.collapseLabel_.className = collapseClassName;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      const label = options.label !== undefined ? options.label : 'i';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
        this.label_.className = expandClassName;
      } else {
        this.label_ = label;
      }

      const activeLabel =
        this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;

      /**
       * @private
       * @type {HTMLElement}
       */
      this.toggleButton_ = document.createElement('button');
      this.toggleButton_.setAttribute('type', 'button');
      this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));
      this.toggleButton_.title = tipLabel;
      this.toggleButton_.appendChild(activeLabel);

      this.toggleButton_.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false
      );

      const cssClasses =
        className +
        ' ' +
        CLASS_UNSELECTABLE +
        ' ' +
        CLASS_CONTROL +
        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
        (this.collapsible_ ? '' : ' ol-uncollapsible');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.toggleButton_);
      element.appendChild(this.ulElement_);

      /**
       * A list of currently rendered resolutions.
       * @type {Array<string>}
       * @private
       */
      this.renderedAttributions_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = true;
    }

    /**
     * Collect a list of visible attributions and set the collapsible state.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @return {Array<string>} Attributions.
     * @private
     */
    collectSourceAttributions_(frameState) {
      const visibleAttributions = Array.from(
        new Set(
          this.getMap()
            .getAllLayers()
            .flatMap((layer) => layer.getAttributions(frameState))
        )
      );

      const collapsible = !this.getMap()
        .getAllLayers()
        .some(
          (layer) =>
            layer.getSource() &&
            layer.getSource().getAttributionsCollapsible() === false
        );
      if (!this.overrideCollapsible_) {
        this.setCollapsible(collapsible);
      }
      return visibleAttributions;
    }

    /**
     * @private
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     */
    updateElement_(frameState) {
      if (!frameState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      const attributions = this.collectSourceAttributions_(frameState);

      const visible = attributions.length > 0;
      if (this.renderedVisible_ != visible) {
        this.element.style.display = visible ? '' : 'none';
        this.renderedVisible_ = visible;
      }

      if (equals$3(attributions, this.renderedAttributions_)) {
        return;
      }

      removeChildren(this.ulElement_);

      // append the attributions
      for (let i = 0, ii = attributions.length; i < ii; ++i) {
        const element = document.createElement('li');
        element.innerHTML = attributions[i];
        this.ulElement_.appendChild(element);
      }

      this.renderedAttributions_ = attributions;
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
      this.userCollapsed_ = this.collapsed_;
    }

    /**
     * @private
     */
    handleToggle_() {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;
      this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));
    }

    /**
     * Return `true` if the attribution is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    getCollapsible() {
      return this.collapsible_;
    }

    /**
     * Set whether the attribution should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    setCollapsible(collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (this.userCollapsed_) {
        this.handleToggle_();
      }
    }

    /**
     * Collapse or expand the attribution according to the passed parameter. Will
     * not do anything if the attribution isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    setCollapsed(collapsed) {
      this.userCollapsed_ = collapsed;
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    }

    /**
     * Return `true` when the attribution is currently collapsed or `false`
     * otherwise.
     * @return {boolean} True if the widget is collapsed.
     * @api
     */
    getCollapsed() {
      return this.collapsed_;
    }

    /**
     * Update the attribution element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      this.updateElement_(mapEvent.frameState);
    }
  }

  var Attribution$1 = Attribution;

  /**
   * @module ol/control/Rotate
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-rotate'] CSS class name.
   * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
   * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
   * be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {function():void} [resetNorth] Function called when the control is clicked.
   * This will override the default `resetNorth`.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A button control to reset rotation to 0.
   * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
   * selector is added to the button when the rotation is 0.
   *
   * @api
   */
  class Rotate extends Control$1 {
    /**
     * @param {Options} [options] Rotate options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
        target: options.target,
      });

      const className =
        options.className !== undefined ? options.className : 'ol-rotate';

      const label = options.label !== undefined ? options.label : '\u21E7';

      const compassClassName =
        options.compassClassName !== undefined
          ? options.compassClassName
          : 'ol-compass';

      /**
       * @type {HTMLElement}
       * @private
       */
      this.label_ = null;

      if (typeof label === 'string') {
        this.label_ = document.createElement('span');
        this.label_.className = compassClassName;
        this.label_.textContent = label;
      } else {
        this.label_ = label;
        this.label_.classList.add(compassClassName);
      }

      const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';

      const button = document.createElement('button');
      button.className = className + '-reset';
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(this.label_);

      button.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false
      );

      const cssClasses =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(button);

      this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @type {boolean}
       * @private
       */
      this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;

      /**
       * @private
       * @type {number|undefined}
       */
      this.rotation_ = undefined;

      if (this.autoHide_) {
        this.element.classList.add(CLASS_HIDDEN);
      }
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      if (this.callResetNorth_ !== undefined) {
        this.callResetNorth_();
      } else {
        this.resetNorth_();
      }
    }

    /**
     * @private
     */
    resetNorth_() {
      const map = this.getMap();
      const view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      const rotation = view.getRotation();
      if (rotation !== undefined) {
        if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {
          view.animate({
            rotation: 0,
            duration: this.duration_,
            easing: easeOut,
          });
        } else {
          view.setRotation(0);
        }
      }
    }

    /**
     * Update the rotate control element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      const frameState = mapEvent.frameState;
      if (!frameState) {
        return;
      }
      const rotation = frameState.viewState.rotation;
      if (rotation != this.rotation_) {
        const transform = 'rotate(' + rotation + 'rad)';
        if (this.autoHide_) {
          const contains = this.element.classList.contains(CLASS_HIDDEN);
          if (!contains && rotation === 0) {
            this.element.classList.add(CLASS_HIDDEN);
          } else if (contains && rotation !== 0) {
            this.element.classList.remove(CLASS_HIDDEN);
          }
        }
        this.label_.style.transform = transform;
      }
      this.rotation_ = rotation;
    }
  }

  var Rotate$1 = Rotate;

  /**
   * @module ol/control/Zoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {string} [className='ol-zoom'] CSS class name.
   * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.
   * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.
   * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
   * button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
   * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
   * @property {number} [delta=1] The zoom delta applied on each click.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */

  /**
   * @classdesc
   * A control with 2 buttons, one for zoom in and one for zoom out.
   * This control is one of the default controls of a map. To style this control
   * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
   *
   * @api
   */
  class Zoom extends Control$1 {
    /**
     * @param {Options} [options] Zoom options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        target: options.target,
      });

      const className =
        options.className !== undefined ? options.className : 'ol-zoom';

      const delta = options.delta !== undefined ? options.delta : 1;

      const zoomInClassName =
        options.zoomInClassName !== undefined
          ? options.zoomInClassName
          : className + '-in';

      const zoomOutClassName =
        options.zoomOutClassName !== undefined
          ? options.zoomOutClassName
          : className + '-out';

      const zoomInLabel =
        options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
      const zoomOutLabel =
        options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2013';

      const zoomInTipLabel =
        options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';
      const zoomOutTipLabel =
        options.zoomOutTipLabel !== undefined
          ? options.zoomOutTipLabel
          : 'Zoom out';

      const inElement = document.createElement('button');
      inElement.className = zoomInClassName;
      inElement.setAttribute('type', 'button');
      inElement.title = zoomInTipLabel;
      inElement.appendChild(
        typeof zoomInLabel === 'string'
          ? document.createTextNode(zoomInLabel)
          : zoomInLabel
      );

      inElement.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this, delta),
        false
      );

      const outElement = document.createElement('button');
      outElement.className = zoomOutClassName;
      outElement.setAttribute('type', 'button');
      outElement.title = zoomOutTipLabel;
      outElement.appendChild(
        typeof zoomOutLabel === 'string'
          ? document.createTextNode(zoomOutLabel)
          : zoomOutLabel
      );

      outElement.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this, -delta),
        false
      );

      const cssClasses =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(inElement);
      element.appendChild(outElement);

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * @param {number} delta Zoom delta.
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(delta, event) {
      event.preventDefault();
      this.zoomByDelta_(delta);
    }

    /**
     * @param {number} delta Zoom delta.
     * @private
     */
    zoomByDelta_(delta) {
      const map = this.getMap();
      const view = map.getView();
      if (!view) {
        // the map does not have a view, so we can't act
        // upon it
        return;
      }
      const currentZoom = view.getZoom();
      if (currentZoom !== undefined) {
        const newZoom = view.getConstrainedZoom(currentZoom + delta);
        if (this.duration_ > 0) {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.animate({
            zoom: newZoom,
            duration: this.duration_,
            easing: easeOut,
          });
        } else {
          view.setZoom(newZoom);
        }
      }
    }
  }

  var Zoom$1 = Zoom;

  /**
   * @module ol/control/defaults
   */

  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [attribution=true] Include
   * {@link module:ol/control/Attribution~Attribution}.
   * @property {import("./Attribution.js").Options} [attributionOptions]
   * Options for {@link module:ol/control/Attribution~Attribution}.
   * @property {boolean} [rotate=true] Include
   * {@link module:ol/control/Rotate~Rotate}.
   * @property {import("./Rotate.js").Options} [rotateOptions] Options
   * for {@link module:ol/control/Rotate~Rotate}.
   * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
   * @property {import("./Zoom.js").Options} [zoomOptions] Options for
   * {@link module:ol/control/Zoom~Zoom}.
   */

  /**
   * Set of controls included in maps by default. Unless configured otherwise,
   * this returns a collection containing an instance of each of the following
   * controls:
   * * {@link module:ol/control/Zoom~Zoom}
   * * {@link module:ol/control/Rotate~Rotate}
   * * {@link module:ol/control/Attribution~Attribution}
   *
   * @param {DefaultsOptions} [options] Options for the default controls.
   * @return {Collection<import("./Control.js").default>} A collection of controls
   * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.
   * @api
   */
  function defaults$1(options) {
    options = options ? options : {};

    /** @type {Collection<import("./Control.js").default>} */
    const controls = new Collection$1();

    const zoomControl = options.zoom !== undefined ? options.zoom : true;
    if (zoomControl) {
      controls.push(new Zoom$1(options.zoomOptions));
    }

    const rotateControl = options.rotate !== undefined ? options.rotate : true;
    if (rotateControl) {
      controls.push(new Rotate$1(options.rotateOptions));
    }

    const attributionControl =
      options.attribution !== undefined ? options.attribution : true;
    if (attributionControl) {
      controls.push(new Attribution$1(options.attributionOptions));
    }

    return controls;
  }

  /**
   * @module ol/interaction/Property
   */

  /**
   * @enum {string}
   */
  var InteractionProperty = {
    ACTIVE: 'active',
  };

  /**
   * @module ol/interaction/Interaction
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active', Return>} InteractionOnSignature
   */

  /**
   * Object literal with config options for interactions.
   * @typedef {Object} InteractionOptions
   * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. If the function returns a falsy value, propagation of
   * the event to other interactions in the map's interactions chain will be
   * prevented (this includes functions with no explicit return). The interactions
   * are traversed in reverse order of the interactions collection of the map.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * User actions that change the state of the map. Some are similar to controls,
   * but are not associated with a DOM element.
   * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
   * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
   * by a keyboard event not a button element event.
   * Although interactions do not have a DOM element, some of them do render
   * vectors and so are visible on the screen.
   * @api
   */
  class Interaction extends olObject {
    /**
     * @param {InteractionOptions} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {InteractionOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {InteractionOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {InteractionOnSignature<void>}
       */
      this.un;

      if (options && options.handleEvent) {
        this.handleEvent = options.handleEvent;
      }

      /**
       * @private
       * @type {import("../Map.js").default|null}
       */
      this.map_ = null;

      this.setActive(true);
    }

    /**
     * Return whether the interaction is currently active.
     * @return {boolean} `true` if the interaction is active, `false` otherwise.
     * @observable
     * @api
     */
    getActive() {
      return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
    }

    /**
     * Get the map associated with this interaction.
     * @return {import("../Map.js").default|null} Map.
     * @api
     */
    getMap() {
      return this.map_;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    handleEvent(mapBrowserEvent) {
      return true;
    }

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    setActive(active) {
      this.set(InteractionProperty.ACTIVE, active);
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     */
    setMap(map) {
      this.map_ = map;
    }
  }

  /**
   * @param {import("../View.js").default} view View.
   * @param {import("../coordinate.js").Coordinate} delta Delta.
   * @param {number} [duration] Duration.
   */
  function pan(view, delta, duration) {
    const currentCenter = view.getCenterInternal();
    if (currentCenter) {
      const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
      view.animateInternal({
        duration: duration !== undefined ? duration : 250,
        easing: linear,
        center: view.getConstrainedCenter(center),
      });
    }
  }

  /**
   * @param {import("../View.js").default} view View.
   * @param {number} delta Delta from previous zoom level.
   * @param {import("../coordinate.js").Coordinate} [anchor] Anchor coordinate in the user projection.
   * @param {number} [duration] Duration.
   */
  function zoomByDelta(view, delta, anchor, duration) {
    const currentZoom = view.getZoom();

    if (currentZoom === undefined) {
      return;
    }

    const newZoom = view.getConstrainedZoom(currentZoom + delta);
    const newResolution = view.getResolutionForZoom(newZoom);

    if (view.getAnimating()) {
      view.cancelAnimations();
    }
    view.animate({
      resolution: newResolution,
      anchor: anchor,
      duration: duration !== undefined ? duration : 250,
      easing: easeOut,
    });
  }

  var Interaction$1 = Interaction;

  /**
   * @module ol/interaction/DoubleClickZoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [delta=1] The zoom delta applied on each double click.
   */

  /**
   * @classdesc
   * Allows the user to zoom by double-clicking on the map.
   * @api
   */
  class DoubleClickZoom extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a
     * doubleclick) and eventually zooms the map.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      let stopEvent = false;
      if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
        const browserEvent = /** @type {MouseEvent} */ (
          mapBrowserEvent.originalEvent
        );
        const map = mapBrowserEvent.map;
        const anchor = mapBrowserEvent.coordinate;
        const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
        const view = map.getView();
        zoomByDelta(view, delta, anchor, this.duration_);
        browserEvent.preventDefault();
        stopEvent = true;
      }
      return !stopEvent;
    }
  }

  var DoubleClickZoom$1 = DoubleClickZoom;

  /**
   * @module ol/interaction/Pointer
   */

  /**
   * @typedef {Object} Options
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
   * Function handling "down" events. If the function returns `true` then a drag
   * sequence is started.
   * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
   * Function handling "drag" events. This function is called on "move" events
   * during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. The function may return `false` to prevent the
   * propagation of the event to other interactions in the map's interactions
   * chain.
   * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
   * Function handling "move" events. This function is called on "move" events.
   * This functions is also called during a drag sequence, so during a drag
   * sequence both the `handleDragEvent` function and this function are called.
   * If `handleDownEvent` is defined and it returns true this function will not
   * be called during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
   *  Function handling "up" events. If the function returns `false` then the
   * current drag sequence is stopped.
   * @property {function(boolean):boolean} [stopDown]
   * Should the down event be propagated to other interactions, or should be
   * stopped?
   */

  /**
   * @classdesc
   * Base class that calls user-defined functions on `down`, `move` and `up`
   * events. This class also manages "drag sequences".
   *
   * When the `handleDownEvent` user function returns `true` a drag sequence is
   * started. During a drag sequence the `handleDragEvent` user function is
   * called on `move` events. The drag sequence ends when the `handleUpEvent`
   * user function is called and returns `false`.
   * @api
   */
  class PointerInteraction extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super(
        /** @type {import("./Interaction.js").InteractionOptions} */ (options)
      );

      if (options.handleDownEvent) {
        this.handleDownEvent = options.handleDownEvent;
      }

      if (options.handleDragEvent) {
        this.handleDragEvent = options.handleDragEvent;
      }

      if (options.handleMoveEvent) {
        this.handleMoveEvent = options.handleMoveEvent;
      }

      if (options.handleUpEvent) {
        this.handleUpEvent = options.handleUpEvent;
      }

      if (options.stopDown) {
        this.stopDown = options.stopDown;
      }

      /**
       * @type {boolean}
       * @protected
       */
      this.handlingDownUpSequence = false;

      /**
       * @type {Array<PointerEvent>}
       * @protected
       */
      this.targetPointers = [];
    }

    /**
     * Returns the current number of pointers involved in the interaction,
     * e.g. `2` when two fingers are used.
     * @return {number} The number of pointers.
     * @api
     */
    getPointerCount() {
      return this.targetPointers.length;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    handleDownEvent(mapBrowserEvent) {
      return false;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    handleDragEvent(mapBrowserEvent) {}

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into
     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
     * detected.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    handleEvent(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent) {
        return true;
      }

      let stopEvent = false;
      this.updateTrackedPointers_(mapBrowserEvent);
      if (this.handlingDownUpSequence) {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
          this.handleDragEvent(mapBrowserEvent);
          // prevent page scrolling during dragging
          mapBrowserEvent.originalEvent.preventDefault();
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
          const handledUp = this.handleUpEvent(mapBrowserEvent);
          this.handlingDownUpSequence =
            handledUp && this.targetPointers.length > 0;
        }
      } else {
        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
          const handled = this.handleDownEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handled;
          stopEvent = this.stopDown(handled);
        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
          this.handleMoveEvent(mapBrowserEvent);
        }
      }
      return !stopEvent;
    }

    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @protected
     */
    handleMoveEvent(mapBrowserEvent) {}

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     * @protected
     */
    handleUpEvent(mapBrowserEvent) {
      return false;
    }

    /**
     * This function is used to determine if "down" events should be propagated
     * to other interactions or should be stopped.
     * @param {boolean} handled Was the event handled by the interaction?
     * @return {boolean} Should the `down` event be stopped?
     */
    stopDown(handled) {
      return handled;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @private
     */
    updateTrackedPointers_(mapBrowserEvent) {
      if (mapBrowserEvent.activePointers) {
        this.targetPointers = mapBrowserEvent.activePointers;
      }
    }
  }

  /**
   * @param {Array<PointerEvent>} pointerEvents List of events.
   * @return {{clientX: number, clientY: number}} Centroid pixel.
   */
  function centroid(pointerEvents) {
    const length = pointerEvents.length;
    let clientX = 0;
    let clientY = 0;
    for (let i = 0; i < length; i++) {
      clientX += pointerEvents[i].clientX;
      clientY += pointerEvents[i].clientY;
    }
    return {clientX: clientX / length, clientY: clientY / length};
  }

  var PointerInteraction$1 = PointerInteraction;

  /**
   * @module ol/events/condition
   */

  /**
   * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * `{boolean}`. If the condition is met, true should be returned.
   *
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
   */

  /**
   * Creates a condition function that passes when all provided conditions pass.
   * @param {...Condition} var_args Conditions to check.
   * @return {Condition} Condition function.
   */
  function all(var_args) {
    const conditions = arguments;
    /**
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} All conditions passed.
     */
    return function (event) {
      let pass = true;
      for (let i = 0, ii = conditions.length; i < ii; ++i) {
        pass = pass && conditions[i](event);
        if (!pass) {
          break;
        }
      }
      return pass;
    };
  }

  /**
   * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
   * additionally the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt key is pressed.
   * @api
   */
  const altKeyOnly = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return (
      originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      !originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
   * (e.g. when additionally the platform-modifier-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt and shift keys are pressed.
   * @api
   */
  const altShiftKeysOnly = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return (
      originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if the map has the focus. This condition requires a map target
   * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map has the focus.
   * @api
   */
  const focus = function (event) {
    const targetElement = event.map.getTargetElement();
    const activeElement = event.map.getOwnerDocument().activeElement;
    return targetElement.contains(activeElement);
  };

  /**
   * Return `true` if the map has the focus or no 'tabindex' attribute set.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map container has the focus or no 'tabindex' attribute.
   */
  const focusWithTabindex = function (event) {
    return event.map.getTargetElement().hasAttribute('tabindex')
      ? focus(event)
      : true;
  };

  /**
   * Return always true.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True.
   * @api
   */
  const always = TRUE;

  /**
   * Return `true` if the event is a `click` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `click` event.
   * @api
   */
  const click = function (mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.CLICK;
  };

  /**
   * Return `true` if the event has an "action"-producing mouse button.
   *
   * By definition, this includes left-click on windows/linux, and left-click
   * without the ctrl key on Macs.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} The result.
   */
  const mouseActionButton = function (mapBrowserEvent) {
    const originalEvent = /** @type {MouseEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);
  };

  /**
   * Return always false.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} False.
   * @api
   */
  const never = FALSE;

  /**
   * Return `true` if the browser event is a `pointermove` event, `false`
   * otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the browser event is a `pointermove` event.
   * @api
   */
  const pointerMove = function (mapBrowserEvent) {
    return mapBrowserEvent.type == 'pointermove';
  };

  /**
   * Return `true` if the event is a map `singleclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `singleclick` event.
   * @api
   */
  const singleClick = function (mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;
  };

  /**
   * Return `true` if the event is a map `dblclick` event, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event is a map `dblclick` event.
   * @api
   */
  const doubleClick = function (mapBrowserEvent) {
    return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;
  };

  /**
   * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
   * pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if there no modifier keys are pressed.
   * @api
   */
  const noModifierKeys = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return (
      !originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      !originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if only the platform-modifier-key (the meta-key on Mac,
   * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally
   * the shift-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the platform modifier key is pressed.
   * @api
   */
  const platformModifierKeyOnly = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return (
      !originalEvent.altKey &&
      (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&
      !originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
   * additionally the alt-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the shift key is pressed.
   * @api
   */
  const shiftKeyOnly = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    return (
      !originalEvent.altKey &&
      !(originalEvent.metaKey || originalEvent.ctrlKey) &&
      originalEvent.shiftKey
    );
  };

  /**
   * Return `true` if the target element is not editable, i.e. not an `input`,
   * `select`, or `textarea` element and no `contenteditable` attribute is
   * set or inherited, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if the target element is not editable.
   * @api
   */
  const targetNotEditable = function (mapBrowserEvent) {
    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (
      mapBrowserEvent.originalEvent
    );
    const tagName = /** @type {Element} */ (originalEvent.target).tagName;
    return (
      tagName !== 'INPUT' &&
      tagName !== 'SELECT' &&
      tagName !== 'TEXTAREA' &&
      // `isContentEditable` is only available on `HTMLElement`, but it may also be a
      // different type like `SVGElement`.
      // @ts-ignore
      !originalEvent.target.isContentEditable
    );
  };

  /**
   * Return `true` if the event originates from a mouse device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a mouse device.
   * @api
   */
  const mouseOnly = function (mapBrowserEvent) {
    const pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (
      mapBrowserEvent
    ).originalEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvent.pointerType == 'mouse';
  };

  /**
   * Return `true` if the event originates from a touchable device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a touchable device.
   * @api
   */
  const touchOnly = function (mapBrowserEvent) {
    const pointerEvt = /** @type {import("../MapBrowserEvent").default} */ (
      mapBrowserEvent
    ).originalEvent;
    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt.pointerType === 'touch';
  };

  /**
   * Return `true` if the event originates from a digital pen.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a digital pen.
   * @api
   */
  const penOnly = function (mapBrowserEvent) {
    const pointerEvt = /** @type {import("../MapBrowserEvent").default} */ (
      mapBrowserEvent
    ).originalEvent;
    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
    return pointerEvt.pointerType === 'pen';
  };

  /**
   * Return `true` if the event originates from a primary pointer in
   * contact with the surface or if the left mouse button is pressed.
   * See https://www.w3.org/TR/pointerevents/#button-states.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a primary pointer.
   * @api
   */
  const primaryAction = function (mapBrowserEvent) {
    const pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (
      mapBrowserEvent
    ).originalEvent;
    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
    return pointerEvent.isPrimary && pointerEvent.button === 0;
  };

  var nsEvents_condition = {
    __proto__: null,
    all: all,
    altKeyOnly: altKeyOnly,
    altShiftKeysOnly: altShiftKeysOnly,
    focus: focus,
    focusWithTabindex: focusWithTabindex,
    always: always,
    click: click,
    mouseActionButton: mouseActionButton,
    never: never,
    pointerMove: pointerMove,
    singleClick: singleClick,
    doubleClick: doubleClick,
    noModifierKeys: noModifierKeys,
    platformModifierKeyOnly: platformModifierKeyOnly,
    shiftKeyOnly: shiftKeyOnly,
    targetNotEditable: targetNotEditable,
    mouseOnly: mouseOnly,
    touchOnly: touchOnly,
    penOnly: penOnly,
    primaryAction: primaryAction
  };

  /**
   * @module ol/interaction/DragPan
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.
   * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
   * the interaction will only handle events when the map has the focus.
   * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
   */

  /**
   * @classdesc
   * Allows the user to pan the map by dragging the map.
   * @api
   */
  class DragPan extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super({
        stopDown: FALSE,
      });

      options = options ? options : {};

      /**
       * @private
       * @type {import("../Kinetic.js").default|undefined}
       */
      this.kinetic_ = options.kinetic;

      /**
       * @type {import("../pixel.js").Pixel}
       */
      this.lastCentroid = null;

      /**
       * @type {number}
       */
      this.lastPointersCount_;

      /**
       * @type {boolean}
       */
      this.panning_ = false;

      const condition = options.condition
        ? options.condition
        : all(noModifierKeys, primaryAction);

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.onFocusOnly
        ? all(focusWithTabindex, condition)
        : condition;

      /**
       * @private
       * @type {boolean}
       */
      this.noKinetic_ = false;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      const map = mapBrowserEvent.map;
      if (!this.panning_) {
        this.panning_ = true;
        map.getView().beginInteraction();
      }
      const targetPointers = this.targetPointers;
      const centroid$1 = map.getEventPixel(centroid(targetPointers));
      if (targetPointers.length == this.lastPointersCount_) {
        if (this.kinetic_) {
          this.kinetic_.update(centroid$1[0], centroid$1[1]);
        }
        if (this.lastCentroid) {
          const delta = [
            this.lastCentroid[0] - centroid$1[0],
            centroid$1[1] - this.lastCentroid[1],
          ];
          const map = mapBrowserEvent.map;
          const view = map.getView();
          scale$2(delta, view.getResolution());
          rotate$1(delta, view.getRotation());
          view.adjustCenterInternal(delta);
        }
      } else if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger down, tiny drag, second finger down
        this.kinetic_.begin();
      }
      this.lastCentroid = centroid$1;
      this.lastPointersCount_ = targetPointers.length;
      mapBrowserEvent.originalEvent.preventDefault();
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (this.targetPointers.length === 0) {
        if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
          const distance = this.kinetic_.getDistance();
          const angle = this.kinetic_.getAngle();
          const center = view.getCenterInternal();
          const centerpx = map.getPixelFromCoordinateInternal(center);
          const dest = map.getCoordinateFromPixelInternal([
            centerpx[0] - distance * Math.cos(angle),
            centerpx[1] - distance * Math.sin(angle),
          ]);
          view.animateInternal({
            center: view.getConstrainedCenter(dest),
            duration: 500,
            easing: easeOut,
          });
        }
        if (this.panning_) {
          this.panning_ = false;
          view.endInteraction();
        }
        return false;
      }
      if (this.kinetic_) {
        // reset so we don't overestimate the kinetic energy after
        // after one finger up, tiny drag, second finger up
        this.kinetic_.begin();
      }
      this.lastCentroid = null;
      return true;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        this.lastCentroid = null;
        // stop any current animation
        if (view.getAnimating()) {
          view.cancelAnimations();
        }
        if (this.kinetic_) {
          this.kinetic_.begin();
        }
        // No kinetic as soon as more than one pointer on the screen is
        // detected. This is to prevent nasty pans after pinch.
        this.noKinetic_ = this.targetPointers.length > 1;
        return true;
      }
      return false;
    }
  }

  var DragPan$1 = DragPan;

  /**
   * @module ol/interaction/DragRotate
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an
   * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.altShiftKeysOnly}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   */

  /**
   * @classdesc
   * Allows the user to rotate the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the alt and shift keys are held down.
   *
   * This interaction is only supported for mouse devices.
   * @api
   */
  class DragRotate extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        stopDown: FALSE,
      });

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : altShiftKeysOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }
      const size = map.getSize();
      const offset = mapBrowserEvent.pixel;
      const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
      if (this.lastAngle_ !== undefined) {
        const delta = theta - this.lastAngle_;
        view.adjustRotationInternal(-delta);
      }
      this.lastAngle_ = theta;
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      view.endInteraction(this.duration_);
      return false;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (
        mouseActionButton(mapBrowserEvent) &&
        this.condition_(mapBrowserEvent)
      ) {
        const map = mapBrowserEvent.map;
        map.getView().beginInteraction();
        this.lastAngle_ = undefined;
        return true;
      }
      return false;
    }
  }

  var DragRotate$1 = DragRotate;

  /**
   * @module ol/render/Box
   */

  class RenderBox extends Disposable$1 {
    /**
     * @param {string} className CSS class name.
     */
    constructor(className) {
      super();

      /**
       * @type {import("../geom/Polygon.js").default}
       * @private
       */
      this.geometry_ = null;

      /**
       * @type {HTMLDivElement}
       * @private
       */
      this.element_ = document.createElement('div');
      this.element_.style.position = 'absolute';
      this.element_.style.pointerEvents = 'auto';
      this.element_.className = 'ol-box ' + className;

      /**
       * @private
       * @type {import("../Map.js").default|null}
       */
      this.map_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../pixel.js").Pixel}
       */
      this.endPixel_ = null;
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.setMap(null);
    }

    /**
     * @private
     */
    render_() {
      const startPixel = this.startPixel_;
      const endPixel = this.endPixel_;
      const px = 'px';
      const style = this.element_.style;
      style.left = Math.min(startPixel[0], endPixel[0]) + px;
      style.top = Math.min(startPixel[1], endPixel[1]) + px;
      style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
      style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
    }

    /**
     * @param {import("../Map.js").default|null} map Map.
     */
    setMap(map) {
      if (this.map_) {
        this.map_.getOverlayContainer().removeChild(this.element_);
        const style = this.element_.style;
        style.left = 'inherit';
        style.top = 'inherit';
        style.width = 'inherit';
        style.height = 'inherit';
      }
      this.map_ = map;
      if (this.map_) {
        this.map_.getOverlayContainer().appendChild(this.element_);
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
     * @param {import("../pixel.js").Pixel} endPixel End pixel.
     */
    setPixels(startPixel, endPixel) {
      this.startPixel_ = startPixel;
      this.endPixel_ = endPixel;
      this.createOrUpdateGeometry();
      this.render_();
    }

    /**
     * Creates or updates the cached geometry.
     */
    createOrUpdateGeometry() {
      const startPixel = this.startPixel_;
      const endPixel = this.endPixel_;
      const pixels = [
        startPixel,
        [startPixel[0], endPixel[1]],
        endPixel,
        [endPixel[0], startPixel[1]],
      ];
      const coordinates = pixels.map(
        this.map_.getCoordinateFromPixelInternal,
        this.map_
      );
      // close the polygon
      coordinates[4] = coordinates[0].slice();
      if (!this.geometry_) {
        this.geometry_ = new Polygon$1([coordinates]);
      } else {
        this.geometry_.setCoordinates([coordinates]);
      }
    }

    /**
     * @return {import("../geom/Polygon.js").default} Geometry.
     */
    getGeometry() {
      return this.geometry_;
    }
  }

  var RenderBox$1 = RenderBox;

  /**
   * @module ol/interaction/DragBox
   */

  /**
   * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
   * true should be returned.
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link ol/events/condition~mouseActionButton}.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
   * `boxEndCondition` function.
   * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
   * Default is `true` if the area of the box is bigger than the `minArea` option.
   * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
   * before `boxend` is fired.
   */

  /**
   * @enum {string}
   */
  const DragBoxEventType = {
    /**
     * Triggered upon drag box start.
     * @event DragBoxEvent#boxstart
     * @api
     */
    BOXSTART: 'boxstart',

    /**
     * Triggered on drag when box is active.
     * @event DragBoxEvent#boxdrag
     * @api
     */
    BOXDRAG: 'boxdrag',

    /**
     * Triggered upon drag box end.
     * @event DragBoxEvent#boxend
     * @api
     */
    BOXEND: 'boxend',

    /**
     * Triggered upon drag box canceled.
     * @event DragBoxEvent#boxcancel
     * @api
     */
    BOXCANCEL: 'boxcancel',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
   * this type.
   */
  class DragBoxEvent extends BaseEvent {
    /**
     * @param {string} type The event type.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
     */
    constructor(type, coordinate, mapBrowserEvent) {
      super(type);

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

      /**
       * @const
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature
   */

  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the shift or other key is held down. This is used, for example,
   * for zooming to a specific area of the map
   * (see {@link module:ol/interaction/DragZoom~DragZoom} and
   * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).
   *
   * @fires DragBoxEvent
   * @api
   */
  class DragBox extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {DragBoxOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {DragBoxOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {DragBoxOnSignature<void>}
       */
      this.un;

      options = options ? options : {};

      /**
       * @type {import("../render/Box.js").default}
       * @private
       */
      this.box_ = new RenderBox$1(options.className || 'ol-dragbox');

      /**
       * @type {number}
       * @private
       */
      this.minArea_ = options.minArea !== undefined ? options.minArea : 64;

      if (options.onBoxEnd) {
        this.onBoxEnd = options.onBoxEnd;
      }

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.startPixel_ = null;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : mouseActionButton;

      /**
       * @private
       * @type {EndCondition}
       */
      this.boxEndCondition_ = options.boxEndCondition
        ? options.boxEndCondition
        : this.defaultBoxEndCondition;
    }

    /**
     * The default condition for determining whether the boxend event
     * should fire.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
     *     leading to the box end.
     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
     * @return {boolean} Whether or not the boxend condition should be fired.
     */
    defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
      const width = endPixel[0] - startPixel[0];
      const height = endPixel[1] - startPixel[1];
      return width * width + height * height >= this.minArea_;
    }

    /**
     * Returns geometry of last drawn box.
     * @return {import("../geom/Polygon.js").default} Geometry.
     * @api
     */
    getGeometry() {
      return this.box_.getGeometry();
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);

      this.dispatchEvent(
        new DragBoxEvent(
          DragBoxEventType.BOXDRAG,
          mapBrowserEvent.coordinate,
          mapBrowserEvent
        )
      );
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      this.box_.setMap(null);

      const completeBox = this.boxEndCondition_(
        mapBrowserEvent,
        this.startPixel_,
        mapBrowserEvent.pixel
      );
      if (completeBox) {
        this.onBoxEnd(mapBrowserEvent);
      }
      this.dispatchEvent(
        new DragBoxEvent(
          completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,
          mapBrowserEvent.coordinate,
          mapBrowserEvent
        )
      );
      return false;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.condition_(mapBrowserEvent)) {
        this.startPixel_ = mapBrowserEvent.pixel;
        this.box_.setMap(mapBrowserEvent.map);
        this.box_.setPixels(this.startPixel_, this.startPixel_);
        this.dispatchEvent(
          new DragBoxEvent(
            DragBoxEventType.BOXSTART,
            mapBrowserEvent.coordinate,
            mapBrowserEvent
          )
        );
        return true;
      }
      return false;
    }

    /**
     * Function to execute just before `onboxend` is fired
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */
    onBoxEnd(event) {}
  }

  var DragBox$1 = DragBox;

  /**
   * @module ol/interaction/DragZoom
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragzoom'] CSS class name for styling the
   * box.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.shiftKeyOnly}.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {boolean} [out=false] Use interaction for zooming out.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
   * `boxEndCondition` function.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when a key, shift by default, is held down.
   *
   * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
   * your custom one configured with `className`.
   * @api
   */
  class DragZoom extends DragBox$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const condition = options.condition ? options.condition : shiftKeyOnly;

      super({
        condition: condition,
        className: options.className || 'ol-dragzoom',
        minArea: options.minArea,
      });

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      /**
       * @private
       * @type {boolean}
       */
      this.out_ = options.out !== undefined ? options.out : false;
    }

    /**
     * Function to execute just before `onboxend` is fired
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */
    onBoxEnd(event) {
      const map = this.getMap();
      const view = /** @type {!import("../View.js").default} */ (map.getView());
      let geometry = this.getGeometry();

      if (this.out_) {
        const rotatedExtent = view.rotatedExtentForGeometry(geometry);
        const resolution = view.getResolutionForExtentInternal(rotatedExtent);
        const factor = view.getResolution() / resolution;
        geometry = geometry.clone();
        geometry.scale(factor * factor);
      }

      view.fitInternal(geometry, {
        duration: this.duration_,
        easing: easeOut,
      });
    }
  }

  var DragZoom$1 = DragZoom;

  /**
   * @module ol/events/KeyCode
   */

  /**
   * @enum {number}
   * @const
   */
  var KeyCode = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
  };

  /**
   * @module ol/interaction/KeyboardPan
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition.noModifierKeys} and
   * {@link module:ol/events/condition.targetNotEditable}.
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
   * press.
   */

  /**
   * @classdesc
   * Allows the user to pan the map using keyboard arrows.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
   * @api
   */
  class KeyboardPan extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options || {};

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultCondition_ = function (mapBrowserEvent) {
        return (
          noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)
        );
      };

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ =
        options.condition !== undefined
          ? options.condition
          : this.defaultCondition_;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;

      /**
       * @private
       * @type {number}
       */
      this.pixelDelta_ =
        options.pixelDelta !== undefined ? options.pixelDelta : 128;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
     * `KeyEvent`, and decides the direction to pan to (if an arrow key was
     * pressed).
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      let stopEvent = false;
      if (mapBrowserEvent.type == EventType.KEYDOWN) {
        const keyEvent = /** @type {KeyboardEvent} */ (
          mapBrowserEvent.originalEvent
        );
        const keyCode = keyEvent.keyCode;
        if (
          this.condition_(mapBrowserEvent) &&
          (keyCode == KeyCode.DOWN ||
            keyCode == KeyCode.LEFT ||
            keyCode == KeyCode.RIGHT ||
            keyCode == KeyCode.UP)
        ) {
          const map = mapBrowserEvent.map;
          const view = map.getView();
          const mapUnitsDelta = view.getResolution() * this.pixelDelta_;
          let deltaX = 0,
            deltaY = 0;
          if (keyCode == KeyCode.DOWN) {
            deltaY = -mapUnitsDelta;
          } else if (keyCode == KeyCode.LEFT) {
            deltaX = -mapUnitsDelta;
          } else if (keyCode == KeyCode.RIGHT) {
            deltaX = mapUnitsDelta;
          } else {
            deltaY = mapUnitsDelta;
          }
          const delta = [deltaX, deltaY];
          rotate$1(delta, view.getRotation());
          pan(view, delta, this.duration_);
          keyEvent.preventDefault();
          stopEvent = true;
        }
      }
      return !stopEvent;
    }
  }

  var KeyboardPan$1 = KeyboardPan;

  /**
   * @module ol/interaction/KeyboardZoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition.targetNotEditable}.
   * @property {number} [delta=1] The zoom level delta on each key press.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map using keyboard + and -.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
   * @api
   */
  class KeyboardZoom extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : targetNotEditable;

      /**
       * @private
       * @type {number}
       */
      this.delta_ = options.delta ? options.delta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 100;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a
     * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
     * key pressed was '+' or '-').
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      let stopEvent = false;
      if (
        mapBrowserEvent.type == EventType.KEYDOWN ||
        mapBrowserEvent.type == EventType.KEYPRESS
      ) {
        const keyEvent = /** @type {KeyboardEvent} */ (
          mapBrowserEvent.originalEvent
        );
        const key = keyEvent.key;
        if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {
          const map = mapBrowserEvent.map;
          const delta = key === '+' ? this.delta_ : -this.delta_;
          const view = map.getView();
          zoomByDelta(view, delta, undefined, this.duration_);
          keyEvent.preventDefault();
          stopEvent = true;
        }
      }
      return !stopEvent;
    }
  }

  var KeyboardZoom$1 = KeyboardZoom;

  /**
   * @module ol/interaction/MouseWheelZoom
   */

  /**
   * @typedef {'trackpad' | 'wheel'} Mode
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition.always}.
   * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
   * the interaction will only handle events when the map has the focus.
   * @property {number} [maxDelta=1] Maximum mouse wheel delta.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
   * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
   * location as the anchor. When set to `false`, zooming in and out will zoom to
   * the center of the screen instead of zooming on the mouse's location.
   * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
   * event will always animate to the closest zoom level after an interaction;
   * false means intermediary zoom levels are allowed.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map by scrolling the mouse wheel.
   * @api
   */
  class MouseWheelZoom extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super(
        /** @type {import("./Interaction.js").InteractionOptions} */ (options)
      );

      /**
       * @private
       * @type {number}
       */
      this.totalDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.lastDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;

      /**
       * @private
       * @type {number}
       */
      this.timeout_ = options.timeout !== undefined ? options.timeout : 80;

      /**
       * @private
       * @type {boolean}
       */
      this.useAnchor_ =
        options.useAnchor !== undefined ? options.useAnchor : true;

      /**
       * @private
       * @type {boolean}
       */
      this.constrainResolution_ =
        options.constrainResolution !== undefined
          ? options.constrainResolution
          : false;

      const condition = options.condition ? options.condition : always;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.onFocusOnly
        ? all(focusWithTabindex, condition)
        : condition;

      /**
       * @private
       * @type {?import("../coordinate.js").Coordinate}
       */
      this.lastAnchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.startTime_ = undefined;

      /**
       * @private
       * @type {?}
       */
      this.timeoutId_;

      /**
       * @private
       * @type {Mode|undefined}
       */
      this.mode_ = undefined;

      /**
       * Trackpad events separated by this delay will be considered separate
       * interactions.
       * @type {number}
       */
      this.trackpadEventGap_ = 400;

      /**
       * @type {?}
       */
      this.trackpadTimeoutId_;

      /**
       * The number of delta values per zoom level
       * @private
       * @type {number}
       */
      this.deltaPerZoom_ = 300;
    }

    /**
     * @private
     */
    endInteraction_() {
      this.trackpadTimeoutId_ = undefined;
      const map = this.getMap();
      if (!map) {
        return;
      }
      const view = map.getView();
      view.endInteraction(
        undefined,
        this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0,
        this.lastAnchor_
      );
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
     * zooms the map.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      const type = mapBrowserEvent.type;
      if (type !== EventType.WHEEL) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const wheelEvent = /** @type {WheelEvent} */ (
        mapBrowserEvent.originalEvent
      );
      wheelEvent.preventDefault();

      if (this.useAnchor_) {
        this.lastAnchor_ = mapBrowserEvent.coordinate;
      }

      // Delta normalisation inspired by
      // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
      let delta;
      if (mapBrowserEvent.type == EventType.WHEEL) {
        delta = wheelEvent.deltaY;
        if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
          delta /= DEVICE_PIXEL_RATIO;
        }
        if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
          delta *= 40;
        }
      }

      if (delta === 0) {
        return false;
      }
      this.lastDelta_ = delta;

      const now = Date.now();

      if (this.startTime_ === undefined) {
        this.startTime_ = now;
      }

      if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
        this.mode_ = Math.abs(delta) < 4 ? 'trackpad' : 'wheel';
      }

      const view = map.getView();
      if (
        this.mode_ === 'trackpad' &&
        !(view.getConstrainResolution() || this.constrainResolution_)
      ) {
        if (this.trackpadTimeoutId_) {
          clearTimeout(this.trackpadTimeoutId_);
        } else {
          if (view.getAnimating()) {
            view.cancelAnimations();
          }
          view.beginInteraction();
        }
        this.trackpadTimeoutId_ = setTimeout(
          this.endInteraction_.bind(this),
          this.timeout_
        );
        view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
        this.startTime_ = now;
        return false;
      }

      this.totalDelta_ += delta;

      const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);

      clearTimeout(this.timeoutId_);
      this.timeoutId_ = setTimeout(
        this.handleWheelZoom_.bind(this, map),
        timeLeft
      );

      return false;
    }

    /**
     * @private
     * @param {import("../Map.js").default} map Map.
     */
    handleWheelZoom_(map) {
      const view = map.getView();
      if (view.getAnimating()) {
        view.cancelAnimations();
      }
      let delta =
        -clamp(
          this.totalDelta_,
          -this.maxDelta_ * this.deltaPerZoom_,
          this.maxDelta_ * this.deltaPerZoom_
        ) / this.deltaPerZoom_;
      if (view.getConstrainResolution() || this.constrainResolution_) {
        // view has a zoom constraint, zoom by 1
        delta = delta ? (delta > 0 ? 1 : -1) : 0;
      }
      zoomByDelta(view, delta, this.lastAnchor_, this.duration_);

      this.mode_ = undefined;
      this.totalDelta_ = 0;
      this.lastAnchor_ = null;
      this.startTime_ = undefined;
      this.timeoutId_ = undefined;
    }

    /**
     * Enable or disable using the mouse's location as an anchor when zooming
     * @param {boolean} useAnchor true to zoom to the mouse's location, false
     * to zoom to the center of the map
     * @api
     */
    setMouseAnchor(useAnchor) {
      this.useAnchor_ = useAnchor;
      if (!useAnchor) {
        this.lastAnchor_ = null;
      }
    }
  }

  var MouseWheelZoom$1 = MouseWheelZoom;

  /**
   * @module ol/interaction/PinchRotate
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] The duration of the animation in
   * milliseconds.
   * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
   */

  /**
   * @classdesc
   * Allows the user to rotate the map by twisting with two fingers
   * on a touch screen.
   * @api
   */
  class PinchRotate extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.rotating_ = false;

      /**
       * @private
       * @type {number}
       */
      this.rotationDelta_ = 0.0;

      /**
       * @private
       * @type {number}
       */
      this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 250;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      let rotationDelta = 0.0;

      const touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];

      // angle between touches
      const angle = Math.atan2(
        touch1.clientY - touch0.clientY,
        touch1.clientX - touch0.clientX
      );

      if (this.lastAngle_ !== undefined) {
        const delta = angle - this.lastAngle_;
        this.rotationDelta_ += delta;
        if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {
          this.rotating_ = true;
        }
        rotationDelta = delta;
      }
      this.lastAngle_ = angle;

      const map = mapBrowserEvent.map;
      const view = map.getView();
      if (view.getConstraints().rotation === disable) {
        return;
      }

      // rotate anchor point.
      // FIXME: should be the intersection point between the lines:
      //     touch0,touch1 and previousTouch0,previousTouch1
      this.anchor_ = map.getCoordinateFromPixelInternal(
        map.getEventPixel(centroid(this.targetPointers))
      );

      // rotate
      if (this.rotating_) {
        map.render();
        view.adjustRotationInternal(rotationDelta, this.anchor_);
      }
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        view.endInteraction(this.duration_);
        return false;
      }
      return true;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        const map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastAngle_ = undefined;
        this.rotating_ = false;
        this.rotationDelta_ = 0.0;
        if (!this.handlingDownUpSequence) {
          map.getView().beginInteraction();
        }
        return true;
      }
      return false;
    }
  }

  var PinchRotate$1 = PinchRotate;

  /**
   * @module ol/interaction/PinchZoom
   */

  /**
   * @typedef {Object} Options
   * @property {number} [duration=400] Animation duration in milliseconds.
   */

  /**
   * @classdesc
   * Allows the user to zoom the map by pinching with two fingers
   * on a touch screen.
   * @api
   */
  class PinchZoom extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate}
       */
      this.anchor_ = null;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastDistance_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 1;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      let scaleDelta = 1.0;

      const touch0 = this.targetPointers[0];
      const touch1 = this.targetPointers[1];
      const dx = touch0.clientX - touch1.clientX;
      const dy = touch0.clientY - touch1.clientY;

      // distance between touches
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (this.lastDistance_ !== undefined) {
        scaleDelta = this.lastDistance_ / distance;
      }
      this.lastDistance_ = distance;

      const map = mapBrowserEvent.map;
      const view = map.getView();

      if (scaleDelta != 1.0) {
        this.lastScaleDelta_ = scaleDelta;
      }

      // scale anchor point.
      this.anchor_ = map.getCoordinateFromPixelInternal(
        map.getEventPixel(centroid(this.targetPointers))
      );

      // scale, bypass the resolution constraint
      map.render();
      view.adjustResolutionInternal(scaleDelta, this.anchor_);
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      if (this.targetPointers.length < 2) {
        const map = mapBrowserEvent.map;
        const view = map.getView();
        const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
        view.endInteraction(this.duration_, direction);
        return false;
      }
      return true;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      if (this.targetPointers.length >= 2) {
        const map = mapBrowserEvent.map;
        this.anchor_ = null;
        this.lastDistance_ = undefined;
        this.lastScaleDelta_ = 1;
        if (!this.handlingDownUpSequence) {
          map.getView().beginInteraction();
        }
        return true;
      }
      return false;
    }
  }

  var PinchZoom$1 = PinchZoom;

  /**
   * @module ol/interaction/defaults
   */

  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
   * desired.
   * @property {boolean} [onFocusOnly=false] Interact only when the map has the
   * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
   * useful when page scroll is desired for maps that do not have the browser's
   * focus.
   * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
   * desired.
   * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
   * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
   * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
   * @property {boolean} [dragPan=true] Whether drag pan is desired.
   * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
   * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
   * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
   * @property {number} [zoomDuration] Duration of the zoom animation in
   * milliseconds.
   */

  /**
   * Set of interactions included in maps by default. Specific interactions can be
   * excluded by setting the appropriate option to false in the constructor
   * options, but the order of the interactions is fixed.  If you want to specify
   * a different order for interactions, you will need to create your own
   * {@link module:ol/interaction/Interaction~Interaction} instances and insert
   * them into a {@link module:ol/Collection~Collection} in the order you want
   * before creating your {@link module:ol/Map~Map} instance. Changing the order can
   * be of interest if the event propagation needs to be stopped at a point.
   * The default set of interactions, in sequence, is:
   * * {@link module:ol/interaction/DragRotate~DragRotate}
   * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
   * * {@link module:ol/interaction/DragPan~DragPan}
   * * {@link module:ol/interaction/PinchRotate~PinchRotate}
   * * {@link module:ol/interaction/PinchZoom~PinchZoom}
   * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
   * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
   * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
   * * {@link module:ol/interaction/DragZoom~DragZoom}
   *
   * @param {DefaultsOptions} [options] Defaults options.
   * @return {Collection<import("./Interaction.js").default>}
   * A collection of interactions to be used with the {@link module:ol/Map~Map}
   * constructor's `interactions` option.
   * @api
   */
  function defaults(options) {
    options = options ? options : {};

    /** @type {Collection<import("./Interaction.js").default>} */
    const interactions = new Collection$1();

    const kinetic = new Kinetic$1(-0.005, 0.05, 100);

    const altShiftDragRotate =
      options.altShiftDragRotate !== undefined
        ? options.altShiftDragRotate
        : true;
    if (altShiftDragRotate) {
      interactions.push(new DragRotate$1());
    }

    const doubleClickZoom =
      options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
    if (doubleClickZoom) {
      interactions.push(
        new DoubleClickZoom$1({
          delta: options.zoomDelta,
          duration: options.zoomDuration,
        })
      );
    }

    const dragPan = options.dragPan !== undefined ? options.dragPan : true;
    if (dragPan) {
      interactions.push(
        new DragPan$1({
          onFocusOnly: options.onFocusOnly,
          kinetic: kinetic,
        })
      );
    }

    const pinchRotate =
      options.pinchRotate !== undefined ? options.pinchRotate : true;
    if (pinchRotate) {
      interactions.push(new PinchRotate$1());
    }

    const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
    if (pinchZoom) {
      interactions.push(
        new PinchZoom$1({
          duration: options.zoomDuration,
        })
      );
    }

    const keyboard = options.keyboard !== undefined ? options.keyboard : true;
    if (keyboard) {
      interactions.push(new KeyboardPan$1());
      interactions.push(
        new KeyboardZoom$1({
          delta: options.zoomDelta,
          duration: options.zoomDuration,
        })
      );
    }

    const mouseWheelZoom =
      options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
    if (mouseWheelZoom) {
      interactions.push(
        new MouseWheelZoom$1({
          onFocusOnly: options.onFocusOnly,
          duration: options.zoomDuration,
        })
      );
    }

    const shiftDragZoom =
      options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
    if (shiftDragZoom) {
      interactions.push(
        new DragZoom$1({
          duration: options.zoomDuration,
        })
      );
    }

    return interactions;
  }

  /**
   * @module ol/Map
   */

  /**
   * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
   * be used in applications.
   * @typedef {Object} FrameState
   * @property {number} pixelRatio The pixel ratio of the frame.
   * @property {number} time The time when rendering of the frame was requested.
   * @property {import("./View.js").State} viewState The state of the current view.
   * @property {boolean} animate Animate.
   * @property {import("./transform.js").Transform} coordinateToPixelTransform CoordinateToPixelTransform.
   * @property {import("rbush").default} declutterTree DeclutterTree.
   * @property {null|import("./extent.js").Extent} extent Extent.
   * @property {import("./extent.js").Extent} [nextExtent] Next extent during an animation series.
   * @property {number} index Index.
   * @property {Array<import("./layer/Layer.js").State>} layerStatesArray LayerStatesArray.
   * @property {number} layerIndex LayerIndex.
   * @property {import("./transform.js").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.
   * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.
   * @property {import("./size.js").Size} size Size.
   * @property {TileQueue} tileQueue TileQueue.
   * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.
   * @property {Array<number>} viewHints ViewHints.
   * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.
   * @property {string} mapId The id of the map.
   * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.
   */

  /**
   * @typedef {function(Map, ?FrameState): any} PostRenderFunction
   */

  /**
   * @typedef {Object} AtPixelOptions
   * @property {undefined|function(import("./layer/Layer.js").default<import("./source/Source").default>): boolean} [layerFilter] Layer filter
   * function. The filter function will receive one argument, the
   * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.
   * Only layers which are visible and for which this function returns `true`
   * will be tested for features. By default, all visible layers will be tested.
   * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels
   * inside the radius around the given position will be checked for features.
   * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of
   *   +/- 1 world width. Works only if a projection is used that can be wrapped.
   */

  /**
   * @typedef {Object} MapOptionsInternal
   * @property {Collection<import("./control/Control.js").default>} [controls] Controls.
   * @property {Collection<import("./interaction/Interaction.js").default>} [interactions] Interactions.
   * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.
   * @property {Collection<import("./Overlay.js").default>} overlays Overlays.
   * @property {Object<string, *>} values Values.
   */

  /**
   * @typedef {import("./ObjectEventType").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *    import("./Observable").OnSignature<MapObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *    import("./Observable").OnSignature<import("./MapBrowserEventType").Types, import("./MapBrowserEvent").default, Return> &
   *    import("./Observable").OnSignature<import("./MapEventType").Types, import("./MapEvent").default, Return> &
   *    import("./Observable").OnSignature<import("./render/EventType").MapRenderEventTypes, import("./render/Event").default, Return> &
   *    import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|MapObjectEventTypes|
   *      import("./MapBrowserEventType").Types|import("./MapEventType").Types|
   *      import("./render/EventType").MapRenderEventTypes, Return>} MapEventHandler
   */

  /**
   * Object literal with config options for the map.
   * @typedef {Object} MapOptions
   * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
   * Controls initially added to the map. If not specified,
   * {@link module:ol/control/defaults.defaults} is used.
   * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
   * physical pixels and device-independent pixels (dips) on the device.
   * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
   * Interactions that are initially added to the map. If not specified,
   * {@link module:ol/interaction/defaults.defaults} is used.
   * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
   * listen to keyboard events on. This determines when the `KeyboardPan` and
   * `KeyboardZoom` interactions trigger. For example, if this option is set to
   * `document` the keyboard interactions will always trigger. If this option is
   * not specified, the element the library listens to keyboard events on is the
   * map target (i.e. the user-provided div for the map). If this is not
   * `document`, the target element needs to be focused for key events to be
   * emitted, requiring that the target element has a `tabindex` attribute.
   * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
   * Layers. If this is not defined, a map with no layers will be rendered. Note
   * that layers are rendered in the order supplied, so if you want, for example,
   * a vector layer to appear on top of a tile layer, it must come after the tile
   * layer.
   * @property {number} [maxTilesLoading=16] Maximum number tiles to load
   * simultaneously.
   * @property {number} [moveTolerance=1] The minimum distance in pixels the
   * cursor must move to be detected as a map move event instead of a click.
   * Increasing this value can make it easier to click on the map.
   * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
   * Overlays initially added to the map. By default, no overlays are added.
   * @property {HTMLElement|string} [target] The container for the map, either the
   * element itself or the `id` of the element. If not specified at construction
   * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
   * rendered. If passed by element, the container can be in a secondary document.
   * **Note:** CSS `transform` support for the target element is limited to `scale`.
   * @property {View|Promise<import("./View.js").ViewOptions>} [view] The map's view.  No layer sources will be
   * fetched unless this is specified at construction time or through
   * {@link module:ol/Map~Map#setView}.
   */

  /**
   * @param {import("./layer/Base.js").default} layer Layer.
   */
  function removeLayerMapProperty(layer) {
    if (layer instanceof Layer$1) {
      layer.setMapInternal(null);
      return;
    }
    if (layer instanceof LayerGroup$1) {
      layer.getLayers().forEach(removeLayerMapProperty);
    }
  }

  /**
   * @param {import("./layer/Base.js").default} layer Layer.
   * @param {Map} map Map.
   */
  function setLayerMapProperty(layer, map) {
    if (layer instanceof Layer$1) {
      layer.setMapInternal(map);
      return;
    }
    if (layer instanceof LayerGroup$1) {
      const layers = layer.getLayers().getArray();
      for (let i = 0, ii = layers.length; i < ii; ++i) {
        setLayerMapProperty(layers[i], map);
      }
    }
  }

  /**
   * @classdesc
   * The map is the core component of OpenLayers. For a map to render, a view,
   * one or more layers, and a target container are needed:
   *
   *     import Map from 'ol/Map.js';
   *     import View from 'ol/View.js';
   *     import TileLayer from 'ol/layer/Tile.js';
   *     import OSM from 'ol/source/OSM.js';
   *
   *     const map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1,
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM(),
   *         }),
   *       ],
   *       target: 'map',
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}
   * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the
   * options or added with `addLayer` can be groups, which can contain further
   * groups, and so on.
   *
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires import("./render/Event.js").default#precompose
   * @fires import("./render/Event.js").default#postcompose
   * @fires import("./render/Event.js").default#rendercomplete
   * @api
   */
  class Map$1 extends olObject {
    /**
     * @param {MapOptions} [options] Map options.
     */
    constructor(options) {
      super();

      options = options || {};

      /***
       * @type {MapEventHandler<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {MapEventHandler<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {MapEventHandler<void>}
       */
      this.un;

      const optionsInternal = createOptionsInternal(options);

      /**
       * @private
       * @type {boolean|undefined}
       */
      this.renderComplete_;

      /**
       * @private
       * @type {boolean}
       */
      this.loaded_ = true;

      /** @private */
      this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);

      /**
       * @type {number}
       * @private
       */
      this.maxTilesLoading_ =
        options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ =
        options.pixelRatio !== undefined
          ? options.pixelRatio
          : DEVICE_PIXEL_RATIO;

      /**
       * @private
       * @type {*}
       */
      this.postRenderTimeoutHandle_;

      /**
       * @private
       * @type {number|undefined}
       */
      this.animationDelayKey_;

      /**
       * @private
       */
      this.animationDelay_ = this.animationDelay_.bind(this);

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.coordinateToPixelTransform_ = create$3();

      /**
       * @private
       * @type {import("./transform.js").Transform}
       */
      this.pixelToCoordinateTransform_ = create$3();

      /**
       * @private
       * @type {number}
       */
      this.frameIndex_ = 0;

      /**
       * @private
       * @type {?FrameState}
       */
      this.frameState_ = null;

      /**
       * The extent at the previous 'moveend' event.
       * @private
       * @type {import("./extent.js").Extent}
       */
      this.previousExtent_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewPropertyListenerKey_ = null;

      /**
       * @private
       * @type {?import("./events.js").EventsKey}
       */
      this.viewChangeListenerKey_ = null;

      /**
       * @private
       * @type {?Array<import("./events.js").EventsKey>}
       */
      this.layerGroupPropertyListenerKeys_ = null;

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.viewport_ = document.createElement('div');
      this.viewport_.className =
        'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
      this.viewport_.style.position = 'relative';
      this.viewport_.style.overflow = 'hidden';
      this.viewport_.style.width = '100%';
      this.viewport_.style.height = '100%';

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainer_ = document.createElement('div');
      this.overlayContainer_.style.position = 'absolute';
      this.overlayContainer_.style.zIndex = '0';
      this.overlayContainer_.style.width = '100%';
      this.overlayContainer_.style.height = '100%';
      this.overlayContainer_.style.pointerEvents = 'none';
      this.overlayContainer_.className = 'ol-overlaycontainer';
      this.viewport_.appendChild(this.overlayContainer_);

      /**
       * @private
       * @type {!HTMLElement}
       */
      this.overlayContainerStopEvent_ = document.createElement('div');
      this.overlayContainerStopEvent_.style.position = 'absolute';
      this.overlayContainerStopEvent_.style.zIndex = '0';
      this.overlayContainerStopEvent_.style.width = '100%';
      this.overlayContainerStopEvent_.style.height = '100%';
      this.overlayContainerStopEvent_.style.pointerEvents = 'none';
      this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
      this.viewport_.appendChild(this.overlayContainerStopEvent_);

      /**
       * @private
       * @type {MapBrowserEventHandler}
       */
      this.mapBrowserEventHandler_ = null;

      /**
       * @private
       * @type {number}
       */
      this.moveTolerance_ = options.moveTolerance;

      /**
       * @private
       * @type {HTMLElement|Document}
       */
      this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;

      /**
       * @private
       * @type {?Array<import("./events.js").EventsKey>}
       */
      this.targetChangeHandlerKeys_ = null;

      /**
       * @private
       * @type {HTMLElement|null}
       */
      this.targetElement_ = null;

      /**
       * @type {ResizeObserver}
       */
      this.resizeObserver_ = new ResizeObserver(() => this.updateSize());

      /**
       * @type {Collection<import("./control/Control.js").default>}
       * @protected
       */
      this.controls = optionsInternal.controls || defaults$1();

      /**
       * @type {Collection<import("./interaction/Interaction.js").default>}
       * @protected
       */
      this.interactions =
        optionsInternal.interactions ||
        defaults({
          onFocusOnly: true,
        });

      /**
       * @type {Collection<import("./Overlay.js").default>}
       * @private
       */
      this.overlays_ = optionsInternal.overlays;

      /**
       * A lookup of overlays by id.
       * @private
       * @type {Object<string, import("./Overlay.js").default>}
       */
      this.overlayIdIndex_ = {};

      /**
       * @type {import("./renderer/Map.js").default|null}
       * @private
       */
      this.renderer_ = null;

      /**
       * @private
       * @type {!Array<PostRenderFunction>}
       */
      this.postRenderFunctions_ = [];

      /**
       * @private
       * @type {TileQueue}
       */
      this.tileQueue_ = new TileQueue$1(
        this.getTilePriority.bind(this),
        this.handleTileChange_.bind(this)
      );

      this.addChangeListener(
        MapProperty.LAYERGROUP,
        this.handleLayerGroupChanged_
      );
      this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);
      this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);
      this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);

      // setProperties will trigger the rendering of the map if the map
      // is "defined" already.
      this.setProperties(optionsInternal.values);

      const map = this;
      if (options.view && !(options.view instanceof View$1)) {
        options.view.then(function (viewOptions) {
          map.setView(new View$1(viewOptions));
        });
      }

      this.controls.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent
         */
        (event) => {
          event.element.setMap(this);
        }
      );

      this.controls.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./control/Control.js").default>} event CollectionEvent.
         */
        (event) => {
          event.element.setMap(null);
        }
      );

      this.interactions.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
         */
        (event) => {
          event.element.setMap(this);
        }
      );

      this.interactions.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./interaction/Interaction.js").default>} event CollectionEvent.
         */
        (event) => {
          event.element.setMap(null);
        }
      );

      this.overlays_.addEventListener(
        CollectionEventType.ADD,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
         */
        (event) => {
          this.addOverlayInternal_(event.element);
        }
      );

      this.overlays_.addEventListener(
        CollectionEventType.REMOVE,
        /**
         * @param {import("./Collection.js").CollectionEvent<import("./Overlay.js").default>} event CollectionEvent.
         */
        (event) => {
          const id = event.element.getId();
          if (id !== undefined) {
            delete this.overlayIdIndex_[id.toString()];
          }
          event.element.setMap(null);
        }
      );

      this.controls.forEach(
        /**
         * @param {import("./control/Control.js").default} control Control.
         */
        (control) => {
          control.setMap(this);
        }
      );

      this.interactions.forEach(
        /**
         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
         */
        (interaction) => {
          interaction.setMap(this);
        }
      );

      this.overlays_.forEach(this.addOverlayInternal_.bind(this));
    }

    /**
     * Add the given control to the map.
     * @param {import("./control/Control.js").default} control Control.
     * @api
     */
    addControl(control) {
      this.getControls().push(control);
    }

    /**
     * Add the given interaction to the map. If you want to add an interaction
     * at another point of the collection use `getInteractions()` and the methods
     * available on {@link module:ol/Collection~Collection}. This can be used to
     * stop the event propagation from the handleEvent function. The interactions
     * get to handle the events in the reverse order of this collection.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
     * @api
     */
    addInteraction(interaction) {
      this.getInteractions().push(interaction);
    }

    /**
     * Adds the given layer to the top of this map. If you want to add a layer
     * elsewhere in the stack, use `getLayers()` and the methods available on
     * {@link module:ol/Collection~Collection}.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @api
     */
    addLayer(layer) {
      const layers = this.getLayerGroup().getLayers();
      layers.push(layer);
    }

    /**
     * @param {import("./layer/Group.js").GroupEvent} event The layer add event.
     * @private
     */
    handleLayerAdd_(event) {
      setLayerMapProperty(event.layer, this);
    }

    /**
     * Add the given overlay to the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @api
     */
    addOverlay(overlay) {
      this.getOverlays().push(overlay);
    }

    /**
     * This deals with map's overlay collection changes.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @private
     */
    addOverlayInternal_(overlay) {
      const id = overlay.getId();
      if (id !== undefined) {
        this.overlayIdIndex_[id.toString()] = overlay;
      }
      overlay.setMap(this);
    }

    /**
     *
     * Clean up.
     */
    disposeInternal() {
      this.controls.clear();
      this.interactions.clear();
      this.overlays_.clear();
      this.resizeObserver_.disconnect();
      this.setTarget(null);
      super.disposeInternal();
    }

    /**
     * Detect features that intersect a pixel on the viewport, and execute a
     * callback with each intersecting feature. Layers included in the detection can
     * be configured through the `layerFilter` option in `options`.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {function(import("./Feature.js").FeatureLike, import("./layer/Layer.js").default<import("./source/Source").default>, import("./geom/SimpleGeometry.js").default): T} callback Feature callback. The callback will be
     *     called with two arguments. The first argument is one
     *     {@link module:ol/Feature~Feature feature} or
     *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is
     *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for
     *     unmanaged layers. To stop detection, callback functions can return a
     *     truthy value.
     * @param {AtPixelOptions} [options] Optional options.
     * @return {T|undefined} Callback result, i.e. the return value of last
     * callback execution, or the first truthy callback return value.
     * @template T
     * @api
     */
    forEachFeatureAtPixel(pixel, callback, options) {
      if (!this.frameState_ || !this.renderer_) {
        return;
      }
      const coordinate = this.getCoordinateFromPixelInternal(pixel);
      options = options !== undefined ? options : {};
      const hitTolerance =
        options.hitTolerance !== undefined ? options.hitTolerance : 0;
      const layerFilter =
        options.layerFilter !== undefined ? options.layerFilter : TRUE;
      const checkWrapped = options.checkWrapped !== false;
      return this.renderer_.forEachFeatureAtCoordinate(
        coordinate,
        this.frameState_,
        hitTolerance,
        checkWrapped,
        callback,
        null,
        layerFilter,
        null
      );
    }

    /**
     * Get all features that intersect a pixel on the viewport.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions} [options] Optional options.
     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
     * an empty array if none were found.
     * @api
     */
    getFeaturesAtPixel(pixel, options) {
      const features = [];
      this.forEachFeatureAtPixel(
        pixel,
        function (feature) {
          features.push(feature);
        },
        options
      );
      return features;
    }

    /**
     * Get all layers from all layer groups.
     * @return {Array<import("./layer/Layer.js").default>} Layers.
     * @api
     */
    getAllLayers() {
      const layers = [];
      function addLayersFrom(layerGroup) {
        layerGroup.forEach(function (layer) {
          if (layer instanceof LayerGroup$1) {
            addLayersFrom(layer.getLayers());
          } else {
            layers.push(layer);
          }
        });
      }
      addLayersFrom(this.getLayers());
      return layers;
    }

    /**
     * Detect if features intersect a pixel on the viewport. Layers included in the
     * detection can be configured through the `layerFilter` option.
     * @param {import("./pixel.js").Pixel} pixel Pixel.
     * @param {AtPixelOptions} [options] Optional options.
     * @return {boolean} Is there a feature at the given pixel?
     * @api
     */
    hasFeatureAtPixel(pixel, options) {
      if (!this.frameState_ || !this.renderer_) {
        return false;
      }
      const coordinate = this.getCoordinateFromPixelInternal(pixel);
      options = options !== undefined ? options : {};
      const layerFilter =
        options.layerFilter !== undefined ? options.layerFilter : TRUE;
      const hitTolerance =
        options.hitTolerance !== undefined ? options.hitTolerance : 0;
      const checkWrapped = options.checkWrapped !== false;
      return this.renderer_.hasFeatureAtCoordinate(
        coordinate,
        this.frameState_,
        hitTolerance,
        checkWrapped,
        layerFilter,
        null
      );
    }

    /**
     * Returns the coordinate in user projection for a browser event.
     * @param {MouseEvent} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    getEventCoordinate(event) {
      return this.getCoordinateFromPixel(this.getEventPixel(event));
    }

    /**
     * Returns the coordinate in view projection for a browser event.
     * @param {MouseEvent} event Event.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     */
    getEventCoordinateInternal(event) {
      return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
    }

    /**
     * Returns the map pixel position for a browser event relative to the viewport.
     * @param {UIEvent|{clientX: number, clientY: number}} event Event.
     * @return {import("./pixel.js").Pixel} Pixel.
     * @api
     */
    getEventPixel(event) {
      const viewport = this.viewport_;
      const viewportPosition = viewport.getBoundingClientRect();
      const viewportSize = this.getSize();
      const scaleX = viewportPosition.width / viewportSize[0];
      const scaleY = viewportPosition.height / viewportSize[1];
      const eventPosition =
        //FIXME Are we really calling this with a TouchEvent anywhere?
        'changedTouches' in event
          ? /** @type {TouchEvent} */ (event).changedTouches[0]
          : /** @type {MouseEvent} */ (event);

      return [
        (eventPosition.clientX - viewportPosition.left) / scaleX,
        (eventPosition.clientY - viewportPosition.top) / scaleY,
      ];
    }

    /**
     * Get the target in which this map is rendered.
     * Note that this returns what is entered as an option or in setTarget:
     * if that was an element, it returns an element; if a string, it returns that.
     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
     *     map is rendered in.
     * @observable
     * @api
     */
    getTarget() {
      return /** @type {HTMLElement|string|undefined} */ (
        this.get(MapProperty.TARGET)
      );
    }

    /**
     * Get the DOM element into which this map is rendered. In contrast to
     * `getTarget` this method always return an `Element`, or `null` if the
     * map has no target.
     * @return {HTMLElement} The element that the map is rendered in.
     * @api
     */
    getTargetElement() {
      return this.targetElement_;
    }

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * user projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     * @api
     */
    getCoordinateFromPixel(pixel) {
      return toUserCoordinate(
        this.getCoordinateFromPixelInternal(pixel),
        this.getView().getProjection()
      );
    }

    /**
     * Get the coordinate for a given pixel.  This returns a coordinate in the
     * map view projection.
     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
     */
    getCoordinateFromPixelInternal(pixel) {
      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      }
      return apply(frameState.pixelToCoordinateTransform, pixel.slice());
    }

    /**
     * Get the map controls. Modifying this collection changes the controls
     * associated with the map.
     * @return {Collection<import("./control/Control.js").default>} Controls.
     * @api
     */
    getControls() {
      return this.controls;
    }

    /**
     * Get the map overlays. Modifying this collection changes the overlays
     * associated with the map.
     * @return {Collection<import("./Overlay.js").default>} Overlays.
     * @api
     */
    getOverlays() {
      return this.overlays_;
    }

    /**
     * Get an overlay by its identifier (the value returned by overlay.getId()).
     * Note that the index treats string and numeric identifiers as the same. So
     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
     * @param {string|number} id Overlay identifier.
     * @return {import("./Overlay.js").default} Overlay.
     * @api
     */
    getOverlayById(id) {
      const overlay = this.overlayIdIndex_[id.toString()];
      return overlay !== undefined ? overlay : null;
    }

    /**
     * Get the map interactions. Modifying this collection changes the interactions
     * associated with the map.
     *
     * Interactions are used for e.g. pan, zoom and rotate.
     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
     * @api
     */
    getInteractions() {
      return this.interactions;
    }

    /**
     * Get the layergroup associated with this map.
     * @return {LayerGroup} A layer group containing the layers in this map.
     * @observable
     * @api
     */
    getLayerGroup() {
      return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));
    }

    /**
     * Clear any existing layers and add layers to the map.
     * @param {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>} layers The layers to be added to the map.
     * @api
     */
    setLayers(layers) {
      const group = this.getLayerGroup();
      if (layers instanceof Collection$1) {
        group.setLayers(layers);
        return;
      }

      const collection = group.getLayers();
      collection.clear();
      collection.extend(layers);
    }

    /**
     * Get the collection of layers associated with this map.
     * @return {!Collection<import("./layer/Base.js").default>} Layers.
     * @api
     */
    getLayers() {
      const layers = this.getLayerGroup().getLayers();
      return layers;
    }

    /**
     * @return {boolean} Layers have sources that are still loading.
     */
    getLoadingOrNotReady() {
      const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
        const state = layerStatesArray[i];
        if (!state.visible) {
          continue;
        }
        const renderer = state.layer.getRenderer();
        if (renderer && !renderer.ready) {
          return true;
        }
        const source = state.layer.getSource();
        if (source && source.loading) {
          return true;
        }
      }
      return false;
    }

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the user
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     * @api
     */
    getPixelFromCoordinate(coordinate) {
      const viewCoordinate = fromUserCoordinate(
        coordinate,
        this.getView().getProjection()
      );
      return this.getPixelFromCoordinateInternal(viewCoordinate);
    }

    /**
     * Get the pixel for a coordinate.  This takes a coordinate in the map view
     * projection and returns the corresponding pixel.
     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
     */
    getPixelFromCoordinateInternal(coordinate) {
      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      }
      return apply(
        frameState.coordinateToPixelTransform,
        coordinate.slice(0, 2)
      );
    }

    /**
     * Get the map renderer.
     * @return {import("./renderer/Map.js").default|null} Renderer
     */
    getRenderer() {
      return this.renderer_;
    }

    /**
     * Get the size of this map.
     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    getSize() {
      return /** @type {import("./size.js").Size|undefined} */ (
        this.get(MapProperty.SIZE)
      );
    }

    /**
     * Get the view associated with this map. A view manages properties such as
     * center and resolution.
     * @return {View} The view that controls this map.
     * @observable
     * @api
     */
    getView() {
      return /** @type {View} */ (this.get(MapProperty.VIEW));
    }

    /**
     * Get the element that serves as the map viewport.
     * @return {HTMLElement} Viewport.
     * @api
     */
    getViewport() {
      return this.viewport_;
    }

    /**
     * Get the element that serves as the container for overlays.  Elements added to
     * this container will let mousedown and touchstart events through to the map,
     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
     * events.
     * @return {!HTMLElement} The map's overlay container.
     */
    getOverlayContainer() {
      return this.overlayContainer_;
    }

    /**
     * Get the element that serves as a container for overlays that don't allow
     * event propagation. Elements added to this container won't let mousedown and
     * touchstart events through to the map, so clicks and gestures on an overlay
     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     * @return {!HTMLElement} The map's overlay container that stops events.
     */
    getOverlayContainerStopEvent() {
      return this.overlayContainerStopEvent_;
    }

    /**
     * @return {!Document} The document where the map is displayed.
     */
    getOwnerDocument() {
      const targetElement = this.getTargetElement();
      return targetElement ? targetElement.ownerDocument : document;
    }

    /**
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {
      return getTilePriority(
        this.frameState_,
        tile,
        tileSourceKey,
        tileCenter,
        tileResolution
      );
    }

    /**
     * @param {UIEvent} browserEvent Browser event.
     * @param {string} [type] Type.
     */
    handleBrowserEvent(browserEvent, type) {
      type = type || browserEvent.type;
      const mapBrowserEvent = new MapBrowserEvent$1(type, this, browserEvent);
      this.handleMapBrowserEvent(mapBrowserEvent);
    }

    /**
     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
     */
    handleMapBrowserEvent(mapBrowserEvent) {
      if (!this.frameState_) {
        // With no view defined, we cannot translate pixels into geographical
        // coordinates so interactions cannot be used.
        return;
      }
      const originalEvent = /** @type {PointerEvent} */ (
        mapBrowserEvent.originalEvent
      );
      const eventType = originalEvent.type;
      if (
        eventType === PointerEventType.POINTERDOWN ||
        eventType === EventType.WHEEL ||
        eventType === EventType.KEYDOWN
      ) {
        const doc = this.getOwnerDocument();
        const rootNode = this.viewport_.getRootNode
          ? this.viewport_.getRootNode()
          : doc;
        const target = /** @type {Node} */ (originalEvent.target);
        if (
          // Abort if the target is a child of the container for elements whose events are not meant
          // to be handled by map interactions.
          this.overlayContainerStopEvent_.contains(target) ||
          // Abort if the event target is a child of the container that is no longer in the page.
          // It's possible for the target to no longer be in the page if it has been removed in an
          // event listener, this might happen in a Control that recreates it's content based on
          // user interaction either manually or via a render in something like https://reactjs.org/
          !(rootNode === doc ? doc.documentElement : rootNode).contains(target)
        ) {
          return;
        }
      }
      mapBrowserEvent.frameState = this.frameState_;
      if (this.dispatchEvent(mapBrowserEvent) !== false) {
        const interactionsArray = this.getInteractions().getArray().slice();
        for (let i = interactionsArray.length - 1; i >= 0; i--) {
          const interaction = interactionsArray[i];
          if (
            interaction.getMap() !== this ||
            !interaction.getActive() ||
            !this.getTargetElement()
          ) {
            continue;
          }
          const cont = interaction.handleEvent(mapBrowserEvent);
          if (!cont || mapBrowserEvent.propagationStopped) {
            break;
          }
        }
      }
    }

    /**
     * @protected
     */
    handlePostRender() {
      const frameState = this.frameState_;

      // Manage the tile queue
      // Image loads are expensive and a limited resource, so try to use them
      // efficiently:
      // * When the view is static we allow a large number of parallel tile loads
      //   to complete the frame as quickly as possible.
      // * When animating or interacting, image loads can cause janks, so we reduce
      //   the maximum number of loads per frame and limit the number of parallel
      //   tile loads to remain reactive to view changes and to reduce the chance of
      //   loading tiles that will quickly disappear from view.
      const tileQueue = this.tileQueue_;
      if (!tileQueue.isEmpty()) {
        let maxTotalLoading = this.maxTilesLoading_;
        let maxNewLoads = maxTotalLoading;
        if (frameState) {
          const hints = frameState.viewHints;
          if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
            const lowOnFrameBudget = Date.now() - frameState.time > 8;
            maxTotalLoading = lowOnFrameBudget ? 0 : 8;
            maxNewLoads = lowOnFrameBudget ? 0 : 2;
          }
        }
        if (tileQueue.getTilesLoading() < maxTotalLoading) {
          tileQueue.reprioritize(); // FIXME only call if view has changed
          tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
        }
      }

      if (frameState && this.renderer_ && !frameState.animate) {
        if (this.renderComplete_ === true) {
          if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {
            this.renderer_.dispatchRenderEvent(
              RenderEventType.RENDERCOMPLETE,
              frameState
            );
          }
          if (this.loaded_ === false) {
            this.loaded_ = true;
            this.dispatchEvent(
              new MapEvent$1(MapEventType.LOADEND, this, frameState)
            );
          }
        } else if (this.loaded_ === true) {
          this.loaded_ = false;
          this.dispatchEvent(
            new MapEvent$1(MapEventType.LOADSTART, this, frameState)
          );
        }
      }

      const postRenderFunctions = this.postRenderFunctions_;
      for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
        postRenderFunctions[i](this, frameState);
      }
      postRenderFunctions.length = 0;
    }

    /**
     * @private
     */
    handleSizeChanged_() {
      if (this.getView() && !this.getView().getAnimating()) {
        this.getView().resolveConstraints(0);
      }

      this.render();
    }

    /**
     * @private
     */
    handleTargetChanged_() {
      if (this.mapBrowserEventHandler_) {
        for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {
          unlistenByKey(this.targetChangeHandlerKeys_[i]);
        }
        this.targetChangeHandlerKeys_ = null;
        this.viewport_.removeEventListener(
          EventType.CONTEXTMENU,
          this.boundHandleBrowserEvent_
        );
        this.viewport_.removeEventListener(
          EventType.WHEEL,
          this.boundHandleBrowserEvent_
        );
        this.mapBrowserEventHandler_.dispose();
        this.mapBrowserEventHandler_ = null;
        removeNode$1(this.viewport_);
      }

      if (this.targetElement_) {
        this.resizeObserver_.unobserve(this.targetElement_);
        const rootNode = this.targetElement_.getRootNode();
        if (rootNode instanceof ShadowRoot) {
          this.resizeObserver_.unobserve(rootNode.host);
        }
      }

      // target may be undefined, null, a string or an Element.
      // If it's a string we convert it to an Element before proceeding.
      // If it's not now an Element we remove the viewport from the DOM.
      // If it's an Element we append the viewport element to it.

      const target = this.getTarget();
      const targetElement =
        typeof target === 'string' ? document.getElementById(target) : target;
      this.targetElement_ = targetElement;
      if (!targetElement) {
        if (this.renderer_) {
          clearTimeout(this.postRenderTimeoutHandle_);
          this.postRenderTimeoutHandle_ = undefined;
          this.postRenderFunctions_.length = 0;
          this.renderer_.dispose();
          this.renderer_ = null;
        }
        if (this.animationDelayKey_) {
          cancelAnimationFrame(this.animationDelayKey_);
          this.animationDelayKey_ = undefined;
        }
      } else {
        targetElement.appendChild(this.viewport_);
        if (!this.renderer_) {
          this.renderer_ = new CompositeMapRenderer$1(this);
        }

        this.mapBrowserEventHandler_ = new MapBrowserEventHandler$1(
          this,
          this.moveTolerance_
        );
        for (const key in MapBrowserEventType) {
          this.mapBrowserEventHandler_.addEventListener(
            MapBrowserEventType[key],
            this.handleMapBrowserEvent.bind(this)
          );
        }
        this.viewport_.addEventListener(
          EventType.CONTEXTMENU,
          this.boundHandleBrowserEvent_,
          false
        );
        this.viewport_.addEventListener(
          EventType.WHEEL,
          this.boundHandleBrowserEvent_,
          PASSIVE_EVENT_LISTENERS ? {passive: false} : false
        );

        const keyboardEventTarget = !this.keyboardEventTarget_
          ? targetElement
          : this.keyboardEventTarget_;
        this.targetChangeHandlerKeys_ = [
          listen(
            keyboardEventTarget,
            EventType.KEYDOWN,
            this.handleBrowserEvent,
            this
          ),
          listen(
            keyboardEventTarget,
            EventType.KEYPRESS,
            this.handleBrowserEvent,
            this
          ),
        ];
        const rootNode = targetElement.getRootNode();
        if (rootNode instanceof ShadowRoot) {
          this.resizeObserver_.observe(rootNode.host);
        }
        this.resizeObserver_.observe(targetElement);
      }

      this.updateSize();
      // updateSize calls setSize, so no need to call this.render
      // ourselves here.
    }

    /**
     * @private
     */
    handleTileChange_() {
      this.render();
    }

    /**
     * @private
     */
    handleViewPropertyChanged_() {
      this.render();
    }

    /**
     * @private
     */
    handleViewChanged_() {
      if (this.viewPropertyListenerKey_) {
        unlistenByKey(this.viewPropertyListenerKey_);
        this.viewPropertyListenerKey_ = null;
      }
      if (this.viewChangeListenerKey_) {
        unlistenByKey(this.viewChangeListenerKey_);
        this.viewChangeListenerKey_ = null;
      }
      const view = this.getView();
      if (view) {
        this.updateViewportSize_();

        this.viewPropertyListenerKey_ = listen(
          view,
          ObjectEventType.PROPERTYCHANGE,
          this.handleViewPropertyChanged_,
          this
        );
        this.viewChangeListenerKey_ = listen(
          view,
          EventType.CHANGE,
          this.handleViewPropertyChanged_,
          this
        );

        view.resolveConstraints(0);
      }
      this.render();
    }

    /**
     * @private
     */
    handleLayerGroupChanged_() {
      if (this.layerGroupPropertyListenerKeys_) {
        this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
        this.layerGroupPropertyListenerKeys_ = null;
      }
      const layerGroup = this.getLayerGroup();
      if (layerGroup) {
        this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));
        this.layerGroupPropertyListenerKeys_ = [
          listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),
          listen(layerGroup, EventType.CHANGE, this.render, this),
          listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),
          listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),
        ];
      }
      this.render();
    }

    /**
     * @return {boolean} Is rendered.
     */
    isRendered() {
      return !!this.frameState_;
    }

    /**
     * @private
     */
    animationDelay_() {
      this.animationDelayKey_ = undefined;
      this.renderFrame_(Date.now());
    }

    /**
     * Requests an immediate render in a synchronous manner.
     * @api
     */
    renderSync() {
      if (this.animationDelayKey_) {
        cancelAnimationFrame(this.animationDelayKey_);
      }
      this.animationDelay_();
    }

    /**
     * Redraws all text after new fonts have loaded
     */
    redrawText() {
      const layerStates = this.getLayerGroup().getLayerStatesArray();
      for (let i = 0, ii = layerStates.length; i < ii; ++i) {
        const layer = layerStates[i].layer;
        if (layer.hasRenderer()) {
          layer.getRenderer().handleFontsChanged();
        }
      }
    }

    /**
     * Request a map rendering (at the next animation frame).
     * @api
     */
    render() {
      if (this.renderer_ && this.animationDelayKey_ === undefined) {
        this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
      }
    }

    /**
     * Remove the given control from the map.
     * @param {import("./control/Control.js").default} control Control.
     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
     *     if the control was not found).
     * @api
     */
    removeControl(control) {
      return this.getControls().remove(control);
    }

    /**
     * Remove the given interaction from the map.
     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
     *     undefined if the interaction was not found).
     * @api
     */
    removeInteraction(interaction) {
      return this.getInteractions().remove(interaction);
    }

    /**
     * Removes the given layer from the map.
     * @param {import("./layer/Base.js").default} layer Layer.
     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
     *     layer was not found).
     * @api
     */
    removeLayer(layer) {
      const layers = this.getLayerGroup().getLayers();
      return layers.remove(layer);
    }

    /**
     * @param {import("./layer/Group.js").GroupEvent} event The layer remove event.
     * @private
     */
    handleLayerRemove_(event) {
      removeLayerMapProperty(event.layer);
    }

    /**
     * Remove the given overlay from the map.
     * @param {import("./Overlay.js").default} overlay Overlay.
     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
     *     if the overlay was not found).
     * @api
     */
    removeOverlay(overlay) {
      return this.getOverlays().remove(overlay);
    }

    /**
     * @param {number} time Time.
     * @private
     */
    renderFrame_(time) {
      const size = this.getSize();
      const view = this.getView();
      const previousFrameState = this.frameState_;
      /** @type {?FrameState} */
      let frameState = null;
      if (size !== undefined && hasArea(size) && view && view.isDef()) {
        const viewHints = view.getHints(
          this.frameState_ ? this.frameState_.viewHints : undefined
        );
        const viewState = view.getState();
        frameState = {
          animate: false,
          coordinateToPixelTransform: this.coordinateToPixelTransform_,
          declutterTree: null,
          extent: getForViewAndSize(
            viewState.center,
            viewState.resolution,
            viewState.rotation,
            size
          ),
          index: this.frameIndex_++,
          layerIndex: 0,
          layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
          pixelRatio: this.pixelRatio_,
          pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
          postRenderFunctions: [],
          size: size,
          tileQueue: this.tileQueue_,
          time: time,
          usedTiles: {},
          viewState: viewState,
          viewHints: viewHints,
          wantedTiles: {},
          mapId: getUid(this),
          renderTargets: {},
        };
        if (viewState.nextCenter && viewState.nextResolution) {
          const rotation = isNaN(viewState.nextRotation)
            ? viewState.rotation
            : viewState.nextRotation;

          frameState.nextExtent = getForViewAndSize(
            viewState.nextCenter,
            viewState.nextResolution,
            rotation,
            size
          );
        }
      }

      this.frameState_ = frameState;
      this.renderer_.renderFrame(frameState);

      if (frameState) {
        if (frameState.animate) {
          this.render();
        }
        Array.prototype.push.apply(
          this.postRenderFunctions_,
          frameState.postRenderFunctions
        );

        if (previousFrameState) {
          const moveStart =
            !this.previousExtent_ ||
            (!isEmpty(this.previousExtent_) &&
              !equals$2(frameState.extent, this.previousExtent_));
          if (moveStart) {
            this.dispatchEvent(
              new MapEvent$1(MapEventType.MOVESTART, this, previousFrameState)
            );
            this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
          }
        }

        const idle =
          this.previousExtent_ &&
          !frameState.viewHints[ViewHint.ANIMATING] &&
          !frameState.viewHints[ViewHint.INTERACTING] &&
          !equals$2(frameState.extent, this.previousExtent_);

        if (idle) {
          this.dispatchEvent(
            new MapEvent$1(MapEventType.MOVEEND, this, frameState)
          );
          clone(frameState.extent, this.previousExtent_);
        }
      }

      this.dispatchEvent(new MapEvent$1(MapEventType.POSTRENDER, this, frameState));

      this.renderComplete_ =
        this.hasListener(MapEventType.LOADSTART) ||
        this.hasListener(MapEventType.LOADEND) ||
        this.hasListener(RenderEventType.RENDERCOMPLETE)
          ? !this.tileQueue_.getTilesLoading() &&
            !this.tileQueue_.getCount() &&
            !this.getLoadingOrNotReady()
          : undefined;

      if (!this.postRenderTimeoutHandle_) {
        this.postRenderTimeoutHandle_ = setTimeout(() => {
          this.postRenderTimeoutHandle_ = undefined;
          this.handlePostRender();
        }, 0);
      }
    }

    /**
     * Sets the layergroup of this map.
     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
     * @observable
     * @api
     */
    setLayerGroup(layerGroup) {
      const oldLayerGroup = this.getLayerGroup();
      if (oldLayerGroup) {
        this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));
      }
      this.set(MapProperty.LAYERGROUP, layerGroup);
    }

    /**
     * Set the size of this map.
     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
     * @observable
     * @api
     */
    setSize(size) {
      this.set(MapProperty.SIZE, size);
    }

    /**
     * Set the target element to render this map into.
     * @param {HTMLElement|string} [target] The Element or id of the Element
     *     that the map is rendered in.
     * @observable
     * @api
     */
    setTarget(target) {
      this.set(MapProperty.TARGET, target);
    }

    /**
     * Set the view for this map.
     * @param {View|Promise<import("./View.js").ViewOptions>} view The view that controls this map.
     * It is also possible to pass a promise that resolves to options for constructing a view.  This
     * alternative allows view properties to be resolved by sources or other components that load
     * view-related metadata.
     * @observable
     * @api
     */
    setView(view) {
      if (!view || view instanceof View$1) {
        this.set(MapProperty.VIEW, view);
        return;
      }
      this.set(MapProperty.VIEW, new View$1());

      const map = this;
      view.then(function (viewOptions) {
        map.setView(new View$1(viewOptions));
      });
    }

    /**
     * Force a recalculation of the map viewport size.  This should be called when
     * third-party code changes the size of the map viewport.
     * @api
     */
    updateSize() {
      const targetElement = this.getTargetElement();

      let size = undefined;
      if (targetElement) {
        const computedStyle = getComputedStyle(targetElement);
        const width =
          targetElement.offsetWidth -
          parseFloat(computedStyle['borderLeftWidth']) -
          parseFloat(computedStyle['paddingLeft']) -
          parseFloat(computedStyle['paddingRight']) -
          parseFloat(computedStyle['borderRightWidth']);
        const height =
          targetElement.offsetHeight -
          parseFloat(computedStyle['borderTopWidth']) -
          parseFloat(computedStyle['paddingTop']) -
          parseFloat(computedStyle['paddingBottom']) -
          parseFloat(computedStyle['borderBottomWidth']);
        if (!isNaN(width) && !isNaN(height)) {
          size = [width, height];
          if (
            !hasArea(size) &&
            !!(
              targetElement.offsetWidth ||
              targetElement.offsetHeight ||
              targetElement.getClientRects().length
            )
          ) {
            warn(
              "No map visible because the map container's width or height are 0."
            );
          }
        }
      }

      const oldSize = this.getSize();
      if (size && (!oldSize || !equals$3(size, oldSize))) {
        this.setSize(size);
        this.updateViewportSize_();
      }
    }

    /**
     * Recomputes the viewport size and save it on the view object (if any)
     * @private
     */
    updateViewportSize_() {
      const view = this.getView();
      if (view) {
        let size = undefined;
        const computedStyle = getComputedStyle(this.viewport_);
        if (computedStyle.width && computedStyle.height) {
          size = [
            parseInt(computedStyle.width, 10),
            parseInt(computedStyle.height, 10),
          ];
        }
        view.setViewportSize(size);
      }
    }
  }

  /**
   * @param {MapOptions} options Map options.
   * @return {MapOptionsInternal} Internal map options.
   */
  function createOptionsInternal(options) {
    /**
     * @type {HTMLElement|Document}
     */
    let keyboardEventTarget = null;
    if (options.keyboardEventTarget !== undefined) {
      keyboardEventTarget =
        typeof options.keyboardEventTarget === 'string'
          ? document.getElementById(options.keyboardEventTarget)
          : options.keyboardEventTarget;
    }

    /**
     * @type {Object<string, *>}
     */
    const values = {};

    const layerGroup =
      options.layers &&
      typeof (/** @type {?} */ (options.layers).getLayers) === 'function'
        ? /** @type {LayerGroup} */ (options.layers)
        : new LayerGroup$1({
            layers:
              /** @type {Collection<import("./layer/Base.js").default>|Array<import("./layer/Base.js").default>} */ (
                options.layers
              ),
          });
    values[MapProperty.LAYERGROUP] = layerGroup;

    values[MapProperty.TARGET] = options.target;

    values[MapProperty.VIEW] =
      options.view instanceof View$1 ? options.view : new View$1();

    /** @type {Collection<import("./control/Control.js").default>} */
    let controls;
    if (options.controls !== undefined) {
      if (Array.isArray(options.controls)) {
        controls = new Collection$1(options.controls.slice());
      } else {
        assert(
          typeof (/** @type {?} */ (options.controls).getArray) === 'function',
          47
        ); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
        controls = options.controls;
      }
    }

    /** @type {Collection<import("./interaction/Interaction").default>} */
    let interactions;
    if (options.interactions !== undefined) {
      if (Array.isArray(options.interactions)) {
        interactions = new Collection$1(options.interactions.slice());
      } else {
        assert(
          typeof (/** @type {?} */ (options.interactions).getArray) ===
            'function',
          48
        ); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
        interactions = options.interactions;
      }
    }

    /** @type {Collection<import("./Overlay.js").default>} */
    let overlays;
    if (options.overlays !== undefined) {
      if (Array.isArray(options.overlays)) {
        overlays = new Collection$1(options.overlays.slice());
      } else {
        assert(
          typeof (/** @type {?} */ (options.overlays).getArray) === 'function',
          49
        ); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
        overlays = options.overlays;
      }
    } else {
      overlays = new Collection$1();
    }

    return {
      controls: controls,
      interactions: interactions,
      keyboardEventTarget: keyboardEventTarget,
      overlays: overlays,
      values: values,
    };
  }
  var Map$2 = Map$1;

  /**
   * @module ol/Overlay
   */

  /**
   * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning
   * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, or `'top-right'`.
   */

  /**
   * @typedef {Object} Options
   * @property {number|string} [id] Set the overlay id. The overlay id can be used
   * with the {@link module:ol/Map~Map#getOverlayById} method.
   * @property {HTMLElement} [element] The overlay element.
   * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
   * the overlay. The first element in the
   * array is the horizontal offset. A positive value shifts the overlay right.
   * The second element in the array is the vertical offset. A positive value
   * shifts the overlay down.
   * @property {import("./coordinate.js").Coordinate} [position] The overlay position
   * in map projection.
   * @property {Positioning} [positioning='top-left'] Defines how
   * the overlay is actually positioned with respect to its `position` property.
   * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
   * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
   * `'top-center'`, and `'top-right'`.
   * @property {boolean} [stopEvent=true] Whether event propagation to the map
   * viewport should be stopped. If `true` the overlay is placed in the same
   * container as that of the controls (CSS class name
   * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
   * with CSS class name specified by the `className` property.
   * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
   * in the overlay container, or appended. If the overlay is placed in the same
   * container as that of the controls (see the `stopEvent` option) you will
   * probably set `insertFirst` to `true` so the overlay is displayed below the
   * controls.
   * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling
   * `setPosition`, so that the overlay is entirely visible in the current viewport.
   * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
   * name.
   */

  /**
   * @typedef {Object} PanOptions
   * @property {number} [duration=1000] The duration of the animation in
   * milliseconds.
   * @property {function(number):number} [easing] The easing function to use. Can
   * be one from {@link module:ol/easing} or a custom function.
   * Default is {@link module:ol/easing.inAndOut}.
   */

  /**
   * @typedef {Object} PanIntoViewOptions
   * @property {PanOptions} [animation={}] The animation parameters for the pan
   * @property {number} [margin=20] The margin (in pixels) between the
   * overlay and the borders of the map when panning into view.
   */

  /**
   * @enum {string}
   * @protected
   */
  const Property$1 = {
    ELEMENT: 'element',
    MAP: 'map',
    OFFSET: 'offset',
    POSITION: 'position',
    POSITIONING: 'positioning',
  };

  /**
   * @typedef {import("./ObjectEventType").Types|'change:element'|'change:map'|'change:offset'|'change:position'|
   *   'change:positioning'} OverlayObjectEventTypes
   */

  /***
   * @template Return
   * @typedef {import("./Observable").OnSignature<import("./Observable").EventTypes, import("./events/Event.js").default, Return> &
   *   import("./Observable").OnSignature<OverlayObjectEventTypes, import("./Object").ObjectEvent, Return> &
   *   import("./Observable").CombinedOnSignature<import("./Observable").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature
   */

  /**
   * @classdesc
   * An element to be displayed over the map and attached to a single map
   * location.  Like {@link module:ol/control/Control~Control}, Overlays are
   * visible widgets. Unlike Controls, they are not in a fixed position on the
   * screen, but are tied to a geographical coordinate, so panning the map will
   * move an Overlay but not a Control.
   *
   * Example:
   *
   *     import Overlay from 'ol/Overlay.js';
   *
   *     // ...
   *     const popup = new Overlay({
   *       element: document.getElementById('popup'),
   *     });
   *     popup.setPosition(coordinate);
   *     map.addOverlay(popup);
   *
   * @api
   */
  class Overlay extends olObject {
    /**
     * @param {Options} options Overlay options.
     */
    constructor(options) {
      super();

      /***
       * @type {OverlayOnSignature<import("./events").EventsKey>}
       */
      this.on;

      /***
       * @type {OverlayOnSignature<import("./events").EventsKey>}
       */
      this.once;

      /***
       * @type {OverlayOnSignature<void>}
       */
      this.un;

      /**
       * @protected
       * @type {Options}
       */
      this.options = options;

      /**
       * @protected
       * @type {number|string|undefined}
       */
      this.id = options.id;

      /**
       * @protected
       * @type {boolean}
       */
      this.insertFirst =
        options.insertFirst !== undefined ? options.insertFirst : true;

      /**
       * @protected
       * @type {boolean}
       */
      this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;

      /**
       * @protected
       * @type {HTMLElement}
       */
      this.element = document.createElement('div');
      this.element.className =
        options.className !== undefined
          ? options.className
          : 'ol-overlay-container ' + CLASS_SELECTABLE;
      this.element.style.position = 'absolute';
      this.element.style.pointerEvents = 'auto';

      /**
       * @protected
       * @type {PanIntoViewOptions|undefined}
       */
      this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;

      /**
       * @protected
       * @type {{transform_: string,
       *         visible: boolean}}
       */
      this.rendered = {
        transform_: '',
        visible: true,
      };

      /**
       * @protected
       * @type {?import("./events.js").EventsKey}
       */
      this.mapPostrenderListenerKey = null;

      this.addChangeListener(Property$1.ELEMENT, this.handleElementChanged);
      this.addChangeListener(Property$1.MAP, this.handleMapChanged);
      this.addChangeListener(Property$1.OFFSET, this.handleOffsetChanged);
      this.addChangeListener(Property$1.POSITION, this.handlePositionChanged);
      this.addChangeListener(Property$1.POSITIONING, this.handlePositioningChanged);

      if (options.element !== undefined) {
        this.setElement(options.element);
      }

      this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);

      this.setPositioning(options.positioning || 'top-left');

      if (options.position !== undefined) {
        this.setPosition(options.position);
      }
    }

    /**
     * Get the DOM element of this overlay.
     * @return {HTMLElement|undefined} The Element containing the overlay.
     * @observable
     * @api
     */
    getElement() {
      return /** @type {HTMLElement|undefined} */ (this.get(Property$1.ELEMENT));
    }

    /**
     * Get the overlay identifier which is set on constructor.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id;
    }

    /**
     * Get the map associated with this overlay.
     * @return {import("./Map.js").default|null} The map that the
     * overlay is part of.
     * @observable
     * @api
     */
    getMap() {
      return /** @type {import("./Map.js").default|null} */ (
        this.get(Property$1.MAP) || null
      );
    }

    /**
     * Get the offset of this overlay.
     * @return {Array<number>} The offset.
     * @observable
     * @api
     */
    getOffset() {
      return /** @type {Array<number>} */ (this.get(Property$1.OFFSET));
    }

    /**
     * Get the current position of this overlay.
     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
     *     anchored at.
     * @observable
     * @api
     */
    getPosition() {
      return /** @type {import("./coordinate.js").Coordinate|undefined} */ (
        this.get(Property$1.POSITION)
      );
    }

    /**
     * Get the current positioning of this overlay.
     * @return {Positioning} How the overlay is positioned
     *     relative to its point on the map.
     * @observable
     * @api
     */
    getPositioning() {
      return /** @type {Positioning} */ (this.get(Property$1.POSITIONING));
    }

    /**
     * @protected
     */
    handleElementChanged() {
      removeChildren(this.element);
      const element = this.getElement();
      if (element) {
        this.element.appendChild(element);
      }
    }

    /**
     * @protected
     */
    handleMapChanged() {
      if (this.mapPostrenderListenerKey) {
        removeNode$1(this.element);
        unlistenByKey(this.mapPostrenderListenerKey);
        this.mapPostrenderListenerKey = null;
      }
      const map = this.getMap();
      if (map) {
        this.mapPostrenderListenerKey = listen(
          map,
          MapEventType.POSTRENDER,
          this.render,
          this
        );
        this.updatePixelPosition();
        const container = this.stopEvent
          ? map.getOverlayContainerStopEvent()
          : map.getOverlayContainer();
        if (this.insertFirst) {
          container.insertBefore(this.element, container.childNodes[0] || null);
        } else {
          container.appendChild(this.element);
        }
        this.performAutoPan();
      }
    }

    /**
     * @protected
     */
    render() {
      this.updatePixelPosition();
    }

    /**
     * @protected
     */
    handleOffsetChanged() {
      this.updatePixelPosition();
    }

    /**
     * @protected
     */
    handlePositionChanged() {
      this.updatePixelPosition();
      this.performAutoPan();
    }

    /**
     * @protected
     */
    handlePositioningChanged() {
      this.updatePixelPosition();
    }

    /**
     * Set the DOM element to be associated with this overlay.
     * @param {HTMLElement|undefined} element The Element containing the overlay.
     * @observable
     * @api
     */
    setElement(element) {
      this.set(Property$1.ELEMENT, element);
    }

    /**
     * Set the map to be associated with this overlay.
     * @param {import("./Map.js").default|null} map The map that the
     * overlay is part of. Pass `null` to just remove the overlay from the current map.
     * @observable
     * @api
     */
    setMap(map) {
      this.set(Property$1.MAP, map);
    }

    /**
     * Set the offset for this overlay.
     * @param {Array<number>} offset Offset.
     * @observable
     * @api
     */
    setOffset(offset) {
      this.set(Property$1.OFFSET, offset);
    }

    /**
     * Set the position for this overlay. If the position is `undefined` the
     * overlay is hidden.
     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
     *     is anchored at.
     * @observable
     * @api
     */
    setPosition(position) {
      this.set(Property$1.POSITION, position);
    }

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary) using the configured autoPan parameters
     * @protected
     */
    performAutoPan() {
      if (this.autoPan) {
        this.panIntoView(this.autoPan);
      }
    }

    /**
     * Pan the map so that the overlay is entirely visible in the current viewport
     * (if necessary).
     * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action
     * @api
     */
    panIntoView(panIntoViewOptions) {
      const map = this.getMap();

      if (!map || !map.getTargetElement() || !this.get(Property$1.POSITION)) {
        return;
      }

      const mapRect = this.getRect(map.getTargetElement(), map.getSize());
      const element = this.getElement();
      const overlayRect = this.getRect(element, [
        outerWidth(element),
        outerHeight(element),
      ]);

      panIntoViewOptions = panIntoViewOptions || {};

      const myMargin =
        panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;
      if (!containsExtent(mapRect, overlayRect)) {
        // the overlay is not completely inside the viewport, so pan the map
        const offsetLeft = overlayRect[0] - mapRect[0];
        const offsetRight = mapRect[2] - overlayRect[2];
        const offsetTop = overlayRect[1] - mapRect[1];
        const offsetBottom = mapRect[3] - overlayRect[3];

        const delta = [0, 0];
        if (offsetLeft < 0) {
          // move map to the left
          delta[0] = offsetLeft - myMargin;
        } else if (offsetRight < 0) {
          // move map to the right
          delta[0] = Math.abs(offsetRight) + myMargin;
        }
        if (offsetTop < 0) {
          // move map up
          delta[1] = offsetTop - myMargin;
        } else if (offsetBottom < 0) {
          // move map down
          delta[1] = Math.abs(offsetBottom) + myMargin;
        }

        if (delta[0] !== 0 || delta[1] !== 0) {
          const center = /** @type {import("./coordinate.js").Coordinate} */ (
            map.getView().getCenterInternal()
          );
          const centerPx = map.getPixelFromCoordinateInternal(center);
          if (!centerPx) {
            return;
          }
          const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];

          const panOptions = panIntoViewOptions.animation || {};
          map.getView().animateInternal({
            center: map.getCoordinateFromPixelInternal(newCenterPx),
            duration: panOptions.duration,
            easing: panOptions.easing,
          });
        }
      }
    }

    /**
     * Get the extent of an element relative to the document
     * @param {HTMLElement} element The element.
     * @param {import("./size.js").Size} size The size of the element.
     * @return {import("./extent.js").Extent} The extent.
     * @protected
     */
    getRect(element, size) {
      const box = element.getBoundingClientRect();
      const offsetX = box.left + window.pageXOffset;
      const offsetY = box.top + window.pageYOffset;
      return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];
    }

    /**
     * Set the positioning for this overlay.
     * @param {Positioning} positioning how the overlay is
     *     positioned relative to its point on the map.
     * @observable
     * @api
     */
    setPositioning(positioning) {
      this.set(Property$1.POSITIONING, positioning);
    }

    /**
     * Modify the visibility of the element.
     * @param {boolean} visible Element visibility.
     * @protected
     */
    setVisible(visible) {
      if (this.rendered.visible !== visible) {
        this.element.style.display = visible ? '' : 'none';
        this.rendered.visible = visible;
      }
    }

    /**
     * Update pixel position.
     * @protected
     */
    updatePixelPosition() {
      const map = this.getMap();
      const position = this.getPosition();
      if (!map || !map.isRendered() || !position) {
        this.setVisible(false);
        return;
      }

      const pixel = map.getPixelFromCoordinate(position);
      const mapSize = map.getSize();
      this.updateRenderedPosition(pixel, mapSize);
    }

    /**
     * @param {import("./pixel.js").Pixel} pixel The pixel location.
     * @param {import("./size.js").Size|undefined} mapSize The map size.
     * @protected
     */
    updateRenderedPosition(pixel, mapSize) {
      const style = this.element.style;
      const offset = this.getOffset();

      const positioning = this.getPositioning();

      this.setVisible(true);

      const x = Math.round(pixel[0] + offset[0]) + 'px';
      const y = Math.round(pixel[1] + offset[1]) + 'px';
      let posX = '0%';
      let posY = '0%';
      if (
        positioning == 'bottom-right' ||
        positioning == 'center-right' ||
        positioning == 'top-right'
      ) {
        posX = '-100%';
      } else if (
        positioning == 'bottom-center' ||
        positioning == 'center-center' ||
        positioning == 'top-center'
      ) {
        posX = '-50%';
      }
      if (
        positioning == 'bottom-left' ||
        positioning == 'bottom-center' ||
        positioning == 'bottom-right'
      ) {
        posY = '-100%';
      } else if (
        positioning == 'center-left' ||
        positioning == 'center-center' ||
        positioning == 'center-right'
      ) {
        posY = '-50%';
      }
      const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;
      if (this.rendered.transform_ != transform) {
        this.rendered.transform_ = transform;
        style.transform = transform;
      }
    }

    /**
     * returns the options this Overlay has been created with
     * @return {Options} overlay options
     */
    getOptions() {
      return this.options;
    }
  }

  var Overlay$1 = Overlay;

  /**
   * @module ol/structs/LRUCache
   */

  /**
   * @typedef {Object} Entry
   * @property {string} key_ Key.
   * @property {Object} newer Newer.
   * @property {Object} older Older.
   * @property {*} value_ Value.
   */

  /**
   * @classdesc
   * Implements a Least-Recently-Used cache where the keys do not conflict with
   * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
   * items from the cache is the responsibility of the user.
   *
   * @fires import("../events/Event.js").default
   * @template T
   */
  class LRUCache {
    /**
     * @param {number} [highWaterMark] High water mark.
     */
    constructor(highWaterMark) {
      /**
       * Desired max cache size after expireCache(). If set to 0, no cache entries
       * will be pruned at all.
       * @type {number}
       */
      this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;

      /**
       * @private
       * @type {number}
       */
      this.count_ = 0;

      /**
       * @private
       * @type {!Object<string, Entry>}
       */
      this.entries_ = {};

      /**
       * @private
       * @type {?Entry}
       */
      this.oldest_ = null;

      /**
       * @private
       * @type {?Entry}
       */
      this.newest_ = null;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
    }

    /**
     * Expire the cache.
     * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.
     */
    expireCache(keep) {
      while (this.canExpireCache()) {
        this.pop();
      }
    }

    /**
     * FIXME empty description for jsdoc
     */
    clear() {
      this.count_ = 0;
      this.entries_ = {};
      this.oldest_ = null;
      this.newest_ = null;
    }

    /**
     * @param {string} key Key.
     * @return {boolean} Contains key.
     */
    containsKey(key) {
      return this.entries_.hasOwnProperty(key);
    }

    /**
     * @param {function(T, string, LRUCache<T>): ?} f The function
     *     to call for every entry from the oldest to the newer. This function takes
     *     3 arguments (the entry value, the entry key and the LRUCache object).
     *     The return value is ignored.
     */
    forEach(f) {
      let entry = this.oldest_;
      while (entry) {
        f(entry.value_, entry.key_, this);
        entry = entry.newer;
      }
    }

    /**
     * @param {string} key Key.
     * @param {*} [options] Options (reserved for subclasses).
     * @return {T} Value.
     */
    get(key, options) {
      const entry = this.entries_[key];
      assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        return entry.value_;
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
        this.oldest_.older = null;
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      entry.newer = null;
      entry.older = this.newest_;
      this.newest_.newer = entry;
      this.newest_ = entry;
      return entry.value_;
    }

    /**
     * Remove an entry from the cache.
     * @param {string} key The entry key.
     * @return {T} The removed entry.
     */
    remove(key) {
      const entry = this.entries_[key];
      assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
      if (entry === this.newest_) {
        this.newest_ = /** @type {Entry} */ (entry.older);
        if (this.newest_) {
          this.newest_.newer = null;
        }
      } else if (entry === this.oldest_) {
        this.oldest_ = /** @type {Entry} */ (entry.newer);
        if (this.oldest_) {
          this.oldest_.older = null;
        }
      } else {
        entry.newer.older = entry.older;
        entry.older.newer = entry.newer;
      }
      delete this.entries_[key];
      --this.count_;
      return entry.value_;
    }

    /**
     * @return {number} Count.
     */
    getCount() {
      return this.count_;
    }

    /**
     * @return {Array<string>} Keys.
     */
    getKeys() {
      const keys = new Array(this.count_);
      let i = 0;
      let entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        keys[i++] = entry.key_;
      }
      return keys;
    }

    /**
     * @return {Array<T>} Values.
     */
    getValues() {
      const values = new Array(this.count_);
      let i = 0;
      let entry;
      for (entry = this.newest_; entry; entry = entry.older) {
        values[i++] = entry.value_;
      }
      return values;
    }

    /**
     * @return {T} Last value.
     */
    peekLast() {
      return this.oldest_.value_;
    }

    /**
     * @return {string} Last key.
     */
    peekLastKey() {
      return this.oldest_.key_;
    }

    /**
     * Get the key of the newest item in the cache.  Throws if the cache is empty.
     * @return {string} The newest key.
     */
    peekFirstKey() {
      return this.newest_.key_;
    }

    /**
     * Return an entry without updating least recently used time.
     * @param {string} key Key.
     * @return {T} Value.
     */
    peek(key) {
      if (!this.containsKey(key)) {
        return undefined;
      }
      return this.entries_[key].value_;
    }

    /**
     * @return {T} value Value.
     */
    pop() {
      const entry = this.oldest_;
      delete this.entries_[entry.key_];
      if (entry.newer) {
        entry.newer.older = null;
      }
      this.oldest_ = /** @type {Entry} */ (entry.newer);
      if (!this.oldest_) {
        this.newest_ = null;
      }
      --this.count_;
      return entry.value_;
    }

    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    replace(key, value) {
      this.get(key); // update `newest_`
      this.entries_[key].value_ = value;
    }

    /**
     * @param {string} key Key.
     * @param {T} value Value.
     */
    set(key, value) {
      assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
      const entry = {
        key_: key,
        newer: null,
        older: this.newest_,
        value_: value,
      };
      if (!this.newest_) {
        this.oldest_ = entry;
      } else {
        this.newest_.newer = entry;
      }
      this.newest_ = entry;
      this.entries_[key] = entry;
      ++this.count_;
    }

    /**
     * Set a maximum number of entries for the cache.
     * @param {number} size Cache size.
     * @api
     */
    setSize(size) {
      this.highWaterMark = size;
    }
  }

  var LRUCache$1 = LRUCache;

  /**
   * @module ol/tilecoord
   */

  /**
   * An array of three numbers representing the location of a tile in a tile
   * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
   * @typedef {Array<number>} TileCoord
   * @api
   */

  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {TileCoord} [tileCoord] Tile coordinate.
   * @return {TileCoord} Tile coordinate.
   */
  function createOrUpdate$1(z, x, y, tileCoord) {
    if (tileCoord !== undefined) {
      tileCoord[0] = z;
      tileCoord[1] = x;
      tileCoord[2] = y;
      return tileCoord;
    }
    return [z, x, y];
  }

  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {string} Key.
   */
  function getKeyZXY(z, x, y) {
    return z + '/' + x + '/' + y;
  }

  /**
   * Get the key for a tile coord.
   * @param {TileCoord} tileCoord The tile coord.
   * @return {string} Key.
   */
  function getKey(tileCoord) {
    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }

  /**
   * Get the tile cache key for a tile key obtained through `tile.getKey()`.
   * @param {string} tileKey The tile key.
   * @return {string} The cache key.
   */
  function getCacheKeyForTileKey(tileKey) {
    const [z, x, y] = tileKey
      .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)
      .split(',')
      .map(Number);
    return getKeyZXY(z, x, y);
  }

  /**
   * Get a tile coord given a key.
   * @param {string} key The tile coord key.
   * @return {TileCoord} The tile coord.
   */
  function fromKey(key) {
    return key.split('/').map(Number);
  }

  /**
   * @param {TileCoord} tileCoord Tile coord.
   * @return {number} Hash.
   */
  function hash(tileCoord) {
    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
  }

  /**
   * @param {TileCoord} tileCoord Tile coordinate.
   * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {boolean} Tile coordinate is within extent and zoom level range.
   */
  function withinExtentAndZ(tileCoord, tileGrid) {
    const z = tileCoord[0];
    const x = tileCoord[1];
    const y = tileCoord[2];

    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
      return false;
    }
    const tileRange = tileGrid.getFullTileRange(z);
    if (!tileRange) {
      return true;
    }
    return tileRange.containsXY(x, y);
  }

  /**
   * @module ol/TileCache
   */

  class TileCache extends LRUCache$1 {
    clear() {
      while (this.getCount() > 0) {
        this.pop().release();
      }
      super.clear();
    }

    /**
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */
    expireCache(usedTiles) {
      while (this.canExpireCache()) {
        const tile = this.peekLast();
        if (tile.getKey() in usedTiles) {
          break;
        } else {
          this.pop().release();
        }
      }
    }

    /**
     * Prune all tiles from the cache that don't have the same z as the newest tile.
     */
    pruneExceptNewestZ() {
      if (this.getCount() === 0) {
        return;
      }
      const key = this.peekFirstKey();
      const tileCoord = fromKey(key);
      const z = tileCoord[0];
      this.forEach((tile) => {
        if (tile.tileCoord[0] !== z) {
          this.remove(getKey(tile.tileCoord));
          tile.release();
        }
      });
    }
  }

  var TileCache$1 = TileCache;

  /**
   * @module ol/TileRange
   */

  /**
   * A representation of a contiguous block of tiles.  A tile range is specified
   * by its min/max tile coordinates and is inclusive of coordinates.
   */
  class TileRange {
    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     */
    constructor(minX, maxX, minY, maxY) {
      /**
       * @type {number}
       */
      this.minX = minX;

      /**
       * @type {number}
       */
      this.maxX = maxX;

      /**
       * @type {number}
       */
      this.minY = minY;

      /**
       * @type {number}
       */
      this.maxY = maxY;
    }

    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {boolean} Contains tile coordinate.
     */
    contains(tileCoord) {
      return this.containsXY(tileCoord[1], tileCoord[2]);
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Contains.
     */
    containsTileRange(tileRange) {
      return (
        this.minX <= tileRange.minX &&
        tileRange.maxX <= this.maxX &&
        this.minY <= tileRange.minY &&
        tileRange.maxY <= this.maxY
      );
    }

    /**
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @return {boolean} Contains coordinate.
     */
    containsXY(x, y) {
      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Equals.
     */
    equals(tileRange) {
      return (
        this.minX == tileRange.minX &&
        this.minY == tileRange.minY &&
        this.maxX == tileRange.maxX &&
        this.maxY == tileRange.maxY
      );
    }

    /**
     * @param {TileRange} tileRange Tile range.
     */
    extend(tileRange) {
      if (tileRange.minX < this.minX) {
        this.minX = tileRange.minX;
      }
      if (tileRange.maxX > this.maxX) {
        this.maxX = tileRange.maxX;
      }
      if (tileRange.minY < this.minY) {
        this.minY = tileRange.minY;
      }
      if (tileRange.maxY > this.maxY) {
        this.maxY = tileRange.maxY;
      }
    }

    /**
     * @return {number} Height.
     */
    getHeight() {
      return this.maxY - this.minY + 1;
    }

    /**
     * @return {import("./size.js").Size} Size.
     */
    getSize() {
      return [this.getWidth(), this.getHeight()];
    }

    /**
     * @return {number} Width.
     */
    getWidth() {
      return this.maxX - this.minX + 1;
    }

    /**
     * @param {TileRange} tileRange Tile range.
     * @return {boolean} Intersects.
     */
    intersects(tileRange) {
      return (
        this.minX <= tileRange.maxX &&
        this.maxX >= tileRange.minX &&
        this.minY <= tileRange.maxY &&
        this.maxY >= tileRange.minY
      );
    }
  }

  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   * @param {TileRange} [tileRange] TileRange.
   * @return {TileRange} Tile range.
   */
  function createOrUpdate(minX, maxX, minY, maxY, tileRange) {
    if (tileRange !== undefined) {
      tileRange.minX = minX;
      tileRange.maxX = maxX;
      tileRange.minY = minY;
      tileRange.maxY = maxY;
      return tileRange;
    }
    return new TileRange(minX, maxX, minY, maxY);
  }

  var TileRange$1 = TileRange;

  /**
   * @module ol/VectorRenderTile
   */

  /**
   * @typedef {Object} ReplayState
   * @property {boolean} dirty Dirty.
   * @property {null|import("./render.js").OrderFunction} renderedRenderOrder RenderedRenderOrder.
   * @property {number} renderedTileRevision RenderedTileRevision.
   * @property {number} renderedResolution RenderedResolution.
   * @property {number} renderedRevision RenderedRevision.
   * @property {number} renderedTileResolution RenderedTileResolution.
   * @property {number} renderedTileZ RenderedTileZ.
   */

  /**
   * @type {Array<HTMLCanvasElement>}
   */
  const canvasPool$1 = [];

  class VectorRenderTile extends Tile$1 {
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {import("./tilecoord.js").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.
     * @param {function(VectorRenderTile):Array<import("./VectorTile").default>} getSourceTiles Function
     * to get source tiles for this tile.
     */
    constructor(tileCoord, state, urlTileCoord, getSourceTiles) {
      super(tileCoord, state, {transition: 0});

      /**
       * @private
       * @type {!Object<string, CanvasRenderingContext2D>}
       */
      this.context_ = {};

      /**
       * Executor groups by layer uid. Entries are read/written by the renderer.
       * @type {Object<string, Array<import("./render/canvas/ExecutorGroup.js").default>>}
       */
      this.executorGroups = {};

      /**
       * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.
       * @type {Object<string, Array<import("./render/canvas/ExecutorGroup.js").default>>}
       */
      this.declutterExecutorGroups = {};

      /**
       * Number of loading source tiles. Read/written by the source.
       * @type {number}
       */
      this.loadingSourceTiles = 0;

      /**
       * @type {Object<number, ImageData>}
       */
      this.hitDetectionImageData = {};

      /**
       * @private
       * @type {!Object<string, ReplayState>}
       */
      this.replayState_ = {};

      /**
       * @type {Array<import("./VectorTile.js").default>}
       */
      this.sourceTiles = [];

      /**
       * @type {Object<string, boolean>}
       */
      this.errorTileKeys = {};

      /**
       * @type {number}
       */
      this.wantedResolution;

      /**
       * @type {!function():Array<import("./VectorTile.js").default>}
       */
      this.getSourceTiles = getSourceTiles.bind(undefined, this);

      /**
       * @type {import("./tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord = urlTileCoord;
    }

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {CanvasRenderingContext2D} The rendering context.
     */
    getContext(layer) {
      const key = getUid(layer);
      if (!(key in this.context_)) {
        this.context_[key] = createCanvasContext2D(1, 1, canvasPool$1);
      }
      return this.context_[key];
    }

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {boolean} Tile has a rendering context for the given layer.
     */
    hasContext(layer) {
      return getUid(layer) in this.context_;
    }

    /**
     * Get the Canvas for this tile.
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {HTMLCanvasElement} Canvas.
     */
    getImage(layer) {
      return this.hasContext(layer) ? this.getContext(layer).canvas : null;
    }

    /**
     * @param {import("./layer/Layer.js").default} layer Layer.
     * @return {ReplayState} The replay state.
     */
    getReplayState(layer) {
      const key = getUid(layer);
      if (!(key in this.replayState_)) {
        this.replayState_[key] = {
          dirty: false,
          renderedRenderOrder: null,
          renderedResolution: NaN,
          renderedRevision: -1,
          renderedTileResolution: NaN,
          renderedTileRevision: -1,
          renderedTileZ: -1,
        };
      }
      return this.replayState_[key];
    }

    /**
     * Load the tile.
     */
    load() {
      this.getSourceTiles();
    }

    /**
     * Remove from the cache due to expiry
     */
    release() {
      for (const key in this.context_) {
        const context = this.context_[key];
        releaseCanvas$1(context);
        canvasPool$1.push(context.canvas);
        delete this.context_[key];
      }
      super.release();
    }
  }

  var VectorRenderTile$1 = VectorRenderTile;

  /**
   * @module ol/VectorTile
   */

  class VectorTile$1 extends Tile$1 {
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./TileState.js").default} state State.
     * @param {string} src Data source url.
     * @param {import("./format/Feature.js").default} format Feature format.
     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("./Tile.js").Options} [options] Tile options.
     */
    constructor(tileCoord, state, src, format, tileLoadFunction, options) {
      super(tileCoord, state, options);

      /**
       * Extent of this tile; set by the source.
       * @type {import("./extent.js").Extent}
       */
      this.extent = null;

      /**
       * @private
       * @type {import("./format/Feature.js").default}
       */
      this.format_ = format;

      /**
       * @private
       * @type {Array<import("./Feature.js").default>}
       */
      this.features_ = null;

      /**
       * @private
       * @type {import("./featureloader.js").FeatureLoader}
       */
      this.loader_;

      /**
       * Feature projection of this tile; set by the source.
       * @type {import("./proj/Projection.js").default}
       */
      this.projection = null;

      /**
       * Resolution of this tile; set by the source.
       * @type {number}
       */
      this.resolution;

      /**
       * @private
       * @type {import("./Tile.js").LoadFunction}
       */
      this.tileLoadFunction_ = tileLoadFunction;

      /**
       * @private
       * @type {string}
       */
      this.url_ = src;

      this.key = src;
    }

    /**
     * Get the feature format assigned for reading this tile's features.
     * @return {import("./format/Feature.js").default} Feature format.
     * @api
     */
    getFormat() {
      return this.format_;
    }

    /**
     * Get the features for this tile. Geometries will be in the view projection.
     * @return {Array<import("./Feature.js").FeatureLike>} Features.
     * @api
     */
    getFeatures() {
      return this.features_;
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.state == TileState.IDLE) {
        this.setState(TileState.LOADING);
        this.tileLoadFunction_(this, this.url_);
        if (this.loader_) {
          this.loader_(this.extent, this.resolution, this.projection);
        }
      }
    }

    /**
     * Handler for successful tile load.
     * @param {Array<import("./Feature.js").default>} features The loaded features.
     * @param {import("./proj/Projection.js").default} dataProjection Data projection.
     */
    onLoad(features, dataProjection) {
      this.setFeatures(features);
    }

    /**
     * Handler for tile load errors.
     */
    onError() {
      this.setState(TileState.ERROR);
    }

    /**
     * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
     * Sets the features for the tile.
     * @param {Array<import("./Feature.js").default>} features Features.
     * @api
     */
    setFeatures(features) {
      this.features_ = features;
      this.setState(TileState.LOADED);
    }

    /**
     * Set the feature loader for reading this tile's features.
     * @param {import("./featureloader.js").FeatureLoader} loader Feature loader.
     * @api
     */
    setLoader(loader) {
      this.loader_ = loader;
    }
  }

  var VectorTile$2 = VectorTile$1;

  /**
   * @module ol/control/FullScreen
   */

  const events = [
    'fullscreenchange',
    'webkitfullscreenchange',
    'MSFullscreenChange',
  ];

  /**
   * @enum {string}
   */
  const FullScreenEventType = {
    /**
     * Triggered after the map entered fullscreen.
     * @event FullScreenEventType#enterfullscreen
     * @api
     */
    ENTERFULLSCREEN: 'enterfullscreen',

    /**
     * Triggered after the map leave fullscreen.
     * @event FullScreenEventType#leavefullscreen
     * @api
     */
    LEAVEFULLSCREEN: 'leavefullscreen',
  };

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes|
   *     'enterfullscreen'|'leavefullscreen', import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|
   *     'enterfullscreen'|'leavefullscreen'|import("../ObjectEventType").Types, Return>} FullScreenOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-full-screen'] CSS class name.
   * @property {string|Text|HTMLElement} [label='\u2922'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|Text|HTMLElement} [labelActive='\u00d7'] Text label to use for the
   * button when full-screen is active.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [activeClassName=className + '-true'] CSS class name for the button
   * when full-screen is active.
   * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button
   * when full-screen is inactive.
   * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
   * @property {boolean} [keys=false] Full keyboard access.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {HTMLElement|string} [source] The element to be displayed
   * fullscreen. When not provided, the element containing the map viewport will
   * be displayed fullscreen.
   */

  /**
   * @classdesc
   * Provides a button that when clicked fills up the full screen with the map.
   * The full screen source element is by default the element containing the map viewport unless
   * overridden by providing the `source` option. In which case, the dom
   * element introduced using this parameter will be displayed in full screen.
   *
   * When in full screen mode, a close button is shown to exit full screen mode.
   * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to
   * toggle the map in full screen mode.
   *
   * @fires FullScreenEventType#enterfullscreen
   * @fires FullScreenEventType#leavefullscreen
   * @api
   */
  class FullScreen extends Control$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        target: options.target,
      });

      /***
       * @type {FullScreenOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {FullScreenOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {FullScreenOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {boolean}
       */
      this.keys_ = options.keys !== undefined ? options.keys : false;

      /**
       * @private
       * @type {HTMLElement|string|undefined}
       */
      this.source_ = options.source;

      /**
       * @type {boolean}
       * @private
       */
      this.isInFullscreen_ = false;

      /**
       * @private
       */
      this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);

      /**
       * @private
       * @type {string}
       */
      this.cssClassName_ =
        options.className !== undefined ? options.className : 'ol-full-screen';

      /**
       * @private
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.documentListeners_ = [];

      /**
       * @private
       * @type {Array<string>}
       */
      this.activeClassName_ =
        options.activeClassName !== undefined
          ? options.activeClassName.split(' ')
          : [this.cssClassName_ + '-true'];

      /**
       * @private
       * @type {Array<string>}
       */
      this.inactiveClassName_ =
        options.inactiveClassName !== undefined
          ? options.inactiveClassName.split(' ')
          : [this.cssClassName_ + '-false'];

      const label = options.label !== undefined ? options.label : '\u2922';

      /**
       * @private
       * @type {Text|HTMLElement}
       */
      this.labelNode_ =
        typeof label === 'string' ? document.createTextNode(label) : label;

      const labelActive =
        options.labelActive !== undefined ? options.labelActive : '\u00d7';

      /**
       * @private
       * @type {Text|HTMLElement}
       */
      this.labelActiveNode_ =
        typeof labelActive === 'string'
          ? document.createTextNode(labelActive)
          : labelActive;

      const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';

      /**
       * @private
       * @type {HTMLElement}
       */
      this.button_ = document.createElement('button');
      this.button_.title = tipLabel;
      this.button_.setAttribute('type', 'button');
      this.button_.appendChild(this.labelNode_);
      this.button_.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false
      );
      this.setClassName_(this.button_, this.isInFullscreen_);

      this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;
      this.element.appendChild(this.button_);
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleFullScreen_();
    }

    /**
     * @private
     */
    handleFullScreen_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      const doc = map.getOwnerDocument();
      if (!isFullScreenSupported(doc)) {
        return;
      }
      if (isFullScreen(doc)) {
        exitFullScreen(doc);
      } else {
        let element;
        if (this.source_) {
          element =
            typeof this.source_ === 'string'
              ? doc.getElementById(this.source_)
              : this.source_;
        } else {
          element = map.getTargetElement();
        }
        if (this.keys_) {
          requestFullScreenWithKeys(element);
        } else {
          requestFullScreen(element);
        }
      }
    }

    /**
     * @private
     */
    handleFullScreenChange_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      const wasInFullscreen = this.isInFullscreen_;
      this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());
      if (wasInFullscreen !== this.isInFullscreen_) {
        this.setClassName_(this.button_, this.isInFullscreen_);
        if (this.isInFullscreen_) {
          replaceNode(this.labelActiveNode_, this.labelNode_);
          this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);
        } else {
          replaceNode(this.labelNode_, this.labelActiveNode_);
          this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);
        }
        map.updateSize();
      }
    }

    /**
     * @param {HTMLElement} element Target element
     * @param {boolean} fullscreen True if fullscreen class name should be active
     * @private
     */
    setClassName_(element, fullscreen) {
      if (fullscreen) {
        element.classList.remove(...this.inactiveClassName_);
        element.classList.add(...this.activeClassName_);
      } else {
        element.classList.remove(...this.activeClassName_);
        element.classList.add(...this.inactiveClassName_);
      }
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      const oldMap = this.getMap();
      if (oldMap) {
        oldMap.removeChangeListener(
          MapProperty.TARGET,
          this.boundHandleMapTargetChange_
        );
      }

      super.setMap(map);

      this.handleMapTargetChange_();
      if (map) {
        map.addChangeListener(
          MapProperty.TARGET,
          this.boundHandleMapTargetChange_
        );
      }
    }

    /**
     * @private
     */
    handleMapTargetChange_() {
      const listeners = this.documentListeners_;
      for (let i = 0, ii = listeners.length; i < ii; ++i) {
        unlistenByKey(listeners[i]);
      }
      listeners.length = 0;

      const map = this.getMap();
      if (map) {
        const doc = map.getOwnerDocument();
        if (isFullScreenSupported(doc)) {
          this.element.classList.remove(CLASS_UNSUPPORTED);
        } else {
          this.element.classList.add(CLASS_UNSUPPORTED);
        }

        for (let i = 0, ii = events.length; i < ii; ++i) {
          listeners.push(
            listen(doc, events[i], this.handleFullScreenChange_, this)
          );
        }
        this.handleFullScreenChange_();
      }
    }
  }

  /**
   * @param {Document} doc The root document to check.
   * @return {boolean} Fullscreen is supported by the current platform.
   */
  function isFullScreenSupported(doc) {
    const body = doc.body;
    return !!(
      body['webkitRequestFullscreen'] ||
      (body.requestFullscreen && doc.fullscreenEnabled)
    );
  }

  /**
   * @param {Document} doc The root document to check.
   * @return {boolean} Element is currently in fullscreen.
   */
  function isFullScreen(doc) {
    return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);
  }

  /**
   * Request to fullscreen an element.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreen(element) {
    if (element.requestFullscreen) {
      element.requestFullscreen();
    } else if (element['webkitRequestFullscreen']) {
      element['webkitRequestFullscreen']();
    }
  }

  /**
   * Request to fullscreen an element with keyboard input.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreenWithKeys(element) {
    if (element['webkitRequestFullscreen']) {
      element['webkitRequestFullscreen']();
    } else {
      requestFullScreen(element);
    }
  }

  /**
   * Exit fullscreen.
   * @param {Document} doc The document to exit fullscren from
   */
  function exitFullScreen(doc) {
    if (doc.exitFullscreen) {
      doc.exitFullscreen();
    } else if (doc['webkitExitFullscreen']) {
      doc['webkitExitFullscreen']();
    }
  }

  var FullScreen$1 = FullScreen;

  /**
   * @module ol/control/MousePosition
   */

  /**
   * @type {string}
   */
  const PROJECTION = 'projection';

  /**
   * @type {string}
   */
  const COORDINATE_FORMAT = 'coordinateFormat';

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:coordinateFormat'|'change:projection', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-mouse-position'] CSS class name.
   * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the
   * control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {string} [placeholder] Markup to show when the mouse position is not
   * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space is rendered
   * initially and the last position is retained when the mouse leaves the viewport.
   * When a string is provided (e.g. `'no position'` or `''` for an empty string) it is used as a
   * placeholder.
   * @property {boolean} [wrapX=true] Wrap the world horizontally on the projection's antimeridian, if it
   * is a global projection.
   */

  /**
   * @classdesc
   * A control to show the 2D coordinates of the mouse cursor. By default, these
   * are in the view projection, but can be in any supported projection.
   * By default the control is shown in the top right corner of the map, but this
   * can be changed by using the css selector `.ol-mouse-position`.
   *
   * On touch devices, which usually do not have a mouse cursor, the coordinates
   * of the currently touched position are shown.
   *
   * @api
   */
  class MousePosition extends Control$1 {
    /**
     * @param {Options} [options] Mouse position options.
     */
    constructor(options) {
      options = options ? options : {};

      const element = document.createElement('div');
      element.className =
        options.className !== undefined ? options.className : 'ol-mouse-position';

      super({
        element: element,
        render: options.render,
        target: options.target,
      });

      /***
       * @type {MousePositionOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {MousePositionOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {MousePositionOnSignature<void>}
       */
      this.un;

      this.addChangeListener(PROJECTION, this.handleProjectionChanged_);

      if (options.coordinateFormat) {
        this.setCoordinateFormat(options.coordinateFormat);
      }
      if (options.projection) {
        this.setProjection(options.projection);
      }

      /**
       * @private
       * @type {boolean}
       */
      this.renderOnMouseOut_ = options.placeholder !== undefined;

      /**
       * @private
       * @type {string}
       */
      this.placeholder_ = this.renderOnMouseOut_ ? options.placeholder : '&#160;';

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = element.innerHTML;

      /**
       * @private
       * @type {?import("../proj/Projection.js").default}
       */
      this.mapProjection_ = null;

      /**
       * @private
       * @type {?import("../proj.js").TransformFunction}
       */
      this.transform_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.wrapX_ = options.wrapX === false ? false : true;
    }

    /**
     * @private
     */
    handleProjectionChanged_() {
      this.transform_ = null;
    }

    /**
     * Return the coordinate format type used to render the current position or
     * undefined.
     * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
     *     position in.
     * @observable
     * @api
     */
    getCoordinateFormat() {
      return /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ (
        this.get(COORDINATE_FORMAT)
      );
    }

    /**
     * Return the projection that is used to report the mouse position.
     * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    getProjection() {
      return /** @type {import("../proj/Projection.js").default|undefined} */ (
        this.get(PROJECTION)
      );
    }

    /**
     * @param {MouseEvent} event Browser event.
     * @protected
     */
    handleMouseMove(event) {
      const map = this.getMap();
      this.updateHTML_(map.getEventPixel(event));
    }

    /**
     * @param {Event} event Browser event.
     * @protected
     */
    handleMouseOut(event) {
      this.updateHTML_(null);
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        const viewport = map.getViewport();
        this.listenerKeys.push(
          listen(viewport, PointerEventType.POINTERMOVE, this.handleMouseMove, this)
        );
        if (this.renderOnMouseOut_) {
          this.listenerKeys.push(
            listen(viewport, PointerEventType.POINTEROUT, this.handleMouseOut, this)
          );
        }
        this.updateHTML_(null);
      }
    }

    /**
     * Set the coordinate format type used to render the current position.
     * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
     *     position in.
     * @observable
     * @api
     */
    setCoordinateFormat(format) {
      this.set(COORDINATE_FORMAT, format);
    }

    /**
     * Set the projection that is used to report the mouse position.
     * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
     *     position in.
     * @observable
     * @api
     */
    setProjection(projection) {
      this.set(PROJECTION, get$2(projection));
    }

    /**
     * @param {?import("../pixel.js").Pixel} pixel Pixel.
     * @private
     */
    updateHTML_(pixel) {
      let html = this.placeholder_;
      if (pixel && this.mapProjection_) {
        if (!this.transform_) {
          const projection = this.getProjection();
          if (projection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_,
              projection
            );
          } else {
            this.transform_ = identityTransform;
          }
        }
        const map = this.getMap();
        const coordinate = map.getCoordinateFromPixelInternal(pixel);
        if (coordinate) {
          const userProjection = getUserProjection();
          if (userProjection) {
            this.transform_ = getTransformFromProjections(
              this.mapProjection_,
              userProjection
            );
          }
          this.transform_(coordinate, coordinate);
          if (this.wrapX_) {
            const projection =
              userProjection || this.getProjection() || this.mapProjection_;
            wrapX$1(coordinate, projection);
          }
          const coordinateFormat = this.getCoordinateFormat();
          if (coordinateFormat) {
            html = coordinateFormat(coordinate);
          } else {
            html = coordinate.toString();
          }
        }
      }
      if (!this.renderedHTML_ || html !== this.renderedHTML_) {
        this.element.innerHTML = html;
        this.renderedHTML_ = html;
      }
    }

    /**
     * Update the projection. Rendering of the coordinates is done in
     * `handleMouseMove` and `handleMouseUp`.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      const frameState = mapEvent.frameState;
      if (!frameState) {
        this.mapProjection_ = null;
      } else {
        if (this.mapProjection_ != frameState.viewState.projection) {
          this.mapProjection_ = frameState.viewState.projection;
          this.transform_ = null;
        }
      }
    }
  }

  var MousePosition$1 = MousePosition;

  /**
   * @module ol/control/OverviewMap
   */

  /**
   * Maximum width and/or height extent ratio that determines when the overview
   * map should be zoomed out.
   * @type {number}
   */
  const MAX_RATIO = 0.75;

  /**
   * Minimum width and/or height extent ratio that determines when the overview
   * map should be zoomed in.
   * @type {number}
   */
  const MIN_RATIO = 0.1;

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-overviewmap'] CSS class name.
   * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
   * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the
   * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
   * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed
   * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {Array<import("../layer/Base.js").default>|import("../Collection.js").default<import("../layer/Base.js").default>} [layers]
   * Layers for the overview map.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
   * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,
   * a default view with the same projection as the main map will be used.
   */

  /**
   * Create a new control with a map acting as an overview map for another
   * defined map.
   *
   * @api
   */
  class OverviewMap extends Control$1 {
    /**
     * @param {Options} [options] OverviewMap options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
        target: options.target,
      });

      /**
       * @private
       */
      this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);

      /**
       * @type {boolean}
       * @private
       */
      this.collapsed_ =
        options.collapsed !== undefined ? options.collapsed : true;

      /**
       * @private
       * @type {boolean}
       */
      this.collapsible_ =
        options.collapsible !== undefined ? options.collapsible : true;

      if (!this.collapsible_) {
        this.collapsed_ = false;
      }

      /**
       * @private
       * @type {boolean}
       */
      this.rotateWithView_ =
        options.rotateWithView !== undefined ? options.rotateWithView : false;

      /**
       * @private
       * @type {import("../extent.js").Extent|undefined}
       */
      this.viewExtent_ = undefined;

      const className =
        options.className !== undefined ? options.className : 'ol-overviewmap';

      const tipLabel =
        options.tipLabel !== undefined ? options.tipLabel : 'Overview map';

      const collapseLabel =
        options.collapseLabel !== undefined ? options.collapseLabel : '\u2039';

      if (typeof collapseLabel === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.collapseLabel_ = document.createElement('span');
        this.collapseLabel_.textContent = collapseLabel;
      } else {
        this.collapseLabel_ = collapseLabel;
      }

      const label = options.label !== undefined ? options.label : '\u203A';

      if (typeof label === 'string') {
        /**
         * @private
         * @type {HTMLElement}
         */
        this.label_ = document.createElement('span');
        this.label_.textContent = label;
      } else {
        this.label_ = label;
      }

      const activeLabel =
        this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(activeLabel);

      button.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false
      );

      /**
       * @type {HTMLElement}
       * @private
       */
      this.ovmapDiv_ = document.createElement('div');
      this.ovmapDiv_.className = 'ol-overviewmap-map';

      /**
       * Explicitly given view to be used instead of a view derived from the main map.
       * @type {View}
       * @private
       */
      this.view_ = options.view;

      const ovmap = new Map$2({
        view: options.view,
        controls: new Collection$1(),
        interactions: new Collection$1(),
      });

      /**
       * @type {Map}
       * @private
       */
      this.ovmap_ = ovmap;

      if (options.layers) {
        options.layers.forEach(function (layer) {
          ovmap.addLayer(layer);
        });
      }

      const box = document.createElement('div');
      box.className = 'ol-overviewmap-box';
      box.style.boxSizing = 'border-box';

      /**
       * @type {import("../Overlay.js").default}
       * @private
       */
      this.boxOverlay_ = new Overlay$1({
        position: [0, 0],
        positioning: 'center-center',
        element: box,
      });
      this.ovmap_.addOverlay(this.boxOverlay_);

      const cssClasses =
        className +
        ' ' +
        CLASS_UNSELECTABLE +
        ' ' +
        CLASS_CONTROL +
        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
        (this.collapsible_ ? '' : ' ol-uncollapsible');
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(this.ovmapDiv_);
      element.appendChild(button);

      /* Interactive map */

      const scope = this;

      const overlay = this.boxOverlay_;
      const overlayBox = this.boxOverlay_.getElement();

      /* Functions definition */

      const computeDesiredMousePosition = function (mousePosition) {
        return {
          clientX: mousePosition.clientX,
          clientY: mousePosition.clientY,
        };
      };

      const move = function (event) {
        const position = /** @type {?} */ (computeDesiredMousePosition(event));
        const coordinates = ovmap.getEventCoordinateInternal(
          /** @type {MouseEvent} */ (position)
        );

        overlay.setPosition(coordinates);
      };

      const endMoving = function (event) {
        const coordinates = ovmap.getEventCoordinateInternal(event);

        scope.getMap().getView().setCenterInternal(coordinates);

        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', endMoving);
      };

      /* Binding */

      overlayBox.addEventListener('mousedown', function () {
        window.addEventListener('mousemove', move);
        window.addEventListener('mouseup', endMoving);
      });
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      const oldMap = this.getMap();
      if (map === oldMap) {
        return;
      }
      if (oldMap) {
        const oldView = oldMap.getView();
        if (oldView) {
          this.unbindView_(oldView);
        }
        this.ovmap_.setTarget(null);
      }
      super.setMap(map);

      if (map) {
        this.ovmap_.setTarget(this.ovmapDiv_);
        this.listenerKeys.push(
          listen(
            map,
            ObjectEventType.PROPERTYCHANGE,
            this.handleMapPropertyChange_,
            this
          )
        );

        const view = map.getView();
        if (view) {
          this.bindView_(view);
          if (view.isDef()) {
            this.ovmap_.updateSize();
            this.resetExtent_();
          }
        }

        if (!this.ovmap_.isRendered()) {
          this.updateBoxAfterOvmapIsRendered_();
        }
      }
    }

    /**
     * Handle map property changes.  This only deals with changes to the map's view.
     * @param {import("../Object.js").ObjectEvent} event The propertychange event.
     * @private
     */
    handleMapPropertyChange_(event) {
      if (event.key === MapProperty.VIEW) {
        const oldView = /** @type {import("../View.js").default} */ (
          event.oldValue
        );
        if (oldView) {
          this.unbindView_(oldView);
        }
        const newView = this.getMap().getView();
        this.bindView_(newView);
      } else if (
        !this.ovmap_.isRendered() &&
        (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)
      ) {
        this.ovmap_.updateSize();
      }
    }

    /**
     * Register listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    bindView_(view) {
      if (!this.view_) {
        // Unless an explicit view definition was given, derive default from whatever main map uses.
        const newView = new View$1({
          projection: view.getProjection(),
        });
        this.ovmap_.setView(newView);
      }

      view.addChangeListener(
        ViewProperty.ROTATION,
        this.boundHandleRotationChanged_
      );
      // Sync once with the new view
      this.handleRotationChanged_();
    }

    /**
     * Unregister listeners for view property changes.
     * @param {import("../View.js").default} view The view.
     * @private
     */
    unbindView_(view) {
      view.removeChangeListener(
        ViewProperty.ROTATION,
        this.boundHandleRotationChanged_
      );
    }

    /**
     * Handle rotation changes to the main map.
     * @private
     */
    handleRotationChanged_() {
      if (this.rotateWithView_) {
        this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
      }
    }

    /**
     * Reset the overview map extent if the box size (width or
     * height) is less than the size of the overview map size times minRatio
     * or is greater than the size of the overview size times maxRatio.
     *
     * If the map extent was not reset, the box size can fits in the defined
     * ratio sizes. This method then checks if is contained inside the overview
     * map current extent. If not, recenter the overview map to the current
     * main map center location.
     * @private
     */
    validateExtent_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();
      const extent = view.calculateExtentInternal(mapSize);

      if (this.viewExtent_ && equals$2(extent, this.viewExtent_)) {
        // repeats of the same extent may indicate constraint conflicts leading to an endless cycle
        return;
      }
      this.viewExtent_ = extent;

      const ovmapSize = /** @type {import("../size.js").Size} */ (
        ovmap.getSize()
      );

      const ovview = ovmap.getView();
      const ovextent = ovview.calculateExtentInternal(ovmapSize);

      const topLeftPixel = ovmap.getPixelFromCoordinateInternal(
        getTopLeft(extent)
      );
      const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(
        getBottomRight(extent)
      );

      const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
      const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);

      const ovmapWidth = ovmapSize[0];
      const ovmapHeight = ovmapSize[1];

      if (
        boxWidth < ovmapWidth * MIN_RATIO ||
        boxHeight < ovmapHeight * MIN_RATIO ||
        boxWidth > ovmapWidth * MAX_RATIO ||
        boxHeight > ovmapHeight * MAX_RATIO
      ) {
        this.resetExtent_();
      } else if (!containsExtent(ovextent, extent)) {
        this.recenter_();
      }
    }

    /**
     * Reset the overview map extent to half calculated min and max ratio times
     * the extent of the main map.
     * @private
     */
    resetExtent_() {

      const map = this.getMap();
      const ovmap = this.ovmap_;

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();
      const extent = view.calculateExtentInternal(mapSize);

      const ovview = ovmap.getView();

      // get how many times the current map overview could hold different
      // box sizes using the min and max ratio, pick the step in the middle used
      // to calculate the extent from the main map to set it to the overview map,
      const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;
      const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
      scaleFromCenter(extent, ratio);
      ovview.fitInternal(fromExtent(extent));
    }

    /**
     * Set the center of the overview map to the map center without changing its
     * resolution.
     * @private
     */
    recenter_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      const view = map.getView();

      const ovview = ovmap.getView();

      ovview.setCenterInternal(view.getCenterInternal());
    }

    /**
     * Update the box using the main map extent
     * @private
     */
    updateBox_() {
      const map = this.getMap();
      const ovmap = this.ovmap_;

      if (!map.isRendered() || !ovmap.isRendered()) {
        return;
      }

      const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());

      const view = map.getView();

      const ovview = ovmap.getView();

      const rotation = this.rotateWithView_ ? 0 : -view.getRotation();

      const overlay = this.boxOverlay_;
      const box = this.boxOverlay_.getElement();
      const center = view.getCenterInternal();
      const resolution = view.getResolution();
      const ovresolution = ovview.getResolution();
      const width = (mapSize[0] * resolution) / ovresolution;
      const height = (mapSize[1] * resolution) / ovresolution;

      // set position using center coordinates
      overlay.setPosition(center);

      // set box size calculated from map extent size and overview map resolution
      if (box) {
        box.style.width = width + 'px';
        box.style.height = height + 'px';
        const transform = 'rotate(' + rotation + 'rad)';
        box.style.transform = transform;
      }
    }

    /**
     * @private
     */
    updateBoxAfterOvmapIsRendered_() {
      if (this.ovmapPostrenderKey_) {
        return;
      }
      this.ovmapPostrenderKey_ = listenOnce(
        this.ovmap_,
        MapEventType.POSTRENDER,
        function (event) {
          delete this.ovmapPostrenderKey_;
          this.updateBox_();
        },
        this
      );
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleToggle_();
    }

    /**
     * @private
     */
    handleToggle_() {
      this.element.classList.toggle(CLASS_COLLAPSED);
      if (this.collapsed_) {
        replaceNode(this.collapseLabel_, this.label_);
      } else {
        replaceNode(this.label_, this.collapseLabel_);
      }
      this.collapsed_ = !this.collapsed_;

      // manage overview map if it had not been rendered before and control
      // is expanded
      const ovmap = this.ovmap_;
      if (!this.collapsed_) {
        if (ovmap.isRendered()) {
          this.viewExtent_ = undefined;
          ovmap.render();
          return;
        }
        ovmap.updateSize();
        this.resetExtent_();
        this.updateBoxAfterOvmapIsRendered_();
      }
    }

    /**
     * Return `true` if the overview map is collapsible, `false` otherwise.
     * @return {boolean} True if the widget is collapsible.
     * @api
     */
    getCollapsible() {
      return this.collapsible_;
    }

    /**
     * Set whether the overview map should be collapsible.
     * @param {boolean} collapsible True if the widget is collapsible.
     * @api
     */
    setCollapsible(collapsible) {
      if (this.collapsible_ === collapsible) {
        return;
      }
      this.collapsible_ = collapsible;
      this.element.classList.toggle('ol-uncollapsible');
      if (!collapsible && this.collapsed_) {
        this.handleToggle_();
      }
    }

    /**
     * Collapse or expand the overview map according to the passed parameter. Will
     * not do anything if the overview map isn't collapsible or if the current
     * collapsed state is already the one requested.
     * @param {boolean} collapsed True if the widget is collapsed.
     * @api
     */
    setCollapsed(collapsed) {
      if (!this.collapsible_ || this.collapsed_ === collapsed) {
        return;
      }
      this.handleToggle_();
    }

    /**
     * Determine if the overview map is collapsed.
     * @return {boolean} The overview map is collapsed.
     * @api
     */
    getCollapsed() {
      return this.collapsed_;
    }

    /**
     * Return `true` if the overview map view can rotate, `false` otherwise.
     * @return {boolean} True if the control view can rotate.
     * @api
     */
    getRotateWithView() {
      return this.rotateWithView_;
    }

    /**
     * Set whether the overview map view should rotate with the main map view.
     * @param {boolean} rotateWithView True if the control view should rotate.
     * @api
     */
    setRotateWithView(rotateWithView) {
      if (this.rotateWithView_ === rotateWithView) {
        return;
      }
      this.rotateWithView_ = rotateWithView;
      if (this.getMap().getView().getRotation() !== 0) {
        if (this.rotateWithView_) {
          this.handleRotationChanged_();
        } else {
          this.ovmap_.getView().setRotation(0);
        }
        this.viewExtent_ = undefined;
        this.validateExtent_();
        this.updateBox_();
      }
    }

    /**
     * Return the overview map.
     * @return {import("../Map.js").default} Overview map.
     * @api
     */
    getOverviewMap() {
      return this.ovmap_;
    }

    /**
     * Update the overview map element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      this.validateExtent_();
      this.updateBox_();
    }
  }

  var OverviewMap$1 = OverviewMap;

  /**
   * @module ol/control/ScaleLine
   */

  /**
   * @type {string}
   */
  const UNITS_PROP = 'units';

  /**
   * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units
   * Units for the scale line.
   */

  /**
   * @const
   * @type {Array<number>}
   */
  const LEADING_DIGITS = [1, 2, 5];

  /**
   * @const
   * @type {number}
   */
  const DEFAULT_DPI = 25.4 / 0.28;

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:units', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types
   *     |'change:units', Return>} ScaleLineOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with
   * `bar: true`. Otherwise the default is `ol-scale-line`.
   * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be
   * adjusted to match the dpi used.
   * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be
   * adjusted to match the dpi used.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {Units} [units='metric'] Units.
   * @property {boolean} [bar=false] Render scalebars instead of a line.
   * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers
   * for best results. Only applies when `bar` is `true`.
   * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies
   * when `bar` is `true`.
   * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies
   * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.
   */

  /**
   * @classdesc
   * A control displaying rough y-axis distances, calculated for the center of the
   * viewport. For conformal projections (e.g. EPSG:3857, the default view
   * projection in OpenLayers), the scale is valid for all directions.
   * No scale line will be shown when the y-axis distance of a pixel at the
   * viewport center cannot be calculated in the view projection.
   * By default the scale line will show in the bottom left portion of the map,
   * but this can be changed by using the css selector `.ol-scale-line`.
   * When specifying `bar` as `true`, a scalebar will be rendered instead
   * of a scaleline.
   *
   * @api
   */
  class ScaleLine extends Control$1 {
    /**
     * @param {Options} [options] Scale line options.
     */
    constructor(options) {
      options = options ? options : {};

      const element = document.createElement('div');
      element.style.pointerEvents = 'none';

      super({
        element: element,
        render: options.render,
        target: options.target,
      });

      /***
       * @type {ScaleLineOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {ScaleLineOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {ScaleLineOnSignature<void>}
       */
      this.un;

      const className =
        options.className !== undefined
          ? options.className
          : options.bar
          ? 'ol-scale-bar'
          : 'ol-scale-line';

      /**
       * @private
       * @type {HTMLElement}
       */
      this.innerElement_ = document.createElement('div');
      this.innerElement_.className = className + '-inner';

      this.element.className = className + ' ' + CLASS_UNSELECTABLE;
      this.element.appendChild(this.innerElement_);

      /**
       * @private
       * @type {?import("../View.js").State}
       */
      this.viewState_ = null;

      /**
       * @private
       * @type {number}
       */
      this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;

      /**
       * @private
       * @type {number|undefined}
       */
      this.maxWidth_ = options.maxWidth;

      /**
       * @private
       * @type {boolean}
       */
      this.renderedVisible_ = false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.renderedWidth_ = undefined;

      /**
       * @private
       * @type {string}
       */
      this.renderedHTML_ = '';

      this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);

      this.setUnits(options.units || 'metric');

      /**
       * @private
       * @type {boolean}
       */
      this.scaleBar_ = options.bar || false;

      /**
       * @private
       * @type {number}
       */
      this.scaleBarSteps_ = options.steps || 4;

      /**
       * @private
       * @type {boolean}
       */
      this.scaleBarText_ = options.text || false;

      /**
       * @private
       * @type {number|undefined}
       */
      this.dpi_ = options.dpi || undefined;
    }

    /**
     * Return the units to use in the scale line.
     * @return {Units} The units
     * to use in the scale line.
     * @observable
     * @api
     */
    getUnits() {
      return this.get(UNITS_PROP);
    }

    /**
     * @private
     */
    handleUnitsChanged_() {
      this.updateElement_();
    }

    /**
     * Set the units to use in the scale line.
     * @param {Units} units The units to use in the scale line.
     * @observable
     * @api
     */
    setUnits(units) {
      this.set(UNITS_PROP, units);
    }

    /**
     * Specify the dpi of output device such as printer.
     * @param {number|undefined} dpi The dpi of output device.
     * @api
     */
    setDpi(dpi) {
      this.dpi_ = dpi;
    }

    /**
     * @private
     */
    updateElement_() {
      const viewState = this.viewState_;

      if (!viewState) {
        if (this.renderedVisible_) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
        }
        return;
      }

      const center = viewState.center;
      const projection = viewState.projection;
      const units = this.getUnits();
      const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';
      let pointResolution = getPointResolution(
        projection,
        viewState.resolution,
        center,
        pointResolutionUnits
      );

      const minWidth =
        (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;

      const maxWidth =
        this.maxWidth_ !== undefined
          ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI
          : undefined;

      let nominalCount = minWidth * pointResolution;
      let suffix = '';
      if (units == 'degrees') {
        const metersPerDegree = METERS_PER_UNIT$1.degrees;
        nominalCount *= metersPerDegree;
        if (nominalCount < metersPerDegree / 60) {
          suffix = '\u2033'; // seconds
          pointResolution *= 3600;
        } else if (nominalCount < metersPerDegree) {
          suffix = '\u2032'; // minutes
          pointResolution *= 60;
        } else {
          suffix = '\u00b0'; // degrees
        }
      } else if (units == 'imperial') {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution /= 0.0254;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.3048;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.344;
        }
      } else if (units == 'nautical') {
        pointResolution /= 1852;
        suffix = 'NM';
      } else if (units == 'metric') {
        if (nominalCount < 0.001) {
          suffix = 'μm';
          pointResolution *= 1000000;
        } else if (nominalCount < 1) {
          suffix = 'mm';
          pointResolution *= 1000;
        } else if (nominalCount < 1000) {
          suffix = 'm';
        } else {
          suffix = 'km';
          pointResolution /= 1000;
        }
      } else if (units == 'us') {
        if (nominalCount < 0.9144) {
          suffix = 'in';
          pointResolution *= 39.37;
        } else if (nominalCount < 1609.344) {
          suffix = 'ft';
          pointResolution /= 0.30480061;
        } else {
          suffix = 'mi';
          pointResolution /= 1609.3472;
        }
      } else {
        assert(false, 33); // Invalid units
      }

      let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));
      let count, width, decimalCount;
      let previousCount, previousWidth, previousDecimalCount;
      while (true) {
        decimalCount = Math.floor(i / 3);
        const decimal = Math.pow(10, decimalCount);
        count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;
        width = Math.round(count / pointResolution);
        if (isNaN(width)) {
          this.element.style.display = 'none';
          this.renderedVisible_ = false;
          return;
        }
        if (maxWidth !== undefined && width >= maxWidth) {
          count = previousCount;
          width = previousWidth;
          decimalCount = previousDecimalCount;
          break;
        } else if (width >= minWidth) {
          break;
        }
        previousCount = count;
        previousWidth = width;
        previousDecimalCount = decimalCount;
        ++i;
      }
      const html = this.scaleBar_
        ? this.createScaleBar(width, count, suffix)
        : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;

      if (this.renderedHTML_ != html) {
        this.innerElement_.innerHTML = html;
        this.renderedHTML_ = html;
      }

      if (this.renderedWidth_ != width) {
        this.innerElement_.style.width = width + 'px';
        this.renderedWidth_ = width;
      }

      if (!this.renderedVisible_) {
        this.element.style.display = '';
        this.renderedVisible_ = true;
      }
    }

    /**
     * @private
     * @param {number} width The current width of the scalebar.
     * @param {number} scale The current scale.
     * @param {string} suffix The suffix to append to the scale text.
     * @return {string} The stringified HTML of the scalebar.
     */
    createScaleBar(width, scale, suffix) {
      const resolutionScale = this.getScaleForResolution();
      const mapScale =
        resolutionScale < 1
          ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'
          : '1 : ' + Math.round(resolutionScale).toLocaleString();
      const steps = this.scaleBarSteps_;
      const stepWidth = width / steps;
      const scaleSteps = [this.createMarker('absolute')];
      for (let i = 0; i < steps; ++i) {
        const cls =
          i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';
        scaleSteps.push(
          '<div>' +
            '<div ' +
            `class="ol-scale-singlebar ${cls}" ` +
            `style="width: ${stepWidth}px;"` +
            '>' +
            '</div>' +
            this.createMarker('relative') +
            // render text every second step, except when only 2 steps
            (i % 2 === 0 || steps === 2
              ? this.createStepText(i, width, false, scale, suffix)
              : '') +
            '</div>'
        );
      }
      // render text at the end
      scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));

      const scaleBarText = this.scaleBarText_
        ? `<div class="ol-scale-text" style="width: ${width}px;">` +
          mapScale +
          '</div>'
        : '';
      return scaleBarText + scaleSteps.join('');
    }

    /**
     * Creates a marker at given position
     * @param {'absolute'|'relative'} position The position, absolute or relative
     * @return {string} The stringified div containing the marker
     */
    createMarker(position) {
      const top = position === 'absolute' ? 3 : -10;
      return (
        '<div ' +
        'class="ol-scale-step-marker" ' +
        `style="position: ${position}; top: ${top}px;"` +
        '></div>'
      );
    }

    /**
     * Creates the label for a marker marker at given position
     * @param {number} i The iterator
     * @param {number} width The width the scalebar will currently use
     * @param {boolean} isLast Flag indicating if we add the last step text
     * @param {number} scale The current scale for the whole scalebar
     * @param {string} suffix The suffix for the scale
     * @return {string} The stringified div containing the step text
     */
    createStepText(i, width, isLast, scale, suffix) {
      const length =
        i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;
      const lengthString = length + (i === 0 ? '' : ' ' + suffix);
      const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;
      const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;
      return (
        '<div ' +
        'class="ol-scale-step-text" ' +
        'style="' +
        `margin-left: ${margin}px;` +
        `text-align: ${i === 0 ? 'left' : 'center'};` +
        `min-width: ${minWidth}px;` +
        `left: ${isLast ? width + 'px' : 'unset'};` +
        '">' +
        lengthString +
        '</div>'
      );
    }

    /**
     * Returns the appropriate scale for the given resolution and units.
     * @return {number} The appropriate scale.
     */
    getScaleForResolution() {
      const resolution = getPointResolution(
        this.viewState_.projection,
        this.viewState_.resolution,
        this.viewState_.center,
        'm'
      );
      const dpi = this.dpi_ || DEFAULT_DPI;
      const inchesPerMeter = 1000 / 25.4;
      return resolution * inchesPerMeter * dpi;
    }

    /**
     * Update the scale line element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      const frameState = mapEvent.frameState;
      if (!frameState) {
        this.viewState_ = null;
      } else {
        this.viewState_ = frameState.viewState;
      }
      this.updateElement_();
    }
  }

  var ScaleLine$1 = ScaleLine;

  /**
   * @module ol/control/ZoomSlider
   */

  /**
   * The enum for available directions.
   *
   * @enum {number}
   */
  const Direction = {
    VERTICAL: 0,
    HORIZONTAL: 1,
  };

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoomslider'] CSS class name.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
   * should be re-rendered. This is called in a `requestAnimationFrame` callback.
   */

  /**
   * @classdesc
   * A slider type of control for zooming.
   *
   * Example:
   *
   *     map.addControl(new ZoomSlider());
   *
   * @api
   */
  class ZoomSlider extends Control$1 {
    /**
     * @param {Options} [options] Zoom slider options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        render: options.render,
      });

      /**
       * @type {!Array<import("../events.js").EventsKey>}
       * @private
       */
      this.dragListenerKeys_ = [];

      /**
       * Will hold the current resolution of the view.
       *
       * @type {number|undefined}
       * @private
       */
      this.currentResolution_ = undefined;

      /**
       * The direction of the slider. Will be determined from actual display of the
       * container and defaults to Direction.VERTICAL.
       *
       * @type {Direction}
       * @private
       */
      this.direction_ = Direction.VERTICAL;

      /**
       * @type {boolean}
       * @private
       */
      this.dragging_;

      /**
       * @type {number}
       * @private
       */
      this.heightLimit_ = 0;

      /**
       * @type {number}
       * @private
       */
      this.widthLimit_ = 0;

      /**
       * @type {number|undefined}
       * @private
       */
      this.startX_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.startY_;

      /**
       * The calculated thumb size (border box plus margins).  Set when initSlider_
       * is called.
       * @type {import("../size.js").Size}
       * @private
       */
      this.thumbSize_ = null;

      /**
       * Whether the slider is initialized.
       * @type {boolean}
       * @private
       */
      this.sliderInitialized_ = false;

      /**
       * @type {number}
       * @private
       */
      this.duration_ = options.duration !== undefined ? options.duration : 200;

      const className =
        options.className !== undefined ? options.className : 'ol-zoomslider';
      const thumbElement = document.createElement('button');
      thumbElement.setAttribute('type', 'button');
      thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;
      const containerElement = this.element;
      containerElement.className =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      containerElement.appendChild(thumbElement);

      containerElement.addEventListener(
        PointerEventType.POINTERDOWN,
        this.handleDraggerStart_.bind(this),
        false
      );
      containerElement.addEventListener(
        PointerEventType.POINTERMOVE,
        this.handleDraggerDrag_.bind(this),
        false
      );
      containerElement.addEventListener(
        PointerEventType.POINTERUP,
        this.handleDraggerEnd_.bind(this),
        false
      );

      containerElement.addEventListener(
        EventType.CLICK,
        this.handleContainerClick_.bind(this),
        false
      );
      thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);
    }

    /**
     * Remove the control from its current map and attach it to the new map.
     * Pass `null` to just remove the control from the current map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      super.setMap(map);
      if (map) {
        map.render();
      }
    }

    /**
     * Initializes the slider element. This will determine and set this controls
     * direction_ and also constrain the dragging of the thumb to always be within
     * the bounds of the container.
     *
     * @return {boolean} Initialization successful
     * @private
     */
    initSlider_() {
      const container = this.element;
      let containerWidth = container.offsetWidth;
      let containerHeight = container.offsetHeight;
      if (containerWidth === 0 && containerHeight === 0) {
        return (this.sliderInitialized_ = false);
      }

      const containerStyle = getComputedStyle(container);
      containerWidth -=
        parseFloat(containerStyle['paddingRight']) +
        parseFloat(containerStyle['paddingLeft']);
      containerHeight -=
        parseFloat(containerStyle['paddingTop']) +
        parseFloat(containerStyle['paddingBottom']);
      const thumb = /** @type {HTMLElement} */ (container.firstElementChild);
      const thumbStyle = getComputedStyle(thumb);
      const thumbWidth =
        thumb.offsetWidth +
        parseFloat(thumbStyle['marginRight']) +
        parseFloat(thumbStyle['marginLeft']);
      const thumbHeight =
        thumb.offsetHeight +
        parseFloat(thumbStyle['marginTop']) +
        parseFloat(thumbStyle['marginBottom']);
      this.thumbSize_ = [thumbWidth, thumbHeight];

      if (containerWidth > containerHeight) {
        this.direction_ = Direction.HORIZONTAL;
        this.widthLimit_ = containerWidth - thumbWidth;
      } else {
        this.direction_ = Direction.VERTICAL;
        this.heightLimit_ = containerHeight - thumbHeight;
      }
      return (this.sliderInitialized_ = true);
    }

    /**
     * @param {PointerEvent} event The browser event to handle.
     * @private
     */
    handleContainerClick_(event) {
      const view = this.getMap().getView();

      const relativePosition = this.getRelativePosition_(
        event.offsetX - this.thumbSize_[0] / 2,
        event.offsetY - this.thumbSize_[1] / 2
      );

      const resolution = this.getResolutionForPosition_(relativePosition);
      const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));

      view.animateInternal({
        zoom: zoom,
        duration: this.duration_,
        easing: easeOut,
      });
    }

    /**
     * Handle dragger start events.
     * @param {PointerEvent} event The drag event.
     * @private
     */
    handleDraggerStart_(event) {
      if (!this.dragging_ && event.target === this.element.firstElementChild) {
        const element = /** @type {HTMLElement} */ (
          this.element.firstElementChild
        );
        this.getMap().getView().beginInteraction();
        this.startX_ = event.clientX - parseFloat(element.style.left);
        this.startY_ = event.clientY - parseFloat(element.style.top);
        this.dragging_ = true;

        if (this.dragListenerKeys_.length === 0) {
          const drag = this.handleDraggerDrag_;
          const end = this.handleDraggerEnd_;
          const doc = this.getMap().getOwnerDocument();
          this.dragListenerKeys_.push(
            listen(doc, PointerEventType.POINTERMOVE, drag, this),
            listen(doc, PointerEventType.POINTERUP, end, this)
          );
        }
      }
    }

    /**
     * Handle dragger drag events.
     *
     * @param {PointerEvent} event The drag event.
     * @private
     */
    handleDraggerDrag_(event) {
      if (this.dragging_) {
        const deltaX = event.clientX - this.startX_;
        const deltaY = event.clientY - this.startY_;
        const relativePosition = this.getRelativePosition_(deltaX, deltaY);
        this.currentResolution_ =
          this.getResolutionForPosition_(relativePosition);
        this.getMap().getView().setResolution(this.currentResolution_);
      }
    }

    /**
     * Handle dragger end events.
     * @param {PointerEvent} event The drag event.
     * @private
     */
    handleDraggerEnd_(event) {
      if (this.dragging_) {
        const view = this.getMap().getView();
        view.endInteraction();

        this.dragging_ = false;
        this.startX_ = undefined;
        this.startY_ = undefined;
        this.dragListenerKeys_.forEach(unlistenByKey);
        this.dragListenerKeys_.length = 0;
      }
    }

    /**
     * Positions the thumb inside its container according to the given resolution.
     *
     * @param {number} res The res.
     * @private
     */
    setThumbPosition_(res) {
      const position = this.getPositionForResolution_(res);
      const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);

      if (this.direction_ == Direction.HORIZONTAL) {
        thumb.style.left = this.widthLimit_ * position + 'px';
      } else {
        thumb.style.top = this.heightLimit_ * position + 'px';
      }
    }

    /**
     * Calculates the relative position of the thumb given x and y offsets.  The
     * relative position scales from 0 to 1.  The x and y offsets are assumed to be
     * in pixel units within the dragger limits.
     *
     * @param {number} x Pixel position relative to the left of the slider.
     * @param {number} y Pixel position relative to the top of the slider.
     * @return {number} The relative position of the thumb.
     * @private
     */
    getRelativePosition_(x, y) {
      let amount;
      if (this.direction_ === Direction.HORIZONTAL) {
        amount = x / this.widthLimit_;
      } else {
        amount = y / this.heightLimit_;
      }
      return clamp(amount, 0, 1);
    }

    /**
     * Calculates the corresponding resolution of the thumb given its relative
     * position (where 0 is the minimum and 1 is the maximum).
     *
     * @param {number} position The relative position of the thumb.
     * @return {number} The corresponding resolution.
     * @private
     */
    getResolutionForPosition_(position) {
      const fn = this.getMap().getView().getResolutionForValueFunction();
      return fn(1 - position);
    }

    /**
     * Determines the relative position of the slider for the given resolution.  A
     * relative position of 0 corresponds to the minimum view resolution.  A
     * relative position of 1 corresponds to the maximum view resolution.
     *
     * @param {number} res The resolution.
     * @return {number} The relative position value (between 0 and 1).
     * @private
     */
    getPositionForResolution_(res) {
      const fn = this.getMap().getView().getValueForResolutionFunction();
      return clamp(1 - fn(res), 0, 1);
    }

    /**
     * Update the zoomslider element.
     * @param {import("../MapEvent.js").default} mapEvent Map event.
     * @override
     */
    render(mapEvent) {
      if (!mapEvent.frameState) {
        return;
      }
      if (!this.sliderInitialized_ && !this.initSlider_()) {
        return;
      }
      const res = mapEvent.frameState.viewState.resolution;
      this.currentResolution_ = res;
      this.setThumbPosition_(res);
    }
  }

  var ZoomSlider$1 = ZoomSlider;

  /**
   * @module ol/control/ZoomToExtent
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-zoom-extent'] Class name.
   * @property {HTMLElement|string} [target] Specify a target if you want the control
   * to be rendered outside of the map's viewport.
   * @property {string|HTMLElement} [label='E'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
   * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
   * extent of the view projection is used.
   */

  /**
   * @classdesc
   * A button control which, when pressed, changes the map view to a specific
   * extent. To style this control use the css selector `.ol-zoom-extent`.
   *
   * @api
   */
  class ZoomToExtent extends Control$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        element: document.createElement('div'),
        target: options.target,
      });

      /**
       * @type {?import("../extent.js").Extent|null}
       * @protected
       */
      this.extent = options.extent ? options.extent : null;

      const className =
        options.className !== undefined ? options.className : 'ol-zoom-extent';

      const label = options.label !== undefined ? options.label : 'E';
      const tipLabel =
        options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
      const button = document.createElement('button');
      button.setAttribute('type', 'button');
      button.title = tipLabel;
      button.appendChild(
        typeof label === 'string' ? document.createTextNode(label) : label
      );

      button.addEventListener(
        EventType.CLICK,
        this.handleClick_.bind(this),
        false
      );

      const cssClasses =
        className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
      const element = this.element;
      element.className = cssClasses;
      element.appendChild(button);
    }

    /**
     * @param {MouseEvent} event The event to handle
     * @private
     */
    handleClick_(event) {
      event.preventDefault();
      this.handleZoomToExtent();
    }

    /**
     * @protected
     */
    handleZoomToExtent() {
      const map = this.getMap();
      const view = map.getView();
      const extent = !this.extent
        ? view.getProjection().getExtent()
        : this.extent;
      view.fitInternal(fromExtent(extent));
    }
  }

  var ZoomToExtent$1 = ZoomToExtent;

  /**
   * @module ol/control
   */

  var nsControl = {
    __proto__: null,
    Attribution: Attribution$1,
    Control: Control$1,
    FullScreen: FullScreen$1,
    MousePosition: MousePosition$1,
    OverviewMap: OverviewMap$1,
    Rotate: Rotate$1,
    ScaleLine: ScaleLine$1,
    Zoom: Zoom$1,
    ZoomSlider: ZoomSlider$1,
    ZoomToExtent: ZoomToExtent$1,
    defaults: defaults$1
  };

  /**
   * @module ol/geom/Circle
   */

  /**
   * @classdesc
   * Circle geometry.
   *
   * @api
   */
  class Circle extends SimpleGeometry$1 {
    /**
     * @param {!import("../coordinate.js").Coordinate} center Center.
     *     For internal use, flat coordinates in combination with `layout` and no
     *     `radius` are also accepted.
     * @param {number} [radius] Radius.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(center, radius, layout) {
      super();
      if (layout !== undefined && radius === undefined) {
        this.setFlatCoordinates(layout, center);
      } else {
        radius = radius ? radius : 0;
        this.setCenterAndRadius(center, radius, layout);
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!Circle} Clone.
     * @api
     */
    clone() {
      const circle = new Circle(
        this.flatCoordinates.slice(),
        undefined,
        this.layout
      );
      circle.applyProperties(this);
      return circle;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      const flatCoordinates = this.flatCoordinates;
      const dx = x - flatCoordinates[0];
      const dy = y - flatCoordinates[1];
      const squaredDistance = dx * dx + dy * dy;
      if (squaredDistance < minSquaredDistance) {
        if (squaredDistance === 0) {
          for (let i = 0; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        } else {
          const delta = this.getRadius() / Math.sqrt(squaredDistance);
          closestPoint[0] = flatCoordinates[0] + delta * dx;
          closestPoint[1] = flatCoordinates[1] + delta * dy;
          for (let i = 2; i < this.stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
        }
        closestPoint.length = this.stride;
        return squaredDistance;
      }
      return minSquaredDistance;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      const flatCoordinates = this.flatCoordinates;
      const dx = x - flatCoordinates[0];
      const dy = y - flatCoordinates[1];
      return dx * dx + dy * dy <= this.getRadiusSquared_();
    }

    /**
     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @return {import("../coordinate.js").Coordinate} Center.
     * @api
     */
    getCenter() {
      return this.flatCoordinates.slice(0, this.stride);
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      const flatCoordinates = this.flatCoordinates;
      const radius = flatCoordinates[this.stride] - flatCoordinates[0];
      return createOrUpdate$2(
        flatCoordinates[0] - radius,
        flatCoordinates[1] - radius,
        flatCoordinates[0] + radius,
        flatCoordinates[1] + radius,
        extent
      );
    }

    /**
     * Return the radius of the circle.
     * @return {number} Radius.
     * @api
     */
    getRadius() {
      return Math.sqrt(this.getRadiusSquared_());
    }

    /**
     * @private
     * @return {number} Radius squared.
     */
    getRadiusSquared_() {
      const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
      const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
      return dx * dx + dy * dy;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'Circle';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      const circleExtent = this.getExtent();
      if (intersects$2(extent, circleExtent)) {
        const center = this.getCenter();

        if (extent[0] <= center[0] && extent[2] >= center[0]) {
          return true;
        }
        if (extent[1] <= center[1] && extent[3] >= center[1]) {
          return true;
        }

        return forEachCorner(extent, this.intersectsCoordinate.bind(this));
      }
      return false;
    }

    /**
     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
     * @param {import("../coordinate.js").Coordinate} center Center.
     * @api
     */
    setCenter(center) {
      const stride = this.stride;
      const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
      const flatCoordinates = center.slice();
      flatCoordinates[stride] = flatCoordinates[0] + radius;
      for (let i = 1; i < stride; ++i) {
        flatCoordinates[stride + i] = center[i];
      }
      this.setFlatCoordinates(this.layout, flatCoordinates);
      this.changed();
    }

    /**
     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
     * number) of the circle.
     * @param {!import("../coordinate.js").Coordinate} center Center.
     * @param {number} radius Radius.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCenterAndRadius(center, radius, layout) {
      this.setLayout(layout, center, 0);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      /** @type {Array<number>} */
      const flatCoordinates = this.flatCoordinates;
      let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);
      flatCoordinates[offset++] = flatCoordinates[0] + radius;
      for (let i = 1, ii = this.stride; i < ii; ++i) {
        flatCoordinates[offset++] = flatCoordinates[i];
      }
      flatCoordinates.length = offset;
      this.changed();
    }

    getCoordinates() {
      return null;
    }

    setCoordinates(coordinates, layout) {}

    /**
     * Set the radius of the circle. The radius is in the units of the projection.
     * @param {number} radius Radius.
     * @api
     */
    setRadius(radius) {
      this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
      this.changed();
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in counter-clockwise radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    rotate(angle, anchor) {
      const center = this.getCenter();
      const stride = this.getStride();
      this.setCenter(
        rotate(center, 0, center.length, stride, angle, anchor, center)
      );
      this.changed();
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    translate(deltaX, deltaY) {
      const center = this.getCenter();
      const stride = this.getStride();
      this.setCenter(
        translate(center, 0, center.length, stride, deltaX, deltaY, center)
      );
      this.changed();
    }
  }

  /**
   * Transform each coordinate of the circle from one coordinate reference system
   * to another. The geometry is modified in place.
   * If you do not want the geometry modified in place, first clone() it and
   * then use this function on the clone.
   *
   * Internally a circle is currently represented by two points: the center of
   * the circle `[cx, cy]`, and the point to the right of the circle
   * `[cx + r, cy]`. This `transform` function just transforms these two points.
   * So the resulting geometry is also a circle, and that circle does not
   * correspond to the shape that would be obtained by transforming every point
   * of the original circle.
   *
   * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
   * @return {Circle} This geometry.  Note that original geometry is
   *     modified in place.
   * @function
   * @api
   */
  Circle.prototype.transform;
  var Circle$1 = Circle;

  /**
   * @module ol/geom/GeometryCollection
   */

  /**
   * @classdesc
   * An array of {@link module:ol/geom/Geometry~Geometry} objects.
   *
   * @api
   */
  class GeometryCollection extends Geometry$1 {
    /**
     * @param {Array<Geometry>} [geometries] Geometries.
     */
    constructor(geometries) {
      super();

      /**
       * @private
       * @type {Array<Geometry>}
       */
      this.geometries_ = geometries ? geometries : null;

      /**
       * @type {Array<import("../events.js").EventsKey>}
       */
      this.changeEventsKeys_ = [];

      this.listenGeometriesChange_();
    }

    /**
     * @private
     */
    unlistenGeometriesChange_() {
      this.changeEventsKeys_.forEach(unlistenByKey);
      this.changeEventsKeys_.length = 0;
    }

    /**
     * @private
     */
    listenGeometriesChange_() {
      if (!this.geometries_) {
        return;
      }
      for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {
        this.changeEventsKeys_.push(
          listen(this.geometries_[i], EventType.CHANGE, this.changed, this)
        );
      }
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!GeometryCollection} Clone.
     * @api
     */
    clone() {
      const geometryCollection = new GeometryCollection(null);
      geometryCollection.setGeometries(this.geometries_);
      geometryCollection.applyProperties(this);
      return geometryCollection;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        minSquaredDistance = geometries[i].closestPointXY(
          x,
          y,
          closestPoint,
          minSquaredDistance
        );
      }
      return minSquaredDistance;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].containsXY(x, y)) {
          return true;
        }
      }
      return false;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @protected
     * @return {import("../extent.js").Extent} extent Extent.
     */
    computeExtent(extent) {
      createOrUpdateEmpty(extent);
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        extend(extent, geometries[i].getExtent());
      }
      return extent;
    }

    /**
     * Return the geometries that make up this geometry collection.
     * @return {Array<Geometry>} Geometries.
     * @api
     */
    getGeometries() {
      return cloneGeometries(this.geometries_);
    }

    /**
     * @return {Array<Geometry>} Geometries.
     */
    getGeometriesArray() {
      return this.geometries_;
    }

    /**
     * @return {Array<Geometry>} Geometries.
     */
    getGeometriesArrayRecursive() {
      /** @type {Array<Geometry>} */
      let geometriesArray = [];
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].getType() === this.getType()) {
          geometriesArray = geometriesArray.concat(
            /** @type {GeometryCollection} */ (
              geometries[i]
            ).getGeometriesArrayRecursive()
          );
        } else {
          geometriesArray.push(geometries[i]);
        }
      }
      return geometriesArray;
    }

    /**
     * Create a simplified version of this geometry using the Douglas Peucker algorithm.
     * @param {number} squaredTolerance Squared tolerance.
     * @return {GeometryCollection} Simplified GeometryCollection.
     */
    getSimplifiedGeometry(squaredTolerance) {
      if (this.simplifiedGeometryRevision !== this.getRevision()) {
        this.simplifiedGeometryMaxMinSquaredTolerance = 0;
        this.simplifiedGeometryRevision = this.getRevision();
      }
      if (
        squaredTolerance < 0 ||
        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
          squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)
      ) {
        return this;
      }

      const simplifiedGeometries = [];
      const geometries = this.geometries_;
      let simplified = false;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        const geometry = geometries[i];
        const simplifiedGeometry =
          geometry.getSimplifiedGeometry(squaredTolerance);
        simplifiedGeometries.push(simplifiedGeometry);
        if (simplifiedGeometry !== geometry) {
          simplified = true;
        }
      }
      if (simplified) {
        const simplifiedGeometryCollection = new GeometryCollection(null);
        simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
        return simplifiedGeometryCollection;
      }
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'GeometryCollection';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        if (geometries[i].intersectsExtent(extent)) {
          return true;
        }
      }
      return false;
    }

    /**
     * @return {boolean} Is empty.
     */
    isEmpty() {
      return this.geometries_.length === 0;
    }

    /**
     * Rotate the geometry around a given coordinate. This modifies the geometry
     * coordinates in place.
     * @param {number} angle Rotation angle in radians.
     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
     * @api
     */
    rotate(angle, anchor) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].rotate(angle, anchor);
      }
      this.changed();
    }

    /**
     * Scale the geometry (with an optional origin).  This modifies the geometry
     * coordinates in place.
     * @abstract
     * @param {number} sx The scaling factor in the x-direction.
     * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).
     * @param {import("../coordinate.js").Coordinate} [anchor] The scale origin (defaults to the center
     *     of the geometry extent).
     * @api
     */
    scale(sx, sy, anchor) {
      if (!anchor) {
        anchor = getCenter(this.getExtent());
      }
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].scale(sx, sy, anchor);
      }
      this.changed();
    }

    /**
     * Set the geometries that make up this geometry collection.
     * @param {Array<Geometry>} geometries Geometries.
     * @api
     */
    setGeometries(geometries) {
      this.setGeometriesArray(cloneGeometries(geometries));
    }

    /**
     * @param {Array<Geometry>} geometries Geometries.
     */
    setGeometriesArray(geometries) {
      this.unlistenGeometriesChange_();
      this.geometries_ = geometries;
      this.listenGeometriesChange_();
      this.changed();
    }

    /**
     * Apply a transform function to the coordinates of the geometry.
     * The geometry is modified in place.
     * If you do not want the geometry modified in place, first `clone()` it and
     * then use this function on the clone.
     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
     * Called with a flat array of geometry coordinates.
     * @api
     */
    applyTransform(transformFn) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].applyTransform(transformFn);
      }
      this.changed();
    }

    /**
     * Translate the geometry.  This modifies the geometry coordinates in place.  If
     * instead you want a new geometry, first `clone()` this geometry.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @api
     */
    translate(deltaX, deltaY) {
      const geometries = this.geometries_;
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        geometries[i].translate(deltaX, deltaY);
      }
      this.changed();
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.unlistenGeometriesChange_();
      super.disposeInternal();
    }
  }

  /**
   * @param {Array<Geometry>} geometries Geometries.
   * @return {Array<Geometry>} Cloned geometries.
   */
  function cloneGeometries(geometries) {
    const clonedGeometries = [];
    for (let i = 0, ii = geometries.length; i < ii; ++i) {
      clonedGeometries.push(geometries[i].clone());
    }
    return clonedGeometries;
  }

  var GeometryCollection$1 = GeometryCollection;

  /**
   * @module ol/geom/MultiLineString
   */

  /**
   * @classdesc
   * Multi-linestring geometry.
   *
   * @api
   */
  class MultiLineString extends SimpleGeometry$1 {
    /**
     * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
     *     Coordinates or LineString geometries. (For internal use, flat coordinates in
     *     combination with `layout` and `ends` are also accepted.)
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @param {Array<number>} [ends] Flat coordinate ends for internal use.
     */
    constructor(coordinates, layout, ends) {
      super();

      /**
       * @type {Array<number>}
       * @private
       */
      this.ends_ = [];

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      if (Array.isArray(coordinates[0])) {
        this.setCoordinates(
          /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (
            coordinates
          ),
          layout
        );
      } else if (layout !== undefined && ends) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates)
        );
        this.ends_ = ends;
      } else {
        let layout = this.getLayout();
        const lineStrings = /** @type {Array<LineString>} */ (coordinates);
        const flatCoordinates = [];
        const ends = [];
        for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
          const lineString = lineStrings[i];
          if (i === 0) {
            layout = lineString.getLayout();
          }
          extend$1(flatCoordinates, lineString.getFlatCoordinates());
          ends.push(flatCoordinates.length);
        }
        this.setFlatCoordinates(layout, flatCoordinates);
        this.ends_ = ends;
      }
    }

    /**
     * Append the passed linestring to the multilinestring.
     * @param {LineString} lineString LineString.
     * @api
     */
    appendLineString(lineString) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = lineString.getFlatCoordinates().slice();
      } else {
        extend$1(this.flatCoordinates, lineString.getFlatCoordinates().slice());
      }
      this.ends_.push(this.flatCoordinates.length);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiLineString} Clone.
     * @api
     */
    clone() {
      const multiLineString = new MultiLineString(
        this.flatCoordinates.slice(),
        this.layout,
        this.ends_.slice()
      );
      multiLineString.applyProperties(this);
      return multiLineString;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          arrayMaxSquaredDelta(
            this.flatCoordinates,
            0,
            this.ends_,
            this.stride,
            0
          )
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestArrayPoint(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        this.maxDelta_,
        false,
        x,
        y,
        closestPoint,
        minSquaredDistance
      );
    }

    /**
     * Returns the coordinate at `m` using linear interpolation, or `null` if no
     * such coordinate exists.
     *
     * `extrapolate` controls extrapolation beyond the range of Ms in the
     * MultiLineString. If `extrapolate` is `true` then Ms less than the first
     * M will return the first coordinate and Ms greater than the last M will
     * return the last coordinate.
     *
     * `interpolate` controls interpolation between consecutive LineStrings
     * within the MultiLineString. If `interpolate` is `true` the coordinates
     * will be linearly interpolated between the last coordinate of one LineString
     * and the first coordinate of the next LineString.  If `interpolate` is
     * `false` then the function will return `null` for Ms falling between
     * LineStrings.
     *
     * @param {number} m M.
     * @param {boolean} [extrapolate] Extrapolate. Default is `false`.
     * @param {boolean} [interpolate] Interpolate. Default is `false`.
     * @return {import("../coordinate.js").Coordinate|null} Coordinate.
     * @api
     */
    getCoordinateAtM(m, extrapolate, interpolate) {
      if (
        (this.layout != 'XYM' && this.layout != 'XYZM') ||
        this.flatCoordinates.length === 0
      ) {
        return null;
      }
      extrapolate = extrapolate !== undefined ? extrapolate : false;
      interpolate = interpolate !== undefined ? interpolate : false;
      return lineStringsCoordinateAtM(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        m,
        extrapolate,
        interpolate
      );
    }

    /**
     * Return the coordinates of the multilinestring.
     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
     * @api
     */
    getCoordinates() {
      return inflateCoordinatesArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride
      );
    }

    /**
     * @return {Array<number>} Ends.
     */
    getEnds() {
      return this.ends_;
    }

    /**
     * Return the linestring at the specified index.
     * @param {number} index Index.
     * @return {LineString} LineString.
     * @api
     */
    getLineString(index) {
      if (index < 0 || this.ends_.length <= index) {
        return null;
      }
      return new LineString$1(
        this.flatCoordinates.slice(
          index === 0 ? 0 : this.ends_[index - 1],
          this.ends_[index]
        ),
        this.layout
      );
    }

    /**
     * Return the linestrings of this multilinestring.
     * @return {Array<LineString>} LineStrings.
     * @api
     */
    getLineStrings() {
      const flatCoordinates = this.flatCoordinates;
      const ends = this.ends_;
      const layout = this.layout;
      /** @type {Array<LineString>} */
      const lineStrings = [];
      let offset = 0;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const lineString = new LineString$1(
          flatCoordinates.slice(offset, end),
          layout
        );
        lineStrings.push(lineString);
        offset = end;
      }
      return lineStrings;
    }

    /**
     * @return {Array<number>} Flat midpoints.
     */
    getFlatMidpoints() {
      const midpoints = [];
      const flatCoordinates = this.flatCoordinates;
      let offset = 0;
      const ends = this.ends_;
      const stride = this.stride;
      for (let i = 0, ii = ends.length; i < ii; ++i) {
        const end = ends[i];
        const midpoint = interpolatePoint(
          flatCoordinates,
          offset,
          end,
          stride,
          0.5
        );
        extend$1(midpoints, midpoint);
        offset = end;
      }
      return midpoints;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {MultiLineString} Simplified MultiLineString.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      const simplifiedEnds = [];
      simplifiedFlatCoordinates.length = douglasPeuckerArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        squaredTolerance,
        simplifiedFlatCoordinates,
        0,
        simplifiedEnds
      );
      return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'MultiLineString';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLineStringArray(
        this.flatCoordinates,
        0,
        this.ends_,
        this.stride,
        extent
      );
    }

    /**
     * Set the coordinates of the multilinestring.
     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 2);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const ends = deflateCoordinatesArray(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
        this.ends_
      );
      this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
      this.changed();
    }
  }

  var MultiLineString$1 = MultiLineString;

  /**
   * @module ol/geom/MultiPoint
   */

  /**
   * @classdesc
   * Multi-point geometry.
   *
   * @api
   */
  class MultiPoint extends SimpleGeometry$1 {
    /**
     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     */
    constructor(coordinates, layout) {
      super();
      if (layout && !Array.isArray(coordinates[0])) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates)
        );
      } else {
        this.setCoordinates(
          /** @type {Array<import("../coordinate.js").Coordinate>} */ (
            coordinates
          ),
          layout
        );
      }
    }

    /**
     * Append the passed point to this multipoint.
     * @param {Point} point Point.
     * @api
     */
    appendPoint(point) {
      if (!this.flatCoordinates) {
        this.flatCoordinates = point.getFlatCoordinates().slice();
      } else {
        extend$1(this.flatCoordinates, point.getFlatCoordinates());
      }
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPoint} Clone.
     * @api
     */
    clone() {
      const multiPoint = new MultiPoint(
        this.flatCoordinates.slice(),
        this.layout
      );
      multiPoint.applyProperties(this);
      return multiPoint;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      const flatCoordinates = this.flatCoordinates;
      const stride = this.stride;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const squaredDistance = squaredDistance$1(
          x,
          y,
          flatCoordinates[i],
          flatCoordinates[i + 1]
        );
        if (squaredDistance < minSquaredDistance) {
          minSquaredDistance = squaredDistance;
          for (let j = 0; j < stride; ++j) {
            closestPoint[j] = flatCoordinates[i + j];
          }
          closestPoint.length = stride;
        }
      }
      return minSquaredDistance;
    }

    /**
     * Return the coordinates of the multipoint.
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
     * @api
     */
    getCoordinates() {
      return inflateCoordinates(
        this.flatCoordinates,
        0,
        this.flatCoordinates.length,
        this.stride
      );
    }

    /**
     * Return the point at the specified index.
     * @param {number} index Index.
     * @return {Point} Point.
     * @api
     */
    getPoint(index) {
      const n = !this.flatCoordinates
        ? 0
        : this.flatCoordinates.length / this.stride;
      if (index < 0 || n <= index) {
        return null;
      }
      return new Point$1(
        this.flatCoordinates.slice(
          index * this.stride,
          (index + 1) * this.stride
        ),
        this.layout
      );
    }

    /**
     * Return the points of this multipoint.
     * @return {Array<Point>} Points.
     * @api
     */
    getPoints() {
      const flatCoordinates = this.flatCoordinates;
      const layout = this.layout;
      const stride = this.stride;
      /** @type {Array<Point>} */
      const points = [];
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const point = new Point$1(flatCoordinates.slice(i, i + stride), layout);
        points.push(point);
      }
      return points;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'MultiPoint';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      const flatCoordinates = this.flatCoordinates;
      const stride = this.stride;
      for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
        const x = flatCoordinates[i];
        const y = flatCoordinates[i + 1];
        if (containsXY(extent, x, y)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Set the coordinates of the multipoint.
     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 1);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      this.flatCoordinates.length = deflateCoordinates(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride
      );
      this.changed();
    }
  }

  var MultiPoint$1 = MultiPoint;

  /**
   * @module ol/geom/flat/center
   */

  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {Array<number>} Flat centers.
   */
  function linearRingss(flatCoordinates, offset, endss, stride) {
    const flatCenters = [];
    let extent = createEmpty();
    for (let i = 0, ii = endss.length; i < ii; ++i) {
      const ends = endss[i];
      extent = createOrUpdateFromFlatCoordinates(
        flatCoordinates,
        offset,
        ends[0],
        stride
      );
      flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
      offset = ends[ends.length - 1];
    }
    return flatCenters;
  }

  /**
   * @module ol/geom/MultiPolygon
   */

  /**
   * @classdesc
   * Multi-polygon geometry.
   *
   * @api
   */
  class MultiPolygon extends SimpleGeometry$1 {
    /**
     * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
     *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.
     */
    constructor(coordinates, layout, endss) {
      super();

      /**
       * @type {Array<Array<number>>}
       * @private
       */
      this.endss_ = [];

      /**
       * @private
       * @type {number}
       */
      this.flatInteriorPointsRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {number}
       */
      this.maxDelta_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.maxDeltaRevision_ = -1;

      /**
       * @private
       * @type {number}
       */
      this.orientedRevision_ = -1;

      /**
       * @private
       * @type {Array<number>}
       */
      this.orientedFlatCoordinates_ = null;

      if (!endss && !Array.isArray(coordinates[0])) {
        let thisLayout = this.getLayout();
        const polygons = /** @type {Array<Polygon>} */ (coordinates);
        const flatCoordinates = [];
        const thisEndss = [];
        for (let i = 0, ii = polygons.length; i < ii; ++i) {
          const polygon = polygons[i];
          if (i === 0) {
            thisLayout = polygon.getLayout();
          }
          const offset = flatCoordinates.length;
          const ends = polygon.getEnds();
          for (let j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] += offset;
          }
          extend$1(flatCoordinates, polygon.getFlatCoordinates());
          thisEndss.push(ends);
        }
        layout = thisLayout;
        coordinates = flatCoordinates;
        endss = thisEndss;
      }
      if (layout !== undefined && endss) {
        this.setFlatCoordinates(
          layout,
          /** @type {Array<number>} */ (coordinates)
        );
        this.endss_ = endss;
      } else {
        this.setCoordinates(
          /** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (
            coordinates
          ),
          layout
        );
      }
    }

    /**
     * Append the passed polygon to this multipolygon.
     * @param {Polygon} polygon Polygon.
     * @api
     */
    appendPolygon(polygon) {
      /** @type {Array<number>} */
      let ends;
      if (!this.flatCoordinates) {
        this.flatCoordinates = polygon.getFlatCoordinates().slice();
        ends = polygon.getEnds().slice();
        this.endss_.push();
      } else {
        const offset = this.flatCoordinates.length;
        extend$1(this.flatCoordinates, polygon.getFlatCoordinates());
        ends = polygon.getEnds().slice();
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] += offset;
        }
      }
      this.endss_.push(ends);
      this.changed();
    }

    /**
     * Make a complete copy of the geometry.
     * @return {!MultiPolygon} Clone.
     * @api
     */
    clone() {
      const len = this.endss_.length;
      const newEndss = new Array(len);
      for (let i = 0; i < len; ++i) {
        newEndss[i] = this.endss_[i].slice();
      }

      const multiPolygon = new MultiPolygon(
        this.flatCoordinates.slice(),
        this.layout,
        newEndss
      );
      multiPolygon.applyProperties(this);

      return multiPolygon;
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @return {number} Minimum squared distance.
     */
    closestPointXY(x, y, closestPoint, minSquaredDistance) {
      if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
        return minSquaredDistance;
      }
      if (this.maxDeltaRevision_ != this.getRevision()) {
        this.maxDelta_ = Math.sqrt(
          multiArrayMaxSquaredDelta(
            this.flatCoordinates,
            0,
            this.endss_,
            this.stride,
            0
          )
        );
        this.maxDeltaRevision_ = this.getRevision();
      }
      return assignClosestMultiArrayPoint(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
        this.maxDelta_,
        true,
        x,
        y,
        closestPoint,
        minSquaredDistance
      );
    }

    /**
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    containsXY(x, y) {
      return linearRingssContainsXY(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
        x,
        y
      );
    }

    /**
     * Return the area of the multipolygon on projected plane.
     * @return {number} Area (on projected plane).
     * @api
     */
    getArea() {
      return linearRingss$1(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride
      );
    }

    /**
     * Get the coordinate array for this geometry.  This array has the structure
     * of a GeoJSON coordinate array for multi-polygons.
     *
     * @param {boolean} [right] Orient coordinates according to the right-hand
     *     rule (counter-clockwise for exterior and clockwise for interior rings).
     *     If `false`, coordinates will be oriented according to the left-hand rule
     *     (clockwise for exterior and counter-clockwise for interior rings).
     *     By default, coordinate orientation will depend on how the geometry was
     *     constructed.
     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
     * @api
     */
    getCoordinates(right) {
      let flatCoordinates;
      if (right !== undefined) {
        flatCoordinates = this.getOrientedFlatCoordinates().slice();
        orientLinearRingsArray(
          flatCoordinates,
          0,
          this.endss_,
          this.stride,
          right
        );
      } else {
        flatCoordinates = this.flatCoordinates;
      }

      return inflateMultiCoordinatesArray(
        flatCoordinates,
        0,
        this.endss_,
        this.stride
      );
    }

    /**
     * @return {Array<Array<number>>} Endss.
     */
    getEndss() {
      return this.endss_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoints() {
      if (this.flatInteriorPointsRevision_ != this.getRevision()) {
        const flatCenters = linearRingss(
          this.flatCoordinates,
          0,
          this.endss_,
          this.stride
        );
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.getOrientedFlatCoordinates(),
          0,
          this.endss_,
          this.stride,
          flatCenters
        );
        this.flatInteriorPointsRevision_ = this.getRevision();
      }
      return this.flatInteriorPoints_;
    }

    /**
     * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.
     * @return {MultiPoint} Interior points as XYM coordinates, where M is
     * the length of the horizontal intersection that the point belongs to.
     * @api
     */
    getInteriorPoints() {
      return new MultiPoint$1(this.getFlatInteriorPoints().slice(), 'XYM');
    }

    /**
     * @return {Array<number>} Oriented flat coordinates.
     */
    getOrientedFlatCoordinates() {
      if (this.orientedRevision_ != this.getRevision()) {
        const flatCoordinates = this.flatCoordinates;
        if (
          linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)
        ) {
          this.orientedFlatCoordinates_ = flatCoordinates;
        } else {
          this.orientedFlatCoordinates_ = flatCoordinates.slice();
          this.orientedFlatCoordinates_.length = orientLinearRingsArray(
            this.orientedFlatCoordinates_,
            0,
            this.endss_,
            this.stride
          );
        }
        this.orientedRevision_ = this.getRevision();
      }
      return this.orientedFlatCoordinates_;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {MultiPolygon} Simplified MultiPolygon.
     * @protected
     */
    getSimplifiedGeometryInternal(squaredTolerance) {
      const simplifiedFlatCoordinates = [];
      const simplifiedEndss = [];
      simplifiedFlatCoordinates.length = quantizeMultiArray(
        this.flatCoordinates,
        0,
        this.endss_,
        this.stride,
        Math.sqrt(squaredTolerance),
        simplifiedFlatCoordinates,
        0,
        simplifiedEndss
      );
      return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);
    }

    /**
     * Return the polygon at the specified index.
     * @param {number} index Index.
     * @return {Polygon} Polygon.
     * @api
     */
    getPolygon(index) {
      if (index < 0 || this.endss_.length <= index) {
        return null;
      }
      let offset;
      if (index === 0) {
        offset = 0;
      } else {
        const prevEnds = this.endss_[index - 1];
        offset = prevEnds[prevEnds.length - 1];
      }
      const ends = this.endss_[index].slice();
      const end = ends[ends.length - 1];
      if (offset !== 0) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          ends[i] -= offset;
        }
      }
      return new Polygon$1(
        this.flatCoordinates.slice(offset, end),
        this.layout,
        ends
      );
    }

    /**
     * Return the polygons of this multipolygon.
     * @return {Array<Polygon>} Polygons.
     * @api
     */
    getPolygons() {
      const layout = this.layout;
      const flatCoordinates = this.flatCoordinates;
      const endss = this.endss_;
      const polygons = [];
      let offset = 0;
      for (let i = 0, ii = endss.length; i < ii; ++i) {
        const ends = endss[i].slice();
        const end = ends[ends.length - 1];
        if (offset !== 0) {
          for (let j = 0, jj = ends.length; j < jj; ++j) {
            ends[j] -= offset;
          }
        }
        const polygon = new Polygon$1(
          flatCoordinates.slice(offset, end),
          layout,
          ends
        );
        polygons.push(polygon);
        offset = end;
      }
      return polygons;
    }

    /**
     * Get the type of this geometry.
     * @return {import("./Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return 'MultiPolygon';
    }

    /**
     * Test if the geometry and the passed extent intersect.
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {boolean} `true` if the geometry and the extent intersect.
     * @api
     */
    intersectsExtent(extent) {
      return intersectsLinearRingMultiArray(
        this.getOrientedFlatCoordinates(),
        0,
        this.endss_,
        this.stride,
        extent
      );
    }

    /**
     * Set the coordinates of the multipolygon.
     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
     * @param {import("./Geometry.js").GeometryLayout} [layout] Layout.
     * @api
     */
    setCoordinates(coordinates, layout) {
      this.setLayout(layout, coordinates, 3);
      if (!this.flatCoordinates) {
        this.flatCoordinates = [];
      }
      const endss = deflateMultiCoordinatesArray(
        this.flatCoordinates,
        0,
        coordinates,
        this.stride,
        this.endss_
      );
      if (endss.length === 0) {
        this.flatCoordinates.length = 0;
      } else {
        const lastEnds = endss[endss.length - 1];
        this.flatCoordinates.length =
          lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];
      }
      this.changed();
    }
  }

  var MultiPolygon$1 = MultiPolygon;

  /**
   * @module ol/geom
   */

  var nsGeom = {
    __proto__: null,
    Circle: Circle$1,
    Geometry: Geometry$1,
    GeometryCollection: GeometryCollection$1,
    LinearRing: LinearRing$1,
    LineString: LineString$1,
    MultiLineString: MultiLineString$1,
    MultiPoint: MultiPoint$1,
    MultiPolygon: MultiPolygon$1,
    Point: Point$1,
    Polygon: Polygon$1,
    SimpleGeometry: SimpleGeometry$1
  };

  /**
   * @module ol/format/Feature
   */

  /**
   * @typedef {Object} ReadOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
   * If not provided, the projection will be derived from the data (where possible) or
   * the `dataProjection` of the format is assigned (where set). If the projection
   * can not be derived from the data and if no `dataProjection` is set for a format,
   * the features will not be reprojected.
   * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
   * This is only required when reading data with tile pixels as geometry units. When configured,
   * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
   * provided.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * created by the format reader. If not provided, features will be returned in the
   * `dataProjection`.
   */

  /**
   * @typedef {Object} WriteOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
   * If not provided, the `dataProjection` of the format is assigned (where set).
   * If no `dataProjection` is set for a format, the features will be returned
   * in the `featureProjection`.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * that will be serialized by the format writer. If not provided, geometries are assumed
   * to be in the `dataProjection` if that is set; in other words, they are not transformed.
   * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
   * rule for linear ring orientation.  This means that polygons will have counter-clockwise
   * exterior rings and clockwise interior rings.  By default, coordinates are serialized
   * as they are provided at construction.  If `true`, the right-hand rule will
   * be applied.  If `false`, the left-hand rule will be applied (clockwise for
   * exterior and counter-clockwise for interior rings).  Note that not all
   * formats support this.  The GeoJSON format does use this property when writing
   * geometries.
   * @property {number} [decimals] Maximum number of decimal places for coordinates.
   * Coordinates are stored internally as floats, but floating-point arithmetic can create
   * coordinates with a large number of decimal places, not generally wanted on output.
   * Set a number here to round coordinates. Can also be used to ensure that
   * coordinates read in can be written back out with the same number of decimals.
   * Default is no rounding.
   */

  /**
   * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for feature formats.
   * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
   * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
   * file formats.  See the documentation for each format for more details.
   *
   * @abstract
   * @api
   */
  class FeatureFormat {
    constructor() {
      /**
       * @protected
       * @type {import("../proj/Projection.js").default|undefined}
       */
      this.dataProjection = undefined;

      /**
       * @protected
       * @type {import("../proj/Projection.js").default|undefined}
       */
      this.defaultFeatureProjection = undefined;

      /**
       * A list media types supported by the format in descending order of preference.
       * @type {Array<string>}
       */
      this.supportedMediaTypes = null;
    }

    /**
     * Adds the data projection to the read options.
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [options] Options.
     * @return {ReadOptions|undefined} Options.
     * @protected
     */
    getReadOptions(source, options) {
      if (options) {
        let dataProjection = options.dataProjection
          ? get$2(options.dataProjection)
          : this.readProjection(source);
        if (
          options.extent &&
          dataProjection &&
          dataProjection.getUnits() === 'tile-pixels'
        ) {
          dataProjection = get$2(dataProjection);
          dataProjection.setWorldExtent(options.extent);
        }
        options = {
          dataProjection: dataProjection,
          featureProjection: options.featureProjection,
        };
      }
      return this.adaptOptions(options);
    }

    /**
     * Sets the `dataProjection` on the options, if no `dataProjection`
     * is set.
     * @param {WriteOptions|ReadOptions|undefined} options
     *     Options.
     * @protected
     * @return {WriteOptions|ReadOptions|undefined}
     *     Updated options.
     */
    adaptOptions(options) {
      return Object.assign(
        {
          dataProjection: this.dataProjection,
          featureProjection: this.defaultFeatureProjection,
        },
        options
      );
    }

    /**
     * @abstract
     * @return {Type} The format type.
     */
    getType() {
      return abstract();
    }

    /**
     * Read a single feature from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [options] Read options.
     * @return {import("../Feature.js").FeatureLike} Feature.
     */
    readFeature(source, options) {
      return abstract();
    }

    /**
     * Read all features from a source.
     *
     * @abstract
     * @param {Document|Element|ArrayBuffer|Object|string} source Source.
     * @param {ReadOptions} [options] Read options.
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     */
    readFeatures(source, options) {
      return abstract();
    }

    /**
     * Read a single geometry from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @param {ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometry(source, options) {
      return abstract();
    }

    /**
     * Read the projection from a source.
     *
     * @abstract
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     */
    readProjection(source) {
      return abstract();
    }

    /**
     * Encode a feature in this format.
     *
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     */
    writeFeature(feature, options) {
      return abstract();
    }

    /**
     * Encode an array of features in this format.
     *
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     */
    writeFeatures(features, options) {
      return abstract();
    }

    /**
     * Write a single geometry in this format.
     *
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {WriteOptions} [options] Write options.
     * @return {string|ArrayBuffer} Result.
     */
    writeGeometry(geometry, options) {
      return abstract();
    }
  }

  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {boolean} write Set to true for writing, false for reading.
   * @param {WriteOptions|ReadOptions} [options] Options.
   * @return {import("../geom/Geometry.js").default} Transformed geometry.
   */
  function transformGeometryWithOptions(geometry, write, options) {
    const featureProjection = options
      ? get$2(options.featureProjection)
      : null;
    const dataProjection = options ? get$2(options.dataProjection) : null;

    let transformed;
    if (
      featureProjection &&
      dataProjection &&
      !equivalent(featureProjection, dataProjection)
    ) {
      transformed = (write ? geometry.clone() : geometry).transform(
        write ? featureProjection : dataProjection,
        write ? dataProjection : featureProjection
      );
    } else {
      transformed = geometry;
    }
    if (
      write &&
      options &&
      /** @type {WriteOptions} */ (options).decimals !== undefined
    ) {
      const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);
      // if decimals option on write, round each coordinate appropriately
      /**
       * @param {Array<number>} coordinates Coordinates.
       * @return {Array<number>} Transformed coordinates.
       */
      const transform = function (coordinates) {
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
          coordinates[i] = Math.round(coordinates[i] * power) / power;
        }
        return coordinates;
      };
      if (transformed === geometry) {
        transformed = geometry.clone();
      }
      transformed.applyTransform(transform);
    }
    return transformed;
  }

  /**
   * @param {import("../extent.js").Extent} extent Extent.
   * @param {ReadOptions} [options] Read options.
   * @return {import("../extent.js").Extent} Transformed extent.
   */
  function transformExtentWithOptions(extent, options) {
    const featureProjection = options
      ? get$2(options.featureProjection)
      : null;
    const dataProjection = options ? get$2(options.dataProjection) : null;

    if (
      featureProjection &&
      dataProjection &&
      !equivalent(featureProjection, dataProjection)
    ) {
      return transformExtent(extent, dataProjection, featureProjection);
    }
    return extent;
  }

  /**
   * @module ol/format/JSONFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for JSON feature formats.
   *
   * @abstract
   */
  class JSONFeature extends FeatureFormat {
    constructor() {
      super();
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     */
    getType() {
      return 'json';
    }

    /**
     * Read a feature.  Only works for a single feature. Use `readFeatures` to
     * read a feature collection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */
    readFeature(source, options) {
      return this.readFeatureFromObject(
        getObject(source),
        this.getReadOptions(source, options)
      );
    }

    /**
     * Read all features.  Works with both a single feature and a feature
     * collection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    readFeatures(source, options) {
      return this.readFeaturesFromObject(
        getObject(source),
        this.getReadOptions(source, options)
      );
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromObject(object, options) {
      return abstract();
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromObject(object, options) {
      return abstract();
    }

    /**
     * Read a geometry.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     */
    readGeometry(source, options) {
      return this.readGeometryFromObject(
        getObject(source),
        this.getReadOptions(source, options)
      );
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromObject(object, options) {
      return abstract();
    }

    /**
     * Read the projection.
     *
     * @param {ArrayBuffer|Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    readProjection(source) {
      return this.readProjectionFromObject(getObject(source));
    }

    /**
     * @abstract
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromObject(object) {
      return abstract();
    }

    /**
     * Encode a feature as string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded feature.
     * @api
     */
    writeFeature(feature, options) {
      return JSON.stringify(this.writeFeatureObject(feature, options));
    }

    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     */
    writeFeatureObject(feature, options) {
      return abstract();
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded features.
     * @api
     */
    writeFeatures(features, options) {
      return JSON.stringify(this.writeFeaturesObject(features, options));
    }

    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     */
    writeFeaturesObject(features, options) {
      return abstract();
    }

    /**
     * Encode a geometry as string.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded geometry.
     * @api
     */
    writeGeometry(geometry, options) {
      return JSON.stringify(this.writeGeometryObject(geometry, options));
    }

    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {Object} Object.
     */
    writeGeometryObject(geometry, options) {
      return abstract();
    }
  }

  /**
   * @param {Document|Element|Object|string} source Source.
   * @return {Object} Object.
   */
  function getObject(source) {
    if (typeof source === 'string') {
      const object = JSON.parse(source);
      return object ? /** @type {Object} */ (object) : null;
    } else if (source !== null) {
      return source;
    }
    return null;
  }

  var JSONFeature$1 = JSONFeature;

  /**
   * @module ol/format/GeoJSON
   */

  /**
   * @typedef {import("geojson").GeoJSON} GeoJSONObject
   * @typedef {import("geojson").Feature} GeoJSONFeature
   * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
   * @typedef {import("geojson").Geometry} GeoJSONGeometry
   * @typedef {import("geojson").Point} GeoJSONPoint
   * @typedef {import("geojson").LineString} GeoJSONLineString
   * @typedef {import("geojson").Polygon} GeoJSONPolygon
   * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
   * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
   * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
   * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
   */

  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
   * written by the format.  Options passed to read or write methods will take precedence.
   * @property {string} [geometryName] Geometry name to use when creating features.
   * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
   * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
   * will look for that field to set the geometry name. If both this field is set to `true`
   * and a `geometryName` is provided, the `geometryName` will take precedence.
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the GeoJSON format.
   *
   * @api
   */
  class GeoJSON extends JSONFeature$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super();

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2(
        options.dataProjection ? options.dataProjection : 'EPSG:4326'
      );

      if (options.featureProjection) {
        /**
         * @type {import("../proj/Projection.js").default}
         */
        this.defaultFeatureProjection = get$2(options.featureProjection);
      }

      /**
       * Name of the geometry attribute for features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * Look for the geometry name in the feature GeoJSON
       * @type {boolean|undefined}
       * @private
       */
      this.extractGeometryName_ = options.extractGeometryName;

      this.supportedMediaTypes = [
        'application/geo+json',
        'application/vnd.geo+json',
      ];
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromObject(object, options) {
      /**
       * @type {GeoJSONFeature}
       */
      let geoJSONFeature = null;
      if (object['type'] === 'Feature') {
        geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
      } else {
        geoJSONFeature = {
          'type': 'Feature',
          'geometry': /** @type {GeoJSONGeometry} */ (object),
          'properties': null,
        };
      }

      const geometry = readGeometry(geoJSONFeature['geometry'], options);
      const feature = new Feature$1();
      if (this.geometryName_) {
        feature.setGeometryName(this.geometryName_);
      } else if (
        this.extractGeometryName_ &&
        'geometry_name' in geoJSONFeature !== undefined
      ) {
        feature.setGeometryName(geoJSONFeature['geometry_name']);
      }
      feature.setGeometry(geometry);

      if ('id' in geoJSONFeature) {
        feature.setId(geoJSONFeature['id']);
      }

      if (geoJSONFeature['properties']) {
        feature.setProperties(geoJSONFeature['properties'], true);
      }
      return feature;
    }

    /**
     * @param {Object} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     */
    readFeaturesFromObject(object, options) {
      const geoJSONObject = /** @type {GeoJSONObject} */ (object);
      /** @type {Array<import("../Feature.js").default>} */
      let features = null;
      if (geoJSONObject['type'] === 'FeatureCollection') {
        const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (
          object
        );
        features = [];
        const geoJSONFeatures = geoJSONFeatureCollection['features'];
        for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
          features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));
        }
      } else {
        features = [this.readFeatureFromObject(object, options)];
      }
      return features;
    }

    /**
     * @param {GeoJSONGeometry} object Object.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromObject(object, options) {
      return readGeometry(object, options);
    }

    /**
     * @param {Object} object Object.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromObject(object) {
      const crs = object['crs'];
      let projection;
      if (crs) {
        if (crs['type'] == 'name') {
          projection = get$2(crs['properties']['name']);
        } else if (crs['type'] === 'EPSG') {
          projection = get$2('EPSG:' + crs['properties']['code']);
        } else {
          assert(false, 36); // Unknown SRS type
        }
      } else {
        projection = this.dataProjection;
      }
      return /** @type {import("../proj/Projection.js").default} */ (projection);
    }

    /**
     * Encode a feature as a GeoJSON Feature object.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {GeoJSONFeature} Object.
     * @api
     */
    writeFeatureObject(feature, options) {
      options = this.adaptOptions(options);

      /** @type {GeoJSONFeature} */
      const object = {
        'type': 'Feature',
        geometry: null,
        properties: null,
      };

      const id = feature.getId();
      if (id !== undefined) {
        object.id = id;
      }

      if (!feature.hasProperties()) {
        return object;
      }

      const properties = feature.getProperties();
      const geometry = feature.getGeometry();
      if (geometry) {
        object.geometry = writeGeometry(geometry, options);

        delete properties[feature.getGeometryName()];
      }

      if (!isEmpty$1(properties)) {
        object.properties = properties;
      }

      return object;
    }

    /**
     * Encode an array of features as a GeoJSON object.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {GeoJSONFeatureCollection} GeoJSON Object.
     * @api
     */
    writeFeaturesObject(features, options) {
      options = this.adaptOptions(options);
      const objects = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        objects.push(this.writeFeatureObject(features[i], options));
      }
      return {
        type: 'FeatureCollection',
        features: objects,
      };
    }

    /**
     * Encode a geometry as a GeoJSON object.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
     * @api
     */
    writeGeometryObject(geometry, options) {
      return writeGeometry(geometry, this.adaptOptions(options));
    }
  }

  /**
   * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readGeometry(object, options) {
    if (!object) {
      return null;
    }

    /**
     * @type {import("../geom/Geometry.js").default}
     */
    let geometry;
    switch (object['type']) {
      case 'Point': {
        geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));
        break;
      }
      case 'LineString': {
        geometry = readLineStringGeometry(
          /** @type {GeoJSONLineString} */ (object)
        );
        break;
      }
      case 'Polygon': {
        geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));
        break;
      }
      case 'MultiPoint': {
        geometry = readMultiPointGeometry(
          /** @type {GeoJSONMultiPoint} */ (object)
        );
        break;
      }
      case 'MultiLineString': {
        geometry = readMultiLineStringGeometry(
          /** @type {GeoJSONMultiLineString} */ (object)
        );
        break;
      }
      case 'MultiPolygon': {
        geometry = readMultiPolygonGeometry(
          /** @type {GeoJSONMultiPolygon} */ (object)
        );
        break;
      }
      case 'GeometryCollection': {
        geometry = readGeometryCollectionGeometry(
          /** @type {GeoJSONGeometryCollection} */ (object)
        );
        break;
      }
      default: {
        throw new Error('Unsupported GeoJSON type: ' + object['type']);
      }
    }
    return transformGeometryWithOptions(geometry, false, options);
  }

  /**
   * @param {GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions} [options] Read options.
   * @return {GeometryCollection} Geometry collection.
   */
  function readGeometryCollectionGeometry(object, options) {
    const geometries = object['geometries'].map(
      /**
       * @param {GeoJSONGeometry} geometry Geometry.
       * @return {import("../geom/Geometry.js").default} geometry Geometry.
       */
      function (geometry) {
        return readGeometry(geometry, options);
      }
    );
    return new GeometryCollection$1(geometries);
  }

  /**
   * @param {GeoJSONPoint} object Object.
   * @return {Point} Point.
   */
  function readPointGeometry(object) {
    return new Point$1(object['coordinates']);
  }

  /**
   * @param {GeoJSONLineString} object Object.
   * @return {LineString} LineString.
   */
  function readLineStringGeometry(object) {
    return new LineString$1(object['coordinates']);
  }

  /**
   * @param {GeoJSONMultiLineString} object Object.
   * @return {MultiLineString} MultiLineString.
   */
  function readMultiLineStringGeometry(object) {
    return new MultiLineString$1(object['coordinates']);
  }

  /**
   * @param {GeoJSONMultiPoint} object Object.
   * @return {MultiPoint} MultiPoint.
   */
  function readMultiPointGeometry(object) {
    return new MultiPoint$1(object['coordinates']);
  }

  /**
   * @param {GeoJSONMultiPolygon} object Object.
   * @return {MultiPolygon} MultiPolygon.
   */
  function readMultiPolygonGeometry(object) {
    return new MultiPolygon$1(object['coordinates']);
  }

  /**
   * @param {GeoJSONPolygon} object Object.
   * @return {Polygon} Polygon.
   */
  function readPolygonGeometry(object) {
    return new Polygon$1(object['coordinates']);
  }

  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeGeometry(geometry, options) {
    geometry = transformGeometryWithOptions(geometry, true, options);
    const type = geometry.getType();

    /** @type {GeoJSONGeometry} */
    let geoJSON;
    switch (type) {
      case 'Point': {
        geoJSON = writePointGeometry(/** @type {Point} */ (geometry));
        break;
      }
      case 'LineString': {
        geoJSON = writeLineStringGeometry(
          /** @type {LineString} */ (geometry));
        break;
      }
      case 'Polygon': {
        geoJSON = writePolygonGeometry(
          /** @type {Polygon} */ (geometry),
          options
        );
        break;
      }
      case 'MultiPoint': {
        geoJSON = writeMultiPointGeometry(
          /** @type {MultiPoint} */ (geometry));
        break;
      }
      case 'MultiLineString': {
        geoJSON = writeMultiLineStringGeometry(
          /** @type {MultiLineString} */ (geometry));
        break;
      }
      case 'MultiPolygon': {
        geoJSON = writeMultiPolygonGeometry(
          /** @type {MultiPolygon} */ (geometry),
          options
        );
        break;
      }
      case 'GeometryCollection': {
        geoJSON = writeGeometryCollectionGeometry(
          /** @type {GeometryCollection} */ (geometry),
          options
        );
        break;
      }
      case 'Circle': {
        geoJSON = {
          type: 'GeometryCollection',
          geometries: [],
        };
        break;
      }
      default: {
        throw new Error('Unsupported geometry type: ' + type);
      }
    }
    return geoJSON;
  }

  /**
   * @param {GeometryCollection} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
   */
  function writeGeometryCollectionGeometry(geometry, options) {
    options = Object.assign({}, options);
    delete options.featureProjection;
    const geometries = geometry.getGeometriesArray().map(function (geometry) {
      return writeGeometry(geometry, options);
    });
    return {
      type: 'GeometryCollection',
      geometries: geometries,
    };
  }

  /**
   * @param {LineString} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeLineStringGeometry(geometry, options) {
    return {
      type: 'LineString',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {MultiLineString} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiLineStringGeometry(geometry, options) {
    return {
      type: 'MultiLineString',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {MultiPoint} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPointGeometry(geometry, options) {
    return {
      type: 'MultiPoint',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {MultiPolygon} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPolygonGeometry(geometry, options) {
    let right;
    if (options) {
      right = options.rightHanded;
    }
    return {
      type: 'MultiPolygon',
      coordinates: geometry.getCoordinates(right),
    };
  }

  /**
   * @param {Point} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePointGeometry(geometry, options) {
    return {
      type: 'Point',
      coordinates: geometry.getCoordinates(),
    };
  }

  /**
   * @param {Polygon} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions} [options] Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePolygonGeometry(geometry, options) {
    let right;
    if (options) {
      right = options.rightHanded;
    }
    return {
      type: 'Polygon',
      coordinates: geometry.getCoordinates(right),
    };
  }

  var format_GeoJSON = GeoJSON;

  /**
   * @module ol/xml
   */

  /**
   * When using {@link module:ol/xml.makeChildAppender} or
   * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs
   * to have this structure.
   * @typedef {Object} NodeStackItem
   * @property {Element} node Node.
   */

  /**
   * @typedef {function(Element, Array<*>): void} Parser
   */

  /**
   * @typedef {function(Element, *, Array<*>): void} Serializer
   */

  /**
   * @type {string}
   */
  const XML_SCHEMA_INSTANCE_URI =
    'http://www.w3.org/2001/XMLSchema-instance';

  /**
   * @param {string} namespaceURI Namespace URI.
   * @param {string} qualifiedName Qualified name.
   * @return {Element} Node.
   */
  function createElementNS(namespaceURI, qualifiedName) {
    return getDocument().createElementNS(namespaceURI, qualifiedName);
  }

  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @return {string} All text content.
   * @api
   */
  function getAllTextContent(node, normalizeWhitespace) {
    return getAllTextContent_(node, normalizeWhitespace, []).join('');
  }

  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @param {Array<string>} accumulator Accumulator.
   * @private
   * @return {Array<string>} Accumulator.
   */
  function getAllTextContent_(node, normalizeWhitespace, accumulator) {
    if (
      node.nodeType == Node.CDATA_SECTION_NODE ||
      node.nodeType == Node.TEXT_NODE
    ) {
      if (normalizeWhitespace) {
        accumulator.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
      } else {
        accumulator.push(node.nodeValue);
      }
    } else {
      let n;
      for (n = node.firstChild; n; n = n.nextSibling) {
        getAllTextContent_(n, normalizeWhitespace, accumulator);
      }
    }
    return accumulator;
  }

  /**
   * @param {Object} object Object.
   * @return {boolean} Is a document.
   */
  function isDocument(object) {
    return 'documentElement' in object;
  }

  /**
   * @param {Element} node Node.
   * @param {?string} namespaceURI Namespace URI.
   * @param {string} name Attribute name.
   * @return {string} Value
   */
  function getAttributeNS(node, namespaceURI, name) {
    return node.getAttributeNS(namespaceURI, name) || '';
  }

  /**
   * Parse an XML string to an XML Document.
   * @param {string} xml XML.
   * @return {Document} Document.
   * @api
   */
  function parse(xml) {
    return new DOMParser().parseFromString(xml, 'application/xml');
  }

  /**
   * Make an array extender function for extending the array at the top of the
   * object stack.
   * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayExtender(valueReader, thisArg) {
    return (
      /**
       * @param {Node} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
        const value = valueReader.call(
          thisArg !== undefined ? thisArg : this,
          node,
          objectStack
        );
        if (value !== undefined) {
          const array = /** @type {Array<*>} */ (
            objectStack[objectStack.length - 1]
          );
          extend$1(array, value);
        }
      }
    );
  }

  /**
   * Make an array pusher function for pushing to the array at the top of the
   * object stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayPusher(valueReader, thisArg) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
        const value = valueReader.call(
          thisArg !== undefined ? thisArg : this,
          node,
          objectStack
        );
        if (value !== undefined) {
          const array = /** @type {Array<*>} */ (
            objectStack[objectStack.length - 1]
          );
          array.push(value);
        }
      }
    );
  }

  /**
   * Make an object stack replacer function for replacing the object at the
   * top of the stack.
   * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeReplacer(valueReader, thisArg) {
    return (
      /**
       * @param {Node} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
        const value = valueReader.call(
          thisArg !== undefined ? thisArg : this,
          node,
          objectStack
        );
        if (value !== undefined) {
          objectStack[objectStack.length - 1] = value;
        }
      }
    );
  }

  /**
   * Make an object property setter function.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string} [property] Property.
   * @param {T} [thisArg] The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertySetter(valueReader, property, thisArg) {
    return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
        const value = valueReader.call(
          thisArg !== undefined ? thisArg : this,
          node,
          objectStack
        );
        if (value !== undefined) {
          const object = /** @type {!Object} */ (
            objectStack[objectStack.length - 1]
          );
          const name = property !== undefined ? property : node.localName;
          object[name] = value;
        }
      }
    );
  }

  /**
   * Create a serializer that appends nodes written by its `nodeWriter` to its
   * designated parent. The parent is the `node` of the
   * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.
   * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.
   * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.
   * @return {Serializer} Serializer.
   * @template T, V
   */
  function makeChildAppender(nodeWriter, thisArg) {
    return function (node, value, objectStack) {
      nodeWriter.call(
        thisArg !== undefined ? thisArg : this,
        node,
        value,
        objectStack
      );
      const parent = /** @type {NodeStackItem} */ (
        objectStack[objectStack.length - 1]
      );
      const parentNode = parent.node;
      parentNode.appendChild(node);
    };
  }

  /**
   * Create a node factory which can use the `keys` passed to
   * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,
   * or a fixed node name. The namespace of the created nodes can either be fixed,
   * or the parent namespace will be used.
   * @param {string} [fixedNodeName] Fixed node name which will be used for all
   *     created nodes. If not provided, the 3rd argument to the resulting node
   *     factory needs to be provided and will be the nodeName.
   * @param {string} [fixedNamespaceURI] Fixed namespace URI which will be used for
   *     all created nodes. If not provided, the namespace of the parent node will
   *     be used.
   * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.
   */
  function makeSimpleNodeFactory(fixedNodeName, fixedNamespaceURI) {
    return (
      /**
       * @param {*} value Value.
       * @param {Array<*>} objectStack Object stack.
       * @param {string} [newNodeName] Node name.
       * @return {Node} Node.
       */
      function (value, objectStack, newNodeName) {
        const context = /** @type {NodeStackItem} */ (
          objectStack[objectStack.length - 1]
        );
        const node = context.node;
        let nodeName = fixedNodeName;
        if (nodeName === undefined) {
          nodeName = newNodeName;
        }

        const namespaceURI =
          fixedNamespaceURI !== undefined ? fixedNamespaceURI : node.namespaceURI;
        return createElementNS(namespaceURI, /** @type {string} */ (nodeName));
      }
    );
  }

  /**
   * A node factory that creates a node using the parent's `namespaceURI` and the
   * `nodeName` passed by {@link module:ol/xml.serialize} or
   * {@link module:ol/xml.pushSerializeAndPop} to the node factory.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();

  /**
   * Create an array of `values` to be used with {@link module:ol/xml.serialize} or
   * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as
   * `key` argument.
   * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can
   *     be a subset of the `orderedKeys`.
   * @param {Array<string>} orderedKeys Keys in the order of the sequence.
   * @return {Array<*>} Values in the order of the sequence. The resulting array
   *     has the same length as the `orderedKeys` array. Values that are not
   *     present in `object` will be `undefined` in the resulting array.
   */
  function makeSequence(object, orderedKeys) {
    const length = orderedKeys.length;
    const sequence = new Array(length);
    for (let i = 0; i < length; ++i) {
      sequence[i] = object[orderedKeys[i]];
    }
    return sequence;
  }

  /**
   * Create a namespaced structure, using the same values for each namespace.
   * This can be used as a starting point for versioned parsers, when only a few
   * values are version specific.
   * @param {Array<string>} namespaceURIs Namespace URIs.
   * @param {T} structure Structure.
   * @param {Object<string, T>} [structureNS] Namespaced structure to add to.
   * @return {Object<string, T>} Namespaced structure.
   * @template T
   */
  function makeStructureNS(namespaceURIs, structure, structureNS) {
    structureNS = structureNS !== undefined ? structureNS : {};
    let i, ii;
    for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {
      structureNS[namespaceURIs[i]] = structure;
    }
    return structureNS;
  }

  /**
   * Parse a node using the parsers and object stack.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*} [thisArg] The object to use as `this`.
   */
  function parseNode(parsersNS, node, objectStack, thisArg) {
    let n;
    for (n = node.firstElementChild; n; n = n.nextElementSibling) {
      const parsers = parsersNS[n.namespaceURI];
      if (parsers !== undefined) {
        const parser = parsers[n.localName];
        if (parser !== undefined) {
          parser.call(thisArg, n, objectStack);
        }
      }
    }
  }

  /**
   * Push an object on top of the stack, parse and return the popped object.
   * @param {T} object Object.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*} [thisArg] The object to use as `this`.
   * @return {T} Object.
   * @template T
   */
  function pushParseAndPop(object, parsersNS, node, objectStack, thisArg) {
    objectStack.push(object);
    parseNode(parsersNS, node, objectStack, thisArg);
    return /** @type {T} */ (objectStack.pop());
  }

  /**
   * Walk through an array of `values` and call a serializer for each value.
   * @param {Object<string, Object<string, Serializer>>} serializersNS
   *     Namespaced serializers.
   * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
   *     Node factory. The `nodeFactory` creates the node whose namespace and name
   *     will be used to choose a node writer from `serializersNS`. This
   *     separation allows us to decide what kind of node to create, depending on
   *     the value we want to serialize. An example for this would be different
   *     geometry writers based on the geometry type.
   * @param {Array<*>} values Values to serialize. An example would be an array
   *     of {@link module:ol/Feature~Feature} instances.
   * @param {Array<*>} objectStack Node stack.
   * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the
   *     `nodeFactory`. This is used for serializing object literals where the
   *     node name relates to the property key. The array length of `keys` has
   *     to match the length of `values`. For serializing a sequence, `keys`
   *     determines the order of the sequence.
   * @param {T} [thisArg] The object to use as `this` for the node factory and
   *     serializers.
   * @template T
   */
  function serialize(
    serializersNS,
    nodeFactory,
    values,
    objectStack,
    keys,
    thisArg
  ) {
    const length = (keys !== undefined ? keys : values).length;
    let value, node;
    for (let i = 0; i < length; ++i) {
      value = values[i];
      if (value !== undefined) {
        node = nodeFactory.call(
          thisArg !== undefined ? thisArg : this,
          value,
          objectStack,
          keys !== undefined ? keys[i] : undefined
        );
        if (node !== undefined) {
          serializersNS[node.namespaceURI][node.localName].call(
            thisArg,
            node,
            value,
            objectStack
          );
        }
      }
    }
  }

  /**
   * @param {O} object Object.
   * @param {Object<string, Object<string, Serializer>>} serializersNS
   *     Namespaced serializers.
   * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
   *     Node factory. The `nodeFactory` creates the node whose namespace and name
   *     will be used to choose a node writer from `serializersNS`. This
   *     separation allows us to decide what kind of node to create, depending on
   *     the value we want to serialize. An example for this would be different
   *     geometry writers based on the geometry type.
   * @param {Array<*>} values Values to serialize. An example would be an array
   *     of {@link module:ol/Feature~Feature} instances.
   * @param {Array<*>} objectStack Node stack.
   * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the
   *     `nodeFactory`. This is used for serializing object literals where the
   *     node name relates to the property key. The array length of `keys` has
   *     to match the length of `values`. For serializing a sequence, `keys`
   *     determines the order of the sequence.
   * @param {T} [thisArg] The object to use as `this` for the node factory and
   *     serializers.
   * @return {O|undefined} Object.
   * @template O, T
   */
  function pushSerializeAndPop(
    object,
    serializersNS,
    nodeFactory,
    values,
    objectStack,
    keys,
    thisArg
  ) {
    objectStack.push(object);
    serialize(serializersNS, nodeFactory, values, objectStack, keys, thisArg);
    return /** @type {O|undefined} */ (objectStack.pop());
  }

  let xmlSerializer_ = undefined;

  /**
   * @return {XMLSerializer} The XMLSerializer.
   */
  function getXMLSerializer() {
    if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {
      xmlSerializer_ = new XMLSerializer();
    }
    return xmlSerializer_;
  }

  let document_ = undefined;

  /**
   * Get a document that should be used when creating nodes for XML serializations.
   * @return {Document} The document.
   */
  function getDocument() {
    if (document_ === undefined && typeof document !== 'undefined') {
      document_ = document.implementation.createDocument('', '', null);
    }
    return document_;
  }

  /**
   * @module ol/format/XMLFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for XML feature formats.
   *
   * @abstract
   */
  class XMLFeature extends FeatureFormat {
    constructor() {
      super();

      /**
       * @type {XMLSerializer}
       * @private
       */
      this.xmlSerializer_ = getXMLSerializer();
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     */
    getType() {
      return 'xml';
    }

    /**
     * Read a single feature.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */
    readFeature(source, options) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFeatureFromDocument(doc, options);
      } else if (isDocument(source)) {
        return this.readFeatureFromDocument(
          /** @type {Document} */ (source),
          options
        );
      }
      return this.readFeatureFromNode(/** @type {Element} */ (source), options);
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromDocument(doc, options) {
      const features = this.readFeaturesFromDocument(doc, options);
      if (features.length > 0) {
        return features[0];
      }
      return null;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromNode(node, options) {
      return null; // not implemented
    }

    /**
     * Read all features from a feature collection.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    readFeatures(source, options) {
      if (!source) {
        return [];
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFeaturesFromDocument(doc, options);
      } else if (isDocument(source)) {
        return this.readFeaturesFromDocument(
          /** @type {Document} */ (source),
          options
        );
      }
      return this.readFeaturesFromNode(/** @type {Element} */ (source), options);
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromDocument(doc, options) {
      /** @type {Array<import("../Feature.js").default>} */
      const features = [];
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$1(
            features,
            this.readFeaturesFromNode(/** @type {Element} */ (n), options)
          );
        }
      }
      return features;
    }

    /**
     * @abstract
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromNode(node, options) {
      return abstract();
    }

    /**
     * Read a single geometry from a source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometry(source, options) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readGeometryFromDocument(doc, options);
      } else if (isDocument(source)) {
        return this.readGeometryFromDocument(
          /** @type {Document} */ (source),
          options
        );
      }
      return this.readGeometryFromNode(/** @type {Element} */ (source), options);
    }

    /**
     * @param {Document} doc Document.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromDocument(doc, options) {
      return null; // not implemented
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromNode(node, options) {
      return null; // not implemented
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    readProjection(source) {
      if (!source) {
        return null;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readProjectionFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readProjectionFromDocument(/** @type {Document} */ (source));
      }
      return this.readProjectionFromNode(/** @type {Element} */ (source));
    }

    /**
     * @param {Document} doc Document.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromDocument(doc) {
      return this.dataProjection;
    }

    /**
     * @param {Element} node Node.
     * @protected
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromNode(node) {
      return this.dataProjection;
    }

    /**
     * Encode a feature as string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded feature.
     */
    writeFeature(feature, options) {
      const node = this.writeFeatureNode(feature, options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @protected
     * @return {Node} Node.
     */
    writeFeatureNode(feature, options) {
      return null; // not implemented
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Result.
     * @api
     */
    writeFeatures(features, options) {
      const node = this.writeFeaturesNode(features, options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     */
    writeFeaturesNode(features, options) {
      return null; // not implemented
    }

    /**
     * Encode a geometry as string.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded geometry.
     */
    writeGeometry(geometry, options) {
      const node = this.writeGeometryNode(geometry, options);
      return this.xmlSerializer_.serializeToString(node);
    }

    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     */
    writeGeometryNode(geometry, options) {
      return null; // not implemented
    }
  }

  var XMLFeature$1 = XMLFeature;

  /**
   * @module ol/format/GMLBase
   */

  /**
   * @const
   * @type {string}
   */
  const GMLNS = 'http://www.opengis.net/gml';

  /**
   * A regular expression that matches if a string only contains whitespace
   * characters. It will e.g. match `''`, `' '`, `'\n'` etc.
   *
   * @const
   * @type {RegExp}
   */
  const ONLY_WHITESPACE_RE = /^\s*$/;

  /**
   * @typedef {Object} Options
   * @property {Object<string, string>|string} [featureNS] Feature
   * namespace. If not defined will be derived from GML. If multiple
   * feature types have been configured which come from different feature
   * namespaces, this will be an object with the keys being the prefixes used
   * in the entries of featureType array. The values of the object will be the
   * feature namespaces themselves. So for instance there might be a featureType
   * item `topp:states` in the `featureType` array and then there will be a key
   * `topp` in the featureNS object with value `http://www.openplans.org/topp`.
   * @property {Array<string>|string} [featureType] Feature type(s) to parse.
   * If multiple feature types need to be configured
   * which come from different feature namespaces, `featureNS` will be an object
   * with the keys being the prefixes used in the entries of featureType array.
   * The values of the object will be the feature namespaces themselves.
   * So for instance there might be a featureType item `topp:states` and then
   * there will be a key named `topp` in the featureNS object with value
   * `http://www.openplans.org/topp`.
   * @property {string} [srsName] srsName to use when writing geometries.
   * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon
   * elements. This also affects the elements in multi-part geometries.
   * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString
   * elements. This also affects the elements in multi-part geometries.
   * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.
   * Since the latter is deprecated in GML 3.
   * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of
   * gml:MultiPolygon. Since the latter is deprecated in GML 3.
   * @property {string} [schemaLocation] Optional schemaLocation to use when
   * writing out the GML, this will override the default provided.
   * @property {boolean} [hasZ=false] If coordinates have a Z value.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Feature base format for reading and writing data in the GML format.
   * This class cannot be instantiated, it contains only base content that
   * is shared with versioned format classes GML2 and GML3.
   *
   * @abstract
   * @api
   */
  class GMLBase extends XMLFeature$1 {
    /**
     * @param {Options} [options] Optional configuration object.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @protected
       * @type {Array<string>|string|undefined}
       */
      this.featureType = options.featureType;

      /**
       * @protected
       * @type {Object<string, string>|string|undefined}
       */
      this.featureNS = options.featureNS;

      /**
       * @protected
       * @type {string|undefined}
       */
      this.srsName = options.srsName;

      /**
       * @protected
       * @type {string}
       */
      this.schemaLocation = '';

      /**
       * @type {Object<string, Object<string, Object>>}
       */
      this.FEATURE_COLLECTION_PARSERS = {};
      this.FEATURE_COLLECTION_PARSERS[this.namespace] = {
        'featureMember': makeArrayPusher(this.readFeaturesInternal),
        'featureMembers': makeReplacer(this.readFeaturesInternal),
      };

      this.supportedMediaTypes = ['application/gml+xml'];
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<Feature> | undefined} Features.
     */
    readFeaturesInternal(node, objectStack) {
      const localName = node.localName;
      let features = null;
      if (localName == 'FeatureCollection') {
        features = pushParseAndPop(
          [],
          this.FEATURE_COLLECTION_PARSERS,
          node,
          objectStack,
          this
        );
      } else if (
        localName == 'featureMembers' ||
        localName == 'featureMember' ||
        localName == 'member'
      ) {
        const context = objectStack[0];
        let featureType = context['featureType'];
        let featureNS = context['featureNS'];
        const prefix = 'p';
        const defaultPrefix = 'p0';
        if (!featureType && node.childNodes) {
          (featureType = []), (featureNS = {});
          for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {
            const child = /** @type {Element} */ (node.childNodes[i]);
            if (child.nodeType === 1) {
              const ft = child.nodeName.split(':').pop();
              if (!featureType.includes(ft)) {
                let key = '';
                let count = 0;
                const uri = child.namespaceURI;
                for (const candidate in featureNS) {
                  if (featureNS[candidate] === uri) {
                    key = candidate;
                    break;
                  }
                  ++count;
                }
                if (!key) {
                  key = prefix + count;
                  featureNS[key] = uri;
                }
                featureType.push(key + ':' + ft);
              }
            }
          }
          if (localName != 'featureMember') {
            // recheck featureType for each featureMember
            context['featureType'] = featureType;
            context['featureNS'] = featureNS;
          }
        }
        if (typeof featureNS === 'string') {
          const ns = featureNS;
          featureNS = {};
          featureNS[defaultPrefix] = ns;
        }
        /** @type {Object<string, Object<string, import("../xml.js").Parser>>} */
        const parsersNS = {};
        const featureTypes = Array.isArray(featureType)
          ? featureType
          : [featureType];
        for (const p in featureNS) {
          /** @type {Object<string, import("../xml.js").Parser>} */
          const parsers = {};
          for (let i = 0, ii = featureTypes.length; i < ii; ++i) {
            const featurePrefix = featureTypes[i].includes(':')
              ? featureTypes[i].split(':')[0]
              : defaultPrefix;
            if (featurePrefix === p) {
              parsers[featureTypes[i].split(':').pop()] =
                localName == 'featureMembers'
                  ? makeArrayPusher(this.readFeatureElement, this)
                  : makeReplacer(this.readFeatureElement, this);
            }
          }
          parsersNS[featureNS[p]] = parsers;
        }
        if (localName == 'featureMember' || localName == 'member') {
          features = pushParseAndPop(undefined, parsersNS, node, objectStack);
        } else {
          features = pushParseAndPop([], parsersNS, node, objectStack);
        }
      }
      if (features === null) {
        features = [];
      }
      return features;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../geom/Geometry.js").default|import("../extent.js").Extent|undefined} Geometry.
     */
    readGeometryOrExtent(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      context['srsName'] = node.firstElementChild.getAttribute('srsName');
      context['srsDimension'] =
        node.firstElementChild.getAttribute('srsDimension');
      return pushParseAndPop(
        null,
        this.GEOMETRY_PARSERS,
        node,
        objectStack,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Geometry.
     */
    readExtentElement(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      const extent = /** @type {import("../extent.js").Extent} */ (
        this.readGeometryOrExtent(node, objectStack)
      );
      return extent ? transformExtentWithOptions(extent, context) : undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../geom/Geometry.js").default|undefined} Geometry.
     */
    readGeometryElement(node, objectStack) {
      const context = /** @type {Object} */ (objectStack[0]);
      const geometry = /** @type {import("../geom/Geometry.js").default} */ (
        this.readGeometryOrExtent(node, objectStack)
      );
      return geometry
        ? transformGeometryWithOptions(geometry, false, context)
        : undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @param {boolean} asFeature whether result should be wrapped as a feature.
     * @return {Feature|Object} Feature
     */
    readFeatureElementInternal(node, objectStack, asFeature) {
      let geometryName;
      const values = {};
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        let value;
        const localName = n.localName;
        // first, check if it is simple attribute
        if (
          n.childNodes.length === 0 ||
          (n.childNodes.length === 1 &&
            (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))
        ) {
          value = getAllTextContent(n, false);
          if (ONLY_WHITESPACE_RE.test(value)) {
            value = undefined;
          }
        } else {
          if (asFeature) {
            //if feature, try it as a geometry or extent
            value =
              localName === 'boundedBy'
                ? this.readExtentElement(n, objectStack)
                : this.readGeometryElement(n, objectStack);
          }
          if (!value) {
            //if not a geometry or not a feature, treat it as a complex attribute
            value = this.readFeatureElementInternal(n, objectStack, false);
          } else if (localName !== 'boundedBy') {
            // boundedBy is an extent and must not be considered as a geometry
            geometryName = localName;
          }
        }

        const len = n.attributes.length;
        if (len > 0 && !(value instanceof Geometry$1)) {
          value = {_content_: value};
          for (let i = 0; i < len; i++) {
            const attName = n.attributes[i].name;
            value[attName] = n.attributes[i].value;
          }
        }

        if (values[localName]) {
          if (!(values[localName] instanceof Array)) {
            values[localName] = [values[localName]];
          }
          values[localName].push(value);
        } else {
          values[localName] = value;
        }
      }
      if (!asFeature) {
        return values;
      }
      const feature = new Feature$1(values);
      if (geometryName) {
        feature.setGeometryName(geometryName);
      }
      const fid =
        node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');
      if (fid) {
        feature.setId(fid);
      }
      return feature;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Feature} Feature.
     */
    readFeatureElement(node, objectStack) {
      return this.readFeatureElementInternal(node, objectStack, true);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Point|undefined} Point.
     */
    readPoint(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
      if (flatCoordinates) {
        return new Point$1(flatCoordinates, 'XYZ');
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPoint|undefined} MultiPoint.
     */
    readMultiPoint(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const coordinates = pushParseAndPop(
        [],
        this.MULTIPOINT_PARSERS,
        node,
        objectStack,
        this
      );
      if (coordinates) {
        return new MultiPoint$1(coordinates);
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiLineString|undefined} MultiLineString.
     */
    readMultiLineString(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop(
        [],
        this.MULTILINESTRING_PARSERS,
        node,
        objectStack,
        this
      );
      if (lineStrings) {
        return new MultiLineString$1(lineStrings);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPolygon|undefined} MultiPolygon.
     */
    readMultiPolygon(node, objectStack) {
      /** @type {Array<Polygon>} */
      const polygons = pushParseAndPop(
        [],
        this.MULTIPOLYGON_PARSERS,
        node,
        objectStack,
        this
      );
      if (polygons) {
        return new MultiPolygon$1(polygons);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    pointMemberParser(node, objectStack) {
      parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    lineStringMemberParser(node, objectStack) {
      parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    polygonMemberParser(node, objectStack) {
      parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    readLineString(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
      if (flatCoordinates) {
        const lineString = new LineString$1(flatCoordinates, 'XYZ');
        return lineString;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} LinearRing flat coordinates.
     */
    readFlatLinearRing(node, objectStack) {
      const ring = pushParseAndPop(
        null,
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node,
        objectStack,
        this
      );
      if (ring) {
        return ring;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LinearRing|undefined} LinearRing.
     */
    readLinearRing(node, objectStack) {
      const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
      if (flatCoordinates) {
        return new LinearRing$1(flatCoordinates, 'XYZ');
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    readPolygon(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const flatLinearRings = pushParseAndPop(
        [null],
        this.FLAT_LINEAR_RINGS_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatLinearRings && flatLinearRings[0]) {
        const flatCoordinates = flatLinearRings[0];
        const ends = [flatCoordinates.length];
        let i, ii;
        for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
          extend$1(flatCoordinates, flatLinearRings[i]);
          ends.push(flatCoordinates.length);
        }
        return new Polygon$1(flatCoordinates, 'XYZ', ends);
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>} Flat coordinates.
     */
    readFlatCoordinatesFromNode(node, objectStack) {
      return pushParseAndPop(
        null,
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node,
        objectStack,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromNode(node, options) {
      const geometry = this.readGeometryElement(node, [
        this.getReadOptions(node, options ? options : {}),
      ]);
      return geometry ? geometry : null;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromNode(node, options) {
      const internalOptions = {
        featureType: this.featureType,
        featureNS: this.featureNS,
      };
      if (internalOptions) {
        Object.assign(internalOptions, this.getReadOptions(node, options));
      }
      const features = this.readFeaturesInternal(node, [internalOptions]);
      return features || [];
    }

    /**
     * @param {Element} node Node.
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromNode(node) {
      return get$2(
        this.srsName
          ? this.srsName
          : node.firstElementChild.getAttribute('srsName')
      );
    }
  }

  GMLBase.prototype.namespace = GMLNS;

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {},
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {},
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {},
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.MULTIPOINT_PARSERS = {
    'http://www.opengis.net/gml': {
      'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),
      'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.MULTILINESTRING_PARSERS = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeArrayPusher(
        GMLBase.prototype.lineStringMemberParser
      ),
      'lineStringMembers': makeArrayPusher(
        GMLBase.prototype.lineStringMemberParser
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.MULTIPOLYGON_PARSERS = {
    'http://www.opengis.net/gml': {
      'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),
      'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.POINTMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.LINESTRINGMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'LineString': makeArrayPusher(GMLBase.prototype.readLineString),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.POLYGONMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml': {
      'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),
    },
  };

  var GMLBase$1 = GMLBase;

  /**
   * @module ol/format/xsd
   */

  /**
   * @param {Node} node Node.
   * @return {boolean|undefined} Boolean.
   */
  function readBoolean(node) {
    const s = getAllTextContent(node, false);
    return readBooleanString(s);
  }

  /**
   * @param {string} string String.
   * @return {boolean|undefined} Boolean.
   */
  function readBooleanString(string) {
    const m = /^\s*(true|1)|(false|0)\s*$/.exec(string);
    if (m) {
      return m[1] !== undefined || false;
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} Decimal.
   */
  function readDecimal(node) {
    const s = getAllTextContent(node, false);
    return readDecimalString(s);
  }

  /**
   * @param {string} string String.
   * @return {number|undefined} Decimal.
   */
  function readDecimalString(string) {
    // FIXME check spec
    const m = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*$/i.exec(string);
    if (m) {
      return parseFloat(m[1]);
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} Non negative integer.
   */
  function readPositiveInteger(node) {
    const s = getAllTextContent(node, false);
    return readNonNegativeIntegerString(s);
  }

  /**
   * @param {string} string String.
   * @return {number|undefined} Non negative integer.
   */
  function readNonNegativeIntegerString(string) {
    const m = /^\s*(\d+)\s*$/.exec(string);
    if (m) {
      return parseInt(m[1], 10);
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {string|undefined} String.
   */
  function readString(node) {
    return getAllTextContent(node, false).trim();
  }

  /**
   * @param {Node} node Node to append a TextNode with the boolean to.
   * @param {boolean} bool Boolean.
   */
  function writeBooleanTextNode(node, bool) {
    writeStringTextNode(node, bool ? '1' : '0');
  }

  /**
   * @param {Node} node Node to append a CDATA Section with the string to.
   * @param {string} string String.
   */
  function writeCDATASection(node, string) {
    node.appendChild(getDocument().createCDATASection(string));
  }

  /**
   * @param {Node} node Node to append a TextNode with the decimal to.
   * @param {number} decimal Decimal.
   */
  function writeDecimalTextNode(node, decimal) {
    const string = decimal.toPrecision();
    node.appendChild(getDocument().createTextNode(string));
  }

  /**
   * @param {Node} node Node to append a TextNode with the string to.
   * @param {string} string String.
   */
  function writeStringTextNode(node, string) {
    node.appendChild(getDocument().createTextNode(string));
  }

  /**
   * @module ol/format/GML2
   */

  /**
   * @const
   * @type {string}
   */
  const schemaLocation$1 =
    GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';

  /**
   * @const
   * @type {Object<string, string>}
   */
  const MULTIGEOMETRY_TO_MEMBER_NODENAME$1 = {
    'MultiLineString': 'lineStringMember',
    'MultiCurve': 'curveMember',
    'MultiPolygon': 'polygonMember',
    'MultiSurface': 'surfaceMember',
  };

  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format,
   * version 2.1.2.
   *
   * @api
   */
  class GML2 extends GMLBase$1 {
    /**
     * @param {import("./GMLBase.js").Options} [options] Optional configuration object.
     */
    constructor(options) {
      options = options ? options : {};

      super(options);

      this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(
        this.readFeaturesInternal
      );

      /**
       * @type {string}
       */
      this.schemaLocation = options.schemaLocation
        ? options.schemaLocation
        : schemaLocation$1;
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatCoordinates(node, objectStack) {
      const s = getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
      const context = /** @type {import("../xml.js").NodeStackItem} */ (
        objectStack[0]
      );
      const containerSrs = context['srsName'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        if (proj) {
          axisOrientation = proj.getAxisOrientation();
        }
      }
      const coordsGroups = s.trim().split(/\s+/);
      const flatCoordinates = [];
      for (let i = 0, ii = coordsGroups.length; i < ii; i++) {
        const coords = coordsGroups[i].split(/,+/);
        const x = parseFloat(coords[0]);
        const y = parseFloat(coords[1]);
        const z = coords.length === 3 ? parseFloat(coords[2]) : 0;
        if (axisOrientation.substr(0, 2) === 'en') {
          flatCoordinates.push(x, y, z);
        } else {
          flatCoordinates.push(y, x, z);
        }
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Envelope.
     */
    readBox(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop(
        [null],
        this.BOX_PARSERS_,
        node,
        objectStack,
        this
      );
      return createOrUpdate$2(
        flatCoordinates[1][0],
        flatCoordinates[1][1],
        flatCoordinates[1][3],
        flatCoordinates[1][4]
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    innerBoundaryIsParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings.push(flatLinearRing);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    outerBoundaryIsParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings[0] = flatLinearRing;
      }
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Element|undefined} Node.
     * @private
     */
    GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const multiSurface = context['multiSurface'];
      const surface = context['surface'];
      const multiCurve = context['multiCurve'];
      if (!Array.isArray(value)) {
        nodeName = /** @type {import("../geom/Geometry.js").default} */ (
          value
        ).getType();
        if (nodeName === 'MultiPolygon' && multiSurface === true) {
          nodeName = 'MultiSurface';
        } else if (nodeName === 'Polygon' && surface === true) {
          nodeName = 'Surface';
        } else if (nodeName === 'MultiLineString' && multiCurve === true) {
          nodeName = 'MultiCurve';
        }
      } else {
        nodeName = 'Envelope';
      }
      return createElementNS('http://www.opengis.net/gml', nodeName);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    writeFeatureElement(node, feature, objectStack) {
      const fid = feature.getId();
      if (fid) {
        node.setAttribute('fid', /** @type {string} */ (fid));
      }
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureNS = context['featureNS'];
      const geometryName = feature.getGeometryName();
      if (!context.serializers) {
        context.serializers = {};
        context.serializers[featureNS] = {};
      }
      const keys = [];
      const values = [];
      if (feature.hasProperties()) {
        const properties = feature.getProperties();
        for (const key in properties) {
          const value = properties[key];
          if (value !== null) {
            keys.push(key);
            values.push(value);
            if (
              key == geometryName ||
              typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===
                'function'
            ) {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] = makeChildAppender(
                  this.writeGeometryElement,
                  this
                );
              }
            } else {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] =
                  makeChildAppender(writeStringTextNode);
              }
            }
          }
        }
      }
      const item = Object.assign({}, context);
      item.node = node;
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        context.serializers,
        makeSimpleNodeFactory(undefined, featureNS),
        values,
        objectStack,
        keys
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} geometry LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (node.nodeName !== 'LineStringSegment' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (
        node.nodeName === 'LineString' ||
        node.nodeName === 'LineStringSegment'
      ) {
        const coordinates = this.createCoordinatesNode_(node.namespaceURI);
        node.appendChild(coordinates);
        this.writeCoordinates_(coordinates, geometry, objectStack);
      } else if (node.nodeName === 'Curve') {
        const segments = createElementNS(node.namespaceURI, 'segments');
        node.appendChild(segments);
        this.writeCurveSegments_(segments, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLineStringOrCurveMember(node, line, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeCurveOrLineString(child, line, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiLineString.js").default} geometry MultiLineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const curve = context['curve'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const lines = geometry.getLineStrings();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, curve: curve},
        this.LINESTRINGORCURVEMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        lines,
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = /** @type {import("./Feature.js").WriteOptions} */ (
        objectStack[objectStack.length - 1]
      );
      const item = Object.assign({}, context);
      item['node'] = node;
      let value;
      if (Array.isArray(geometry)) {
        value = transformExtentWithOptions(
          /** @type {import("../extent.js").Extent} */ (geometry),
          context
        );
      } else {
        value = transformGeometryWithOptions(
          /** @type {import("../geom/Geometry.js").default} */ (geometry),
          true,
          context
        );
      }
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        this.GEOMETRY_SERIALIZERS,
        this.GEOMETRY_NODE_FACTORY_,
        [value],
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {string} namespaceURI XML namespace.
     * @return {Element} coordinates node.
     * @private
     */
    createCoordinatesNode_(namespaceURI) {
      const coordinates = createElementNS(namespaceURI, 'coordinates');
      coordinates.setAttribute('decimal', '.');
      coordinates.setAttribute('cs', ',');
      coordinates.setAttribute('ts', ' ');

      return coordinates;
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/LineString.js").default|import("../geom/LinearRing.js").default} value Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCoordinates_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      // only 2d for simple features profile
      const points = value.getCoordinates();
      const len = points.length;
      const parts = new Array(len);
      for (let i = 0; i < len; ++i) {
        const point = points[i];
        parts[i] = this.getCoords_(point, srsName, hasZ);
      }
      writeStringTextNode(node, parts.join(' '));
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LineString.js").default} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveSegments_(node, line, objectStack) {
      const child = createElementNS(node.namespaceURI, 'LineStringSegment');
      node.appendChild(child);
      this.writeCurveOrLineString(child, line, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (node.nodeName !== 'PolygonPatch' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
        const rings = geometry.getLinearRings();
        pushSerializeAndPop(
          {node: node, hasZ: hasZ, srsName: srsName},
          this.RING_SERIALIZERS,
          this.RING_NODE_FACTORY_,
          rings,
          objectStack,
          undefined,
          this
        );
      } else if (node.nodeName === 'Surface') {
        const patches = createElementNS(node.namespaceURI, 'patches');
        node.appendChild(patches);
        this.writeSurfacePatches_(patches, geometry, objectStack);
      }
    }

    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node} Node.
     * @private
     */
    RING_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const parentNode = context.node;
      const exteriorWritten = context['exteriorWritten'];
      if (exteriorWritten === undefined) {
        context['exteriorWritten'] = true;
      }
      return createElementNS(
        parentNode.namespaceURI,
        exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs'
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfacePatches_(node, polygon, objectStack) {
      const child = createElementNS(node.namespaceURI, 'PolygonPatch');
      node.appendChild(child);
      this.writeSurfaceOrPolygon(child, polygon, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeRing(node, ring, objectStack) {
      const linearRing = createElementNS(node.namespaceURI, 'LinearRing');
      node.appendChild(linearRing);
      this.writeLinearRing(linearRing, ring, objectStack);
    }

    /**
     * @param {Array<number>} point Point geometry.
     * @param {string} [srsName] Optional srsName
     * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.
     * @return {string} The coords string.
     * @private
     */
    getCoords_(point, srsName, hasZ) {
      let axisOrientation = 'enu';
      if (srsName) {
        axisOrientation = get$2(srsName).getAxisOrientation();
      }
      let coords =
        axisOrientation.substr(0, 2) === 'en'
          ? point[0] + ',' + point[1]
          : point[1] + ',' + point[0];
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ',' + z;
      }

      return coords;
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} geometry Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const coordinates = this.createCoordinatesNode_(node.namespaceURI);
      node.appendChild(coordinates);
      const point = geometry.getCoordinates();
      const coord = this.getCoords_(point, srsName, hasZ);
      writeStringTextNode(coordinates, coord);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiPoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const points = geometry.getPoints();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName},
        this.POINTMEMBER_SERIALIZERS,
        makeSimpleNodeFactory('pointMember'),
        points,
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} point Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePointMember(node, point, objectStack) {
      const child = createElementNS(node.namespaceURI, 'Point');
      node.appendChild(child);
      this.writePoint(child, point, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLinearRing(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const coordinates = this.createCoordinatesNode_(node.namespaceURI);
      node.appendChild(coordinates);
      this.writeCoordinates_(coordinates, geometry, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const surface = context['surface'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const polygons = geometry.getPolygons();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, surface: surface},
        this.SURFACEORPOLYGONMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        polygons,
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygonMember(node, polygon, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeSurfaceOrPolygon(child, polygon, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {Array<*>} objectStack Node stack.
     */
    writeEnvelope(node, extent, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const keys = ['lowerCorner', 'upperCorner'];
      const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        ({node: node}),
        this.ENVELOPE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        objectStack,
        keys,
        this
      );
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node|undefined} Node.
     * @private
     */
    MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(
        'http://www.opengis.net/gml',
        MULTIGEOMETRY_TO_MEMBER_NODENAME$1[parentNode.nodeName]
      );
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {
      'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {
      'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,
      'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.BOX_PARSERS_ = {
    'http://www.opengis.net/gml': {
      'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML2.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeReplacer(GMLBase$1.prototype.readPoint),
      'MultiPoint': makeReplacer(GMLBase$1.prototype.readMultiPoint),
      'LineString': makeReplacer(GMLBase$1.prototype.readLineString),
      'MultiLineString': makeReplacer(GMLBase$1.prototype.readMultiLineString),
      'LinearRing': makeReplacer(GMLBase$1.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase$1.prototype.readPolygon),
      'MultiPolygon': makeReplacer(GMLBase$1.prototype.readMultiPolygon),
      'Box': makeReplacer(GML2.prototype.readBox),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.GEOMETRY_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),
      'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),
      'Point': makeChildAppender(GML2.prototype.writePoint),
      'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),
      'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),
      'MultiLineString': makeChildAppender(
        GML2.prototype.writeMultiCurveOrLineString
      ),
      'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),
      'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),
      'MultiPolygon': makeChildAppender(
        GML2.prototype.writeMultiSurfaceOrPolygon
      ),
      'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),
      'MultiSurface': makeChildAppender(
        GML2.prototype.writeMultiSurfaceOrPolygon
      ),
      'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeChildAppender(
        GML2.prototype.writeLineStringOrCurveMember
      ),
      'curveMember': makeChildAppender(
        GML2.prototype.writeLineStringOrCurveMember
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.RING_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),
      'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.POINTMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'pointMember': makeChildAppender(GML2.prototype.writePointMember),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygonMember
      ),
      'polygonMember': makeChildAppender(
        GML2.prototype.writeSurfaceOrPolygonMember
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML2.prototype.ENVELOPE_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode),
    },
  };

  var GML2$1 = GML2;

  /**
   * @module ol/format/GML3
   */

  /**
   * @const
   * @type {string}
   * @private
   */
  const schemaLocation =
    GMLNS +
    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +
    '1.0.0/gmlsf.xsd';

  /**
   * @const
   * @type {Object<string, string>}
   */
  const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
    'MultiLineString': 'lineStringMember',
    'MultiCurve': 'curveMember',
    'MultiPolygon': 'polygonMember',
    'MultiSurface': 'surfaceMember',
  };

  /**
   * @classdesc
   * Feature format for reading and writing data in the GML format
   * version 3.1.1.
   * Currently only supports GML 3.1.1 Simple Features profile.
   *
   * @api
   */
  class GML3 extends GMLBase$1 {
    /**
     * @param {import("./GMLBase.js").Options} [options] Optional configuration object.
     */
    constructor(options) {
      options = options ? options : {};

      super(options);

      /**
       * @private
       * @type {boolean}
       */
      this.surface_ = options.surface !== undefined ? options.surface : false;

      /**
       * @private
       * @type {boolean}
       */
      this.curve_ = options.curve !== undefined ? options.curve : false;

      /**
       * @private
       * @type {boolean}
       */
      this.multiCurve_ =
        options.multiCurve !== undefined ? options.multiCurve : true;

      /**
       * @private
       * @type {boolean}
       */
      this.multiSurface_ =
        options.multiSurface !== undefined ? options.multiSurface : true;

      /**
       * @type {string}
       */
      this.schemaLocation = options.schemaLocation
        ? options.schemaLocation
        : schemaLocation;

      /**
       * @private
       * @type {boolean}
       */
      this.hasZ = options.hasZ !== undefined ? options.hasZ : false;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiLineString|undefined} MultiLineString.
     */
    readMultiCurve(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop(
        [],
        this.MULTICURVE_PARSERS,
        node,
        objectStack,
        this
      );
      if (lineStrings) {
        const multiLineString = new MultiLineString$1(lineStrings);
        return multiLineString;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Polygon.
     */
    readFlatCurveRing(node, objectStack) {
      /** @type {Array<LineString>} */
      const lineStrings = pushParseAndPop(
        [],
        this.MULTICURVE_PARSERS,
        node,
        objectStack,
        this
      );
      const flatCoordinates = [];
      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
        extend$1(flatCoordinates, lineStrings[i].getFlatCoordinates());
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiPolygon|undefined} MultiPolygon.
     */
    readMultiSurface(node, objectStack) {
      /** @type {Array<Polygon>} */
      const polygons = pushParseAndPop(
        [],
        this.MULTISURFACE_PARSERS,
        node,
        objectStack,
        this
      );
      if (polygons) {
        return new MultiPolygon$1(polygons);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    curveMemberParser(node, objectStack) {
      parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    surfaceMemberParser(node, objectStack) {
      parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<(Array<number>)>|undefined} flat coordinates.
     */
    readPatch(node, objectStack) {
      return pushParseAndPop(
        [null],
        this.PATCHES_PARSERS,
        node,
        objectStack,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} flat coordinates.
     */
    readSegment(node, objectStack) {
      return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<(Array<number>)>|undefined} flat coordinates.
     */
    readPolygonPatch(node, objectStack) {
      return pushParseAndPop(
        [null],
        this.FLAT_LINEAR_RINGS_PARSERS,
        node,
        objectStack,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} flat coordinates.
     */
    readLineStringSegment(node, objectStack) {
      return pushParseAndPop(
        [null],
        this.GEOMETRY_FLAT_COORDINATES_PARSERS,
        node,
        objectStack,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    interiorParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings.push(flatLinearRing);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    exteriorParser(node, objectStack) {
      /** @type {Array<number>|undefined} */
      const flatLinearRing = pushParseAndPop(
        undefined,
        this.RING_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatLinearRing) {
        const flatLinearRings =
          /** @type {Array<Array<number>>} */
          (objectStack[objectStack.length - 1]);
        flatLinearRings[0] = flatLinearRing;
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    readSurface(node, objectStack) {
      /** @type {Array<Array<number>>} */
      const flatLinearRings = pushParseAndPop(
        [null],
        this.SURFACE_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatLinearRings && flatLinearRings[0]) {
        const flatCoordinates = flatLinearRings[0];
        const ends = [flatCoordinates.length];
        let i, ii;
        for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
          extend$1(flatCoordinates, flatLinearRings[i]);
          ends.push(flatCoordinates.length);
        }
        return new Polygon$1(flatCoordinates, 'XYZ', ends);
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    readCurve(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop(
        [null],
        this.CURVE_PARSERS,
        node,
        objectStack,
        this
      );
      if (flatCoordinates) {
        const lineString = new LineString$1(flatCoordinates, 'XYZ');
        return lineString;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Envelope.
     */
    readEnvelope(node, objectStack) {
      /** @type {Array<number>} */
      const flatCoordinates = pushParseAndPop(
        [null],
        this.ENVELOPE_PARSERS,
        node,
        objectStack,
        this
      );
      return createOrUpdate$2(
        flatCoordinates[1][0],
        flatCoordinates[1][1],
        flatCoordinates[2][0],
        flatCoordinates[2][1]
      );
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatPos(node, objectStack) {
      let s = getAllTextContent(node, false);
      const re = /^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/;
      /** @type {Array<number>} */
      const flatCoordinates = [];
      let m;
      while ((m = re.exec(s))) {
        flatCoordinates.push(parseFloat(m[1]));
        s = s.substr(m[0].length);
      }
      if (s !== '') {
        return undefined;
      }
      const context = objectStack[0];
      const containerSrs = context['srsName'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        axisOrientation = proj.getAxisOrientation();
      }
      if (axisOrientation === 'neu') {
        let i, ii;
        for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {
          const y = flatCoordinates[i];
          const x = flatCoordinates[i + 1];
          flatCoordinates[i] = x;
          flatCoordinates[i + 1] = y;
        }
      }
      const len = flatCoordinates.length;
      if (len == 2) {
        flatCoordinates.push(0);
      }
      if (len === 0) {
        return undefined;
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    readFlatPosList(node, objectStack) {
      const s = getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
      const context = objectStack[0];
      const containerSrs = context['srsName'];
      const contextDimension = context['srsDimension'];
      let axisOrientation = 'enu';
      if (containerSrs) {
        const proj = get$2(containerSrs);
        axisOrientation = proj.getAxisOrientation();
      }
      const coords = s.split(/\s+/);
      // The "dimension" attribute is from the GML 3.0.1 spec.
      let dim = 2;
      if (node.getAttribute('srsDimension')) {
        dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));
      } else if (node.getAttribute('dimension')) {
        dim = readNonNegativeIntegerString(node.getAttribute('dimension'));
      } else if (
        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')
      ) {
        dim = readNonNegativeIntegerString(
          /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')
        );
      } else if (contextDimension) {
        dim = readNonNegativeIntegerString(contextDimension);
      }
      let x, y, z;
      const flatCoordinates = [];
      for (let i = 0, ii = coords.length; i < ii; i += dim) {
        x = parseFloat(coords[i]);
        y = parseFloat(coords[i + 1]);
        z = dim === 3 ? parseFloat(coords[i + 2]) : 0;
        if (axisOrientation.substr(0, 2) === 'en') {
          flatCoordinates.push(x, y, z);
        } else {
          flatCoordinates.push(y, x, z);
        }
      }
      return flatCoordinates;
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} value Point geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePos_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsDimension = hasZ ? '3' : '2';
      node.setAttribute('srsDimension', srsDimension);
      const srsName = context['srsName'];
      let axisOrientation = 'enu';
      if (srsName) {
        axisOrientation = get$2(srsName).getAxisOrientation();
      }
      const point = value.getCoordinates();
      let coords;
      // only 2d for simple features profile
      if (axisOrientation.substr(0, 2) === 'en') {
        coords = point[0] + ' ' + point[1];
      } else {
        coords = point[1] + ' ' + point[0];
      }
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ' ' + z;
      }
      writeStringTextNode(node, coords);
    }

    /**
     * @param {Array<number>} point Point geometry.
     * @param {string} [srsName] Optional srsName
     * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.
     * @return {string} The coords string.
     * @private
     */
    getCoords_(point, srsName, hasZ) {
      let axisOrientation = 'enu';
      if (srsName) {
        axisOrientation = get$2(srsName).getAxisOrientation();
      }
      let coords =
        axisOrientation.substr(0, 2) === 'en'
          ? point[0] + ' ' + point[1]
          : point[1] + ' ' + point[0];
      if (hasZ) {
        // For newly created points, Z can be undefined.
        const z = point[2] || 0;
        coords += ' ' + z;
      }

      return coords;
    }

    /**
     * @param {Element} node Node.
     * @param {LineString|import("../geom/LinearRing.js").default} value Geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writePosList_(node, value, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsDimension = hasZ ? '3' : '2';
      node.setAttribute('srsDimension', srsDimension);
      const srsName = context['srsName'];
      // only 2d for simple features profile
      const points = value.getCoordinates();
      const len = points.length;
      const parts = new Array(len);
      let point;
      for (let i = 0; i < len; ++i) {
        point = points[i];
        parts[i] = this.getCoords_(point, srsName, hasZ);
      }
      writeStringTextNode(node, parts.join(' '));
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} geometry Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const pos = createElementNS(node.namespaceURI, 'pos');
      node.appendChild(pos);
      this.writePos_(pos, geometry, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {Array<*>} objectStack Node stack.
     */
    writeEnvelope(node, extent, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const keys = ['lowerCorner', 'upperCorner'];
      const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        ({node: node}),
        this.ENVELOPE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        objectStack,
        keys,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLinearRing(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const posList = createElementNS(node.namespaceURI, 'posList');
      node.appendChild(posList);
      this.writePosList_(posList, geometry, objectStack);
    }

    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node} Node.
     * @private
     */
    RING_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const parentNode = context.node;
      const exteriorWritten = context['exteriorWritten'];
      if (exteriorWritten === undefined) {
        context['exteriorWritten'] = true;
      }
      return createElementNS(
        parentNode.namespaceURI,
        exteriorWritten !== undefined ? 'interior' : 'exterior'
      );
    }

    /**
     * @param {Element} node Node.
     * @param {Polygon} geometry Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      if (node.nodeName !== 'PolygonPatch' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
        const rings = geometry.getLinearRings();
        pushSerializeAndPop(
          {node: node, hasZ: hasZ, srsName: srsName},
          this.RING_SERIALIZERS,
          this.RING_NODE_FACTORY_,
          rings,
          objectStack,
          undefined,
          this
        );
      } else if (node.nodeName === 'Surface') {
        const patches = createElementNS(node.namespaceURI, 'patches');
        node.appendChild(patches);
        this.writeSurfacePatches_(patches, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {LineString} geometry LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      if (node.nodeName !== 'LineStringSegment' && srsName) {
        node.setAttribute('srsName', srsName);
      }
      if (
        node.nodeName === 'LineString' ||
        node.nodeName === 'LineStringSegment'
      ) {
        const posList = createElementNS(node.namespaceURI, 'posList');
        node.appendChild(posList);
        this.writePosList_(posList, geometry, objectStack);
      } else if (node.nodeName === 'Curve') {
        const segments = createElementNS(node.namespaceURI, 'segments');
        node.appendChild(segments);
        this.writeCurveSegments_(segments, geometry, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {MultiPolygon} geometry MultiPolygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiSurfaceOrPolygon(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const surface = context['surface'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const polygons = geometry.getPolygons();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, surface: surface},
        this.SURFACEORPOLYGONMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        polygons,
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiPoint(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const srsName = context['srsName'];
      const hasZ = context['hasZ'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const points = geometry.getPoints();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName},
        this.POINTMEMBER_SERIALIZERS,
        makeSimpleNodeFactory('pointMember'),
        points,
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {MultiLineString} geometry MultiLineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeMultiCurveOrLineString(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      const hasZ = context['hasZ'];
      const srsName = context['srsName'];
      const curve = context['curve'];
      if (srsName) {
        node.setAttribute('srsName', srsName);
      }
      const lines = geometry.getLineStrings();
      pushSerializeAndPop(
        {node: node, hasZ: hasZ, srsName: srsName, curve: curve},
        this.LINESTRINGORCURVEMEMBER_SERIALIZERS,
        this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,
        lines,
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeRing(node, ring, objectStack) {
      const linearRing = createElementNS(node.namespaceURI, 'LinearRing');
      node.appendChild(linearRing);
      this.writeLinearRing(linearRing, ring, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {Polygon} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeSurfaceOrPolygonMember(node, polygon, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeSurfaceOrPolygon(child, polygon, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {import("../geom/Point.js").default} point Point geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writePointMember(node, point, objectStack) {
      const child = createElementNS(node.namespaceURI, 'Point');
      node.appendChild(child);
      this.writePoint(child, point, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {LineString} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeLineStringOrCurveMember(node, line, objectStack) {
      const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
      if (child) {
        node.appendChild(child);
        this.writeCurveOrLineString(child, line, objectStack);
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Polygon} polygon Polygon geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeSurfacePatches_(node, polygon, objectStack) {
      const child = createElementNS(node.namespaceURI, 'PolygonPatch');
      node.appendChild(child);
      this.writeSurfaceOrPolygon(child, polygon, objectStack);
    }

    /**
     * @param {Element} node Node.
     * @param {LineString} line LineString geometry.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeCurveSegments_(node, line, objectStack) {
      const child = createElementNS(node.namespaceURI, 'LineStringSegment');
      node.appendChild(child);
      this.writeCurveOrLineString(child, line, objectStack);
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = /** @type {import("./Feature.js").WriteOptions} */ (
        objectStack[objectStack.length - 1]
      );
      const item = Object.assign({}, context);
      item['node'] = node;
      let value;
      if (Array.isArray(geometry)) {
        value = transformExtentWithOptions(
          /** @type {import("../extent.js").Extent} */ (geometry),
          context
        );
      } else {
        value = transformGeometryWithOptions(
          /** @type {import("../geom/Geometry.js").default} */ (geometry),
          true,
          context
        );
      }
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        this.GEOMETRY_SERIALIZERS,
        this.GEOMETRY_NODE_FACTORY_,
        [value],
        objectStack,
        undefined,
        this
      );
    }

    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    writeFeatureElement(node, feature, objectStack) {
      const fid = feature.getId();
      if (fid) {
        node.setAttribute('fid', /** @type {string} */ (fid));
      }
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureNS = context['featureNS'];
      const geometryName = feature.getGeometryName();
      if (!context.serializers) {
        context.serializers = {};
        context.serializers[featureNS] = {};
      }
      const keys = [];
      const values = [];
      if (feature.hasProperties()) {
        const properties = feature.getProperties();
        for (const key in properties) {
          const value = properties[key];
          if (value !== null) {
            keys.push(key);
            values.push(value);
            if (
              key == geometryName ||
              typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===
                'function'
            ) {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] = makeChildAppender(
                  this.writeGeometryElement,
                  this
                );
              }
            } else {
              if (!(key in context.serializers[featureNS])) {
                context.serializers[featureNS][key] =
                  makeChildAppender(writeStringTextNode);
              }
            }
          }
        }
      }
      const item = Object.assign({}, context);
      item.node = node;
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        context.serializers,
        makeSimpleNodeFactory(undefined, featureNS),
        values,
        objectStack,
        keys
      );
    }

    /**
     * @param {Node} node Node.
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {Array<*>} objectStack Node stack.
     * @private
     */
    writeFeatureMembers_(node, features, objectStack) {
      const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      const featureType = context['featureType'];
      const featureNS = context['featureNS'];
      /** @type {Object<string, Object<string, import("../xml.js").Serializer>>} */
      const serializers = {};
      serializers[featureNS] = {};
      serializers[featureNS][featureType] = makeChildAppender(
        this.writeFeatureElement,
        this
      );
      const item = Object.assign({}, context);
      item.node = node;
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        (item),
        serializers,
        makeSimpleNodeFactory(featureType, featureNS),
        features,
        objectStack
      );
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Node|undefined} Node.
     * @private
     */
    MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(
        this.namespace,
        MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]
      );
    }

    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string} [nodeName] Node name.
     * @return {Element|undefined} Node.
     * @private
     */
    GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {
      const context = objectStack[objectStack.length - 1];
      const multiSurface = context['multiSurface'];
      const surface = context['surface'];
      const curve = context['curve'];
      const multiCurve = context['multiCurve'];
      if (!Array.isArray(value)) {
        nodeName = /** @type {import("../geom/Geometry.js").default} */ (
          value
        ).getType();
        if (nodeName === 'MultiPolygon' && multiSurface === true) {
          nodeName = 'MultiSurface';
        } else if (nodeName === 'Polygon' && surface === true) {
          nodeName = 'Surface';
        } else if (nodeName === 'LineString' && curve === true) {
          nodeName = 'Curve';
        } else if (nodeName === 'MultiLineString' && multiCurve === true) {
          nodeName = 'MultiCurve';
        }
      } else {
        nodeName = 'Envelope';
      }
      return createElementNS(this.namespace, nodeName);
    }

    /**
     * Encode a geometry in GML 3.1.1 Simple Features.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     * @api
     */
    writeGeometryNode(geometry, options) {
      options = this.adaptOptions(options);
      const geom = createElementNS(this.namespace, 'geom');
      const context = {
        node: geom,
        hasZ: this.hasZ,
        srsName: this.srsName,
        curve: this.curve_,
        surface: this.surface_,
        multiSurface: this.multiSurface_,
        multiCurve: this.multiCurve_,
      };
      if (options) {
        Object.assign(context, options);
      }
      this.writeGeometryElement(geom, geometry, [context]);
      return geom;
    }

    /**
     * Encode an array of features in the GML 3.1.1 format as an XML node.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Element} Node.
     * @api
     */
    writeFeaturesNode(features, options) {
      options = this.adaptOptions(options);
      const node = createElementNS(this.namespace, 'featureMembers');
      node.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        this.schemaLocation
      );
      const context = {
        srsName: this.srsName,
        hasZ: this.hasZ,
        curve: this.curve_,
        surface: this.surface_,
        multiSurface: this.multiSurface_,
        multiCurve: this.multiCurve_,
        featureNS: this.featureNS,
        featureType: this.featureType,
      };
      if (options) {
        Object.assign(context, options);
      }
      this.writeFeatureMembers_(node, features, [context]);
      return node;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml': {
      'pos': makeReplacer(GML3.prototype.readFlatPos),
      'posList': makeReplacer(GML3.prototype.readFlatPosList),
      'coordinates': makeReplacer(GML2$1.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml': {
      'interior': GML3.prototype.interiorParser,
      'exterior': GML3.prototype.exteriorParser,
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml': {
      'Point': makeReplacer(GMLBase$1.prototype.readPoint),
      'MultiPoint': makeReplacer(GMLBase$1.prototype.readMultiPoint),
      'LineString': makeReplacer(GMLBase$1.prototype.readLineString),
      'MultiLineString': makeReplacer(GMLBase$1.prototype.readMultiLineString),
      'LinearRing': makeReplacer(GMLBase$1.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase$1.prototype.readPolygon),
      'MultiPolygon': makeReplacer(GMLBase$1.prototype.readMultiPolygon),
      'Surface': makeReplacer(GML3.prototype.readSurface),
      'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),
      'Curve': makeReplacer(GML3.prototype.readCurve),
      'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),
      'Envelope': makeReplacer(GML3.prototype.readEnvelope),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.MULTICURVE_PARSERS = {
    'http://www.opengis.net/gml': {
      'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),
      'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.MULTISURFACE_PARSERS = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),
      'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.CURVEMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'LineString': makeArrayPusher(GMLBase$1.prototype.readLineString),
      'Curve': makeArrayPusher(GML3.prototype.readCurve),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.SURFACEMEMBER_PARSERS = {
    'http://www.opengis.net/gml': {
      'Polygon': makeArrayPusher(GMLBase$1.prototype.readPolygon),
      'Surface': makeArrayPusher(GML3.prototype.readSurface),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.SURFACE_PARSERS = {
    'http://www.opengis.net/gml': {
      'patches': makeReplacer(GML3.prototype.readPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.CURVE_PARSERS = {
    'http://www.opengis.net/gml': {
      'segments': makeReplacer(GML3.prototype.readSegment),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.ENVELOPE_PARSERS = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),
      'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.PATCHES_PARSERS = {
    'http://www.opengis.net/gml': {
      'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML3.prototype.SEGMENTS_PARSERS = {
    'http://www.opengis.net/gml': {
      'LineStringSegment': makeArrayExtender(
        GML3.prototype.readLineStringSegment
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GMLBase$1.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml': {
      'LinearRing': makeReplacer(GMLBase$1.prototype.readFlatLinearRing),
      'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),
    },
  };

  /**
   * Encode an array of features in GML 3.1.1 Simple Features.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions} [options] Options.
   * @return {string} Result.
   * @api
   */
  GML3.prototype.writeFeatures;

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.RING_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'exterior': makeChildAppender(GML3.prototype.writeRing),
      'interior': makeChildAppender(GML3.prototype.writeRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.ENVELOPE_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'surfaceMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember
      ),
      'polygonMember': makeChildAppender(
        GML3.prototype.writeSurfaceOrPolygonMember
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.POINTMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'pointMember': makeChildAppender(GML3.prototype.writePointMember),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'lineStringMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember
      ),
      'curveMember': makeChildAppender(
        GML3.prototype.writeLineStringOrCurveMember
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML3.prototype.GEOMETRY_SERIALIZERS = {
    'http://www.opengis.net/gml': {
      'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),
      'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),
      'Point': makeChildAppender(GML3.prototype.writePoint),
      'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),
      'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),
      'MultiLineString': makeChildAppender(
        GML3.prototype.writeMultiCurveOrLineString
      ),
      'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),
      'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
      'MultiPolygon': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon
      ),
      'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
      'MultiSurface': makeChildAppender(
        GML3.prototype.writeMultiSurfaceOrPolygon
      ),
      'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),
    },
  };

  var GML3$1 = GML3;

  /**
   * @module ol/format/GML
   */

  /**
   * Feature format for reading and writing data in the GML format
   * version 3.1.1.
   * Currently only supports GML 3.1.1 Simple Features profile.
   *
   * @class
   * @param {import("./GMLBase.js").Options} [options]
   *     Optional configuration object.
   * @api
   */
  const GML = GML3$1;

  /**
   * Encode an array of features in GML 3.1.1 Simple Features.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions} [options] Options.
   * @return {string} Result.
   * @api
   */
  GML.prototype.writeFeatures;

  /**
   * Encode an array of features in the GML 3.1.1 format as an XML node.
   *
   * @function
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {import("./Feature.js").WriteOptions} [options] Options.
   * @return {Node} Node.
   * @api
   */
  GML.prototype.writeFeaturesNode;

  var format_GML = GML;

  /**
   * @module ol/format/TextFeature
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for text feature formats.
   *
   * @abstract
   */
  class TextFeature extends FeatureFormat {
    constructor() {
      super();
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     */
    getType() {
      return 'text';
    }

    /**
     * Read the feature from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     * @api
     */
    readFeature(source, options) {
      return this.readFeatureFromText(
        getText(source),
        this.adaptOptions(options)
      );
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromText(text, options) {
      return abstract();
    }

    /**
     * Read the features from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<import("../Feature.js").default>} Features.
     * @api
     */
    readFeatures(source, options) {
      return this.readFeaturesFromText(
        getText(source),
        this.adaptOptions(options)
      );
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromText(text, options) {
      return abstract();
    }

    /**
     * Read the geometry from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     * @api
     */
    readGeometry(source, options) {
      return this.readGeometryFromText(
        getText(source),
        this.adaptOptions(options)
      );
    }

    /**
     * @abstract
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromText(text, options) {
      return abstract();
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     * @api
     */
    readProjection(source) {
      return this.readProjectionFromText(getText(source));
    }

    /**
     * @param {string} text Text.
     * @protected
     * @return {import("../proj/Projection.js").default|undefined} Projection.
     */
    readProjectionFromText(text) {
      return this.dataProjection;
    }

    /**
     * Encode a feature as a string.
     *
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded feature.
     * @api
     */
    writeFeature(feature, options) {
      return this.writeFeatureText(feature, this.adaptOptions(options));
    }

    /**
     * @abstract
     * @param {import("../Feature.js").default} feature Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeatureText(feature, options) {
      return abstract();
    }

    /**
     * Encode an array of features as string.
     *
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Encoded features.
     * @api
     */
    writeFeatures(features, options) {
      return this.writeFeaturesText(features, this.adaptOptions(options));
    }

    /**
     * @abstract
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeaturesText(features, options) {
      return abstract();
    }

    /**
     * Write a single geometry.
     *
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @return {string} Geometry.
     * @api
     */
    writeGeometry(geometry, options) {
      return this.writeGeometryText(geometry, this.adaptOptions(options));
    }

    /**
     * @abstract
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeGeometryText(geometry, options) {
      return abstract();
    }
  }

  /**
   * @param {Document|Element|Object|string} source Source.
   * @return {string} Text.
   */
  function getText(source) {
    if (typeof source === 'string') {
      return source;
    }
    return '';
  }

  var TextFeature$1 = TextFeature;

  /**
   * @module ol/format/IIIFInfo
   */

  /**
   * @typedef {Object} PreferredOptions
   * @property {string} [format] Preferred image format. Will be used if the image information
   * indicates support for that format.
   * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information
   * indicates support for that quality.
   */

  /**
   * @typedef {Object} SupportedFeatures
   * @property {Array<string>} [supports] Supported IIIF image size and region
   * calculation features.
   * @property {Array<string>} [formats] Supported image formats.
   * @property {Array<string>} [qualities] Supported IIIF image qualities.
   */

  /**
   * @typedef {Object} TileInfo
   * @property {Array<number>} scaleFactors Supported resolution scaling factors.
   * @property {number} width Tile width in pixels.
   * @property {number} [height] Tile height in pixels. Same as tile width if height is
   * not given.
   */

  /**
   * @typedef {Object} IiifProfile
   * @property {Array<string>} [formats] Supported image formats for the image service.
   * @property {Array<string>} [qualities] Supported IIIF image qualities.
   * @property {Array<string>} [supports] Supported features.
   * @property {number} [maxArea] Maximum area (pixels) available for this image service.
   * @property {number} [maxHeight] Maximum height.
   * @property {number} [maxWidth] Maximum width.
   */

  /**
   * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}
   *    ImageInformationResponse
   */

  /**
   * Enum representing the major IIIF Image API versions
   * @enum {string}
   */
  const Versions = {
    VERSION1: 'version1',
    VERSION2: 'version2',
    VERSION3: 'version3',
  };

  /**
   * @module ol/format/KML
   */

  /**
   * @typedef {Object} Vec2
   * @property {number} x X coordinate.
   * @property {import("../style/Icon.js").IconAnchorUnits} xunits Units of x.
   * @property {number} y Y coordinate.
   * @property {import("../style/Icon.js").IconAnchorUnits} yunits Units of Y.
   * @property {import("../style/Icon.js").IconOrigin} [origin] Origin.
   */

  /**
   * @typedef {Object} GxTrackObject
   * @property {Array<Array<number>>} coordinates Coordinates.
   * @property {Array<number>} whens Whens.
   */

  /**
   * @const
   * @type {Array<string>}
   */
  const GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];

  /**
   * @const
   * @type {Array<null|string>}
   */
  const NAMESPACE_URIS = [
    null,
    'http://earth.google.com/kml/2.0',
    'http://earth.google.com/kml/2.1',
    'http://earth.google.com/kml/2.2',
    'http://www.opengis.net/kml/2.2',
  ];

  /**
   * @const
   * @type {string}
   */
  const SCHEMA_LOCATION =
    'http://www.opengis.net/kml/2.2 ' +
    'https://developers.google.com/kml/schema/kml22gx.xsd';

  /**
   * @type {Object<string, import("../style/Icon.js").IconAnchorUnits>}
   */
  const ICON_ANCHOR_UNITS_MAP = {
    'fraction': 'fraction',
    'pixels': 'pixels',
    'insetPixels': 'pixels',
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PLACEMARK_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'ExtendedData': extendedDataParser,
      'Region': regionParser,
      'MultiGeometry': makeObjectPropertySetter(readMultiGeometry, 'geometry'),
      'LineString': makeObjectPropertySetter(readLineString, 'geometry'),
      'LinearRing': makeObjectPropertySetter(readLinearRing, 'geometry'),
      'Point': makeObjectPropertySetter(readPoint, 'geometry'),
      'Polygon': makeObjectPropertySetter(readPolygon, 'geometry'),
      'Style': makeObjectPropertySetter(readStyle),
      'StyleMap': placemarkStyleMapParser,
      'address': makeObjectPropertySetter(readString),
      'description': makeObjectPropertySetter(readString),
      'name': makeObjectPropertySetter(readString),
      'open': makeObjectPropertySetter(readBoolean),
      'phoneNumber': makeObjectPropertySetter(readString),
      'styleUrl': makeObjectPropertySetter(readStyleURL),
      'visibility': makeObjectPropertySetter(readBoolean),
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'MultiTrack': makeObjectPropertySetter(readGxMultiTrack, 'geometry'),
      'Track': makeObjectPropertySetter(readGxTrack, 'geometry'),
    })
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const NETWORK_LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'ExtendedData': extendedDataParser,
    'Region': regionParser,
    'Link': linkParser,
    'address': makeObjectPropertySetter(readString),
    'description': makeObjectPropertySetter(readString),
    'name': makeObjectPropertySetter(readString),
    'open': makeObjectPropertySetter(readBoolean),
    'phoneNumber': makeObjectPropertySetter(readString),
    'visibility': makeObjectPropertySetter(readBoolean),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LINK_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'href': makeObjectPropertySetter(readURI),
  });

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const REGION_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'LatLonAltBox': latLonAltBoxParser,
    'Lod': lodParser,
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const KML_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const KML_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'Document': makeChildAppender(writeDocument),
    'Placemark': makeChildAppender(writePlacemark),
  });

  /**
   * @type {import("../color.js").Color}
   */
  let DEFAULT_COLOR;

  /**
   * @type {Fill|null}
   */
  let DEFAULT_FILL_STYLE = null;

  /**
   * @type {import("../size.js").Size}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR;

  /**
   * @type {import("../style/Icon.js").IconAnchorUnits}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;

  /**
   * @type {import("../style/Icon.js").IconAnchorUnits}
   */
  let DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;

  /**
   * @type {import("../size.js").Size}
   */
  let DEFAULT_IMAGE_STYLE_SIZE;

  /**
   * @type {string}
   */
  let DEFAULT_IMAGE_STYLE_SRC;

  /**
   * @type {import("../style/Image.js").default|null}
   */
  let DEFAULT_IMAGE_STYLE = null;

  /**
   * @type {string}
   */
  let DEFAULT_NO_IMAGE_STYLE;

  /**
   * @type {Stroke|null}
   */
  let DEFAULT_STROKE_STYLE = null;

  /**
   * @type {Stroke}
   */
  let DEFAULT_TEXT_STROKE_STYLE;

  /**
   * @type {Text|null}
   */
  let DEFAULT_TEXT_STYLE = null;

  /**
   * @type {Style|null}
   */
  let DEFAULT_STYLE = null;

  /**
   * @type {Array<Style>|null}
   */
  let DEFAULT_STYLE_ARRAY = null;

  /**
   * Function that returns the scale needed to normalize an icon image to 32 pixels.
   * @param {import("../size.js").Size} size Image size.
   * @return {number} Scale.
   */
  function scaleForSize(size) {
    return 32 / Math.min(size[0], size[1]);
  }

  function createStyleDefaults() {
    DEFAULT_COLOR = [255, 255, 255, 1];

    DEFAULT_FILL_STYLE = new Fill$1({
      color: DEFAULT_COLOR,
    });

    DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2];

    DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = 'pixels';

    DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = 'pixels';

    DEFAULT_IMAGE_STYLE_SIZE = [64, 64];

    DEFAULT_IMAGE_STYLE_SRC =
      'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';

    DEFAULT_IMAGE_STYLE = new Icon$1({
      anchor: DEFAULT_IMAGE_STYLE_ANCHOR,
      anchorOrigin: 'bottom-left',
      anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,
      anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,
      crossOrigin: 'anonymous',
      rotation: 0,
      scale: scaleForSize(DEFAULT_IMAGE_STYLE_SIZE),
      size: DEFAULT_IMAGE_STYLE_SIZE,
      src: DEFAULT_IMAGE_STYLE_SRC,
    });

    DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';

    DEFAULT_STROKE_STYLE = new Stroke$1({
      color: DEFAULT_COLOR,
      width: 1,
    });

    DEFAULT_TEXT_STROKE_STYLE = new Stroke$1({
      color: [51, 51, 51, 1],
      width: 2,
    });

    DEFAULT_TEXT_STYLE = new Text$1({
      font: 'bold 16px Helvetica',
      fill: DEFAULT_FILL_STYLE,
      stroke: DEFAULT_TEXT_STROKE_STYLE,
      scale: 0.8,
    });

    DEFAULT_STYLE = new Style$1({
      fill: DEFAULT_FILL_STYLE,
      image: DEFAULT_IMAGE_STYLE,
      text: DEFAULT_TEXT_STYLE,
      stroke: DEFAULT_STROKE_STYLE,
      zIndex: 0,
    });

    DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];
  }

  /**
   * @type {HTMLTextAreaElement}
   */
  let TEXTAREA;

  /**
   * A function that takes a url `{string}` and returns a url `{string}`.
   * Might be used to change an icon path or to substitute a
   * data url obtained from a KMZ array buffer.
   *
   * @typedef {function(string):string} IconUrlFunction
   * @api
   */

  /**
   * Function that returns a url unchanged.
   * @param {string} href Input url.
   * @return {string} Output url.
   */
  function defaultIconUrlFunction(href) {
    return href;
  }

  /**
   * @typedef {Object} Options
   * @property {boolean} [extractStyles=true] Extract styles from the KML.
   * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.
   * @property {Array<Style>} [defaultStyle] Default style. The
   * default default style is the same as Google Earth.
   * @property {boolean} [writeStyles=true] Write styles into KML.
   * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * @property {IconUrlFunction} [iconUrlFunction] Function that takes a url string and returns a url string.
   * Might be used to change an icon path or to substitute a data url obtained from a KMZ array buffer.
   */

  /**
   * @classdesc
   * Feature format for reading and writing data in the KML format.
   *
   * {@link module:ol/format/KML~KML#readFeature} will read the first feature from
   * a KML source.
   *
   * MultiGeometries are converted into GeometryCollections if they are a mix of
   * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are
   * all of the same type.
   *
   * @api
   */
  class KML extends XMLFeature$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      if (!DEFAULT_STYLE_ARRAY) {
        createStyleDefaults();
      }

      /**
       * @type {import("../proj/Projection.js").default}
       */
      this.dataProjection = get$2('EPSG:4326');

      /**
       * @private
       * @type {Array<Style>}
       */
      this.defaultStyle_ = options.defaultStyle
        ? options.defaultStyle
        : DEFAULT_STYLE_ARRAY;

      /**
       * @private
       * @type {boolean}
       */
      this.extractStyles_ =
        options.extractStyles !== undefined ? options.extractStyles : true;

      /**
       * @type {boolean}
       */
      this.writeStyles_ =
        options.writeStyles !== undefined ? options.writeStyles : true;

      /**
       * @private
       * @type {!Object<string, (Array<Style>|string)>}
       */
      this.sharedStyles_ = {};

      /**
       * @private
       * @type {boolean}
       */
      this.showPointNames_ =
        options.showPointNames !== undefined ? options.showPointNames : true;

      /**
       * @type {null|string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';

      /**
       * @type {IconUrlFunction}
       */
      this.iconUrlFunction_ = options.iconUrlFunction
        ? options.iconUrlFunction
        : defaultIconUrlFunction;

      this.supportedMediaTypes = ['application/vnd.google-earth.kml+xml'];
    }

    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Array<Feature>|undefined} Features.
     */
    readDocumentOrFolder_(node, objectStack) {
      // FIXME use scope somehow
      const parsersNS = makeStructureNS(NAMESPACE_URIS, {
        'Document': makeArrayExtender(this.readDocumentOrFolder_, this),
        'Folder': makeArrayExtender(this.readDocumentOrFolder_, this),
        'Placemark': makeArrayPusher(this.readPlacemark_, this),
        'Style': this.readSharedStyle_.bind(this),
        'StyleMap': this.readSharedStyleMap_.bind(this),
      });
      /** @type {Array<Feature>} */
      // @ts-ignore
      const features = pushParseAndPop([], parsersNS, node, objectStack, this);
      if (features) {
        return features;
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     * @return {Feature|undefined} Feature.
     */
    readPlacemark_(node, objectStack) {
      const object = pushParseAndPop(
        {'geometry': null},
        PLACEMARK_PARSERS,
        node,
        objectStack,
        this
      );
      if (!object) {
        return undefined;
      }
      const feature = new Feature$1();
      const id = node.getAttribute('id');
      if (id !== null) {
        feature.setId(id);
      }
      const options = /** @type {import("./Feature.js").ReadOptions} */ (
        objectStack[0]
      );

      const geometry = object['geometry'];
      if (geometry) {
        transformGeometryWithOptions(geometry, false, options);
      }
      feature.setGeometry(geometry);
      delete object['geometry'];

      if (this.extractStyles_) {
        const style = object['Style'];
        const styleUrl = object['styleUrl'];
        const styleFunction = createFeatureStyleFunction(
          style,
          styleUrl,
          this.defaultStyle_,
          this.sharedStyles_,
          this.showPointNames_
        );
        feature.setStyle(styleFunction);
      }
      delete object['Style'];
      // we do not remove the styleUrl property from the object, so it
      // gets stored on feature when setProperties is called

      feature.setProperties(object, true);

      return feature;
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    readSharedStyle_(node, objectStack) {
      const id = node.getAttribute('id');
      if (id !== null) {
        const style = readStyle.call(this, node, objectStack);
        if (style) {
          let styleUri;
          let baseURI = node.baseURI;
          if (!baseURI || baseURI == 'about:blank') {
            baseURI = window.location.href;
          }
          if (baseURI) {
            const url = new URL('#' + id, baseURI);
            styleUri = url.href;
          } else {
            styleUri = '#' + id;
          }
          this.sharedStyles_[styleUri] = style;
        }
      }
    }

    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @private
     */
    readSharedStyleMap_(node, objectStack) {
      const id = node.getAttribute('id');
      if (id === null) {
        return;
      }
      const styleMapValue = readStyleMapValue.call(this, node, objectStack);
      if (!styleMapValue) {
        return;
      }
      let styleUri;
      let baseURI = node.baseURI;
      if (!baseURI || baseURI == 'about:blank') {
        baseURI = window.location.href;
      }
      if (baseURI) {
        const url = new URL('#' + id, baseURI);
        styleUri = url.href;
      } else {
        styleUri = '#' + id;
      }
      this.sharedStyles_[styleUri] = styleMapValue;
    }

    /**
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromNode(node, options) {
      if (!NAMESPACE_URIS.includes(node.namespaceURI)) {
        return null;
      }
      const feature = this.readPlacemark_(node, [
        this.getReadOptions(node, options),
      ]);
      if (feature) {
        return feature;
      }
      return null;
    }

    /**
     * @protected
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromNode(node, options) {
      if (!NAMESPACE_URIS.includes(node.namespaceURI)) {
        return [];
      }
      let features;
      const localName = node.localName;
      if (localName == 'Document' || localName == 'Folder') {
        features = this.readDocumentOrFolder_(node, [
          this.getReadOptions(node, options),
        ]);
        if (features) {
          return features;
        }
        return [];
      } else if (localName == 'Placemark') {
        const feature = this.readPlacemark_(node, [
          this.getReadOptions(node, options),
        ]);
        if (feature) {
          return [feature];
        }
        return [];
      } else if (localName == 'kml') {
        features = [];
        for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
          const fs = this.readFeaturesFromNode(n, options);
          if (fs) {
            extend$1(features, fs);
          }
        }
        return features;
      }
      return [];
    }

    /**
     * Read the name of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {string|undefined} Name.
     * @api
     */
    readName(source) {
      if (!source) {
        return undefined;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readNameFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readNameFromDocument(/** @type {Document} */ (source));
      }
      return this.readNameFromNode(/** @type {Element} */ (source));
    }

    /**
     * @param {Document} doc Document.
     * @return {string|undefined} Name.
     */
    readNameFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          const name = this.readNameFromNode(/** @type {Element} */ (n));
          if (name) {
            return name;
          }
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {string|undefined} Name.
     */
    readNameFromNode(node) {
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'name') {
          return readString(n);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS.includes(n.namespaceURI) &&
          (localName == 'Document' ||
            localName == 'Folder' ||
            localName == 'Placemark' ||
            localName == 'kml')
        ) {
          const name = this.readNameFromNode(n);
          if (name) {
            return name;
          }
        }
      }
      return undefined;
    }

    /**
     * Read the network links of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<Object>} Network links.
     * @api
     */
    readNetworkLinks(source) {
      const networkLinks = [];
      if (typeof source === 'string') {
        const doc = parse(source);
        extend$1(networkLinks, this.readNetworkLinksFromDocument(doc));
      } else if (isDocument(source)) {
        extend$1(
          networkLinks,
          this.readNetworkLinksFromDocument(/** @type {Document} */ (source))
        );
      } else {
        extend$1(
          networkLinks,
          this.readNetworkLinksFromNode(/** @type {Element} */ (source))
        );
      }
      return networkLinks;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<Object>} Network links.
     */
    readNetworkLinksFromDocument(doc) {
      const networkLinks = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$1(
            networkLinks,
            this.readNetworkLinksFromNode(/** @type {Element} */ (n))
          );
        }
      }
      return networkLinks;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<Object>} Network links.
     */
    readNetworkLinksFromNode(node) {
      const networkLinks = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (
          NAMESPACE_URIS.includes(n.namespaceURI) &&
          n.localName == 'NetworkLink'
        ) {
          const obj = pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);
          networkLinks.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS.includes(n.namespaceURI) &&
          (localName == 'Document' || localName == 'Folder' || localName == 'kml')
        ) {
          extend$1(networkLinks, this.readNetworkLinksFromNode(n));
        }
      }
      return networkLinks;
    }

    /**
     * Read the regions of the KML.
     *
     * @param {Document|Element|string} source Source.
     * @return {Array<Object>} Regions.
     * @api
     */
    readRegion(source) {
      const regions = [];
      if (typeof source === 'string') {
        const doc = parse(source);
        extend$1(regions, this.readRegionFromDocument(doc));
      } else if (isDocument(source)) {
        extend$1(
          regions,
          this.readRegionFromDocument(/** @type {Document} */ (source))
        );
      } else {
        extend$1(regions, this.readRegionFromNode(/** @type {Element} */ (source)));
      }
      return regions;
    }

    /**
     * @param {Document} doc Document.
     * @return {Array<Object>} Region.
     */
    readRegionFromDocument(doc) {
      const regions = [];
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          extend$1(regions, this.readRegionFromNode(/** @type {Element} */ (n)));
        }
      }
      return regions;
    }

    /**
     * @param {Element} node Node.
     * @return {Array<Object>} Region.
     * @api
     */
    readRegionFromNode(node) {
      const regions = [];
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        if (NAMESPACE_URIS.includes(n.namespaceURI) && n.localName == 'Region') {
          const obj = pushParseAndPop({}, REGION_PARSERS, n, []);
          regions.push(obj);
        }
      }
      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
        const localName = n.localName;
        if (
          NAMESPACE_URIS.includes(n.namespaceURI) &&
          (localName == 'Document' || localName == 'Folder' || localName == 'kml')
        ) {
          extend$1(regions, this.readRegionFromNode(n));
        }
      }
      return regions;
    }

    /**
     * Encode an array of features in the KML format as an XML node. GeometryCollections,
     * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.
     *
     * @param {Array<Feature>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Options.
     * @return {Node} Node.
     * @api
     */
    writeFeaturesNode(features, options) {
      options = this.adaptOptions(options);
      const kml = createElementNS(NAMESPACE_URIS[4], 'kml');
      const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
      kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);
      kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', XML_SCHEMA_INSTANCE_URI);
      kml.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        SCHEMA_LOCATION
      );

      const /** @type {import("../xml.js").NodeStackItem} */ context = {
          node: kml,
        };
      /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */
      const properties = {};
      if (features.length > 1) {
        properties['Document'] = features;
      } else if (features.length == 1) {
        properties['Placemark'] = features[0];
      }
      const orderedKeys = KML_SEQUENCE[kml.namespaceURI];
      const values = makeSequence(properties, orderedKeys);
      pushSerializeAndPop(
        context,
        KML_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        values,
        [options],
        orderedKeys,
        this
      );
      return kml;
    }
  }

  /**
   * @param {Style|undefined} foundStyle Style.
   * @param {string} name Name.
   * @return {Style} style Style.
   */
  function createNameStyleFunction(foundStyle, name) {
    const textOffset = [0, 0];
    /** @type {CanvasTextAlign} */
    let textAlign = 'start';
    const imageStyle = foundStyle.getImage();
    if (imageStyle) {
      const imageSize = imageStyle.getSize();
      if (imageSize && imageSize.length == 2) {
        const imageScale = imageStyle.getScaleArray();
        const anchor = imageStyle.getAnchor();
        // Offset the label to be centered to the right of the icon,
        // if there is one.
        textOffset[0] = imageScale[0] * (imageSize[0] - anchor[0]);
        textOffset[1] = imageScale[1] * (imageSize[1] / 2 - anchor[1]);
        textAlign = 'left';
      }
    }
    let textStyle = foundStyle.getText();
    if (textStyle) {
      // clone the text style, customizing it with name, alignments and offset.
      // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).
      textStyle = textStyle.clone();
      textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());
      textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());
      textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());
      textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);
    } else {
      textStyle = DEFAULT_TEXT_STYLE.clone();
    }
    textStyle.setText(name);
    textStyle.setOffsetX(textOffset[0]);
    textStyle.setOffsetY(textOffset[1]);
    textStyle.setTextAlign(textAlign);

    const nameStyle = new Style$1({
      image: imageStyle,
      text: textStyle,
    });
    return nameStyle;
  }

  /**
   * @param {Array<Style>|undefined} style Style.
   * @param {string} styleUrl Style URL.
   * @param {Array<Style>} defaultStyle Default style.
   * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.
   * @param {boolean|undefined} showPointNames true to show names for point placemarks.
   * @return {import("../style/Style.js").StyleFunction} Feature style function.
   */
  function createFeatureStyleFunction(
    style,
    styleUrl,
    defaultStyle,
    sharedStyles,
    showPointNames
  ) {
    return (
      /**
       * @param {Feature} feature feature.
       * @param {number} resolution Resolution.
       * @return {Array<Style>|Style} Style.
       */
      function (feature, resolution) {
        let drawName = showPointNames;
        let name = '';
        let multiGeometryPoints = [];
        if (drawName) {
          const geometry = feature.getGeometry();
          if (geometry) {
            if (geometry instanceof GeometryCollection$1) {
              multiGeometryPoints = geometry
                .getGeometriesArrayRecursive()
                .filter(function (geometry) {
                  const type = geometry.getType();
                  return type === 'Point' || type === 'MultiPoint';
                });
              drawName = multiGeometryPoints.length > 0;
            } else {
              const type = geometry.getType();
              drawName = type === 'Point' || type === 'MultiPoint';
            }
          }
        }

        if (drawName) {
          name = /** @type {string} */ (feature.get('name'));
          drawName = drawName && !!name;
          // convert any html character codes
          if (drawName && /&[^&]+;/.test(name)) {
            if (!TEXTAREA) {
              TEXTAREA = document.createElement('textarea');
            }
            TEXTAREA.innerHTML = name;
            name = TEXTAREA.value;
          }
        }

        let featureStyle = defaultStyle;
        if (style) {
          featureStyle = style;
        } else if (styleUrl) {
          featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);
        }
        if (drawName) {
          const nameStyle = createNameStyleFunction(featureStyle[0], name);
          if (multiGeometryPoints.length > 0) {
            // in multigeometries restrict the name style to points and create a
            // style without image or text for geometries requiring fill or stroke
            // including any polygon specific style if there is one
            nameStyle.setGeometry(new GeometryCollection$1(multiGeometryPoints));
            const baseStyle = new Style$1({
              geometry: featureStyle[0].getGeometry(),
              image: null,
              fill: featureStyle[0].getFill(),
              stroke: featureStyle[0].getStroke(),
              text: null,
            });
            return [nameStyle, baseStyle].concat(featureStyle.slice(1));
          }
          return nameStyle;
        }
        return featureStyle;
      }
    );
  }

  /**
   * @param {Array<Style>|string|undefined} styleValue Style value.
   * @param {Array<Style>} defaultStyle Default style.
   * @param {!Object<string, (Array<Style>|string)>} sharedStyles
   * Shared styles.
   * @return {Array<Style>} Style.
   */
  function findStyle(styleValue, defaultStyle, sharedStyles) {
    if (Array.isArray(styleValue)) {
      return styleValue;
    } else if (typeof styleValue === 'string') {
      return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);
    }
    return defaultStyle;
  }

  /**
   * @param {Node} node Node.
   * @return {import("../color.js").Color|undefined} Color.
   */
  function readColor(node) {
    const s = getAllTextContent(node, false);
    // The KML specification states that colors should not include a leading `#`
    // but we tolerate them.
    const m = /^\s*#?\s*([0-9A-Fa-f]{8})\s*$/.exec(s);
    if (m) {
      const hexColor = m[1];
      return [
        parseInt(hexColor.substr(6, 2), 16),
        parseInt(hexColor.substr(4, 2), 16),
        parseInt(hexColor.substr(2, 2), 16),
        parseInt(hexColor.substr(0, 2), 16) / 255,
      ];
    }
    return undefined;
  }

  /**
   * @param {Node} node Node.
   * @return {Array<number>|undefined} Flat coordinates.
   */
  function readFlatCoordinates(node) {
    let s = getAllTextContent(node, false);
    const flatCoordinates = [];
    // The KML specification states that coordinate tuples should not include
    // spaces, but we tolerate them.
    s = s.replace(/\s*,\s*/g, ',');
    const re =
      /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?),([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s+|,|$)(?:([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s+|$))?\s*/i;
    let m;
    while ((m = re.exec(s))) {
      const x = parseFloat(m[1]);
      const y = parseFloat(m[2]);
      const z = m[3] ? parseFloat(m[3]) : 0;
      flatCoordinates.push(x, y, z);
      s = s.substr(m[0].length);
    }
    if (s !== '') {
      return undefined;
    }
    return flatCoordinates;
  }

  /**
   * @param {Node} node Node.
   * @return {string} URI.
   */
  function readURI(node) {
    const s = getAllTextContent(node, false).trim();
    let baseURI = node.baseURI;
    if (!baseURI || baseURI == 'about:blank') {
      baseURI = window.location.href;
    }
    if (baseURI) {
      const url = new URL(s, baseURI);
      return url.href;
    }
    return s;
  }

  /**
   * @param {Node} node Node.
   * @return {string} URI.
   */
  function readStyleURL(node) {
    // KML files in the wild occasionally forget the leading
    // `#` on styleUrlsdefined in the same document.
    const s = getAllTextContent(node, false)
      .trim()
      .replace(/^(?!.*#)/, '#');
    let baseURI = node.baseURI;
    if (!baseURI || baseURI == 'about:blank') {
      baseURI = window.location.href;
    }
    if (baseURI) {
      const url = new URL(s, baseURI);
      return url.href;
    }
    return s;
  }

  /**
   * @param {Element} node Node.
   * @return {Vec2} Vec2.
   */
  function readVec2(node) {
    const xunits = node.getAttribute('xunits');
    const yunits = node.getAttribute('yunits');
    /** @type {import('../style/Icon.js').IconOrigin} */
    let origin;
    if (xunits !== 'insetPixels') {
      if (yunits !== 'insetPixels') {
        origin = 'bottom-left';
      } else {
        origin = 'top-left';
      }
    } else {
      if (yunits !== 'insetPixels') {
        origin = 'bottom-right';
      } else {
        origin = 'top-right';
      }
    }
    return {
      x: parseFloat(node.getAttribute('x')),
      xunits: ICON_ANCHOR_UNITS_MAP[xunits],
      y: parseFloat(node.getAttribute('y')),
      yunits: ICON_ANCHOR_UNITS_MAP[yunits],
      origin: origin,
    };
  }

  /**
   * @param {Node} node Node.
   * @return {number|undefined} Scale.
   */
  function readScale(node) {
    return readDecimal(node);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const STYLE_MAP_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'Pair': pairDataParser,
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<Style>|string|undefined} StyleMap.
   */
  function readStyleMapValue(node, objectStack) {
    return pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ICON_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'Icon': makeObjectPropertySetter(readIcon),
    'color': makeObjectPropertySetter(readColor),
    'heading': makeObjectPropertySetter(readDecimal),
    'hotSpot': makeObjectPropertySetter(readVec2),
    'scale': makeObjectPropertySetter(readScale),
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function iconStyleParser(node, objectStack) {
    // FIXME refreshMode
    // FIXME refreshInterval
    // FIXME viewRefreshTime
    // FIXME viewBoundScale
    // FIXME viewFormat
    // FIXME httpQuery
    const object = pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = /** @type {Object} */ (
      objectStack[objectStack.length - 1]
    );
    const IconObject = 'Icon' in object ? object['Icon'] : {};
    const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;
    let src;
    const href = /** @type {string|undefined} */ (IconObject['href']);
    if (href) {
      src = href;
    } else if (drawIcon) {
      src = DEFAULT_IMAGE_STYLE_SRC;
    }
    let anchor, anchorXUnits, anchorYUnits;
    /** @type {import('../style/Icon.js').IconOrigin|undefined} */
    let anchorOrigin = 'bottom-left';
    const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);
    if (hotSpot) {
      anchor = [hotSpot.x, hotSpot.y];
      anchorXUnits = hotSpot.xunits;
      anchorYUnits = hotSpot.yunits;
      anchorOrigin = hotSpot.origin;
    } else if (/^https?:\/\/maps\.(?:google|gstatic)\.com\//.test(src)) {
      // Google hotspots from https://kml4earth.appspot.com/icons.html#notes
      if (src.includes('pushpin')) {
        anchor = DEFAULT_IMAGE_STYLE_ANCHOR;
        anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
        anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
      } else if (src.includes('arrow-reverse')) {
        anchor = [54, 42];
        anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
        anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
      } else if (src.includes('paddle')) {
        anchor = [32, 1];
        anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
        anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
      }
    }

    let offset;
    const x = /** @type {number|undefined} */ (IconObject['x']);
    const y = /** @type {number|undefined} */ (IconObject['y']);
    if (x !== undefined && y !== undefined) {
      offset = [x, y];
    }

    let size;
    const w = /** @type {number|undefined} */ (IconObject['w']);
    const h = /** @type {number|undefined} */ (IconObject['h']);
    if (w !== undefined && h !== undefined) {
      size = [w, h];
    }

    let rotation;
    const heading = /** @type {number} */ (object['heading']);
    if (heading !== undefined) {
      rotation = toRadians(heading);
    }

    const scale = /** @type {number|undefined} */ (object['scale']);

    const color = /** @type {Array<number>|undefined} */ (object['color']);

    if (drawIcon) {
      if (src == DEFAULT_IMAGE_STYLE_SRC) {
        size = DEFAULT_IMAGE_STYLE_SIZE;
      }

      const imageStyle = new Icon$1({
        anchor: anchor,
        anchorOrigin: anchorOrigin,
        anchorXUnits: anchorXUnits,
        anchorYUnits: anchorYUnits,
        crossOrigin: this.crossOrigin_,
        offset: offset,
        offsetOrigin: 'bottom-left',
        rotation: rotation,
        scale: scale,
        size: size,
        src: this.iconUrlFunction_(src),
        color: color,
      });

      const imageScale = imageStyle.getScaleArray()[0];
      const imageSize = imageStyle.getSize();
      if (imageSize === null) {
        const imageState = imageStyle.getImageState();
        if (imageState === ImageState.IDLE || imageState === ImageState.LOADING) {
          const listener = function () {
            const imageState = imageStyle.getImageState();
            if (
              !(
                imageState === ImageState.IDLE ||
                imageState === ImageState.LOADING
              )
            ) {
              const imageSize = imageStyle.getSize();
              if (imageSize && imageSize.length == 2) {
                const resizeScale = scaleForSize(imageSize);
                imageStyle.setScale(imageScale * resizeScale);
              }
              imageStyle.unlistenImageChange(listener);
            }
          };
          imageStyle.listenImageChange(listener);
          if (imageState === ImageState.IDLE) {
            imageStyle.load();
          }
        }
      } else if (imageSize.length == 2) {
        const resizeScale = scaleForSize(imageSize);
        imageStyle.setScale(imageScale * resizeScale);
      }
      styleObject['imageStyle'] = imageStyle;
    } else {
      // handle the case when we explicitly want to draw no icon.
      styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LABEL_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'color': makeObjectPropertySetter(readColor),
    'scale': makeObjectPropertySetter(readScale),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function labelStyleParser(node, objectStack) {
    // FIXME colorMode
    const object = pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const textStyle = new Text$1({
      fill: new Fill$1({
        color:
          /** @type {import("../color.js").Color} */
          ('color' in object ? object['color'] : DEFAULT_COLOR),
      }),
      scale: /** @type {number|undefined} */ (object['scale']),
    });
    styleObject['textStyle'] = textStyle;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LINE_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'color': makeObjectPropertySetter(readColor),
    'width': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function lineStyleParser(node, objectStack) {
    // FIXME colorMode
    // FIXME gx:outerColor
    // FIXME gx:outerWidth
    // FIXME gx:physicalWidth
    // FIXME gx:labelVisibility
    const object = pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const strokeStyle = new Stroke$1({
      color:
        /** @type {import("../color.js").Color} */
        ('color' in object ? object['color'] : DEFAULT_COLOR),
      width: /** @type {number} */ ('width' in object ? object['width'] : 1),
    });
    styleObject['strokeStyle'] = strokeStyle;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const POLY_STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'color': makeObjectPropertySetter(readColor),
    'fill': makeObjectPropertySetter(readBoolean),
    'outline': makeObjectPropertySetter(readBoolean),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function polyStyleParser(node, objectStack) {
    // FIXME colorMode
    const object = pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const styleObject = objectStack[objectStack.length - 1];
    const fillStyle = new Fill$1({
      color:
        /** @type {import("../color.js").Color} */
        ('color' in object ? object['color'] : DEFAULT_COLOR),
    });
    styleObject['fillStyle'] = fillStyle;
    const fill = /** @type {boolean|undefined} */ (object['fill']);
    if (fill !== undefined) {
      styleObject['fill'] = fill;
    }
    const outline = /** @type {boolean|undefined} */ (object['outline']);
    if (outline !== undefined) {
      styleObject['outline'] = outline;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const FLAT_LINEAR_RING_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'coordinates': makeReplacer(readFlatCoordinates),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<number>} LinearRing flat coordinates.
   */
  function readFlatLinearRing(node, objectStack) {
    return pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function gxCoordParser(node, objectStack) {
    const gxTrackObject =
      /** @type {GxTrackObject} */
      (objectStack[objectStack.length - 1]);
    const coordinates = gxTrackObject.coordinates;
    const s = getAllTextContent(node, false);
    const re =
      /^\s*([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s*$/i;
    const m = re.exec(s);
    if (m) {
      const x = parseFloat(m[1]);
      const y = parseFloat(m[2]);
      const z = parseFloat(m[3]);
      coordinates.push([x, y, z]);
    } else {
      coordinates.push([]);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GX_MULTITRACK_GEOMETRY_PARSERS = makeStructureNS(GX_NAMESPACE_URIS, {
    'Track': makeArrayPusher(readGxTrack),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {MultiLineString|undefined} MultiLineString.
   */
  function readGxMultiTrack(node, objectStack) {
    const lineStrings = pushParseAndPop(
      [],
      GX_MULTITRACK_GEOMETRY_PARSERS,
      node,
      objectStack
    );
    if (!lineStrings) {
      return undefined;
    }
    return new MultiLineString$1(lineStrings);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GX_TRACK_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'when': whenParser,
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'coord': gxCoordParser,
    })
  );

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {LineString|undefined} LineString.
   */
  function readGxTrack(node, objectStack) {
    const gxTrackObject = pushParseAndPop(
      /** @type {GxTrackObject} */ ({
        coordinates: [],
        whens: [],
      }),
      GX_TRACK_PARSERS,
      node,
      objectStack
    );
    if (!gxTrackObject) {
      return undefined;
    }
    const flatCoordinates = [];
    const coordinates = gxTrackObject.coordinates;
    const whens = gxTrackObject.whens;
    for (
      let i = 0, ii = Math.min(coordinates.length, whens.length);
      i < ii;
      ++i
    ) {
      if (coordinates[i].length == 3) {
        flatCoordinates.push(
          coordinates[i][0],
          coordinates[i][1],
          coordinates[i][2],
          whens[i]
        );
      }
    }
    return new LineString$1(flatCoordinates, 'XYZM');
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const ICON_PARSERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'href': makeObjectPropertySetter(readURI),
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'x': makeObjectPropertySetter(readDecimal),
      'y': makeObjectPropertySetter(readDecimal),
      'w': makeObjectPropertySetter(readDecimal),
      'h': makeObjectPropertySetter(readDecimal),
    })
  );

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Icon object.
   */
  function readIcon(node, objectStack) {
    const iconObject = pushParseAndPop({}, ICON_PARSERS, node, objectStack);
    if (iconObject) {
      return iconObject;
    }
    return null;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const GEOMETRY_FLAT_COORDINATES_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'coordinates': makeReplacer(readFlatCoordinates),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<number>} Flat coordinates.
   */
  function readFlatCoordinatesFromNode(node, objectStack) {
    return pushParseAndPop(
      null,
      GEOMETRY_FLAT_COORDINATES_PARSERS,
      node,
      objectStack
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const EXTRUDE_AND_ALTITUDE_MODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'extrude': makeObjectPropertySetter(readBoolean),
    'tessellate': makeObjectPropertySetter(readBoolean),
    'altitudeMode': makeObjectPropertySetter(readString),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {LineString|undefined} LineString.
   */
  function readLineString(node, objectStack) {
    const properties = pushParseAndPop(
      {},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack
    );
    const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const lineString = new LineString$1(flatCoordinates, 'XYZ');
      lineString.setProperties(properties, true);
      return lineString;
    }
    return undefined;
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Polygon|undefined} Polygon.
   */
  function readLinearRing(node, objectStack) {
    const properties = pushParseAndPop(
      {},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack
    );
    const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const polygon = new Polygon$1(flatCoordinates, 'XYZ', [
        flatCoordinates.length,
      ]);
      polygon.setProperties(properties, true);
      return polygon;
    }
    return undefined;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const MULTI_GEOMETRY_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'LineString': makeArrayPusher(readLineString),
    'LinearRing': makeArrayPusher(readLinearRing),
    'MultiGeometry': makeArrayPusher(readMultiGeometry),
    'Point': makeArrayPusher(readPoint),
    'Polygon': makeArrayPusher(readPolygon),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readMultiGeometry(node, objectStack) {
    const geometries = pushParseAndPop(
      [],
      MULTI_GEOMETRY_PARSERS,
      node,
      objectStack
    );
    if (!geometries) {
      return null;
    }
    if (geometries.length === 0) {
      return new GeometryCollection$1(geometries);
    }
    let multiGeometry;
    let homogeneous = true;
    const type = geometries[0].getType();
    let geometry;
    for (let i = 1, ii = geometries.length; i < ii; ++i) {
      geometry = geometries[i];
      if (geometry.getType() != type) {
        homogeneous = false;
        break;
      }
    }
    if (homogeneous) {
      let layout;
      let flatCoordinates;
      if (type == 'Point') {
        const point = geometries[0];
        layout = point.getLayout();
        flatCoordinates = point.getFlatCoordinates();
        for (let i = 1, ii = geometries.length; i < ii; ++i) {
          geometry = geometries[i];
          extend$1(flatCoordinates, geometry.getFlatCoordinates());
        }
        multiGeometry = new MultiPoint$1(flatCoordinates, layout);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == 'LineString') {
        multiGeometry = new MultiLineString$1(geometries);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == 'Polygon') {
        multiGeometry = new MultiPolygon$1(geometries);
        setCommonGeometryProperties(multiGeometry, geometries);
      } else if (type == 'GeometryCollection') {
        multiGeometry = new GeometryCollection$1(geometries);
      } else {
        assert(false, 37); // Unknown geometry type found
      }
    } else {
      multiGeometry = new GeometryCollection$1(geometries);
    }
    return /** @type {import("../geom/Geometry.js").default} */ (multiGeometry);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Point|undefined} Point.
   */
  function readPoint(node, objectStack) {
    const properties = pushParseAndPop(
      {},
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack
    );
    const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
    if (flatCoordinates) {
      const point = new Point$1(flatCoordinates, 'XYZ');
      point.setProperties(properties, true);
      return point;
    }
    return undefined;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const FLAT_LINEAR_RINGS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'innerBoundaryIs': innerBoundaryIsParser,
    'outerBoundaryIs': outerBoundaryIsParser,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Polygon|undefined} Polygon.
   */
  function readPolygon(node, objectStack) {
    const properties = pushParseAndPop(
      /** @type {Object<string,*>} */ ({}),
      EXTRUDE_AND_ALTITUDE_MODE_PARSERS,
      node,
      objectStack
    );
    const flatLinearRings = pushParseAndPop(
      [null],
      FLAT_LINEAR_RINGS_PARSERS,
      node,
      objectStack
    );
    if (flatLinearRings && flatLinearRings[0]) {
      const flatCoordinates = flatLinearRings[0];
      const ends = [flatCoordinates.length];
      for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {
        extend$1(flatCoordinates, flatLinearRings[i]);
        ends.push(flatCoordinates.length);
      }
      const polygon = new Polygon$1(flatCoordinates, 'XYZ', ends);
      polygon.setProperties(properties, true);
      return polygon;
    }
    return undefined;
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'IconStyle': iconStyleParser,
    'LabelStyle': labelStyleParser,
    'LineStyle': lineStyleParser,
    'PolyStyle': polyStyleParser,
  });

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<Style>} Style.
   */
  function readStyle(node, objectStack) {
    const styleObject = pushParseAndPop(
      {},
      STYLE_PARSERS,
      node,
      objectStack,
      this
    );
    if (!styleObject) {
      return null;
    }
    let fillStyle =
      /** @type {Fill} */
      (
        'fillStyle' in styleObject ? styleObject['fillStyle'] : DEFAULT_FILL_STYLE
      );
    const fill = /** @type {boolean|undefined} */ (styleObject['fill']);
    if (fill !== undefined && !fill) {
      fillStyle = null;
    }
    let imageStyle;
    if ('imageStyle' in styleObject) {
      if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {
        imageStyle = /** @type {import("../style/Image.js").default} */ (
          styleObject['imageStyle']
        );
      }
    } else {
      imageStyle = DEFAULT_IMAGE_STYLE;
    }
    const textStyle =
      /** @type {Text} */
      (
        'textStyle' in styleObject ? styleObject['textStyle'] : DEFAULT_TEXT_STYLE
      );
    const strokeStyle =
      /** @type {Stroke} */
      (
        'strokeStyle' in styleObject
          ? styleObject['strokeStyle']
          : DEFAULT_STROKE_STYLE
      );
    const outline = /** @type {boolean|undefined} */ (styleObject['outline']);
    if (outline !== undefined && !outline) {
      // if the polystyle specifies no outline two styles are needed,
      // one for non-polygon geometries where linestrings require a stroke
      // and one for polygons where there should be no stroke
      return [
        new Style$1({
          geometry: function (feature) {
            const geometry = feature.getGeometry();
            const type = geometry.getType();
            if (type === 'GeometryCollection') {
              const collection =
                /** @type {import("../geom/GeometryCollection").default} */ (
                  geometry
                );
              return new GeometryCollection$1(
                collection
                  .getGeometriesArrayRecursive()
                  .filter(function (geometry) {
                    const type = geometry.getType();
                    return type !== 'Polygon' && type !== 'MultiPolygon';
                  })
              );
            } else if (type !== 'Polygon' && type !== 'MultiPolygon') {
              return geometry;
            }
          },
          fill: fillStyle,
          image: imageStyle,
          stroke: strokeStyle,
          text: textStyle,
          zIndex: undefined, // FIXME
        }),
        new Style$1({
          geometry: function (feature) {
            const geometry = feature.getGeometry();
            const type = geometry.getType();
            if (type === 'GeometryCollection') {
              const collection =
                /** @type {import("../geom/GeometryCollection").default} */ (
                  geometry
                );
              return new GeometryCollection$1(
                collection
                  .getGeometriesArrayRecursive()
                  .filter(function (geometry) {
                    const type = geometry.getType();
                    return type === 'Polygon' || type === 'MultiPolygon';
                  })
              );
            } else if (type === 'Polygon' || type === 'MultiPolygon') {
              return geometry;
            }
          },
          fill: fillStyle,
          stroke: null,
          zIndex: undefined, // FIXME
        }),
      ];
    }
    return [
      new Style$1({
        fill: fillStyle,
        image: imageStyle,
        stroke: strokeStyle,
        text: textStyle,
        zIndex: undefined, // FIXME
      }),
    ];
  }

  /**
   * Reads an array of geometries and creates arrays for common geometry
   * properties. Then sets them to the multi geometry.
   * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.
   * @param {Array<import("../geom/Geometry.js").default>} geometries List of geometries.
   */
  function setCommonGeometryProperties(multiGeometry, geometries) {
    const ii = geometries.length;
    const extrudes = new Array(geometries.length);
    const tessellates = new Array(geometries.length);
    const altitudeModes = new Array(geometries.length);
    let hasExtrude, hasTessellate, hasAltitudeMode;
    hasExtrude = false;
    hasTessellate = false;
    hasAltitudeMode = false;
    for (let i = 0; i < ii; ++i) {
      const geometry = geometries[i];
      extrudes[i] = geometry.get('extrude');
      tessellates[i] = geometry.get('tessellate');
      altitudeModes[i] = geometry.get('altitudeMode');
      hasExtrude = hasExtrude || extrudes[i] !== undefined;
      hasTessellate = hasTessellate || tessellates[i] !== undefined;
      hasAltitudeMode = hasAltitudeMode || altitudeModes[i];
    }
    if (hasExtrude) {
      multiGeometry.set('extrude', extrudes);
    }
    if (hasTessellate) {
      multiGeometry.set('tessellate', tessellates);
    }
    if (hasAltitudeMode) {
      multiGeometry.set('altitudeMode', altitudeModes);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'displayName': makeObjectPropertySetter(readString),
    'value': makeObjectPropertySetter(readString),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function dataParser(node, objectStack) {
    const name = node.getAttribute('name');
    parseNode(DATA_PARSERS, node, objectStack);
    const featureObject = /** @type {Object} */ (
      objectStack[objectStack.length - 1]
    );
    if (name && featureObject.displayName) {
      featureObject[name] = {
        value: featureObject.value,
        displayName: featureObject.displayName,
        toString: function () {
          return featureObject.value;
        },
      };
    } else if (name !== null) {
      featureObject[name] = featureObject.value;
    } else if (featureObject.displayName !== null) {
      featureObject[featureObject.displayName] = featureObject.value;
    }
    delete featureObject['value'];
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const EXTENDED_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'Data': dataParser,
    'SchemaData': schemaDataParser,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function extendedDataParser(node, objectStack) {
    parseNode(EXTENDED_DATA_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function regionParser(node, objectStack) {
    parseNode(REGION_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const PAIR_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'Style': makeObjectPropertySetter(readStyle),
    'key': makeObjectPropertySetter(readString),
    'styleUrl': makeObjectPropertySetter(readStyleURL),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function pairDataParser(node, objectStack) {
    const pairObject = pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);
    if (!pairObject) {
      return;
    }
    const key = /** @type {string|undefined} */ (pairObject['key']);
    if (key && key == 'normal') {
      const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);
      if (styleUrl) {
        objectStack[objectStack.length - 1] = styleUrl;
      }
      const style = /** @type {Style} */ (pairObject['Style']);
      if (style) {
        objectStack[objectStack.length - 1] = style;
      }
    }
  }

  /**
   * @this {KML}
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function placemarkStyleMapParser(node, objectStack) {
    const styleMapValue = readStyleMapValue.call(this, node, objectStack);
    if (!styleMapValue) {
      return;
    }
    const placemarkObject = objectStack[objectStack.length - 1];
    if (Array.isArray(styleMapValue)) {
      placemarkObject['Style'] = styleMapValue;
    } else if (typeof styleMapValue === 'string') {
      placemarkObject['styleUrl'] = styleMapValue;
    } else {
      assert(false, 38); // `styleMapValue` has an unknown type
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const SCHEMA_DATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'SimpleData': simpleDataParser,
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function schemaDataParser(node, objectStack) {
    parseNode(SCHEMA_DATA_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function simpleDataParser(node, objectStack) {
    const name = node.getAttribute('name');
    if (name !== null) {
      const data = readString(node);
      const featureObject = /** @type {Object} */ (
        objectStack[objectStack.length - 1]
      );
      featureObject[name] = data;
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LAT_LON_ALT_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'altitudeMode': makeObjectPropertySetter(readString),
    'minAltitude': makeObjectPropertySetter(readDecimal),
    'maxAltitude': makeObjectPropertySetter(readDecimal),
    'north': makeObjectPropertySetter(readDecimal),
    'south': makeObjectPropertySetter(readDecimal),
    'east': makeObjectPropertySetter(readDecimal),
    'west': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function latLonAltBoxParser(node, objectStack) {
    const object = pushParseAndPop(
      {},
      LAT_LON_ALT_BOX_PARSERS,
      node,
      objectStack
    );
    if (!object) {
      return;
    }
    const regionObject = /** @type {Object} */ (
      objectStack[objectStack.length - 1]
    );
    const extent = [
      parseFloat(object['west']),
      parseFloat(object['south']),
      parseFloat(object['east']),
      parseFloat(object['north']),
    ];
    regionObject['extent'] = extent;
    regionObject['altitudeMode'] = object['altitudeMode'];
    regionObject['minAltitude'] = parseFloat(object['minAltitude']);
    regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const LOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'minLodPixels': makeObjectPropertySetter(readDecimal),
    'maxLodPixels': makeObjectPropertySetter(readDecimal),
    'minFadeExtent': makeObjectPropertySetter(readDecimal),
    'maxFadeExtent': makeObjectPropertySetter(readDecimal),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function lodParser(node, objectStack) {
    const object = pushParseAndPop({}, LOD_PARSERS, node, objectStack);
    if (!object) {
      return;
    }
    const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);
    lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);
    lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);
    lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const INNER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    // KML spec only allows one LinearRing  per innerBoundaryIs, but Google Earth
    // allows multiple, so we parse multiple here too.
    'LinearRing': makeArrayPusher(readFlatLinearRing),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function innerBoundaryIsParser(node, objectStack) {
    const innerBoundaryFlatLinearRings = pushParseAndPop(
      /** @type {Array<Array<number>>} */ ([]),
      INNER_BOUNDARY_IS_PARSERS,
      node,
      objectStack
    );
    if (innerBoundaryFlatLinearRings.length > 0) {
      const flatLinearRings =
        /** @type {Array<Array<number>>} */
        (objectStack[objectStack.length - 1]);
      flatLinearRings.push(...innerBoundaryFlatLinearRings);
    }
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  const OUTER_BOUNDARY_IS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
    'LinearRing': makeReplacer(readFlatLinearRing),
  });

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function outerBoundaryIsParser(node, objectStack) {
    /** @type {Array<number>|undefined} */
    const flatLinearRing = pushParseAndPop(
      undefined,
      OUTER_BOUNDARY_IS_PARSERS,
      node,
      objectStack
    );
    if (flatLinearRing) {
      const flatLinearRings =
        /** @type {Array<Array<number>>} */
        (objectStack[objectStack.length - 1]);
      flatLinearRings[0] = flatLinearRing;
    }
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function linkParser(node, objectStack) {
    parseNode(LINK_PARSERS, node, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function whenParser(node, objectStack) {
    const gxTrackObject =
      /** @type {GxTrackObject} */
      (objectStack[objectStack.length - 1]);
    const whens = gxTrackObject.whens;
    const s = getAllTextContent(node, false);
    const when = Date.parse(s);
    whens.push(isNaN(when) ? 0 : when);
  }

  /**
   * @param {Node} node Node to append a TextNode with the color to.
   * @param {import("../color.js").Color|string} color Color.
   */
  function writeColorTextNode(node, color) {
    const rgba = asArray(color);
    const opacity = rgba.length == 4 ? rgba[3] : 1;
    /** @type {Array<string|number>} */
    const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];
    for (let i = 0; i < 4; ++i) {
      const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);
      abgr[i] = hex.length == 1 ? '0' + hex : hex;
    }
    writeStringTextNode(node, abgr.join(''));
  }

  /**
   * @param {Node} node Node to append a TextNode with the coordinates to.
   * @param {Array<number>} coordinates Coordinates.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeCoordinatesTextNode(node, coordinates, objectStack) {
    const context = objectStack[objectStack.length - 1];

    const layout = context['layout'];
    const stride = context['stride'];

    let dimension;
    if (layout == 'XY' || layout == 'XYM') {
      dimension = 2;
    } else if (layout == 'XYZ' || layout == 'XYZM') {
      dimension = 3;
    } else {
      assert(false, 34); // Invalid geometry layout
    }

    const ii = coordinates.length;
    let text = '';
    if (ii > 0) {
      text += coordinates[0];
      for (let d = 1; d < dimension; ++d) {
        text += ',' + coordinates[d];
      }
      for (let i = stride; i < ii; i += stride) {
        text += ' ' + coordinates[i];
        for (let d = 1; d < dimension; ++d) {
          text += ',' + coordinates[i + d];
        }
      }
    }
    writeStringTextNode(node, text);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const EXTENDEDDATA_NODE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'Data': makeChildAppender(writeDataNode),
    'value': makeChildAppender(writeDataNodeValue),
    'displayName': makeChildAppender(writeDataNodeName),
  });

  /**
   * @param {Element} node Node.
   * @param {{name: *, value: *}} pair Name value pair.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeDataNode(node, pair, objectStack) {
    node.setAttribute('name', pair.name);
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const value = pair.value;

    if (typeof value == 'object') {
      if (value !== null && value.displayName) {
        pushSerializeAndPop(
          context,
          EXTENDEDDATA_NODE_SERIALIZERS,
          OBJECT_PROPERTY_NODE_FACTORY,
          [value.displayName],
          objectStack,
          ['displayName']
        );
      }

      if (value !== null && value.value) {
        pushSerializeAndPop(
          context,
          EXTENDEDDATA_NODE_SERIALIZERS,
          OBJECT_PROPERTY_NODE_FACTORY,
          [value.value],
          objectStack,
          ['value']
        );
      }
    } else {
      pushSerializeAndPop(
        context,
        EXTENDEDDATA_NODE_SERIALIZERS,
        OBJECT_PROPERTY_NODE_FACTORY,
        [value],
        objectStack,
        ['value']
      );
    }
  }

  /**
   * @param {Node} node Node to append a TextNode with the name to.
   * @param {string} name DisplayName.
   */
  function writeDataNodeName(node, name) {
    writeCDATASection(node, name);
  }

  /**
   * @param {Node} node Node to append a CDATA Section with the value to.
   * @param {string} value Value.
   */
  function writeDataNodeValue(node, value) {
    writeStringTextNode(node, value);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const DOCUMENT_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'Placemark': makeChildAppender(writePlacemark),
  });

  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  const DOCUMENT_NODE_FACTORY = function (value, objectStack, nodeName) {
    const parentNode = objectStack[objectStack.length - 1].node;
    return createElementNS(parentNode.namespaceURI, 'Placemark');
  };

  /**
   * @param {Element} node Node.
   * @param {Array<Feature>} features Features.
   * @param {Array<*>} objectStack Object stack.
   * @this {KML}
   */
  function writeDocument(node, features, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(
      context,
      DOCUMENT_SERIALIZERS,
      DOCUMENT_NODE_FACTORY,
      features,
      objectStack,
      undefined,
      this
    );
  }

  /**
   * A factory for creating Data nodes.
   * @const
   * @type {function(*, Array<*>): (Node|undefined)}
   */
  const DATA_NODE_FACTORY = makeSimpleNodeFactory('Data');

  /**
   * @param {Element} node Node.
   * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeExtendedData(node, namesAndValues, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const names = namesAndValues.names;
    const values = namesAndValues.values;
    const length = names.length;

    for (let i = 0; i < length; i++) {
      pushSerializeAndPop(
        context,
        EXTENDEDDATA_NODE_SERIALIZERS,
        DATA_NODE_FACTORY,
        [{name: names[i], value: values[i]}],
        objectStack
      );
    }
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const ICON_SEQUENCE = makeStructureNS(
    NAMESPACE_URIS,
    ['href'],
    makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h'])
  );

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const ICON_SERIALIZERS = makeStructureNS(
    NAMESPACE_URIS,
    {
      'href': makeChildAppender(writeStringTextNode),
    },
    makeStructureNS(GX_NAMESPACE_URIS, {
      'x': makeChildAppender(writeDecimalTextNode),
      'y': makeChildAppender(writeDecimalTextNode),
      'w': makeChildAppender(writeDecimalTextNode),
      'h': makeChildAppender(writeDecimalTextNode),
    })
  );

  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  const GX_NODE_FACTORY = function (value, objectStack, nodeName) {
    return createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + nodeName);
  };

  /**
   * @param {Element} node Node.
   * @param {Object} icon Icon object.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeIcon(node, icon, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const parentNode = objectStack[objectStack.length - 1].node;
    let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];
    let values = makeSequence(icon, orderedKeys);
    pushSerializeAndPop(
      context,
      ICON_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
    orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];
    values = makeSequence(icon, orderedKeys);
    pushSerializeAndPop(
      context,
      ICON_SERIALIZERS,
      GX_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const ICON_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [
    'scale',
    'heading',
    'Icon',
    'color',
    'hotSpot',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const ICON_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'Icon': makeChildAppender(writeIcon),
    'color': makeChildAppender(writeColorTextNode),
    'heading': makeChildAppender(writeDecimalTextNode),
    'hotSpot': makeChildAppender(writeVec2),
    'scale': makeChildAppender(writeScaleTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../style/Icon.js").default} style Icon style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeIconStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const /** @type {Object<string, any>} */ properties = {};
    const src = style.getSrc();
    const size = style.getSize();
    const iconImageSize = style.getImageSize();
    const iconProperties = {
      'href': src,
    };

    if (size) {
      iconProperties['w'] = size[0];
      iconProperties['h'] = size[1];
      const anchor = style.getAnchor(); // top-left
      const origin = style.getOrigin(); // top-left

      if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {
        iconProperties['x'] = origin[0];
        iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);
      }

      if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {
        const /** @type {Vec2} */ hotSpot = {
            x: anchor[0],
            xunits: 'pixels',
            y: size[1] - anchor[1],
            yunits: 'pixels',
          };
        properties['hotSpot'] = hotSpot;
      }
    }

    properties['Icon'] = iconProperties;

    let scale = style.getScaleArray()[0];
    let imageSize = size;
    if (imageSize === null) {
      imageSize = DEFAULT_IMAGE_STYLE_SIZE;
    }
    if (imageSize.length == 2) {
      const resizeScale = scaleForSize(imageSize);
      scale = scale / resizeScale;
    }
    if (scale !== 1) {
      properties['scale'] = scale;
    }

    const rotation = style.getRotation();
    if (rotation !== 0) {
      properties['heading'] = rotation; // 0-360
    }

    const color = style.getColor();
    if (color) {
      properties['color'] = color;
    }

    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      ICON_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const LABEL_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [
    'color',
    'scale',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const LABEL_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'color': makeChildAppender(writeColorTextNode),
    'scale': makeChildAppender(writeScaleTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {Text} style style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeLabelStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    const fill = style.getFill();
    if (fill) {
      properties['color'] = fill.getColor();
    }
    const scale = style.getScale();
    if (scale && scale !== 1) {
      properties['scale'] = scale;
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      LABEL_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const LINE_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, ['color', 'width']);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const LINE_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'color': makeChildAppender(writeColorTextNode),
    'width': makeChildAppender(writeDecimalTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {Stroke} style style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeLineStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {
      'color': style.getColor(),
      'width': Number(style.getWidth()) || 1,
    };
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      LINE_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @const
   * @type {Object<string, string>}
   */
  const GEOMETRY_TYPE_TO_NODENAME = {
    'Point': 'Point',
    'LineString': 'LineString',
    'LinearRing': 'LinearRing',
    'Polygon': 'Polygon',
    'MultiPoint': 'MultiGeometry',
    'MultiLineString': 'MultiGeometry',
    'MultiPolygon': 'MultiGeometry',
    'GeometryCollection': 'MultiGeometry',
  };

  /**
   * @const
   * @param {*} value Value.
   * @param {Array<*>} objectStack Object stack.
   * @param {string} [nodeName] Node name.
   * @return {Node|undefined} Node.
   */
  const GEOMETRY_NODE_FACTORY = function (value, objectStack, nodeName) {
    if (value) {
      const parentNode = objectStack[objectStack.length - 1].node;
      return createElementNS(
        parentNode.namespaceURI,
        GEOMETRY_TYPE_TO_NODENAME[
          /** @type {import("../geom/Geometry.js").default} */ (value).getType()
        ]
      );
    }
  };

  /**
   * A factory for creating Point nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const POINT_NODE_FACTORY = makeSimpleNodeFactory('Point');

  /**
   * A factory for creating LineString nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const LINE_STRING_NODE_FACTORY = makeSimpleNodeFactory('LineString');

  /**
   * A factory for creating LinearRing nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const LINEAR_RING_NODE_FACTORY = makeSimpleNodeFactory('LinearRing');

  /**
   * A factory for creating Polygon nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const POLYGON_NODE_FACTORY = makeSimpleNodeFactory('Polygon');

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const MULTI_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'LineString': makeChildAppender(writePrimitiveGeometry),
    'Point': makeChildAppender(writePrimitiveGeometry),
    'Polygon': makeChildAppender(writePolygon),
    'GeometryCollection': makeChildAppender(writeMultiGeometry),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeMultiGeometry(node, geometry, objectStack) {
    /** @type {import("../xml.js").NodeStackItem} */
    const context = {node: node};
    const type = geometry.getType();
    /** @type {Array<import("../geom/Geometry.js").default>} */
    let geometries = [];
    /** @type {function(*, Array<*>, string=): (Node|undefined)} */
    let factory;
    if (type === 'GeometryCollection') {
      /** @type {GeometryCollection} */ (geometry)
        .getGeometriesArrayRecursive()
        .forEach(function (geometry) {
          const type = geometry.getType();
          if (type === 'MultiPoint') {
            geometries = geometries.concat(
              /** @type {MultiPoint} */ (geometry).getPoints()
            );
          } else if (type === 'MultiLineString') {
            geometries = geometries.concat(
              /** @type {MultiLineString} */ (geometry).getLineStrings()
            );
          } else if (type === 'MultiPolygon') {
            geometries = geometries.concat(
              /** @type {MultiPolygon} */ (geometry).getPolygons()
            );
          } else if (
            type === 'Point' ||
            type === 'LineString' ||
            type === 'Polygon'
          ) {
            geometries.push(geometry);
          } else {
            assert(false, 39); // Unknown geometry type
          }
        });
      factory = GEOMETRY_NODE_FACTORY;
    } else if (type === 'MultiPoint') {
      geometries = /** @type {MultiPoint} */ (geometry).getPoints();
      factory = POINT_NODE_FACTORY;
    } else if (type === 'MultiLineString') {
      geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();
      factory = LINE_STRING_NODE_FACTORY;
    } else if (type === 'MultiPolygon') {
      geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();
      factory = POLYGON_NODE_FACTORY;
    } else {
      assert(false, 39); // Unknown geometry type
    }
    pushSerializeAndPop(
      context,
      MULTI_GEOMETRY_SERIALIZERS,
      factory,
      geometries,
      objectStack
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const BOUNDARY_IS_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'LinearRing': makeChildAppender(writePrimitiveGeometry),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../geom/LinearRing.js").default} linearRing Linear ring.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeBoundaryIs(node, linearRing, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    pushSerializeAndPop(
      context,
      BOUNDARY_IS_SERIALIZERS,
      LINEAR_RING_NODE_FACTORY,
      [linearRing],
      objectStack
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const PLACEMARK_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'ExtendedData': makeChildAppender(writeExtendedData),
    'MultiGeometry': makeChildAppender(writeMultiGeometry),
    'LineString': makeChildAppender(writePrimitiveGeometry),
    'LinearRing': makeChildAppender(writePrimitiveGeometry),
    'Point': makeChildAppender(writePrimitiveGeometry),
    'Polygon': makeChildAppender(writePolygon),
    'Style': makeChildAppender(writeStyle),
    'address': makeChildAppender(writeStringTextNode),
    'description': makeChildAppender(writeStringTextNode),
    'name': makeChildAppender(writeStringTextNode),
    'open': makeChildAppender(writeBooleanTextNode),
    'phoneNumber': makeChildAppender(writeStringTextNode),
    'styleUrl': makeChildAppender(writeStringTextNode),
    'visibility': makeChildAppender(writeBooleanTextNode),
  });

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const PLACEMARK_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [
    'name',
    'open',
    'visibility',
    'address',
    'phoneNumber',
    'description',
    'styleUrl',
    'Style',
  ]);

  /**
   * A factory for creating ExtendedData nodes.
   * @const
   * @type {function(*, Array<*>): (Node|undefined)}
   */
  const EXTENDEDDATA_NODE_FACTORY = makeSimpleNodeFactory('ExtendedData');

  /**
   * FIXME currently we do serialize arbitrary/custom feature properties
   * (ExtendedData).
   * @param {Element} node Node.
   * @param {Feature} feature Feature.
   * @param {Array<*>} objectStack Object stack.
   * @this {KML}
   */
  function writePlacemark(node, feature, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};

    // set id
    if (feature.getId()) {
      node.setAttribute('id', /** @type {string} */ (feature.getId()));
    }

    // serialize properties (properties unknown to KML are not serialized)
    const properties = feature.getProperties();

    // don't export these to ExtendedData
    const filter = {
      'address': 1,
      'description': 1,
      'name': 1,
      'open': 1,
      'phoneNumber': 1,
      'styleUrl': 1,
      'visibility': 1,
    };
    filter[feature.getGeometryName()] = 1;
    const keys = Object.keys(properties || {})
      .sort()
      .filter(function (v) {
        return !filter[v];
      });

    const styleFunction = feature.getStyleFunction();
    if (styleFunction) {
      // FIXME the styles returned by the style function are supposed to be
      // resolution-independent here
      const styles = styleFunction(feature, 0);
      if (styles) {
        const styleArray = Array.isArray(styles) ? styles : [styles];
        let pointStyles = styleArray;
        if (feature.getGeometry()) {
          pointStyles = styleArray.filter(function (style) {
            const geometry = style.getGeometryFunction()(feature);
            if (geometry) {
              const type = geometry.getType();
              if (type === 'GeometryCollection') {
                return /** @type {GeometryCollection} */ (geometry)
                  .getGeometriesArrayRecursive()
                  .filter(function (geometry) {
                    const type = geometry.getType();
                    return type === 'Point' || type === 'MultiPoint';
                  }).length;
              }
              return type === 'Point' || type === 'MultiPoint';
            }
          });
        }
        if (this.writeStyles_) {
          let lineStyles = styleArray;
          let polyStyles = styleArray;
          if (feature.getGeometry()) {
            lineStyles = styleArray.filter(function (style) {
              const geometry = style.getGeometryFunction()(feature);
              if (geometry) {
                const type = geometry.getType();
                if (type === 'GeometryCollection') {
                  return /** @type {GeometryCollection} */ (geometry)
                    .getGeometriesArrayRecursive()
                    .filter(function (geometry) {
                      const type = geometry.getType();
                      return type === 'LineString' || type === 'MultiLineString';
                    }).length;
                }
                return type === 'LineString' || type === 'MultiLineString';
              }
            });
            polyStyles = styleArray.filter(function (style) {
              const geometry = style.getGeometryFunction()(feature);
              if (geometry) {
                const type = geometry.getType();
                if (type === 'GeometryCollection') {
                  return /** @type {GeometryCollection} */ (geometry)
                    .getGeometriesArrayRecursive()
                    .filter(function (geometry) {
                      const type = geometry.getType();
                      return type === 'Polygon' || type === 'MultiPolygon';
                    }).length;
                }
                return type === 'Polygon' || type === 'MultiPolygon';
              }
            });
          }
          properties['Style'] = {
            pointStyles: pointStyles,
            lineStyles: lineStyles,
            polyStyles: polyStyles,
          };
        }
        if (pointStyles.length && properties['name'] === undefined) {
          const textStyle = pointStyles[0].getText();
          if (textStyle) {
            properties['name'] = textStyle.getText();
          }
        }
      }
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      PLACEMARK_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );

    if (keys.length > 0) {
      const sequence = makeSequence(properties, keys);
      const namesAndValues = {names: keys, values: sequence};
      pushSerializeAndPop(
        context,
        PLACEMARK_SERIALIZERS,
        EXTENDEDDATA_NODE_FACTORY,
        [namesAndValues],
        objectStack
      );
    }

    // serialize geometry
    const options = /** @type {import("./Feature.js").WriteOptions} */ (
      objectStack[0]
    );
    let geometry = feature.getGeometry();
    if (geometry) {
      geometry = transformGeometryWithOptions(geometry, true, options);
    }
    pushSerializeAndPop(
      context,
      PLACEMARK_SERIALIZERS,
      GEOMETRY_NODE_FACTORY,
      [geometry],
      objectStack
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const PRIMITIVE_GEOMETRY_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [
    'extrude',
    'tessellate',
    'altitudeMode',
    'coordinates',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const PRIMITIVE_GEOMETRY_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'extrude': makeChildAppender(writeBooleanTextNode),
    'tessellate': makeChildAppender(writeBooleanTextNode),
    'altitudeMode': makeChildAppender(writeStringTextNode),
    'coordinates': makeChildAppender(writeCoordinatesTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePrimitiveGeometry(node, geometry, objectStack) {
    const flatCoordinates = geometry.getFlatCoordinates();
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    context['layout'] = geometry.getLayout();
    context['stride'] = geometry.getStride();

    // serialize properties (properties unknown to KML are not serialized)
    const properties = geometry.getProperties();
    properties.coordinates = flatCoordinates;

    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      PRIMITIVE_GEOMETRY_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const POLY_STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [
    'color',
    'fill',
    'outline',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const POLYGON_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'outerBoundaryIs': makeChildAppender(writeBoundaryIs),
    'innerBoundaryIs': makeChildAppender(writeBoundaryIs),
  });

  /**
   * A factory for creating innerBoundaryIs nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const INNER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('innerBoundaryIs');

  /**
   * A factory for creating outerBoundaryIs nodes.
   * @const
   * @type {function(*, Array<*>, string=): (Node|undefined)}
   */
  const OUTER_BOUNDARY_NODE_FACTORY = makeSimpleNodeFactory('outerBoundaryIs');

  /**
   * @param {Element} node Node.
   * @param {Polygon} polygon Polygon.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePolygon(node, polygon, objectStack) {
    const linearRings = polygon.getLinearRings();
    const outerRing = linearRings.shift();
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    // inner rings
    pushSerializeAndPop(
      context,
      POLYGON_SERIALIZERS,
      INNER_BOUNDARY_NODE_FACTORY,
      linearRings,
      objectStack
    );
    // outer ring
    pushSerializeAndPop(
      context,
      POLYGON_SERIALIZERS,
      OUTER_BOUNDARY_NODE_FACTORY,
      [outerRing],
      objectStack
    );
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const POLY_STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'color': makeChildAppender(writeColorTextNode),
    'fill': makeChildAppender(writeBooleanTextNode),
    'outline': makeChildAppender(writeBooleanTextNode),
  });

  /**
   * @param {Element} node Node.
   * @param {Style} style Style.
   * @param {Array<*>} objectStack Object stack.
   */
  function writePolyStyle(node, style, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const fill = style.getFill();
    const stroke = style.getStroke();
    const properties = {
      'color': fill ? fill.getColor() : undefined,
      'fill': fill ? undefined : false,
      'outline': stroke ? undefined : false,
    };
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      POLY_STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @param {Node} node Node to append a TextNode with the scale to.
   * @param {number|undefined} scale Scale.
   */
  function writeScaleTextNode(node, scale) {
    // the Math is to remove any excess decimals created by float arithmetic
    writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);
  }

  /**
   * @const
   * @type {Object<string, Array<string>>}
   */
  // @ts-ignore
  const STYLE_SEQUENCE = makeStructureNS(NAMESPACE_URIS, [
    'IconStyle',
    'LabelStyle',
    'LineStyle',
    'PolyStyle',
  ]);

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  // @ts-ignore
  const STYLE_SERIALIZERS = makeStructureNS(NAMESPACE_URIS, {
    'IconStyle': makeChildAppender(writeIconStyle),
    'LabelStyle': makeChildAppender(writeLabelStyle),
    'LineStyle': makeChildAppender(writeLineStyle),
    'PolyStyle': makeChildAppender(writePolyStyle),
  });

  /**
   * @param {Element} node Node.
   * @param {Object<string, Array<Style>>} styles Styles.
   * @param {Array<*>} objectStack Object stack.
   */
  function writeStyle(node, styles, objectStack) {
    const /** @type {import("../xml.js").NodeStackItem} */ context = {node: node};
    const properties = {};
    if (styles.pointStyles.length) {
      const textStyle = styles.pointStyles[0].getText();
      if (textStyle) {
        properties['LabelStyle'] = textStyle;
      }
      const imageStyle = styles.pointStyles[0].getImage();
      if (
        imageStyle &&
        typeof (/** @type {?} */ (imageStyle).getSrc) === 'function'
      ) {
        properties['IconStyle'] = imageStyle;
      }
    }
    if (styles.lineStyles.length) {
      const strokeStyle = styles.lineStyles[0].getStroke();
      if (strokeStyle) {
        properties['LineStyle'] = strokeStyle;
      }
    }
    if (styles.polyStyles.length) {
      const strokeStyle = styles.polyStyles[0].getStroke();
      if (strokeStyle && !properties['LineStyle']) {
        properties['LineStyle'] = strokeStyle;
      }
      properties['PolyStyle'] = styles.polyStyles[0];
    }
    const parentNode = objectStack[objectStack.length - 1].node;
    const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];
    const values = makeSequence(properties, orderedKeys);
    pushSerializeAndPop(
      context,
      STYLE_SERIALIZERS,
      OBJECT_PROPERTY_NODE_FACTORY,
      values,
      objectStack,
      orderedKeys
    );
  }

  /**
   * @param {Element} node Node to append a TextNode with the Vec2 to.
   * @param {Vec2} vec2 Vec2.
   */
  function writeVec2(node, vec2) {
    node.setAttribute('x', String(vec2.x));
    node.setAttribute('y', String(vec2.y));
    node.setAttribute('xunits', vec2.xunits);
    node.setAttribute('yunits', vec2.yunits);
  }

  var format_KML = KML;

  var ieee754$1 = {};

  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

  ieee754$1.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  ieee754$1.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  var pbf = Pbf;

  var ieee754 = ieee754$1;

  function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
  }

  Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
  Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
      SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  // Threshold chosen based on both benchmarking and knowledge about browser string
  // data structures (which currently switch structure types at 12 bytes or more)
  var TEXT_DECODER_MIN_LENGTH = 12;
  var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');

  Pbf.prototype = {

      destroy: function() {
          this.buf = null;
      },

      // === READING =================================================================

      readFields: function(readField, result, end) {
          end = end || this.length;

          while (this.pos < end) {
              var val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      },

      readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      },

      readFixed32: function() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      readSFixed32: function() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readSFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readFloat: function() {
          var val = ieee754.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
      },

      readDouble: function() {
          var val = ieee754.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
      },

      readVarint: function(isSigned) {
          var buf = this.buf,
              val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      },

      readVarint64: function() { // for compatibility with v2.0.1
          return this.readVarint(true);
      },

      readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      },

      readBoolean: function() {
          return Boolean(this.readVarint());
      },

      readString: function() {
          var end = this.readVarint() + this.pos;
          var pos = this.pos;
          this.pos = end;

          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
              // longer strings are fast with the built-in browser TextDecoder API
              return readUtf8TextDecoder(this.buf, pos, end);
          }
          // short strings are fast with our custom implementation
          return readUtf8(this.buf, pos, end);
      },

      readBytes: function() {
          var end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      },

      // verbose for performance reasons; doesn't affect gzipped size

      readPackedVarint: function(arr, isSigned) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      },
      readPackedSVarint: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      },
      readPackedBoolean: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      },
      readPackedFloat: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      },
      readPackedDouble: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      },
      readPackedFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      },
      readPackedSFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      },
      readPackedFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      },
      readPackedSFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      },

      skip: function(val) {
          var type = val & 0x7;
          if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32) this.pos += 4;
          else if (type === Pbf.Fixed64) this.pos += 8;
          else throw new Error('Unimplemented type: ' + type);
      },

      // === WRITING =================================================================

      writeTag: function(tag, type) {
          this.writeVarint((tag << 3) | type);
      },

      realloc: function(min) {
          var length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              var buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.length = length;
          }
      },

      finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      },

      writeFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeSFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeSFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeVarint: function(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      },

      writeSVarint: function(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },

      writeBoolean: function(val) {
          this.writeVarint(Boolean(val));
      },

      writeString: function(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          var startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeFloat: function(val) {
          this.realloc(4);
          ieee754.write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
      },

      writeDouble: function(val) {
          this.realloc(8);
          ieee754.write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
      },

      writeBytes: function(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      },

      writeRawMessage: function(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
      },

      writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
      writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
      writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
      writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
      writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
      writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
      writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
      writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
      writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

      writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
      },
      writeFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
      },
      writeFloatField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
          this.writeVarintField(tag, Boolean(val));
      }
  };

  function readVarintRemainder(l, s, p) {
      var buf = p.buf,
          h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ?
          pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }

  function toNum(low, high, isSigned) {
      if (isSigned) {
          return high * 0x100000000 + (low >>> 0);
      }

      return ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  function writeBigVarint(val, pbf) {
      var low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
  function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
  function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
  function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
  function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
  function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
  function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
  function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
  function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  function readUInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] * 0x1000000);
  }

  function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = (val >>> 8);
      buf[pos + 2] = (val >>> 16);
      buf[pos + 3] = (val >>> 24);
  }

  function readInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] << 24);
  }

  function readUtf8(buf, pos, end) {
      var str = '';
      var i = pos;

      while (i < end) {
          var b0 = buf[i];
          var c = null; // codepoint
          var bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          var b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  function readUtf8TextDecoder(buf, pos, end) {
      return utf8TextDecoder.decode(buf.subarray(pos, end));
  }

  function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  /**
   * @module ol/render/Feature
   */

  /**
   * @type {import("../transform.js").Transform}
   */
  const tmpTransform = create$3();

  /**
   * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
   * structure, optimized for vector tile rendering and styling. Geometry access
   * through the API is limited to getting the type and extent of the geometry.
   */
  class RenderFeature {
    /**
     * @param {import("../geom/Geometry.js").Type} type Geometry type.
     * @param {Array<number>} flatCoordinates Flat coordinates. These always need
     *     to be right-handed for polygons.
     * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.
     * @param {Object<string, *>} properties Properties.
     * @param {number|string|undefined} id Feature id.
     */
    constructor(type, flatCoordinates, ends, properties, id) {
      /**
       * @type {import("../style/Style.js").StyleFunction|undefined}
       */
      this.styleFunction;

      /**
       * @private
       * @type {import("../extent.js").Extent|undefined}
       */
      this.extent_;

      /**
       * @private
       * @type {number|string|undefined}
       */
      this.id_ = id;

      /**
       * @private
       * @type {import("../geom/Geometry.js").Type}
       */
      this.type_ = type;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatCoordinates_ = flatCoordinates;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatInteriorPoints_ = null;

      /**
       * @private
       * @type {Array<number>}
       */
      this.flatMidpoints_ = null;

      /**
       * @private
       * @type {Array<number>|Array<Array<number>>}
       */
      this.ends_ = ends;

      /**
       * @private
       * @type {Object<string, *>}
       */
      this.properties_ = properties;
    }

    /**
     * Get a feature property by its key.
     * @param {string} key Key
     * @return {*} Value for the requested key.
     * @api
     */
    get(key) {
      return this.properties_[key];
    }

    /**
     * Get the extent of this feature's geometry.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      if (!this.extent_) {
        this.extent_ =
          this.type_ === 'Point'
            ? createOrUpdateFromCoordinate(this.flatCoordinates_)
            : createOrUpdateFromFlatCoordinates(
                this.flatCoordinates_,
                0,
                this.flatCoordinates_.length,
                2
              );
      }
      return this.extent_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoint() {
      if (!this.flatInteriorPoints_) {
        const flatCenter = getCenter(this.getExtent());
        this.flatInteriorPoints_ = getInteriorPointOfArray(
          this.flatCoordinates_,
          0,
          /** @type {Array<number>} */ (this.ends_),
          2,
          flatCenter,
          0
        );
      }
      return this.flatInteriorPoints_;
    }

    /**
     * @return {Array<number>} Flat interior points.
     */
    getFlatInteriorPoints() {
      if (!this.flatInteriorPoints_) {
        const flatCenters = linearRingss(
          this.flatCoordinates_,
          0,
          /** @type {Array<Array<number>>} */ (this.ends_),
          2
        );
        this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(
          this.flatCoordinates_,
          0,
          /** @type {Array<Array<number>>} */ (this.ends_),
          2,
          flatCenters
        );
      }
      return this.flatInteriorPoints_;
    }

    /**
     * @return {Array<number>} Flat midpoint.
     */
    getFlatMidpoint() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = interpolatePoint(
          this.flatCoordinates_,
          0,
          this.flatCoordinates_.length,
          2,
          0.5
        );
      }
      return this.flatMidpoints_;
    }

    /**
     * @return {Array<number>} Flat midpoints.
     */
    getFlatMidpoints() {
      if (!this.flatMidpoints_) {
        this.flatMidpoints_ = [];
        const flatCoordinates = this.flatCoordinates_;
        let offset = 0;
        const ends = /** @type {Array<number>} */ (this.ends_);
        for (let i = 0, ii = ends.length; i < ii; ++i) {
          const end = ends[i];
          const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);
          extend$1(this.flatMidpoints_, midpoint);
          offset = end;
        }
      }
      return this.flatMidpoints_;
    }

    /**
     * Get the feature identifier.  This is a stable identifier for the feature and
     * is set when reading data from a remote source.
     * @return {number|string|undefined} Id.
     * @api
     */
    getId() {
      return this.id_;
    }

    /**
     * @return {Array<number>} Flat coordinates.
     */
    getOrientedFlatCoordinates() {
      return this.flatCoordinates_;
    }

    /**
     * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
     * determining the geometry type in style function (see {@link #getType}).
     * @return {RenderFeature} Feature.
     * @api
     */
    getGeometry() {
      return this;
    }

    /**
     * @param {number} squaredTolerance Squared tolerance.
     * @return {RenderFeature} Simplified geometry.
     */
    getSimplifiedGeometry(squaredTolerance) {
      return this;
    }

    /**
     * Get a transformed and simplified version of the geometry.
     * @abstract
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [transform] Optional transform function.
     * @return {RenderFeature} Simplified geometry.
     */
    simplifyTransformed(squaredTolerance, transform) {
      return this;
    }

    /**
     * Get the feature properties.
     * @return {Object<string, *>} Feature properties.
     * @api
     */
    getProperties() {
      return this.properties_;
    }

    /**
     * @return {number} Stride.
     */
    getStride() {
      return 2;
    }

    /**
     * @return {import('../style/Style.js').StyleFunction|undefined} Style
     */
    getStyleFunction() {
      return this.styleFunction;
    }

    /**
     * Get the type of this feature's geometry.
     * @return {import("../geom/Geometry.js").Type} Geometry type.
     * @api
     */
    getType() {
      return this.type_;
    }

    /**
     * Transform geometry coordinates from tile pixel space to projected.
     *
     * @param {import("../proj.js").ProjectionLike} projection The data projection
     */
    transform(projection) {
      projection = get$2(projection);
      const pixelExtent = projection.getExtent();
      const projectedExtent = projection.getWorldExtent();
      if (pixelExtent && projectedExtent) {
        const scale = getHeight(projectedExtent) / getHeight(pixelExtent);
        compose(
          tmpTransform,
          projectedExtent[0],
          projectedExtent[3],
          scale,
          -scale,
          0,
          0,
          0
        );
        transform2D(
          this.flatCoordinates_,
          0,
          this.flatCoordinates_.length,
          2,
          tmpTransform,
          this.flatCoordinates_
        );
      }
    }
    /**
     * @return {Array<number>|Array<Array<number>>} Ends or endss.
     */
    getEnds() {
      return this.ends_;
    }
  }

  RenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;

  /**
   * @return {Array<number>} Flat coordinates.
   */
  RenderFeature.prototype.getFlatCoordinates =
    RenderFeature.prototype.getOrientedFlatCoordinates;

  var RenderFeature$1 = RenderFeature;

  /**
   * @module ol/format/MVT
   */

  /**
   * @typedef {Object} Options
   * @property {import("../Feature.js").FeatureClass} [featureClass] Class for features returned by
   * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry
   * support at the cost of decreased rendering performance. The default is
   * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.
   * @property {string} [geometryName='geometry'] Geometry name to use when creating features.
   * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.
   * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all
   * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.
   * layers.
   */

  /**
   * @classdesc
   * Feature format for reading data in the Mapbox MVT format.
   *
   * @param {Options} [options] Options.
   * @api
   */
  class MVT extends FeatureFormat {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @type {Projection}
       */
      this.dataProjection = new Projection$1({
        code: '',
        units: 'tile-pixels',
      });

      /**
       * @private
       * @type {import("../Feature.js").FeatureClass}
       */
      this.featureClass_ = options.featureClass
        ? options.featureClass
        : RenderFeature$1;

      /**
       * @private
       * @type {string|undefined}
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {string}
       */
      this.layerName_ = options.layerName ? options.layerName : 'layer';

      /**
       * @private
       * @type {Array<string>|null}
       */
      this.layers_ = options.layers ? options.layers : null;

      /**
       * @private
       * @type {string}
       */
      this.idProperty_ = options.idProperty;

      this.supportedMediaTypes = [
        'application/vnd.mapbox-vector-tile',
        'application/x-protobuf',
      ];
    }

    /**
     * Read the raw geometry from the pbf offset stored in a raw feature's geometry
     * property.
     * @param {PBF} pbf PBF.
     * @param {Object} feature Raw feature.
     * @param {Array<number>} flatCoordinates Array to store flat coordinates in.
     * @param {Array<number>} ends Array to store ends in.
     * @private
     */
    readRawGeometry_(pbf, feature, flatCoordinates, ends) {
      pbf.pos = feature.geometry;

      const end = pbf.readVarint() + pbf.pos;
      let cmd = 1;
      let length = 0;
      let x = 0;
      let y = 0;
      let coordsLen = 0;
      let currentEnd = 0;

      while (pbf.pos < end) {
        if (!length) {
          const cmdLen = pbf.readVarint();
          cmd = cmdLen & 0x7;
          length = cmdLen >> 3;
        }

        length--;

        if (cmd === 1 || cmd === 2) {
          x += pbf.readSVarint();
          y += pbf.readSVarint();

          if (cmd === 1) {
            // moveTo
            if (coordsLen > currentEnd) {
              ends.push(coordsLen);
              currentEnd = coordsLen;
            }
          }

          flatCoordinates.push(x, y);
          coordsLen += 2;
        } else if (cmd === 7) {
          if (coordsLen > currentEnd) {
            // close polygon
            flatCoordinates.push(
              flatCoordinates[currentEnd],
              flatCoordinates[currentEnd + 1]
            );
            coordsLen += 2;
          }
        } else {
          assert(false, 59); // Invalid command found in the PBF
        }
      }

      if (coordsLen > currentEnd) {
        ends.push(coordsLen);
        currentEnd = coordsLen;
      }
    }

    /**
     * @private
     * @param {PBF} pbf PBF
     * @param {Object} rawFeature Raw Mapbox feature.
     * @param {import("./Feature.js").ReadOptions} options Read options.
     * @return {import("../Feature.js").FeatureLike|null} Feature.
     */
    createFeature_(pbf, rawFeature, options) {
      const type = rawFeature.type;
      if (type === 0) {
        return null;
      }

      let feature;
      const values = rawFeature.properties;

      let id;
      if (!this.idProperty_) {
        id = rawFeature.id;
      } else {
        id = values[this.idProperty_];
        delete values[this.idProperty_];
      }

      values[this.layerName_] = rawFeature.layer.name;

      const flatCoordinates = /** @type {Array<number>} */ ([]);
      const ends = /** @type {Array<number>} */ ([]);
      this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);

      const geometryType = getGeometryType(type, ends.length);

      if (this.featureClass_ === RenderFeature$1) {
        feature = new this.featureClass_(
          geometryType,
          flatCoordinates,
          ends,
          values,
          id
        );
        feature.transform(options.dataProjection);
      } else {
        let geom;
        if (geometryType == 'Polygon') {
          const endss = inflateEnds(flatCoordinates, ends);
          geom =
            endss.length > 1
              ? new MultiPolygon$1(flatCoordinates, 'XY', endss)
              : new Polygon$1(flatCoordinates, 'XY', ends);
        } else {
          geom =
            geometryType === 'Point'
              ? new Point$1(flatCoordinates, 'XY')
              : geometryType === 'LineString'
              ? new LineString$1(flatCoordinates, 'XY')
              : geometryType === 'MultiPoint'
              ? new MultiPoint$1(flatCoordinates, 'XY')
              : geometryType === 'MultiLineString'
              ? new MultiLineString$1(flatCoordinates, 'XY', ends)
              : null;
        }
        const ctor = /** @type {typeof import("../Feature.js").default} */ (
          this.featureClass_
        );
        feature = new ctor();
        if (this.geometryName_) {
          feature.setGeometryName(this.geometryName_);
        }
        const geometry = transformGeometryWithOptions(geom, false, options);
        feature.setGeometry(geometry);
        if (id !== undefined) {
          feature.setId(id);
        }
        feature.setProperties(values, true);
      }

      return feature;
    }

    /**
     * @return {import("./Feature.js").Type} Format.
     */
    getType() {
      return 'arraybuffer';
    }

    /**
     * Read all features.
     *
     * @param {ArrayBuffer} source Source.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     * @api
     */
    readFeatures(source, options) {
      const layers = this.layers_;
      options = this.adaptOptions(options);
      const dataProjection = get$2(options.dataProjection);
      dataProjection.setWorldExtent(options.extent);
      options.dataProjection = dataProjection;

      const pbf$1 = new pbf(/** @type {ArrayBuffer} */ (source));
      const pbfLayers = pbf$1.readFields(layersPBFReader, {});
      const features = [];
      for (const name in pbfLayers) {
        if (layers && !layers.includes(name)) {
          continue;
        }
        const pbfLayer = pbfLayers[name];

        const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
        dataProjection.setExtent(extent);

        for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {
          const rawFeature = readRawFeature(pbf$1, pbfLayer, i);
          const feature = this.createFeature_(pbf$1, rawFeature, options);
          if (feature !== null) {
            features.push(feature);
          }
        }
      }

      return features;
    }

    /**
     * Read the projection from the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {import("../proj/Projection.js").default} Projection.
     * @api
     */
    readProjection(source) {
      return this.dataProjection;
    }

    /**
     * Sets the layers that features will be read from.
     * @param {Array<string>} layers Layers.
     * @api
     */
    setLayers(layers) {
      this.layers_ = layers;
    }
  }

  /**
   * Reader callback for parsing layers.
   * @param {number} tag The tag.
   * @param {Object} layers The layers object.
   * @param {PBF} pbf The PBF.
   */
  function layersPBFReader(tag, layers, pbf) {
    if (tag === 3) {
      const layer = {
        keys: [],
        values: [],
        features: [],
      };
      const end = pbf.readVarint() + pbf.pos;
      pbf.readFields(layerPBFReader, layer, end);
      layer.length = layer.features.length;
      if (layer.length) {
        layers[layer.name] = layer;
      }
    }
  }

  /**
   * Reader callback for parsing layer.
   * @param {number} tag The tag.
   * @param {Object} layer The layer object.
   * @param {PBF} pbf The PBF.
   */
  function layerPBFReader(tag, layer, pbf) {
    if (tag === 15) {
      layer.version = pbf.readVarint();
    } else if (tag === 1) {
      layer.name = pbf.readString();
    } else if (tag === 5) {
      layer.extent = pbf.readVarint();
    } else if (tag === 2) {
      layer.features.push(pbf.pos);
    } else if (tag === 3) {
      layer.keys.push(pbf.readString());
    } else if (tag === 4) {
      let value = null;
      const end = pbf.readVarint() + pbf.pos;
      while (pbf.pos < end) {
        tag = pbf.readVarint() >> 3;
        value =
          tag === 1
            ? pbf.readString()
            : tag === 2
            ? pbf.readFloat()
            : tag === 3
            ? pbf.readDouble()
            : tag === 4
            ? pbf.readVarint64()
            : tag === 5
            ? pbf.readVarint()
            : tag === 6
            ? pbf.readSVarint()
            : tag === 7
            ? pbf.readBoolean()
            : null;
      }
      layer.values.push(value);
    }
  }

  /**
   * Reader callback for parsing feature.
   * @param {number} tag The tag.
   * @param {Object} feature The feature object.
   * @param {PBF} pbf The PBF.
   */
  function featurePBFReader(tag, feature, pbf) {
    if (tag == 1) {
      feature.id = pbf.readVarint();
    } else if (tag == 2) {
      const end = pbf.readVarint() + pbf.pos;
      while (pbf.pos < end) {
        const key = feature.layer.keys[pbf.readVarint()];
        const value = feature.layer.values[pbf.readVarint()];
        feature.properties[key] = value;
      }
    } else if (tag == 3) {
      feature.type = pbf.readVarint();
    } else if (tag == 4) {
      feature.geometry = pbf.pos;
    }
  }

  /**
   * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
   * @param {PBF} pbf PBF.
   * @param {Object} layer Raw layer.
   * @param {number} i Index of the feature in the raw layer's `features` array.
   * @return {Object} Raw feature.
   */
  function readRawFeature(pbf, layer, i) {
    pbf.pos = layer.features[i];
    const end = pbf.readVarint() + pbf.pos;

    const feature = {
      layer: layer,
      type: 0,
      properties: {},
    };
    pbf.readFields(featurePBFReader, feature, end);
    return feature;
  }

  /**
   * @param {number} type The raw feature's geometry type
   * @param {number} numEnds Number of ends of the flat coordinates of the
   * geometry.
   * @return {import("../geom/Geometry.js").Type} The geometry type.
   */
  function getGeometryType(type, numEnds) {
    /** @type {import("../geom/Geometry.js").Type} */
    let geometryType;
    if (type === 1) {
      geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';
    } else if (type === 2) {
      geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';
    } else if (type === 3) {
      geometryType = 'Polygon';
      // MultiPolygon not relevant for rendering - winding order determines
      // outer rings of polygons.
    }
    return geometryType;
  }

  var MVT$1 = MVT;

  /**
   * @module ol/format/GML32
   */

  /**
   * @classdesc Feature format for reading and writing data in the GML format
   *            version 3.2.1.
   * @api
   */
  class GML32 extends GML3$1 {
    /**
     * @param {import("./GMLBase.js").Options} [options] Optional configuration object.
     */
    constructor(options) {
      options = options ? options : {};

      super(options);

      /**
       * @type {string}
       */
      this.schemaLocation = options.schemaLocation
        ? options.schemaLocation
        : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';
    }

    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
     * @param {Array<*>} objectStack Node stack.
     */
    writeGeometryElement(node, geometry, objectStack) {
      const context = objectStack[objectStack.length - 1];
      objectStack[objectStack.length - 1] = Object.assign(
        {multiCurve: true, multiSurface: true},
        context
      );
      super.writeGeometryElement(node, geometry, objectStack);
    }
  }

  GML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'pos': makeReplacer(GML3$1.prototype.readFlatPos),
      'posList': makeReplacer(GML3$1.prototype.readFlatPosList),
      'coordinates': makeReplacer(GML2$1.prototype.readFlatCoordinates),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'interior': GML3$1.prototype.interiorParser,
      'exterior': GML3$1.prototype.exteriorParser,
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.GEOMETRY_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Point': makeReplacer(GMLBase$1.prototype.readPoint),
      'MultiPoint': makeReplacer(GMLBase$1.prototype.readMultiPoint),
      'LineString': makeReplacer(GMLBase$1.prototype.readLineString),
      'MultiLineString': makeReplacer(GMLBase$1.prototype.readMultiLineString),
      'LinearRing': makeReplacer(GMLBase$1.prototype.readLinearRing),
      'Polygon': makeReplacer(GMLBase$1.prototype.readPolygon),
      'MultiPolygon': makeReplacer(GMLBase$1.prototype.readMultiPolygon),
      'Surface': makeReplacer(GML32.prototype.readSurface),
      'MultiSurface': makeReplacer(GML3$1.prototype.readMultiSurface),
      'Curve': makeReplacer(GML32.prototype.readCurve),
      'MultiCurve': makeReplacer(GML3$1.prototype.readMultiCurve),
      'Envelope': makeReplacer(GML32.prototype.readEnvelope),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTICURVE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'curveMember': makeArrayPusher(GML3$1.prototype.curveMemberParser),
      'curveMembers': makeArrayPusher(GML3$1.prototype.curveMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTISURFACE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'surfaceMember': makeArrayPusher(GML3$1.prototype.surfaceMemberParser),
      'surfaceMembers': makeArrayPusher(GML3$1.prototype.surfaceMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.CURVEMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LineString': makeArrayPusher(GMLBase$1.prototype.readLineString),
      'Curve': makeArrayPusher(GML3$1.prototype.readCurve),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.SURFACEMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Polygon': makeArrayPusher(GMLBase$1.prototype.readPolygon),
      'Surface': makeArrayPusher(GML3$1.prototype.readSurface),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.SURFACE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'patches': makeReplacer(GML3$1.prototype.readPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.CURVE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'segments': makeReplacer(GML3$1.prototype.readSegment),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.ENVELOPE_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'lowerCorner': makeArrayPusher(GML3$1.prototype.readFlatPosList),
      'upperCorner': makeArrayPusher(GML3$1.prototype.readFlatPosList),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.PATCHES_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'PolygonPatch': makeReplacer(GML3$1.prototype.readPolygonPatch),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.SEGMENTS_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LineStringSegment': makeArrayExtender(
        GML3$1.prototype.readLineStringSegment
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTIPOINT_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'pointMember': makeArrayPusher(GMLBase$1.prototype.pointMemberParser),
      'pointMembers': makeArrayPusher(GMLBase$1.prototype.pointMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTILINESTRING_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'lineStringMember': makeArrayPusher(
        GMLBase$1.prototype.lineStringMemberParser
      ),
      'lineStringMembers': makeArrayPusher(
        GMLBase$1.prototype.lineStringMemberParser
      ),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.MULTIPOLYGON_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'polygonMember': makeArrayPusher(GMLBase$1.prototype.polygonMemberParser),
      'polygonMembers': makeArrayPusher(GMLBase$1.prototype.polygonMemberParser),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.POINTMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Point': makeArrayPusher(GMLBase$1.prototype.readFlatCoordinatesFromNode),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.LINESTRINGMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LineString': makeArrayPusher(GMLBase$1.prototype.readLineString),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.POLYGONMEMBER_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'Polygon': makeArrayPusher(GMLBase$1.prototype.readPolygon),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  GML32.prototype.RING_PARSERS = {
    'http://www.opengis.net/gml/3.2': {
      'LinearRing': makeReplacer(GMLBase$1.prototype.readFlatLinearRing),
      'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.RING_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'exterior': makeChildAppender(GML3$1.prototype.writeRing),
      'interior': makeChildAppender(GML3$1.prototype.writeRing),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.ENVELOPE_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'lowerCorner': makeChildAppender(writeStringTextNode),
      'upperCorner': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'surfaceMember': makeChildAppender(
        GML3$1.prototype.writeSurfaceOrPolygonMember
      ),
      'polygonMember': makeChildAppender(
        GML3$1.prototype.writeSurfaceOrPolygonMember
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.POINTMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'pointMember': makeChildAppender(GML3$1.prototype.writePointMember),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'lineStringMember': makeChildAppender(
        GML3$1.prototype.writeLineStringOrCurveMember
      ),
      'curveMember': makeChildAppender(
        GML3$1.prototype.writeLineStringOrCurveMember
      ),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  GML32.prototype.GEOMETRY_SERIALIZERS = {
    'http://www.opengis.net/gml/3.2': {
      'Curve': makeChildAppender(GML3$1.prototype.writeCurveOrLineString),
      'MultiCurve': makeChildAppender(GML3$1.prototype.writeMultiCurveOrLineString),
      'Point': makeChildAppender(GML32.prototype.writePoint),
      'MultiPoint': makeChildAppender(GML3$1.prototype.writeMultiPoint),
      'LineString': makeChildAppender(GML3$1.prototype.writeCurveOrLineString),
      'MultiLineString': makeChildAppender(
        GML3$1.prototype.writeMultiCurveOrLineString
      ),
      'LinearRing': makeChildAppender(GML3$1.prototype.writeLinearRing),
      'Polygon': makeChildAppender(GML3$1.prototype.writeSurfaceOrPolygon),
      'MultiPolygon': makeChildAppender(
        GML3$1.prototype.writeMultiSurfaceOrPolygon
      ),
      'Surface': makeChildAppender(GML3$1.prototype.writeSurfaceOrPolygon),
      'MultiSurface': makeChildAppender(
        GML3$1.prototype.writeMultiSurfaceOrPolygon
      ),
      'Envelope': makeChildAppender(GML3$1.prototype.writeEnvelope),
    },
  };

  var GML32$1 = GML32;

  /**
   * @module ol/format/filter/Filter
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature filters.
   *
   * @abstract
   */
  class Filter {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     */
    constructor(tagName) {
      /**
       * @private
       * @type {!string}
       */
      this.tagName_ = tagName;
    }

    /**
     * The XML tag name for a filter.
     * @return {!string} Name.
     */
    getTagName() {
      return this.tagName_;
    }
  }

  var Filter$1 = Filter;

  /**
   * @module ol/format/filter/LogicalNary
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature n-ary logical filters.
   *
   * @abstract
   */
  class LogicalNary extends Filter$1 {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     * @param {Array<import("./Filter.js").default>} conditions Conditions.
     */
    constructor(tagName, conditions) {
      super(tagName);

      /**
       * @type {Array<import("./Filter.js").default>}
       */
      this.conditions = conditions;
      assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.
    }
  }

  var LogicalNary$1 = LogicalNary;

  /**
   * @module ol/format/filter/And
   */

  /**
   * @classdesc
   * Represents a logical `<And>` operator between two or more filter conditions.
   *
   * @abstract
   */
  class And extends LogicalNary$1 {
    /**
     * @param {...import("./Filter.js").default} conditions Conditions.
     */
    constructor(conditions) {
      super('And', Array.prototype.slice.call(arguments));
    }
  }

  var And$1 = And;

  /**
   * @module ol/format/filter/Bbox
   */

  /**
   * @classdesc
   * Represents a `<BBOX>` operator to test whether a geometry-valued property
   * intersects a fixed bounding box
   *
   * @api
   */
  class Bbox extends Filter$1 {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../extent.js").Extent} extent Extent.
     * @param {string} [srsName] SRS name. No srsName attribute will be set
     * on geometries when this is not provided.
     */
    constructor(geometryName, extent, srsName) {
      super('BBOX');

      /**
       * @type {!string}
       */
      this.geometryName = geometryName;

      /**
       * @type {import("../../extent.js").Extent}
       */
      this.extent = extent;
      if (extent.length !== 4) {
        throw new Error(
          'Expected an extent with four values ([minX, minY, maxX, maxY])'
        );
      }

      /**
       * @type {string|undefined}
       */
      this.srsName = srsName;
    }
  }

  var Bbox$1 = Bbox;

  /**
   * @module ol/format/filter/Spatial
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Represents a spatial operator to test whether a geometry-valued property
   * relates to a given geometry.
   *
   * @abstract
   */
  class Spatial extends Filter$1 {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     */
    constructor(tagName, geometryName, geometry, srsName) {
      super(tagName);

      /**
       * @type {!string}
       */
      this.geometryName = geometryName || 'the_geom';

      /**
       * @type {import("../../geom/Geometry.js").default}
       */
      this.geometry = geometry;

      /**
       * @type {string|undefined}
       */
      this.srsName = srsName;
    }
  }

  var Spatial$1 = Spatial;

  /**
   * @module ol/format/filter/Contains
   */

  /**
   * @classdesc
   * Represents a `<Contains>` operator to test whether a geometry-valued property
   * contains a given geometry.
   * @api
   */
  class Contains extends Spatial$1 {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     */
    constructor(geometryName, geometry, srsName) {
      super('Contains', geometryName, geometry, srsName);
    }
  }

  var Contains$1 = Contains;

  /**
   * @module ol/format/filter/DWithin
   */

  /**
   * @classdesc
   * Represents a `<DWithin>` operator to test whether a geometry-valued property
   * is within a distance to a given geometry.
   * @api
   */
  class DWithin extends Spatial$1 {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
     * @param {!number} distance Distance.
     * @param {!string} unit Unit.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     */
    constructor(geometryName, geometry, distance, unit, srsName) {
      super('DWithin', geometryName, geometry, srsName);

      /**
       * @public
       * @type {!number}
       */
      this.distance = distance;

      /**
       * @public
       * @type {!string}
       */
      this.unit = unit;
    }
  }

  var DWithin$1 = DWithin;

  /**
   * @module ol/format/filter/Disjoint
   */

  /**
   * @classdesc
   * Represents a `<Disjoint>` operator to test whether a geometry-valued property
   * is disjoint to a given geometry.
   * @api
   */
  class Disjoint extends Spatial$1 {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     */
    constructor(geometryName, geometry, srsName) {
      super('Disjoint', geometryName, geometry, srsName);
    }
  }

  var Disjoint$1 = Disjoint;

  /**
   * @module ol/format/filter/Comparison
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature property comparison filters.
   *
   * @abstract
   */
  class Comparison extends Filter$1 {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     * @param {!string} propertyName Name of the context property to compare.
     */
    constructor(tagName, propertyName) {
      super(tagName);

      /**
       * @type {!string}
       */
      this.propertyName = propertyName;
    }
  }

  var Comparison$1 = Comparison;

  /**
   * @module ol/format/filter/During
   */

  /**
   * @classdesc
   * Represents a `<During>` comparison operator.
   * @api
   */
  class During extends Comparison$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!string} begin The begin date in ISO-8601 format.
     * @param {!string} end The end date in ISO-8601 format.
     */
    constructor(propertyName, begin, end) {
      super('During', propertyName);

      /**
       * @type {!string}
       */
      this.begin = begin;

      /**
       * @type {!string}
       */
      this.end = end;
    }
  }

  var During$1 = During;

  /**
   * @module ol/format/filter/ComparisonBinary
   */

  /**
   * @classdesc
   * Abstract class; normally only used for creating subclasses and not instantiated in apps.
   * Base class for WFS GetFeature property binary comparison filters.
   *
   * @abstract
   */
  class ComparisonBinary extends Comparison$1 {
    /**
     * @param {!string} tagName The XML tag name for this filter.
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!(string|number)} expression The value to compare.
     * @param {boolean} [matchCase] Case-sensitive?
     */
    constructor(tagName, propertyName, expression, matchCase) {
      super(tagName, propertyName);

      /**
       * @type {!(string|number)}
       */
      this.expression = expression;

      /**
       * @type {boolean|undefined}
       */
      this.matchCase = matchCase;
    }
  }

  var ComparisonBinary$1 = ComparisonBinary;

  /**
   * @module ol/format/filter/EqualTo
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsEqualTo>` comparison operator.
   * @api
   */
  class EqualTo extends ComparisonBinary$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!(string|number)} expression The value to compare.
     * @param {boolean} [matchCase] Case-sensitive?
     */
    constructor(propertyName, expression, matchCase) {
      super('PropertyIsEqualTo', propertyName, expression, matchCase);
    }
  }

  var EqualTo$1 = EqualTo;

  /**
   * @module ol/format/filter/GreaterThan
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsGreaterThan>` comparison operator.
   * @api
   */
  class GreaterThan$1 extends ComparisonBinary$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     */
    constructor(propertyName, expression) {
      super('PropertyIsGreaterThan', propertyName, expression);
    }
  }

  var GreaterThan$2 = GreaterThan$1;

  /**
   * @module ol/format/filter/GreaterThanOrEqualTo
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.
   * @api
   */
  class GreaterThanOrEqualTo extends ComparisonBinary$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     */
    constructor(propertyName, expression) {
      super('PropertyIsGreaterThanOrEqualTo', propertyName, expression);
    }
  }

  var GreaterThanOrEqualTo$1 = GreaterThanOrEqualTo;

  /**
   * @module ol/format/filter/Intersects
   */

  /**
   * @classdesc
   * Represents a `<Intersects>` operator to test whether a geometry-valued property
   * intersects a given geometry.
   * @api
   */
  class Intersects extends Spatial$1 {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     */
    constructor(geometryName, geometry, srsName) {
      super('Intersects', geometryName, geometry, srsName);
    }
  }

  var Intersects$1 = Intersects;

  /**
   * @module ol/format/filter/IsBetween
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsBetween>` comparison operator.
   * @api
   */
  class IsBetween extends Comparison$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} lowerBoundary The lower bound of the range.
     * @param {!number} upperBoundary The upper bound of the range.
     */
    constructor(propertyName, lowerBoundary, upperBoundary) {
      super('PropertyIsBetween', propertyName);

      /**
       * @type {!number}
       */
      this.lowerBoundary = lowerBoundary;

      /**
       * @type {!number}
       */
      this.upperBoundary = upperBoundary;
    }
  }

  var IsBetween$1 = IsBetween;

  /**
   * @module ol/format/filter/IsLike
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsLike>` comparison operator.
   * @api
   */
  class IsLike extends Comparison$1 {
    /**
     * [constructor description]
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!string} pattern Text pattern.
     * @param {string} [wildCard] Pattern character which matches any sequence of
     *    zero or more string characters. Default is '*'.
     * @param {string} [singleChar] pattern character which matches any single
     *    string character. Default is '.'.
     * @param {string} [escapeChar] Escape character which can be used to escape
     *    the pattern characters. Default is '!'.
     * @param {boolean} [matchCase] Case-sensitive?
     */
    constructor(
      propertyName,
      pattern,
      wildCard,
      singleChar,
      escapeChar,
      matchCase
    ) {
      super('PropertyIsLike', propertyName);

      /**
       * @type {!string}
       */
      this.pattern = pattern;

      /**
       * @type {!string}
       */
      this.wildCard = wildCard !== undefined ? wildCard : '*';

      /**
       * @type {!string}
       */
      this.singleChar = singleChar !== undefined ? singleChar : '.';

      /**
       * @type {!string}
       */
      this.escapeChar = escapeChar !== undefined ? escapeChar : '!';

      /**
       * @type {boolean|undefined}
       */
      this.matchCase = matchCase;
    }
  }

  var IsLike$1 = IsLike;

  /**
   * @module ol/format/filter/IsNull
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsNull>` comparison operator.
   * @api
   */
  class IsNull extends Comparison$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     */
    constructor(propertyName) {
      super('PropertyIsNull', propertyName);
    }
  }

  var IsNull$1 = IsNull;

  /**
   * @module ol/format/filter/LessThan
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsLessThan>` comparison operator.
   * @api
   */
  class LessThan$1 extends ComparisonBinary$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     */
    constructor(propertyName, expression) {
      super('PropertyIsLessThan', propertyName, expression);
    }
  }

  var LessThan$2 = LessThan$1;

  /**
   * @module ol/format/filter/LessThanOrEqualTo
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.
   * @api
   */
  class LessThanOrEqualTo extends ComparisonBinary$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     */
    constructor(propertyName, expression) {
      super('PropertyIsLessThanOrEqualTo', propertyName, expression);
    }
  }

  var LessThanOrEqualTo$1 = LessThanOrEqualTo;

  /**
   * @module ol/format/filter/Not
   */

  /**
   * @classdesc
   * Represents a logical `<Not>` operator for a filter condition.
   * @api
   */
  class Not extends Filter$1 {
    /**
     * @param {!import("./Filter.js").default} condition Filter condition.
     */
    constructor(condition) {
      super('Not');

      /**
       * @type {!import("./Filter.js").default}
       */
      this.condition = condition;
    }
  }

  var Not$1 = Not;

  /**
   * @module ol/format/filter/NotEqualTo
   */

  /**
   * @classdesc
   * Represents a `<PropertyIsNotEqualTo>` comparison operator.
   * @api
   */
  class NotEqualTo extends ComparisonBinary$1 {
    /**
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!(string|number)} expression The value to compare.
     * @param {boolean} [matchCase] Case-sensitive?
     */
    constructor(propertyName, expression, matchCase) {
      super('PropertyIsNotEqualTo', propertyName, expression, matchCase);
    }
  }

  var NotEqualTo$1 = NotEqualTo;

  /**
   * @module ol/format/filter/Or
   */

  /**
   * @classdesc
   * Represents a logical `<Or>` operator between two ore more filter conditions.
   * @api
   */
  class Or extends LogicalNary$1 {
    /**
     * @param {...import("./Filter.js").default} conditions Conditions.
     */
    constructor(conditions) {
      super('Or', Array.prototype.slice.call(arguments));
    }
  }

  var Or$1 = Or;

  /**
   * @module ol/format/filter/ResourceId
   */

  /**
   * @classdesc
   *
   * @abstract
   */
  class ResourceId extends Filter$1 {
    /**
     * @param {!string} rid Resource ID.
     */
    constructor(rid) {
      super('ResourceId');

      /**
       * @type {!string}
       */
      this.rid = rid;
    }
  }

  var ResourceId$1 = ResourceId;

  /**
   * @module ol/format/filter/Within
   */

  /**
   * @classdesc
   * Represents a `<Within>` operator to test whether a geometry-valued property
   * is within a given geometry.
   * @api
   */
  class Within$2 extends Spatial$1 {
    /**
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     */
    constructor(geometryName, geometry, srsName) {
      super('Within', geometryName, geometry, srsName);
    }
  }

  var Within$3 = Within$2;

  /**
   * @module ol/format/filter
   */

  /**
   * Create a logical `<And>` operator between two or more filter conditions.
   *
   * @param {...import("./filter/Filter.js").default} conditions Filter conditions.
   * @return {!And} `<And>` operator.
   * @api
   */
  function and(conditions) {
    const params = [null].concat(Array.prototype.slice.call(arguments));
    return new (Function.prototype.bind.apply(And$1, params))();
  }

  /**
   * Create a logical `<Or>` operator between two or more filter conditions.
   *
   * @param {...import("./filter/Filter.js").default} conditions Filter conditions.
   * @return {!Or} `<Or>` operator.
   * @api
   */
  function or(conditions) {
    const params = [null].concat(Array.prototype.slice.call(arguments));
    return new (Function.prototype.bind.apply(Or$1, params))();
  }

  /**
   * Represents a logical `<Not>` operator for a filter condition.
   *
   * @param {!import("./filter/Filter.js").default} condition Filter condition.
   * @return {!Not} `<Not>` operator.
   * @api
   */
  function not(condition) {
    return new Not$1(condition);
  }

  /**
   * Create a `<BBOX>` operator to test whether a geometry-valued property
   * intersects a fixed bounding box
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../extent.js").Extent} extent Extent.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!Bbox} `<BBOX>` operator.
   * @api
   */
  function bbox(geometryName, extent, srsName) {
    return new Bbox$1(geometryName, extent, srsName);
  }

  /**
   * Create a `<Contains>` operator to test whether a geometry-valued property
   * contains a given geometry.
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../geom/Geometry.js").default} geometry Geometry.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!Contains} `<Contains>` operator.
   * @api
   */
  function contains(geometryName, geometry, srsName) {
    return new Contains$1(geometryName, geometry, srsName);
  }

  /**
   * Create a `<Intersects>` operator to test whether a geometry-valued property
   * intersects a given geometry.
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../geom/Geometry.js").default} geometry Geometry.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!Intersects} `<Intersects>` operator.
   * @api
   */
  function intersects$1(geometryName, geometry, srsName) {
    return new Intersects$1(geometryName, geometry, srsName);
  }

  /**
   * Create a `<Disjoint>` operator to test whether a geometry-valued property
   * is disjoint to a given geometry.
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../geom/Geometry.js").default} geometry Geometry.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!Disjoint} `<Disjoint>` operator.
   * @api
   */
  function disjoint(geometryName, geometry, srsName) {
    return new Disjoint$1(geometryName, geometry, srsName);
  }

  /**
   * Create a `<Within>` operator to test whether a geometry-valued property
   * is within a given geometry.
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../geom/Geometry.js").default} geometry Geometry.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!Within} `<Within>` operator.
   * @api
   */
  function within(geometryName, geometry, srsName) {
    return new Within$3(geometryName, geometry, srsName);
  }

  /**
   * Create a `<DWithin>` operator to test whether a geometry-valued property
   * is within a distance to a given geometry.
   *
   * @param {!string} geometryName Geometry name to use.
   * @param {!import("../geom/Geometry.js").default} geometry Geometry.
   * @param {!number} distance Distance.
   * @param {!string} unit Unit.
   * @param {string} [srsName] SRS name. No srsName attribute will be
   *    set on geometries when this is not provided.
   * @return {!DWithin} `<DWithin>` operator.
   * @api
   */
  function dwithin(geometryName, geometry, distance, unit, srsName) {
    return new DWithin$1(geometryName, geometry, distance, unit, srsName);
  }

  /**
   * Creates a `<PropertyIsEqualTo>` comparison operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!(string|number)} expression The value to compare.
   * @param {boolean} [matchCase] Case-sensitive?
   * @return {!EqualTo} `<PropertyIsEqualTo>` operator.
   * @api
   */
  function equalTo(propertyName, expression, matchCase) {
    return new EqualTo$1(propertyName, expression, matchCase);
  }

  /**
   * Creates a `<PropertyIsNotEqualTo>` comparison operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!(string|number)} expression The value to compare.
   * @param {boolean} [matchCase] Case-sensitive?
   * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.
   * @api
   */
  function notEqualTo(propertyName, expression, matchCase) {
    return new NotEqualTo$1(propertyName, expression, matchCase);
  }

  /**
   * Creates a `<PropertyIsLessThan>` comparison operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!number} expression The value to compare.
   * @return {!LessThan} `<PropertyIsLessThan>` operator.
   * @api
   */
  function lessThan(propertyName, expression) {
    return new LessThan$2(propertyName, expression);
  }

  /**
   * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!number} expression The value to compare.
   * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.
   * @api
   */
  function lessThanOrEqualTo(propertyName, expression) {
    return new LessThanOrEqualTo$1(propertyName, expression);
  }

  /**
   * Creates a `<PropertyIsGreaterThan>` comparison operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!number} expression The value to compare.
   * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.
   * @api
   */
  function greaterThan(propertyName, expression) {
    return new GreaterThan$2(propertyName, expression);
  }

  /**
   * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!number} expression The value to compare.
   * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.
   * @api
   */
  function greaterThanOrEqualTo(propertyName, expression) {
    return new GreaterThanOrEqualTo$1(propertyName, expression);
  }

  /**
   * Creates a `<PropertyIsNull>` comparison operator to test whether a property value
   * is null.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @return {!IsNull} `<PropertyIsNull>` operator.
   * @api
   */
  function isNull(propertyName) {
    return new IsNull$1(propertyName);
  }

  /**
   * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression
   * value lies within a range given by a lower and upper bound (inclusive).
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!number} lowerBoundary The lower bound of the range.
   * @param {!number} upperBoundary The upper bound of the range.
   * @return {!IsBetween} `<PropertyIsBetween>` operator.
   * @api
   */
  function between(propertyName, lowerBoundary, upperBoundary) {
    return new IsBetween$1(propertyName, lowerBoundary, upperBoundary);
  }

  /**
   * Represents a `<PropertyIsLike>` comparison operator that matches a string property
   * value against a text pattern.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!string} pattern Text pattern.
   * @param {string} [wildCard] Pattern character which matches any sequence of
   *    zero or more string characters. Default is '*'.
   * @param {string} [singleChar] pattern character which matches any single
   *    string character. Default is '.'.
   * @param {string} [escapeChar] Escape character which can be used to escape
   *    the pattern characters. Default is '!'.
   * @param {boolean} [matchCase] Case-sensitive?
   * @return {!IsLike} `<PropertyIsLike>` operator.
   * @api
   */
  function like(
    propertyName,
    pattern,
    wildCard,
    singleChar,
    escapeChar,
    matchCase
  ) {
    return new IsLike$1(
      propertyName,
      pattern,
      wildCard,
      singleChar,
      escapeChar,
      matchCase
    );
  }

  /**
   * Create a `<During>` temporal operator.
   *
   * @param {!string} propertyName Name of the context property to compare.
   * @param {!string} begin The begin date in ISO-8601 format.
   * @param {!string} end The end date in ISO-8601 format.
   * @return {!During} `<During>` operator.
   * @api
   */
  function during(propertyName, begin, end) {
    return new During$1(propertyName, begin, end);
  }

  function resourceId(rid) {
    return new ResourceId$1(rid);
  }

  var nsFormat_filter = {
    __proto__: null,
    and: and,
    or: or,
    not: not,
    bbox: bbox,
    contains: contains,
    intersects: intersects$1,
    disjoint: disjoint,
    within: within,
    dwithin: dwithin,
    equalTo: equalTo,
    notEqualTo: notEqualTo,
    lessThan: lessThan,
    lessThanOrEqualTo: lessThanOrEqualTo,
    greaterThan: greaterThan,
    greaterThanOrEqualTo: greaterThanOrEqualTo,
    isNull: isNull,
    between: between,
    like: like,
    during: during,
    resourceId: resourceId
  };

  /**
   * @module ol/format/WFS
   */

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const FEATURE_COLLECTION_PARSERS = {
    'http://www.opengis.net/gml': {
      'boundedBy': makeObjectPropertySetter(
        GMLBase$1.prototype.readExtentElement,
        'bounds'
      ),
    },
    'http://www.opengis.net/wfs/2.0': {
      'member': makeArrayPusher(GMLBase$1.prototype.readFeaturesInternal),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRANSACTION_SUMMARY_PARSERS = {
    'http://www.opengis.net/wfs': {
      'totalInserted': makeObjectPropertySetter(readPositiveInteger),
      'totalUpdated': makeObjectPropertySetter(readPositiveInteger),
      'totalDeleted': makeObjectPropertySetter(readPositiveInteger),
    },
    'http://www.opengis.net/wfs/2.0': {
      'totalInserted': makeObjectPropertySetter(readPositiveInteger),
      'totalUpdated': makeObjectPropertySetter(readPositiveInteger),
      'totalDeleted': makeObjectPropertySetter(readPositiveInteger),
    },
  };

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const TRANSACTION_RESPONSE_PARSERS = {
    'http://www.opengis.net/wfs': {
      'TransactionSummary': makeObjectPropertySetter(
        readTransactionSummary,
        'transactionSummary'
      ),
      'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),
    },
    'http://www.opengis.net/wfs/2.0': {
      'TransactionSummary': makeObjectPropertySetter(
        readTransactionSummary,
        'transactionSummary'
      ),
      'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const QUERY_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'PropertyName': makeChildAppender(writeStringTextNode),
    },
    'http://www.opengis.net/wfs/2.0': {
      'PropertyName': makeChildAppender(writeStringTextNode),
    },
  };

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const TRANSACTION_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'Insert': makeChildAppender(writeFeature),
      'Update': makeChildAppender(writeUpdate),
      'Delete': makeChildAppender(writeDelete),
      'Property': makeChildAppender(writeProperty),
      'Native': makeChildAppender(writeNative),
    },
    'http://www.opengis.net/wfs/2.0': {
      'Insert': makeChildAppender(writeFeature),
      'Update': makeChildAppender(writeUpdate),
      'Delete': makeChildAppender(writeDelete),
      'Property': makeChildAppender(writeProperty),
      'Native': makeChildAppender(writeNative),
    },
  };

  /**
   * @typedef {Object} Options
   * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.
   * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.
   * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.
   * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.
   * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.
   * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.
   */

  /**
   * @typedef {Object} WriteGetFeatureOptions
   * @property {string} featureNS The namespace URI used for features.
   * @property {string} featurePrefix The prefix for the feature namespace.
   * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to
   * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are
   * ignored.).
   * @property {string} [srsName] SRS name. No srsName attribute will be set on
   * geometries when this is not provided.
   * @property {string} [handle] Handle.
   * @property {string} [outputFormat] Output format.
   * @property {number} [maxFeatures] Maximum number of features to fetch.
   * @property {string} [geometryName] Geometry name to use in a BBOX filter.
   * @property {Array<string>} [propertyNames] Optional list of property names to serialize.
   * @property {string} [viewParams] viewParams GeoServer vendor parameter.
   * @property {number} [startIndex] Start index to use for WFS paging. This is a
   * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.
   * @property {number} [count] Number of features to retrieve when paging. This is a
   * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some
   * Web Feature Services have repurposed `maxfeatures` instead.
   * @property {import("../extent.js").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`
   * option must be set.
   * @property {import("./filter/Filter.js").default} [filter] Filter condition. See
   * {@link module:ol/format/filter} for more information.
   * @property {string} [resultType] Indicates what response should be returned,
   * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.
   */

  /**
   * @typedef {Object} FeatureType
   * @property {!string} name The feature type name.
   * @property {!import("../extent.js").Extent} bbox Extent to use for the BBOX filter.
   * @property {!string} geometryName Geometry name to use in the BBOX filter.
   */

  /**
   * @typedef {Object} WriteTransactionOptions
   * @property {string} featureNS The namespace URI used for features.
   * @property {string} featurePrefix The prefix for the feature namespace.
   * @property {string} featureType The feature type name.
   * @property {string} [srsName] SRS name. No srsName attribute will be set on
   * geometries when this is not provided.
   * @property {string} [handle] Handle.
   * @property {boolean} [hasZ] Must be set to true if the transaction is for
   * a 3D layer. This will allow the Z coordinate to be included in the transaction.
   * @property {Array<Object>} nativeElements Native elements. Currently not supported.
   * @property {import("./GMLBase.js").Options} [gmlOptions] GML options for the WFS transaction writer.
   * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.
   */

  /**
   * Number of features; bounds/extent.
   * @typedef {Object} FeatureCollectionMetadata
   * @property {number} numberOfFeatures NumberOfFeatures.
   * @property {import("../extent.js").Extent} bounds Bounds.
   */

  /**
   * Total deleted; total inserted; total updated; array of insert ids.
   * @typedef {Object} TransactionResponse
   * @property {number} totalDeleted TotalDeleted.
   * @property {number} totalInserted TotalInserted.
   * @property {number} totalUpdated TotalUpdated.
   * @property {Array<string>} insertIds InsertIds.
   */

  /**
   * @type {string}
   */
  const FEATURE_PREFIX = 'feature';

  /**
   * @type {string}
   */
  const XMLNS = 'http://www.w3.org/2000/xmlns/';

  /**
   * @type {Object<string, string>}
   */
  const OGCNS = {
    '2.0.0': 'http://www.opengis.net/ogc/1.1',
    '1.1.0': 'http://www.opengis.net/ogc',
    '1.0.0': 'http://www.opengis.net/ogc',
  };

  /**
   * @type {Object<string, string>}
   */
  const WFSNS = {
    '2.0.0': 'http://www.opengis.net/wfs/2.0',
    '1.1.0': 'http://www.opengis.net/wfs',
    '1.0.0': 'http://www.opengis.net/wfs',
  };

  /**
   * @type {Object<string, string>}
   */
  const FESNS = {
    '2.0.0': 'http://www.opengis.net/fes/2.0',
    '1.1.0': 'http://www.opengis.net/fes',
    '1.0.0': 'http://www.opengis.net/fes',
  };

  /**
   * @type {Object<string, string>}
   */
  const SCHEMA_LOCATIONS = {
    '2.0.0':
      'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',
    '1.1.0':
      'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',
    '1.0.0':
      'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',
  };

  /**
   * @type {Object<string, object>}
   */
  const GML_FORMATS = {
    '2.0.0': GML32$1,
    '1.1.0': GML3$1,
    '1.0.0': GML2$1,
  };

  /**
   * @const
   * @type {string}
   */
  const DEFAULT_VERSION$1 = '1.1.0';

  /**
   * @classdesc
   * Feature format for reading and writing data in the WFS format.
   * By default, supports WFS version 1.1.0. You can pass a GML format
   * as option to override the default.
   * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.
   *
   * @api
   */
  class WFS extends XMLFeature$1 {
    /**
     * @param {Options} [options] Optional configuration object.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * @private
       * @type {string}
       */
      this.version_ = options.version ? options.version : DEFAULT_VERSION$1;

      /**
       * @private
       * @type {Array<string>|string|undefined}
       */
      this.featureType_ = options.featureType;

      /**
       * @private
       * @type {Object<string, string>|string|undefined}
       */
      this.featureNS_ = options.featureNS;

      /**
       * @private
       * @type {GMLBase}
       */
      this.gmlFormat_ = options.gmlFormat
        ? options.gmlFormat
        : new GML_FORMATS[this.version_]();

      /**
       * @private
       * @type {string}
       */
      this.schemaLocation_ = options.schemaLocation
        ? options.schemaLocation
        : SCHEMA_LOCATIONS[this.version_];
    }

    /**
     * @return {Array<string>|string|undefined} featureType
     */
    getFeatureType() {
      return this.featureType_;
    }

    /**
     * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.
     */
    setFeatureType(featureType) {
      this.featureType_ = featureType;
    }

    /**
     * @protected
     * @param {Element} node Node.
     * @param {import("./Feature.js").ReadOptions} [options] Options.
     * @return {Array<import("../Feature.js").default>} Features.
     */
    readFeaturesFromNode(node, options) {
      /** @type {import("../xml.js").NodeStackItem} */
      const context = {
        node,
      };
      Object.assign(context, {
        'featureType': this.featureType_,
        'featureNS': this.featureNS_,
      });

      Object.assign(context, this.getReadOptions(node, options ? options : {}));
      const objectStack = [context];
      let featuresNS;
      if (this.version_ === '2.0.0') {
        featuresNS = FEATURE_COLLECTION_PARSERS;
      } else {
        featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;
      }
      let features = pushParseAndPop(
        [],
        featuresNS,
        node,
        objectStack,
        this.gmlFormat_
      );
      if (!features) {
        features = [];
      }
      return features;
    }

    /**
     * Read transaction response of the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {TransactionResponse|undefined} Transaction response.
     * @api
     */
    readTransactionResponse(source) {
      if (!source) {
        return undefined;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readTransactionResponseFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readTransactionResponseFromDocument(
          /** @type {Document} */ (source)
        );
      }
      return this.readTransactionResponseFromNode(
        /** @type {Element} */ (source)
      );
    }

    /**
     * Read feature collection metadata of the source.
     *
     * @param {Document|Element|Object|string} source Source.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     * @api
     */
    readFeatureCollectionMetadata(source) {
      if (!source) {
        return undefined;
      } else if (typeof source === 'string') {
        const doc = parse(source);
        return this.readFeatureCollectionMetadataFromDocument(doc);
      } else if (isDocument(source)) {
        return this.readFeatureCollectionMetadataFromDocument(
          /** @type {Document} */ (source)
        );
      }
      return this.readFeatureCollectionMetadataFromNode(
        /** @type {Element} */ (source)
      );
    }

    /**
     * @param {Document} doc Document.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     */
    readFeatureCollectionMetadataFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readFeatureCollectionMetadataFromNode(
            /** @type {Element} */ (n)
          );
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {FeatureCollectionMetadata|undefined}
     *     FeatureCollection metadata.
     */
    readFeatureCollectionMetadataFromNode(node) {
      const result = {};
      const value = readNonNegativeIntegerString(
        node.getAttribute('numberOfFeatures')
      );
      result['numberOfFeatures'] = value;
      return pushParseAndPop(
        /** @type {FeatureCollectionMetadata} */ (result),
        FEATURE_COLLECTION_PARSERS,
        node,
        [],
        this.gmlFormat_
      );
    }

    /**
     * @param {Document} doc Document.
     * @return {TransactionResponse|undefined} Transaction response.
     */
    readTransactionResponseFromDocument(doc) {
      for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readTransactionResponseFromNode(/** @type {Element} */ (n));
        }
      }
      return undefined;
    }

    /**
     * @param {Element} node Node.
     * @return {TransactionResponse|undefined} Transaction response.
     */
    readTransactionResponseFromNode(node) {
      return pushParseAndPop(
        /** @type {TransactionResponse} */ ({}),
        TRANSACTION_RESPONSE_PARSERS,
        node,
        []
      );
    }

    /**
     * Encode format as WFS `GetFeature` and return the Node.
     *
     * @param {WriteGetFeatureOptions} options Options.
     * @return {Node} Result.
     * @api
     */
    writeGetFeature(options) {
      const node = createElementNS(WFSNS[this.version_], 'GetFeature');
      node.setAttribute('service', 'WFS');
      node.setAttribute('version', this.version_);
      if (options.handle) {
        node.setAttribute('handle', options.handle);
      }
      if (options.outputFormat) {
        node.setAttribute('outputFormat', options.outputFormat);
      }
      if (options.maxFeatures !== undefined) {
        node.setAttribute('maxFeatures', String(options.maxFeatures));
      }
      if (options.resultType) {
        node.setAttribute('resultType', options.resultType);
      }
      if (options.startIndex !== undefined) {
        node.setAttribute('startIndex', String(options.startIndex));
      }
      if (options.count !== undefined) {
        node.setAttribute('count', String(options.count));
      }
      if (options.viewParams !== undefined) {
        node.setAttribute('viewParams', options.viewParams);
      }
      node.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        this.schemaLocation_
      );
      /** @type {import("../xml.js").NodeStackItem} */
      const context = {
        node,
      };
      Object.assign(context, {
        'version': this.version_,
        'srsName': options.srsName,
        'featureNS': options.featureNS ? options.featureNS : this.featureNS_,
        'featurePrefix': options.featurePrefix,
        'propertyNames': options.propertyNames ? options.propertyNames : [],
      });
      assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array
      if (typeof options.featureTypes[0] === 'string') {
        let filter = options.filter;
        if (options.bbox) {
          assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set
          filter = this.combineBboxAndFilter(
            options.geometryName,
            options.bbox,
            options.srsName,
            filter
          );
        }
        Object.assign(context, {
          'geometryName': options.geometryName,
          'filter': filter,
        });
        writeGetFeature(
          node,
          /** @type {!Array<string>} */ (options.featureTypes),
          [context]
        );
      } else {
        // Write one query node per element in featuresType.
        options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {
          const completeFilter = this.combineBboxAndFilter(
            featureType.geometryName,
            featureType.bbox,
            options.srsName,
            options.filter
          );
          Object.assign(context, {
            'geometryName': featureType.geometryName,
            'filter': completeFilter,
          });
          writeGetFeature(node, [featureType.name], [context]);
        });
      }
      return node;
    }

    /**
     * Create a bbox filter and combine it with another optional filter.
     *
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../extent.js").Extent} extent Extent.
     * @param {string} [srsName] SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     * @param {import("./filter/Filter.js").default} [filter] Filter condition.
     * @return {import("./filter/Filter.js").default} The filter.
     */
    combineBboxAndFilter(geometryName, extent, srsName, filter) {
      const bboxFilter = bbox(geometryName, extent, srsName);
      if (filter) {
        // if bbox and filter are both set, combine the two into a single filter
        return and(filter, bboxFilter);
      }
      return bboxFilter;
    }

    /**
     * Encode format as WFS `Transaction` and return the Node.
     *
     * @param {Array<import("../Feature.js").default>} inserts The features to insert.
     * @param {Array<import("../Feature.js").default>} updates The features to update.
     * @param {Array<import("../Feature.js").default>} deletes The features to delete.
     * @param {WriteTransactionOptions} options Write options.
     * @return {Node} Result.
     * @api
     */
    writeTransaction(inserts, updates, deletes, options) {
      const objectStack = [];
      const version = options.version ? options.version : this.version_;
      const node = createElementNS(WFSNS[version], 'Transaction');

      node.setAttribute('service', 'WFS');
      node.setAttribute('version', version);
      let baseObj;
      /** @type {import("../xml.js").NodeStackItem} */
      if (options) {
        baseObj = options.gmlOptions ? options.gmlOptions : {};
        if (options.handle) {
          node.setAttribute('handle', options.handle);
        }
      }
      node.setAttributeNS(
        XML_SCHEMA_INSTANCE_URI,
        'xsi:schemaLocation',
        SCHEMA_LOCATIONS[version]
      );

      const request = createTransactionRequest(node, baseObj, version, options);
      if (inserts) {
        serializeTransactionRequest('Insert', inserts, objectStack, request);
      }
      if (updates) {
        serializeTransactionRequest('Update', updates, objectStack, request);
      }
      if (deletes) {
        serializeTransactionRequest('Delete', deletes, objectStack, request);
      }
      if (options.nativeElements) {
        serializeTransactionRequest(
          'Native',
          options.nativeElements,
          objectStack,
          request
        );
      }
      return node;
    }

    /**
     * @param {Document} doc Document.
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromDocument(doc) {
      for (let n = doc.firstChild; n; n = n.nextSibling) {
        if (n.nodeType == Node.ELEMENT_NODE) {
          return this.readProjectionFromNode(/** @type {Element} */ (n));
        }
      }
      return null;
    }

    /**
     * @param {Element} node Node.
     * @return {import("../proj/Projection.js").default} Projection.
     */
    readProjectionFromNode(node) {
      if (node.firstElementChild && node.firstElementChild.firstElementChild) {
        node = node.firstElementChild.firstElementChild;
        for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
          if (
            !(
              n.childNodes.length === 0 ||
              (n.childNodes.length === 1 && n.firstChild.nodeType === 3)
            )
          ) {
            const objectStack = [{}];
            this.gmlFormat_.readGeometryElement(n, objectStack);
            return get$2(objectStack.pop().srsName);
          }
        }
      }

      return null;
    }
  }

  /**
   * @param {Element} node Node.
   * @param {*} baseObj Base object.
   * @param {string} version Version.
   * @param {WriteTransactionOptions} options Options.
   * @return {Object} Request object.
   */
  function createTransactionRequest(node, baseObj, version, options) {
    const featurePrefix = options.featurePrefix
      ? options.featurePrefix
      : FEATURE_PREFIX;
    let gmlVersion;
    if (version === '1.0.0') {
      gmlVersion = 2;
    } else if (version === '1.1.0') {
      gmlVersion = 3;
    } else if (version === '2.0.0') {
      gmlVersion = 3.2;
    }
    const obj = Object.assign(
      {node},
      {
        version,
        'featureNS': options.featureNS,
        'featureType': options.featureType,
        'featurePrefix': featurePrefix,
        'gmlVersion': gmlVersion,
        'hasZ': options.hasZ,
        'srsName': options.srsName,
      },
      baseObj
    );
    return obj;
  }

  /**
   * @param {string} type Request type.
   * @param {Array<import("../Feature.js").default>} features Features.
   * @param {Array<*>} objectStack Object stack.
   * @param {Element} request Transaction Request.
   */
  function serializeTransactionRequest(type, features, objectStack, request) {
    pushSerializeAndPop(
      request,
      TRANSACTION_SERIALIZERS,
      makeSimpleNodeFactory(type),
      features,
      objectStack
    );
  }

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Transaction Summary.
   */
  function readTransactionSummary(node, objectStack) {
    return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const OGC_FID_PARSERS = {
    'http://www.opengis.net/ogc': {
      'FeatureId': makeArrayPusher(function (node, objectStack) {
        return node.getAttribute('fid');
      }),
    },
    'http://www.opengis.net/ogc/1.1': {
      'FeatureId': makeArrayPusher(function (node, objectStack) {
        return node.getAttribute('fid');
      }),
    },
  };

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   */
  function fidParser(node, objectStack) {
    parseNode(OGC_FID_PARSERS, node, objectStack);
  }

  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  const INSERT_RESULTS_PARSERS = {
    'http://www.opengis.net/wfs': {
      'Feature': fidParser,
    },
    'http://www.opengis.net/wfs/2.0': {
      'Feature': fidParser,
    },
  };

  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Insert results.
   */
  function readInsertResults(node, objectStack) {
    return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);
  }

  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeFeature(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const featureType = context['featureType'];
    const featureNS = context['featureNS'];
    const gmlVersion = context['gmlVersion'];
    const child = createElementNS(featureNS, featureType);
    node.appendChild(child);
    if (gmlVersion === 2) {
      GML2$1.prototype.writeFeatureElement(child, feature, objectStack);
    } else if (gmlVersion === 3) {
      GML3$1.prototype.writeFeatureElement(child, feature, objectStack);
    } else {
      GML32$1.prototype.writeFeatureElement(child, feature, objectStack);
    }
  }

  /**
   * @param {Node} node Node.
   * @param {number|string} fid Feature identifier.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeOgcFidFilter(node, fid, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const version = context['version'];
    const ns = OGCNS[version];
    const filter = createElementNS(ns, 'Filter');
    const child = createElementNS(ns, 'FeatureId');
    filter.appendChild(child);
    child.setAttribute('fid', /** @type {string} */ (fid));
    node.appendChild(filter);
  }

  /**
   * @param {string|undefined} featurePrefix The prefix of the feature.
   * @param {string} featureType The type of the feature.
   * @return {string} The value of the typeName property.
   */
  function getTypeName(featurePrefix, featureType) {
    featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;
    const prefix = featurePrefix + ':';
    // The featureType already contains the prefix.
    if (featureType.startsWith(prefix)) {
      return featureType;
    }
    return prefix + featureType;
  }

  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDelete(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    assert(feature.getId() !== undefined, 26); // Features must have an id set
    const featureType = context['featureType'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const typeName = getTypeName(featurePrefix, featureType);
    node.setAttribute('typeName', typeName);
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    const fid = feature.getId();
    if (fid !== undefined) {
      writeOgcFidFilter(node, fid, objectStack);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {import("../Feature.js").default} feature Feature.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeUpdate(node, feature, objectStack) {
    const context = objectStack[objectStack.length - 1];
    assert(feature.getId() !== undefined, 27); // Features must have an id set
    const version = context['version'];
    const featureType = context['featureType'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const typeName = getTypeName(featurePrefix, featureType);
    const geometryName = feature.getGeometryName();
    node.setAttribute('typeName', typeName);
    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    const fid = feature.getId();
    if (fid !== undefined) {
      const keys = feature.getKeys();
      const values = [];
      for (let i = 0, ii = keys.length; i < ii; i++) {
        const value = feature.get(keys[i]);
        if (value !== undefined) {
          let name = keys[i];
          if (
            value &&
            typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'
          ) {
            name = geometryName;
          }
          values.push({name: name, value: value});
        }
      }
      pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */ ({
          version,
          'gmlVersion': context['gmlVersion'],
          node,
          'hasZ': context['hasZ'],
          'srsName': context['srsName'],
        }),
        TRANSACTION_SERIALIZERS,
        makeSimpleNodeFactory('Property'),
        values,
        objectStack
      );
      writeOgcFidFilter(node, fid, objectStack);
    }
  }

  /**
   * @param {Node} node Node.
   * @param {Object} pair Property name and value.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeProperty(node, pair, objectStack) {
    const context = objectStack[objectStack.length - 1];
    const version = context['version'];
    const ns = WFSNS[version];
    const name = createElementNS(ns, 'Name');
    const gmlVersion = context['gmlVersion'];
    node.appendChild(name);
    writeStringTextNode(name, pair.name);
    if (pair.value !== undefined && pair.value !== null) {
      const value = createElementNS(ns, 'Value');
      node.appendChild(value);
      if (
        pair.value &&
        typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===
          'function'
      ) {
        if (gmlVersion === 2) {
          GML2$1.prototype.writeGeometryElement(value, pair.value, objectStack);
        } else if (gmlVersion === 3) {
          GML3$1.prototype.writeGeometryElement(value, pair.value, objectStack);
        } else {
          GML32$1.prototype.writeGeometryElement(value, pair.value, objectStack);
        }
      } else {
        writeStringTextNode(value, pair.value);
      }
    }
  }

  /**
   * @param {Element} node Node.
   * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeNative(node, nativeElement, objectStack) {
    if (nativeElement.vendorId) {
      node.setAttribute('vendorId', nativeElement.vendorId);
    }
    if (nativeElement.safeToIgnore !== undefined) {
      node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));
    }
    if (nativeElement.value !== undefined) {
      writeStringTextNode(node, nativeElement.value);
    }
  }

  /**
   * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
   */
  const GETFEATURE_SERIALIZERS = {
    'http://www.opengis.net/wfs': {
      'Query': makeChildAppender(writeQuery),
    },
    'http://www.opengis.net/wfs/2.0': {
      'Query': makeChildAppender(writeQuery),
    },
    'http://www.opengis.net/ogc': {
      'During': makeChildAppender(writeDuringFilter),
      'And': makeChildAppender(writeLogicalFilter),
      'Or': makeChildAppender(writeLogicalFilter),
      'Not': makeChildAppender(writeNotFilter),
      'BBOX': makeChildAppender(writeBboxFilter),
      'Contains': makeChildAppender(writeSpatialFilter),
      'Intersects': makeChildAppender(writeSpatialFilter),
      'Within': makeChildAppender(writeSpatialFilter),
      'DWithin': makeChildAppender(writeDWithinFilter),
      'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNull': makeChildAppender(writeIsNullFilter),
      'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),
      'PropertyIsLike': makeChildAppender(writeIsLikeFilter),
    },
    'http://www.opengis.net/fes/2.0': {
      'During': makeChildAppender(writeDuringFilter),
      'And': makeChildAppender(writeLogicalFilter),
      'Or': makeChildAppender(writeLogicalFilter),
      'Not': makeChildAppender(writeNotFilter),
      'BBOX': makeChildAppender(writeBboxFilter),
      'Contains': makeChildAppender(writeSpatialFilter),
      'Disjoint': makeChildAppender(writeSpatialFilter),
      'Intersects': makeChildAppender(writeSpatialFilter),
      'ResourceId': makeChildAppender(writeResourceIdFilter),
      'Within': makeChildAppender(writeSpatialFilter),
      'DWithin': makeChildAppender(writeDWithinFilter),
      'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),
      'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),
      'PropertyIsNull': makeChildAppender(writeIsNullFilter),
      'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),
      'PropertyIsLike': makeChildAppender(writeIsLikeFilter),
    },
  };

  /**
   * @param {Element} node Node.
   * @param {string} featureType Feature type.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeQuery(node, featureType, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const version = context['version'];
    const featurePrefix = context['featurePrefix'];
    const featureNS = context['featureNS'];
    const propertyNames = context['propertyNames'];
    const srsName = context['srsName'];
    let typeName;
    // If feature prefix is not defined, we must not use the default prefix.
    if (featurePrefix) {
      typeName = getTypeName(featurePrefix, featureType);
    } else {
      typeName = featureType;
    }
    let typeNameAttr;
    if (version === '2.0.0') {
      typeNameAttr = 'typeNames';
    } else {
      typeNameAttr = 'typeName';
    }
    node.setAttribute(typeNameAttr, typeName);
    if (srsName) {
      node.setAttribute('srsName', srsName);
    }
    if (featureNS) {
      node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
    }
    const item = /** @type {import("../xml.js").NodeStackItem} */ (
      Object.assign({}, context)
    );
    item.node = node;
    pushSerializeAndPop(
      item,
      QUERY_SERIALIZERS,
      makeSimpleNodeFactory('PropertyName'),
      propertyNames,
      objectStack
    );
    const filter = context['filter'];
    if (filter) {
      const child = createElementNS(getFilterNS(version), 'Filter');
      node.appendChild(child);
      writeFilterCondition(child, filter, objectStack);
    }
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/Filter.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeFilterCondition(node, filter, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node};
    Object.assign(item, {context});
    pushSerializeAndPop(
      item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory(filter.getTagName()),
      [filter],
      objectStack
    );
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/Bbox.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeBboxFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    parent['srsName'] = filter.srsName;
    const format = GML_FORMATS[version];

    writePropertyName(version, node, filter.geometryName);
    format.prototype.writeGeometryElement(node, filter.extent, objectStack);
  }

  /**
   * @param {Element} node Element.
   * @param {import("./filter/ResourceId.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeResourceIdFilter(node, filter, objectStack) {
    node.setAttribute('rid', /** @type {string} */ (filter.rid));
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/Spatial.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeSpatialFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    parent['srsName'] = filter.srsName;
    const format = GML_FORMATS[version];

    writePropertyName(version, node, filter.geometryName);
    format.prototype.writeGeometryElement(node, filter.geometry, objectStack);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/DWithin.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDWithinFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    writeSpatialFilter(node, filter, objectStack);
    const distance = createElementNS(getFilterNS(version), 'Distance');
    writeStringTextNode(distance, filter.distance.toString());
    if (version === '2.0.0') {
      distance.setAttribute('uom', filter.unit);
    } else {
      distance.setAttribute('units', filter.unit);
    }
    node.appendChild(distance);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/During.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeDuringFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];

    writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);
    const timePeriod = createElementNS(GMLNS, 'TimePeriod');

    node.appendChild(timePeriod);

    const begin = createElementNS(GMLNS, 'begin');
    timePeriod.appendChild(begin);
    writeTimeInstant(begin, filter.begin);

    const end = createElementNS(GMLNS, 'end');
    timePeriod.appendChild(end);
    writeTimeInstant(end, filter.end);
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/LogicalNary.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeLogicalFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node};
    Object.assign(item, {context});
    const conditions = filter.conditions;
    for (let i = 0, ii = conditions.length; i < ii; ++i) {
      const condition = conditions[i];
      pushSerializeAndPop(
        item,
        GETFEATURE_SERIALIZERS,
        makeSimpleNodeFactory(condition.getTagName()),
        [condition],
        objectStack
      );
    }
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/Not.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeNotFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    /** @type {import("../xml.js").NodeStackItem} */
    const item = {node};
    Object.assign(item, {context});
    const condition = filter.condition;
    pushSerializeAndPop(
      item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory(condition.getTagName()),
      [condition],
      objectStack
    );
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/ComparisonBinary.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeComparisonFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    if (filter.matchCase !== undefined) {
      node.setAttribute('matchCase', filter.matchCase.toString());
    }
    writePropertyName(version, node, filter.propertyName);
    writeLiteral(version, node, '' + filter.expression);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/IsNull.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsNullFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    writePropertyName(version, node, filter.propertyName);
  }

  /**
   * @param {Node} node Node.
   * @param {import("./filter/IsBetween.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsBetweenFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    const ns = getFilterNS(version);

    writePropertyName(version, node, filter.propertyName);

    const lowerBoundary = createElementNS(ns, 'LowerBoundary');
    node.appendChild(lowerBoundary);
    writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);

    const upperBoundary = createElementNS(ns, 'UpperBoundary');
    node.appendChild(upperBoundary);
    writeLiteral(version, upperBoundary, '' + filter.upperBoundary);
  }

  /**
   * @param {Element} node Node.
   * @param {import("./filter/IsLike.js").default} filter Filter.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeIsLikeFilter(node, filter, objectStack) {
    const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const context = parent['context'];
    const version = context['version'];
    node.setAttribute('wildCard', filter.wildCard);
    node.setAttribute('singleChar', filter.singleChar);
    node.setAttribute('escapeChar', filter.escapeChar);
    if (filter.matchCase !== undefined) {
      node.setAttribute('matchCase', filter.matchCase.toString());
    }
    writePropertyName(version, node, filter.propertyName);
    writeLiteral(version, node, '' + filter.pattern);
  }

  /**
   * @param {string} ns Namespace.
   * @param {string} tagName Tag name.
   * @param {Node} node Node.
   * @param {string} value Value.
   */
  function writeExpression(ns, tagName, node, value) {
    const property = createElementNS(ns, tagName);
    writeStringTextNode(property, value);
    node.appendChild(property);
  }

  /**
   * @param {string} version Version.
   * @param {Node} node Node.
   * @param {string} value PropertyName value.
   */
  function writeLiteral(version, node, value) {
    writeExpression(getFilterNS(version), 'Literal', node, value);
  }

  /**
   * @param {string} version Version.
   * @param {Node} node Node.
   * @param {string} value PropertyName value.
   */
  function writePropertyName(version, node, value) {
    if (version === '2.0.0') {
      writeExpression(FESNS[version], 'ValueReference', node, value);
    } else {
      writeExpression(OGCNS[version], 'PropertyName', node, value);
    }
  }

  /**
   * @param {Node} node Node.
   * @param {string} time PropertyName value.
   */
  function writeTimeInstant(node, time) {
    const timeInstant = createElementNS(GMLNS, 'TimeInstant');
    node.appendChild(timeInstant);

    const timePosition = createElementNS(GMLNS, 'timePosition');
    timeInstant.appendChild(timePosition);
    writeStringTextNode(timePosition, time);
  }

  /**
   * @param {Element} node Node.
   * @param {Array<string>} featureTypes Feature types.
   * @param {Array<*>} objectStack Node stack.
   */
  function writeGetFeature(node, featureTypes, objectStack) {
    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
    const item = /** @type {import("../xml.js").NodeStackItem} */ (
      Object.assign({}, context)
    );
    item.node = node;
    pushSerializeAndPop(
      item,
      GETFEATURE_SERIALIZERS,
      makeSimpleNodeFactory('Query'),
      featureTypes,
      objectStack
    );
  }

  function getFilterNS(version) {
    let ns;
    if (version === '2.0.0') {
      ns = FESNS[version];
    } else {
      ns = OGCNS[version];
    }
    return ns;
  }

  var format_WFS = WFS;

  /**
   * @module ol/format/WKT
   */

  /**
   * Geometry constructors
   * @enum {function (new:import("../geom/Geometry.js").default, Array, import("../geom/Geometry.js").GeometryLayout)}
   */
  const GeometryConstructor = {
    'POINT': Point$1,
    'LINESTRING': LineString$1,
    'POLYGON': Polygon$1,
    'MULTIPOINT': MultiPoint$1,
    'MULTILINESTRING': MultiLineString$1,
    'MULTIPOLYGON': MultiPolygon$1,
  };

  /**
   * @typedef {Object} Options
   * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into
   * multiple features on reading.
   */

  /**
   * @typedef {Object} Token
   * @property {number} type Type.
   * @property {number|string} [value] Value.
   * @property {number} position Position.
   */

  /**
   * @const
   * @type {string}
   */
  const EMPTY = 'EMPTY';

  /**
   * @const
   * @type {string}
   */
  const Z = 'Z';

  /**
   * @const
   * @type {string}
   */
  const M = 'M';

  /**
   * @const
   * @type {string}
   */
  const ZM = 'ZM';

  /**
   * @const
   * @enum {number}
   */
  const TokenType = {
    START: 0,
    TEXT: 1,
    LEFT_PAREN: 2,
    RIGHT_PAREN: 3,
    NUMBER: 4,
    COMMA: 5,
    EOF: 6,
  };

  /**
   * @type {Object<import("../geom/Geometry.js").Type, string>}
   */
  const wktTypeLookup = {
    Point: 'POINT',
    LineString: 'LINESTRING',
    Polygon: 'POLYGON',
    MultiPoint: 'MULTIPOINT',
    MultiLineString: 'MULTILINESTRING',
    MultiPolygon: 'MULTIPOLYGON',
    GeometryCollection: 'GEOMETRYCOLLECTION',
    Circle: 'CIRCLE',
  };

  /**
   * Class to tokenize a WKT string.
   */
  class Lexer {
    /**
     * @param {string} wkt WKT string.
     */
    constructor(wkt) {
      /**
       * @type {string}
       */
      this.wkt = wkt;

      /**
       * @type {number}
       * @private
       */
      this.index_ = -1;
    }

    /**
     * @param {string} c Character.
     * @return {boolean} Whether the character is alphabetic.
     * @private
     */
    isAlpha_(c) {
      return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }

    /**
     * @param {string} c Character.
     * @param {boolean} [decimal] Whether the string number
     *     contains a dot, i.e. is a decimal number.
     * @return {boolean} Whether the character is numeric.
     * @private
     */
    isNumeric_(c, decimal) {
      decimal = decimal !== undefined ? decimal : false;
      return (c >= '0' && c <= '9') || (c == '.' && !decimal);
    }

    /**
     * @param {string} c Character.
     * @return {boolean} Whether the character is whitespace.
     * @private
     */
    isWhiteSpace_(c) {
      return c == ' ' || c == '\t' || c == '\r' || c == '\n';
    }

    /**
     * @return {string} Next string character.
     * @private
     */
    nextChar_() {
      return this.wkt.charAt(++this.index_);
    }

    /**
     * Fetch and return the next token.
     * @return {Token} Next string token.
     */
    nextToken() {
      const c = this.nextChar_();
      const position = this.index_;
      /** @type {number|string} */
      let value = c;
      let type;

      if (c == '(') {
        type = TokenType.LEFT_PAREN;
      } else if (c == ',') {
        type = TokenType.COMMA;
      } else if (c == ')') {
        type = TokenType.RIGHT_PAREN;
      } else if (this.isNumeric_(c) || c == '-') {
        type = TokenType.NUMBER;
        value = this.readNumber_();
      } else if (this.isAlpha_(c)) {
        type = TokenType.TEXT;
        value = this.readText_();
      } else if (this.isWhiteSpace_(c)) {
        return this.nextToken();
      } else if (c === '') {
        type = TokenType.EOF;
      } else {
        throw new Error('Unexpected character: ' + c);
      }

      return {position: position, value: value, type: type};
    }

    /**
     * @return {number} Numeric token value.
     * @private
     */
    readNumber_() {
      let c;
      const index = this.index_;
      let decimal = false;
      let scientificNotation = false;
      do {
        if (c == '.') {
          decimal = true;
        } else if (c == 'e' || c == 'E') {
          scientificNotation = true;
        }
        c = this.nextChar_();
      } while (
        this.isNumeric_(c, decimal) ||
        // if we haven't detected a scientific number before, 'e' or 'E'
        // hint that we should continue to read
        (!scientificNotation && (c == 'e' || c == 'E')) ||
        // once we know that we have a scientific number, both '-' and '+'
        // are allowed
        (scientificNotation && (c == '-' || c == '+'))
      );
      return parseFloat(this.wkt.substring(index, this.index_--));
    }

    /**
     * @return {string} String token value.
     * @private
     */
    readText_() {
      let c;
      const index = this.index_;
      do {
        c = this.nextChar_();
      } while (this.isAlpha_(c));
      return this.wkt.substring(index, this.index_--).toUpperCase();
    }
  }

  /**
   * Class to parse the tokens from the WKT string.
   */
  class Parser {
    /**
     * @param {Lexer} lexer The lexer.
     */
    constructor(lexer) {
      /**
       * @type {Lexer}
       * @private
       */
      this.lexer_ = lexer;

      /**
       * @type {Token}
       * @private
       */
      this.token_ = {
        position: 0,
        type: TokenType.START,
      };

      /**
       * @type {import("../geom/Geometry.js").GeometryLayout}
       * @private
       */
      this.layout_ = 'XY';
    }

    /**
     * Fetch the next token form the lexer and replace the active token.
     * @private
     */
    consume_() {
      this.token_ = this.lexer_.nextToken();
    }

    /**
     * Tests if the given type matches the type of the current token.
     * @param {TokenType} type Token type.
     * @return {boolean} Whether the token matches the given type.
     */
    isTokenType(type) {
      return this.token_.type == type;
    }

    /**
     * If the given type matches the current token, consume it.
     * @param {TokenType} type Token type.
     * @return {boolean} Whether the token matches the given type.
     */
    match(type) {
      const isMatch = this.isTokenType(type);
      if (isMatch) {
        this.consume_();
      }
      return isMatch;
    }

    /**
     * Try to parse the tokens provided by the lexer.
     * @return {import("../geom/Geometry.js").default} The geometry.
     */
    parse() {
      this.consume_();
      return this.parseGeometry_();
    }

    /**
     * Try to parse the dimensional info.
     * @return {import("../geom/Geometry.js").GeometryLayout} The layout.
     * @private
     */
    parseGeometryLayout_() {
      /** @type {import("../geom/Geometry.js").GeometryLayout} */
      let layout = 'XY';
      const dimToken = this.token_;
      if (this.isTokenType(TokenType.TEXT)) {
        const dimInfo = dimToken.value;
        if (dimInfo === Z) {
          layout = 'XYZ';
        } else if (dimInfo === M) {
          layout = 'XYM';
        } else if (dimInfo === ZM) {
          layout = 'XYZM';
        }
        if (layout !== 'XY') {
          this.consume_();
        }
      }
      return layout;
    }

    /**
     * @return {Array<import("../geom/Geometry.js").default>} A collection of geometries.
     * @private
     */
    parseGeometryCollectionText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const geometries = [];
        do {
          geometries.push(this.parseGeometry_());
        } while (this.match(TokenType.COMMA));
        if (this.match(TokenType.RIGHT_PAREN)) {
          return geometries;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<number>} All values in a point.
     * @private
     */
    parsePointText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePoint_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<number>>} All points in a linestring.
     * @private
     */
    parseLineStringText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePointList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<Array<number>>>} All points in a polygon.
     * @private
     */
    parsePolygonText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parseLineStringTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<number>>} All points in a multipoint.
     * @private
     */
    parseMultiPointText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        let coordinates;
        if (this.token_.type == TokenType.LEFT_PAREN) {
          coordinates = this.parsePointTextList_();
        } else {
          coordinates = this.parsePointList_();
        }
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<Array<number>>>} All linestring points
     *                                          in a multilinestring.
     * @private
     */
    parseMultiLineStringText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parseLineStringTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<Array<Array<number>>>>} All polygon points in a multipolygon.
     * @private
     */
    parseMultiPolygonText_() {
      if (this.match(TokenType.LEFT_PAREN)) {
        const coordinates = this.parsePolygonTextList_();
        if (this.match(TokenType.RIGHT_PAREN)) {
          return coordinates;
        }
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<number>} A point.
     * @private
     */
    parsePoint_() {
      const coordinates = [];
      const dimensions = this.layout_.length;
      for (let i = 0; i < dimensions; ++i) {
        const token = this.token_;
        if (this.match(TokenType.NUMBER)) {
          coordinates.push(/** @type {number} */ (token.value));
        } else {
          break;
        }
      }
      if (coordinates.length == dimensions) {
        return coordinates;
      }
      throw new Error(this.formatErrorMessage_());
    }

    /**
     * @return {Array<Array<number>>} An array of points.
     * @private
     */
    parsePointList_() {
      const coordinates = [this.parsePoint_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePoint_());
      }
      return coordinates;
    }

    /**
     * @return {Array<Array<number>>} An array of points.
     * @private
     */
    parsePointTextList_() {
      const coordinates = [this.parsePointText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePointText_());
      }
      return coordinates;
    }

    /**
     * @return {Array<Array<Array<number>>>} An array of points.
     * @private
     */
    parseLineStringTextList_() {
      const coordinates = [this.parseLineStringText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parseLineStringText_());
      }
      return coordinates;
    }

    /**
     * @return {Array<Array<Array<Array<number>>>>} An array of points.
     * @private
     */
    parsePolygonTextList_() {
      const coordinates = [this.parsePolygonText_()];
      while (this.match(TokenType.COMMA)) {
        coordinates.push(this.parsePolygonText_());
      }
      return coordinates;
    }

    /**
     * @return {boolean} Whether the token implies an empty geometry.
     * @private
     */
    isEmptyGeometry_() {
      const isEmpty =
        this.isTokenType(TokenType.TEXT) && this.token_.value == EMPTY;
      if (isEmpty) {
        this.consume_();
      }
      return isEmpty;
    }

    /**
     * Create an error message for an unexpected token error.
     * @return {string} Error message.
     * @private
     */
    formatErrorMessage_() {
      return (
        'Unexpected `' +
        this.token_.value +
        '` at position ' +
        this.token_.position +
        ' in `' +
        this.lexer_.wkt +
        '`'
      );
    }

    /**
     * @return {import("../geom/Geometry.js").default} The geometry.
     * @private
     */
    parseGeometry_() {
      const token = this.token_;
      if (this.match(TokenType.TEXT)) {
        const geomType = /** @type {string} */ (token.value);
        this.layout_ = this.parseGeometryLayout_();
        const isEmpty = this.isEmptyGeometry_();
        if (geomType == 'GEOMETRYCOLLECTION') {
          if (isEmpty) {
            return new GeometryCollection$1([]);
          }
          const geometries = this.parseGeometryCollectionText_();
          return new GeometryCollection$1(geometries);
        }
        const ctor = GeometryConstructor[geomType];
        if (!ctor) {
          throw new Error('Invalid geometry type: ' + geomType);
        }

        let coordinates;

        if (isEmpty) {
          if (geomType == 'POINT') {
            coordinates = [NaN, NaN];
          } else {
            coordinates = [];
          }
        } else {
          switch (geomType) {
            case 'POINT': {
              coordinates = this.parsePointText_();
              break;
            }
            case 'LINESTRING': {
              coordinates = this.parseLineStringText_();
              break;
            }
            case 'POLYGON': {
              coordinates = this.parsePolygonText_();
              break;
            }
            case 'MULTIPOINT': {
              coordinates = this.parseMultiPointText_();
              break;
            }
            case 'MULTILINESTRING': {
              coordinates = this.parseMultiLineStringText_();
              break;
            }
            case 'MULTIPOLYGON': {
              coordinates = this.parseMultiPolygonText_();
              break;
            }
          }
        }

        return new ctor(coordinates, this.layout_);
      }
      throw new Error(this.formatErrorMessage_());
    }
  }

  /**
   * @classdesc
   * Geometry format for reading and writing data in the `WellKnownText` (WKT)
   * format.
   *
   * @api
   */
  class WKT extends TextFeature$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      options = options ? options : {};

      /**
       * Split GeometryCollection into multiple features.
       * @type {boolean}
       * @private
       */
      this.splitCollection_ =
        options.splitCollection !== undefined ? options.splitCollection : false;
    }

    /**
     * Parse a WKT string.
     * @param {string} wkt WKT string.
     * @return {import("../geom/Geometry.js").default}
     *     The geometry created.
     * @private
     */
    parse_(wkt) {
      const lexer = new Lexer(wkt);
      const parser = new Parser(lexer);
      return parser.parse();
    }

    /**
     * @protected
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @return {import("../Feature.js").default} Feature.
     */
    readFeatureFromText(text, options) {
      const geom = this.readGeometryFromText(text, options);
      const feature = new Feature$1();
      feature.setGeometry(geom);
      return feature;
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {Array<Feature>} Features.
     */
    readFeaturesFromText(text, options) {
      let geometries = [];
      const geometry = this.readGeometryFromText(text, options);
      if (this.splitCollection_ && geometry.getType() == 'GeometryCollection') {
        geometries = /** @type {GeometryCollection} */ (
          geometry
        ).getGeometriesArray();
      } else {
        geometries = [geometry];
      }
      const features = [];
      for (let i = 0, ii = geometries.length; i < ii; ++i) {
        const feature = new Feature$1();
        feature.setGeometry(geometries[i]);
        features.push(feature);
      }
      return features;
    }

    /**
     * @param {string} text Text.
     * @param {import("./Feature.js").ReadOptions} [options] Read options.
     * @protected
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    readGeometryFromText(text, options) {
      const geometry = this.parse_(text);
      return transformGeometryWithOptions(geometry, false, options);
    }

    /**
     * @param {import("../Feature.js").default} feature Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeatureText(feature, options) {
      const geometry = feature.getGeometry();
      if (geometry) {
        return this.writeGeometryText(geometry, options);
      }
      return '';
    }

    /**
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeFeaturesText(features, options) {
      if (features.length == 1) {
        return this.writeFeatureText(features[0], options);
      }
      const geometries = [];
      for (let i = 0, ii = features.length; i < ii; ++i) {
        geometries.push(features[i].getGeometry());
      }
      const collection = new GeometryCollection$1(geometries);
      return this.writeGeometryText(collection, options);
    }

    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions} [options] Write options.
     * @protected
     * @return {string} Text.
     */
    writeGeometryText(geometry, options) {
      return encode(transformGeometryWithOptions(geometry, true, options));
    }
  }

  /**
   * @param {Point} geom Point geometry.
   * @return {string} Coordinates part of Point as WKT.
   */
  function encodePointGeometry(geom) {
    const coordinates = geom.getCoordinates();
    if (coordinates.length === 0) {
      return '';
    }
    return coordinates.join(' ');
  }

  /**
   * @param {MultiPoint} geom MultiPoint geometry.
   * @return {string} Coordinates part of MultiPoint as WKT.
   */
  function encodeMultiPointGeometry(geom) {
    const array = [];
    const components = geom.getPoints();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodePointGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {GeometryCollection} geom GeometryCollection geometry.
   * @return {string} Coordinates part of GeometryCollection as WKT.
   */
  function encodeGeometryCollectionGeometry(geom) {
    const array = [];
    const geoms = geom.getGeometries();
    for (let i = 0, ii = geoms.length; i < ii; ++i) {
      array.push(encode(geoms[i]));
    }
    return array.join(',');
  }

  /**
   * @param {LineString|import("../geom/LinearRing.js").default} geom LineString geometry.
   * @return {string} Coordinates part of LineString as WKT.
   */
  function encodeLineStringGeometry(geom) {
    const coordinates = geom.getCoordinates();
    const array = [];
    for (let i = 0, ii = coordinates.length; i < ii; ++i) {
      array.push(coordinates[i].join(' '));
    }
    return array.join(',');
  }

  /**
   * @param {MultiLineString} geom MultiLineString geometry.
   * @return {string} Coordinates part of MultiLineString as WKT.
   */
  function encodeMultiLineStringGeometry(geom) {
    const array = [];
    const components = geom.getLineStrings();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodeLineStringGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {Polygon} geom Polygon geometry.
   * @return {string} Coordinates part of Polygon as WKT.
   */
  function encodePolygonGeometry(geom) {
    const array = [];
    const rings = geom.getLinearRings();
    for (let i = 0, ii = rings.length; i < ii; ++i) {
      array.push('(' + encodeLineStringGeometry(rings[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {MultiPolygon} geom MultiPolygon geometry.
   * @return {string} Coordinates part of MultiPolygon as WKT.
   */
  function encodeMultiPolygonGeometry(geom) {
    const array = [];
    const components = geom.getPolygons();
    for (let i = 0, ii = components.length; i < ii; ++i) {
      array.push('(' + encodePolygonGeometry(components[i]) + ')');
    }
    return array.join(',');
  }

  /**
   * @param {import("../geom/SimpleGeometry.js").default} geom SimpleGeometry geometry.
   * @return {string} Potential dimensional information for WKT type.
   */
  function encodeGeometryLayout(geom) {
    const layout = geom.getLayout();
    let dimInfo = '';
    if (layout === 'XYZ' || layout === 'XYZM') {
      dimInfo += Z;
    }
    if (layout === 'XYM' || layout === 'XYZM') {
      dimInfo += M;
    }
    return dimInfo;
  }

  /**
   * @const
   * @type {Object<string, function(import("../geom/Geometry.js").default): string>}
   */
  const GeometryEncoder = {
    'Point': encodePointGeometry,
    'LineString': encodeLineStringGeometry,
    'Polygon': encodePolygonGeometry,
    'MultiPoint': encodeMultiPointGeometry,
    'MultiLineString': encodeMultiLineStringGeometry,
    'MultiPolygon': encodeMultiPolygonGeometry,
    'GeometryCollection': encodeGeometryCollectionGeometry,
  };

  /**
   * Encode a geometry as WKT.
   * @param {import("../geom/Geometry.js").default} geom The geometry to encode.
   * @return {string} WKT string for the geometry.
   */
  function encode(geom) {
    const type = geom.getType();
    const geometryEncoder = GeometryEncoder[type];
    const enc = geometryEncoder(geom);
    let wktType = wktTypeLookup[type];
    if (typeof (/** @type {?} */ (geom).getFlatCoordinates) === 'function') {
      const dimInfo = encodeGeometryLayout(
        /** @type {import("../geom/SimpleGeometry.js").default} */ (geom)
      );
      if (dimInfo.length > 0) {
        wktType += ' ' + dimInfo;
      }
    }
    if (enc.length === 0) {
      return wktType + ' ' + EMPTY;
    }
    return wktType + '(' + enc + ')';
  }

  var format_WKT = WKT;

  /**
   * @module ol/interaction/DragAndDrop
   */

  /**
   * @typedef {Object} Options
   * @property {Array<typeof import("../format/Feature.js").default|import("../format/Feature.js").default>} [formatConstructors] Format constructors
   * (and/or formats pre-constructed with options).
   * @property {import("../source/Vector.js").default} [source] Optional vector source where features will be added.  If a source is provided
   * all existing features will be removed and new features will be added when
   * they are dropped on the target.  If you want to add features to a vector
   * source without removing the existing features (append only), instead of
   * providing the source option listen for the "addfeatures" event.
   * @property {import("../proj.js").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
   * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.
   */

  /**
   * @enum {string}
   */
  const DragAndDropEventType = {
    /**
     * Triggered when features are added
     * @event DragAndDropEvent#addfeatures
     * @api
     */
    ADD_FEATURES: 'addfeatures',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
   * of this type.
   */
  class DragAndDropEvent extends BaseEvent {
    /**
     * @param {DragAndDropEventType} type Type.
     * @param {File} file File.
     * @param {Array<import("../Feature.js").default>} [features] Features.
     * @param {import("../proj/Projection.js").default} [projection] Projection.
     */
    constructor(type, file, features, projection) {
      super(type);

      /**
       * The features parsed from dropped data.
       * @type {Array<import("../Feature.js").FeatureLike>|undefined}
       * @api
       */
      this.features = features;

      /**
       * The dropped file.
       * @type {File}
       * @api
       */
      this.file = file;

      /**
       * The feature projection.
       * @type {import("../proj/Projection.js").default|undefined}
       * @api
       */
      this.projection = projection;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'addfeatures', DragAndDropEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'addfeatures', Return>} DragAndDropOnSignature
   */

  /**
   * @classdesc
   * Handles input of vector data by drag and drop.
   *
   * @api
   *
   * @fires DragAndDropEvent
   */
  class DragAndDrop extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        handleEvent: TRUE,
      });

      /***
       * @type {DragAndDropOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {DragAndDropOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {DragAndDropOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {boolean}
       */
      this.readAsBuffer_ = false;

      /**
       * @private
       * @type {Array<import("../format/Feature.js").default>}
       */
      this.formats_ = [];
      const formatConstructors = options.formatConstructors
        ? options.formatConstructors
        : [];
      for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {
        let format = formatConstructors[i];
        if (typeof format === 'function') {
          format = new format();
        }
        this.formats_.push(format);
        this.readAsBuffer_ =
          this.readAsBuffer_ || format.getType() === 'arraybuffer';
      }

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.projection_ = options.projection
        ? get$2(options.projection)
        : null;

      /**
       * @private
       * @type {?Array<import("../events.js").EventsKey>}
       */
      this.dropListenKeys_ = null;

      /**
       * @private
       * @type {import("../source/Vector.js").default}
       */
      this.source_ = options.source || null;

      /**
       * @private
       * @type {HTMLElement|null}
       */
      this.target = options.target ? options.target : null;
    }

    /**
     * @param {File} file File.
     * @param {Event} event Load event.
     * @private
     */
    handleResult_(file, event) {
      const result = event.target.result;
      const map = this.getMap();
      let projection = this.projection_;
      if (!projection) {
        projection = getUserProjection();
        if (!projection) {
          const view = map.getView();
          projection = view.getProjection();
        }
      }

      let text;
      const formats = this.formats_;
      for (let i = 0, ii = formats.length; i < ii; ++i) {
        const format = formats[i];
        let input = result;
        if (this.readAsBuffer_ && format.getType() !== 'arraybuffer') {
          if (text === undefined) {
            text = new TextDecoder().decode(result);
          }
          input = text;
        }
        const features = this.tryReadFeatures_(format, input, {
          featureProjection: projection,
        });
        if (features && features.length > 0) {
          if (this.source_) {
            this.source_.clear();
            this.source_.addFeatures(features);
          }
          this.dispatchEvent(
            new DragAndDropEvent(
              DragAndDropEventType.ADD_FEATURES,
              file,
              features,
              projection
            )
          );
          break;
        }
      }
    }

    /**
     * @private
     */
    registerListeners_() {
      const map = this.getMap();
      if (map) {
        const dropArea = this.target ? this.target : map.getViewport();
        this.dropListenKeys_ = [
          listen(dropArea, EventType.DROP, this.handleDrop, this),
          listen(dropArea, EventType.DRAGENTER, this.handleStop, this),
          listen(dropArea, EventType.DRAGOVER, this.handleStop, this),
          listen(dropArea, EventType.DROP, this.handleStop, this),
        ];
      }
    }

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    setActive(active) {
      if (!this.getActive() && active) {
        this.registerListeners_();
      }
      if (this.getActive() && !active) {
        this.unregisterListeners_();
      }
      super.setActive(active);
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     */
    setMap(map) {
      this.unregisterListeners_();
      super.setMap(map);
      if (this.getActive()) {
        this.registerListeners_();
      }
    }

    /**
     * @param {import("../format/Feature.js").default} format Format.
     * @param {string} text Text.
     * @param {import("../format/Feature.js").ReadOptions} options Read options.
     * @private
     * @return {Array<import("../Feature.js").default>} Features.
     */
    tryReadFeatures_(format, text, options) {
      try {
        return (
          /** @type {Array<import("../Feature.js").default>} */
          (format.readFeatures(text, options))
        );
      } catch (e) {
        return null;
      }
    }

    /**
     * @private
     */
    unregisterListeners_() {
      if (this.dropListenKeys_) {
        this.dropListenKeys_.forEach(unlistenByKey);
        this.dropListenKeys_ = null;
      }
    }

    /**
     * @param {DragEvent} event Event.
     */
    handleDrop(event) {
      const files = event.dataTransfer.files;
      for (let i = 0, ii = files.length; i < ii; ++i) {
        const file = files.item(i);
        const reader = new FileReader();
        reader.addEventListener(
          EventType.LOAD,
          this.handleResult_.bind(this, file)
        );
        if (this.readAsBuffer_) {
          reader.readAsArrayBuffer(file);
        } else {
          reader.readAsText(file);
        }
      }
    }

    /**
     * @param {DragEvent} event Event.
     */
    handleStop(event) {
      event.stopPropagation();
      event.preventDefault();
      event.dataTransfer.dropEffect = 'copy';
    }
  }

  var DragAndDrop$1 = DragAndDrop;

  /**
   * @module ol/interaction/DragRotateAndZoom
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.shiftKeyOnly}.
   * @property {number} [duration=400] Animation duration in milliseconds.
   */

  /**
   * @classdesc
   * Allows the user to zoom and rotate the map by clicking and dragging
   * on the map.  By default, this interaction is limited to when the shift
   * key is held down.
   *
   * This interaction is only supported for mouse devices.
   *
   * And this interaction is not included in the default interactions.
   * @api
   */
  class DragRotateAndZoom extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : shiftKeyOnly;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastAngle_ = undefined;

      /**
       * @private
       * @type {number|undefined}
       */
      this.lastMagnitude_ = undefined;

      /**
       * @private
       * @type {number}
       */
      this.lastScaleDelta_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.duration_ = options.duration !== undefined ? options.duration : 400;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return;
      }

      const map = mapBrowserEvent.map;
      const size = map.getSize();
      const offset = mapBrowserEvent.pixel;
      const deltaX = offset[0] - size[0] / 2;
      const deltaY = size[1] / 2 - offset[1];
      const theta = Math.atan2(deltaY, deltaX);
      const magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      const view = map.getView();
      if (this.lastAngle_ !== undefined) {
        const angleDelta = this.lastAngle_ - theta;
        view.adjustRotationInternal(angleDelta);
      }
      this.lastAngle_ = theta;
      if (this.lastMagnitude_ !== undefined) {
        view.adjustResolutionInternal(this.lastMagnitude_ / magnitude);
      }
      if (this.lastMagnitude_ !== undefined) {
        this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
      }
      this.lastMagnitude_ = magnitude;
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return true;
      }

      const map = mapBrowserEvent.map;
      const view = map.getView();
      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
      view.endInteraction(this.duration_, direction);
      this.lastScaleDelta_ = 0;
      return false;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      if (!mouseOnly(mapBrowserEvent)) {
        return false;
      }

      if (this.condition_(mapBrowserEvent)) {
        mapBrowserEvent.map.getView().beginInteraction();
        this.lastAngle_ = undefined;
        this.lastMagnitude_ = undefined;
        return true;
      }
      return false;
    }
  }

  var DragRotateAndZoom$1 = DragRotateAndZoom;

  /**
   * @module ol/interaction/Draw
   */

  /**
   * @typedef {Object} Options
   * @property {import("../geom/Geometry.js").Type} type Geometry type of
   * the geometries being drawn with this instance.
   * @property {number} [clickTolerance=6] The maximum distance in pixels between
   * "down" and "up" for a "up" event to be considered a "click" event and
   * actually add a point/vertex to the geometry being drawn.  The default of `6`
   * was chosen for the draw interaction to behave correctly on mouse as well as
   * on touch devices.
   * @property {import("../Collection.js").default<Feature>} [features]
   * Destination collection for the drawn features.
   * @property {VectorSource} [source] Destination source for
   * the drawn features.
   * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
   * before the current vertex can be dragged to its exact position.
   * @property {number} [snapTolerance=12] Pixel distance for snapping to the
   * drawing finish. Must be greater than `0`.
   * @property {boolean} [stopClick=false] Stop click, singleclick, and
   * doubleclick events from firing during drawing.
   * @property {number} [maxPoints] The number of points that can be drawn before
   * a polygon ring or line string is finished. By default there is no
   * restriction.
   * @property {number} [minPoints] The number of points that must be drawn
   * before a polygon ring or line string can be finished. Default is `3` for
   * polygon rings and `2` for line strings.
   * @property {import("../events/condition.js").Condition} [finishCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether the drawing can be finished. Not used when drawing
   * POINT or MULTI_POINT geometries.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike} [style]
   * Style for sketch features.
   * @property {GeometryFunction} [geometryFunction]
   * Function that is called when a geometry's coordinates are updated.
   * @property {string} [geometryName] Geometry name to use for features created
   * by the draw interaction.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,
   * adds a vertex or deactivates freehand drawing.
   * @property {boolean} [freehand=false] Operate in freehand mode for lines,
   * polygons, and circles.  This makes the interaction always operate in freehand
   * mode and takes precedence over any `freehandCondition` option.
   * @property {import("../events/condition.js").Condition} [freehandCondition]
   * Condition that activates freehand drawing for lines and polygons. This
   * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether that event should be handled. The
   * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the
   * Shift key activates freehand drawing.
   * @property {boolean|import("../events/condition.js").Condition} [trace=false] Trace a portion of another geometry.
   * Ignored when in freehand mode.
   * @property {VectorSource} [traceSource] Source for features to trace.  If tracing is active and a `traceSource` is
   * not provided, the interaction's `source` will be used.  Tracing requires that the interaction is configured with
   * either a `traceSource` or a `source`.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   * @property {import("../geom/Geometry.js").GeometryLayout} [geometryLayout='XY'] Layout of the
   * feature geometries created by the draw interaction.
   */

  /**
   * Coordinate type when drawing points.
   * @typedef {import("../coordinate.js").Coordinate} PointCoordType
   */

  /**
   * Coordinate type when drawing lines.
   * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
   */

  /**
   * Coordinate type when drawing polygons.
   * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
   */

  /**
   * Types used for drawing coordinates.
   * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
   */

  /**
   * @typedef {Object} TraceState
   * @property {boolean} active Tracing active.
   * @property {import("../pixel.js").Pixel} [startPx] The initially clicked pixel location.
   * @property {Array<TraceTarget>} [targets] Targets available for tracing.
   * @property {number} [targetIndex] The index of the currently traced target.  A value of -1 indicates
   * that no trace target is active.
   */

  /**
   * @typedef {Object} TraceTarget
   * @property {Array<import("../coordinate.js").Coordinate>} coordinates Target coordinates.
   * @property {boolean} ring The target coordinates are a linear ring.
   * @property {number} startIndex The index of first traced coordinate.  A fractional index represents an
   * edge intersection.  Index values for rings will wrap (may be negative or larger than coordinates length).
   * @property {number} endIndex The index of last traced coordinate.  Details from startIndex also apply here.
   */

  /**
   * Function that takes an array of coordinates and an optional existing geometry
   * and a projection as arguments, and returns a geometry. The optional existing
   * geometry is the geometry that is returned when the function is called without
   * a second argument.
   * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default,
   *     import("../proj/Projection.js").default):
   *     import("../geom/SimpleGeometry.js").default} GeometryFunction
   */

  /**
   * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode
   * Draw mode.  This collapses multi-part geometry types with their single-part
   * cousins.
   */

  /**
   * @enum {string}
   */
  const DrawEventType = {
    /**
     * Triggered upon feature draw start
     * @event DrawEvent#drawstart
     * @api
     */
    DRAWSTART: 'drawstart',
    /**
     * Triggered upon feature draw end
     * @event DrawEvent#drawend
     * @api
     */
    DRAWEND: 'drawend',
    /**
     * Triggered upon feature draw abortion
     * @event DrawEvent#drawabort
     * @api
     */
    DRAWABORT: 'drawabort',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
   * instances of this type.
   */
  class DrawEvent extends BaseEvent {
    /**
     * @param {DrawEventType} type Type.
     * @param {Feature} feature The feature drawn.
     */
    constructor(type, feature) {
      super(type);

      /**
       * The feature being drawn.
       * @type {Feature}
       * @api
       */
      this.feature = feature;
    }
  }

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The coordinate.
   * @param {Array<Feature>} features The candidate features.
   * @return {Array<TraceTarget>} The trace targets.
   */
  function getTraceTargets(coordinate, features) {
    /**
     * @type {Array<TraceTarget>}
     */
    const targets = [];

    for (let i = 0; i < features.length; ++i) {
      const feature = features[i];
      const geometry = feature.getGeometry();
      appendGeometryTraceTargets(coordinate, geometry, targets);
    }

    return targets;
  }

  /**
   * @param {import("../coordinate.js").Coordinate} a One coordinate.
   * @param {import("../coordinate.js").Coordinate} b Another coordinate.
   * @return {number} The squared distance between the two coordinates.
   */
  function getSquaredDistance(a, b) {
    return squaredDistance$1(a[0], a[1], b[0], b[1]);
  }

  /**
   * @param {LineCoordType} coordinates The ring coordinates.
   * @param {number} index The index.  May be wrapped.
   * @return {import("../coordinate.js").Coordinate} The coordinate.
   */
  function getCoordinate(coordinates, index) {
    const count = coordinates.length;
    if (index < 0) {
      return coordinates[index + count];
    }
    if (index >= count) {
      return coordinates[index - count];
    }
    return coordinates[index];
  }

  /**
   * Get the cumulative squared distance along a ring path.  The end index index may be "wrapped" and it may
   * be less than the start index to indicate the direction of travel.  The start and end index may have
   * a fractional part to indicate a point between two coordinates.
   * @param {LineCoordType} coordinates Ring coordinates.
   * @param {number} startIndex The start index.
   * @param {number} endIndex The end index.
   * @return {number} The cumulative squared distance along the ring path.
   */
  function getCumulativeSquaredDistance(coordinates, startIndex, endIndex) {
    let lowIndex, highIndex;
    if (startIndex < endIndex) {
      lowIndex = startIndex;
      highIndex = endIndex;
    } else {
      lowIndex = endIndex;
      highIndex = startIndex;
    }
    const lowWholeIndex = Math.ceil(lowIndex);
    const highWholeIndex = Math.floor(highIndex);

    if (lowWholeIndex > highWholeIndex) {
      // both start and end are on the same segment
      const start = interpolateCoordinate(coordinates, lowIndex);
      const end = interpolateCoordinate(coordinates, highIndex);
      return getSquaredDistance(start, end);
    }

    let sd = 0;

    if (lowIndex < lowWholeIndex) {
      const start = interpolateCoordinate(coordinates, lowIndex);
      const end = getCoordinate(coordinates, lowWholeIndex);
      sd += getSquaredDistance(start, end);
    }

    if (highWholeIndex < highIndex) {
      const start = getCoordinate(coordinates, highWholeIndex);
      const end = interpolateCoordinate(coordinates, highIndex);
      sd += getSquaredDistance(start, end);
    }

    for (let i = lowWholeIndex; i < highWholeIndex - 1; ++i) {
      const start = getCoordinate(coordinates, i);
      const end = getCoordinate(coordinates, i + 1);
      sd += getSquaredDistance(start, end);
    }

    return sd;
  }

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The coordinate.
   * @param {import("../geom/Geometry.js").default} geometry The candidate geometry.
   * @param {Array<TraceTarget>} targets The trace targets.
   */
  function appendGeometryTraceTargets(coordinate, geometry, targets) {
    if (geometry instanceof LineString$1) {
      appendTraceTarget(coordinate, geometry.getCoordinates(), false, targets);
      return;
    }
    if (geometry instanceof MultiLineString$1) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        appendTraceTarget(coordinate, coordinates[i], false, targets);
      }
      return;
    }
    if (geometry instanceof Polygon$1) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length; i < ii; ++i) {
        appendTraceTarget(coordinate, coordinates[i], true, targets);
      }
      return;
    }
    if (geometry instanceof MultiPolygon$1) {
      const polys = geometry.getCoordinates();
      for (let i = 0, ii = polys.length; i < ii; ++i) {
        const coordinates = polys[i];
        for (let j = 0, jj = coordinates.length; j < jj; ++j) {
          appendTraceTarget(coordinate, coordinates[j], true, targets);
        }
      }
      return;
    }
    if (geometry instanceof GeometryCollection$1) {
      const geometries = geometry.getGeometries();
      for (let i = 0; i < geometries.length; ++i) {
        appendGeometryTraceTargets(coordinate, geometries[i], targets);
      }
      return;
    }
    // other types cannot be traced
  }

  /**
   * @typedef {Object} TraceTargetUpdateInfo
   * @property {number} index The new target index.
   * @property {number} endIndex The new segment end index.
   */

  /**
   * @type {TraceTargetUpdateInfo}
   */
  const sharedUpdateInfo = {index: -1, endIndex: NaN};

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The coordinate.
   * @param {TraceState} traceState The trace state.
   * @param {import("../Map.js").default} map The map.
   * @param {number} snapTolerance The snap tolerance.
   * @return {TraceTargetUpdateInfo} Information about the new trace target.  The returned
   * object is reused between calls and must not be modified by the caller.
   */
  function getTraceTargetUpdate(coordinate, traceState, map, snapTolerance) {
    const x = coordinate[0];
    const y = coordinate[1];

    let closestTargetDistance = Infinity;

    let newTargetIndex = -1;
    let newEndIndex = NaN;

    for (
      let targetIndex = 0;
      targetIndex < traceState.targets.length;
      ++targetIndex
    ) {
      const target = traceState.targets[targetIndex];
      const coordinates = target.coordinates;

      let minSegmentDistance = Infinity;
      let endIndex;
      for (
        let coordinateIndex = 0;
        coordinateIndex < coordinates.length - 1;
        ++coordinateIndex
      ) {
        const start = coordinates[coordinateIndex];
        const end = coordinates[coordinateIndex + 1];
        const rel = getPointSegmentRelationship(x, y, start, end);
        if (rel.squaredDistance < minSegmentDistance) {
          minSegmentDistance = rel.squaredDistance;
          endIndex = coordinateIndex + rel.along;
        }
      }

      if (minSegmentDistance < closestTargetDistance) {
        closestTargetDistance = minSegmentDistance;
        if (target.ring && traceState.targetIndex === targetIndex) {
          // same target, maintain the same trace direction
          if (target.endIndex > target.startIndex) {
            // forward trace
            if (endIndex < target.startIndex) {
              endIndex += coordinates.length;
            }
          } else if (target.endIndex < target.startIndex) {
            // reverse trace
            if (endIndex > target.startIndex) {
              endIndex -= coordinates.length;
            }
          }
        }
        newEndIndex = endIndex;
        newTargetIndex = targetIndex;
      }
    }

    const newTarget = traceState.targets[newTargetIndex];
    let considerBothDirections = newTarget.ring;
    if (traceState.targetIndex === newTargetIndex && considerBothDirections) {
      // only consider switching trace direction if close to the start
      const newCoordinate = interpolateCoordinate(
        newTarget.coordinates,
        newEndIndex
      );
      const pixel = map.getPixelFromCoordinate(newCoordinate);
      if (distance(pixel, traceState.startPx) > snapTolerance) {
        considerBothDirections = false;
      }
    }

    if (considerBothDirections) {
      const coordinates = newTarget.coordinates;
      const count = coordinates.length;
      const startIndex = newTarget.startIndex;
      const endIndex = newEndIndex;
      if (startIndex < endIndex) {
        const forwardDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex
        );
        const reverseDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex - count
        );
        if (reverseDistance < forwardDistance) {
          newEndIndex -= count;
        }
      } else {
        const reverseDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex
        );
        const forwardDistance = getCumulativeSquaredDistance(
          coordinates,
          startIndex,
          endIndex + count
        );
        if (forwardDistance < reverseDistance) {
          newEndIndex += count;
        }
      }
    }

    sharedUpdateInfo.index = newTargetIndex;
    sharedUpdateInfo.endIndex = newEndIndex;
    return sharedUpdateInfo;
  }

  /**
   * @param {import("../coordinate.js").Coordinate} coordinate The clicked coordinate.
   * @param {Array<import("../coordinate.js").Coordinate>} coordinates The geometry component coordinates.
   * @param {boolean} ring The coordinates represent a linear ring.
   * @param {Array<TraceTarget>} targets The trace targets.
   */
  function appendTraceTarget(coordinate, coordinates, ring, targets) {
    const x = coordinate[0];
    const y = coordinate[1];
    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
      const start = coordinates[i];
      const end = coordinates[i + 1];
      const rel = getPointSegmentRelationship(x, y, start, end);
      if (rel.squaredDistance === 0) {
        const index = i + rel.along;
        targets.push({
          coordinates: coordinates,
          ring: ring,
          startIndex: index,
          endIndex: index,
        });
        return;
      }
    }
  }

  /**
   * @typedef {Object} PointSegmentRelationship
   * @property {number} along The closest point expressed as a fraction along the segment length.
   * @property {number} squaredDistance The squared distance of the point to the segment.
   */

  /**
   * @type {PointSegmentRelationship}
   */
  const sharedRel = {along: 0, squaredDistance: 0};

  /**
   * @param {number} x The point x.
   * @param {number} y The point y.
   * @param {import("../coordinate.js").Coordinate} start The segment start.
   * @param {import("../coordinate.js").Coordinate} end The segment end.
   * @return {PointSegmentRelationship} The point segment relationship.  The returned object is
   * shared between calls and must not be modified by the caller.
   */
  function getPointSegmentRelationship(x, y, start, end) {
    const x1 = start[0];
    const y1 = start[1];
    const x2 = end[0];
    const y2 = end[1];
    const dx = x2 - x1;
    const dy = y2 - y1;
    let along = 0;
    let px = x1;
    let py = y1;
    if (dx !== 0 || dy !== 0) {
      along = clamp(((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy), 0, 1);
      px += dx * along;
      py += dy * along;
    }

    sharedRel.along = along;
    sharedRel.squaredDistance = toFixed(squaredDistance$1(x, y, px, py), 10);
    return sharedRel;
  }

  /**
   * @param {LineCoordType} coordinates The coordinates.
   * @param {number} index The index.  May be fractional and may wrap.
   * @return {import("../coordinate.js").Coordinate} The interpolated coordinate.
   */
  function interpolateCoordinate(coordinates, index) {
    const count = coordinates.length;

    let startIndex = Math.floor(index);
    const along = index - startIndex;
    if (startIndex >= count) {
      startIndex -= count;
    } else if (startIndex < 0) {
      startIndex += count;
    }

    let endIndex = startIndex + 1;
    if (endIndex >= count) {
      endIndex -= count;
    }

    const start = coordinates[startIndex];
    const x0 = start[0];
    const y0 = start[1];
    const end = coordinates[endIndex];
    const dx = end[0] - x0;
    const dy = end[1] - y0;

    return [x0 + dx * along, y0 + dy * along];
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature
   */

  /**
   * @classdesc
   * Interaction for drawing feature geometries.
   *
   * @fires DrawEvent
   * @api
   */
  class Draw extends PointerInteraction$1 {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );
      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /***
       * @type {DrawOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {DrawOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {DrawOnSignature<void>}
       */
      this.un;

      /**
       * @type {boolean}
       * @private
       */
      this.shouldHandle_ = false;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.downPx_ = null;

      /**
       * @type {?}
       * @private
       */
      this.downTimeout_;

      /**
       * @type {number|undefined}
       * @private
       */
      this.lastDragTime_;

      /**
       * Pointer type of the last pointermove event
       * @type {string}
       * @private
       */
      this.pointerType_;

      /**
       * @type {boolean}
       * @private
       */
      this.freehand_ = false;

      /**
       * Target source for drawn features.
       * @type {VectorSource|null}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * Target collection for drawn features.
       * @type {import("../Collection.js").default<Feature>|null}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * Pixel distance for snapping.
       * @type {number}
       * @private
       */
      this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;

      /**
       * Geometry type.
       * @type {import("../geom/Geometry.js").Type}
       * @private
       */
      this.type_ = /** @type {import("../geom/Geometry.js").Type} */ (
        options.type
      );

      /**
       * Drawing mode (derived from geometry type.
       * @type {Mode}
       * @private
       */
      this.mode_ = getMode(this.type_);

      /**
       * Stop click, singleclick, and doubleclick events from firing during drawing.
       * Default is `false`.
       * @type {boolean}
       * @private
       */
      this.stopClick_ = !!options.stopClick;

      /**
       * The number of points that must be drawn before a polygon ring or line
       * string can be finished.  The default is 3 for polygon rings and 2 for
       * line strings.
       * @type {number}
       * @private
       */
      this.minPoints_ = options.minPoints
        ? options.minPoints
        : this.mode_ === 'Polygon'
        ? 3
        : 2;

      /**
       * The number of points that can be drawn before a polygon ring or line string
       * is finished. The default is no restriction.
       * @type {number}
       * @private
       */
      this.maxPoints_ =
        this.mode_ === 'Circle'
          ? 2
          : options.maxPoints
          ? options.maxPoints
          : Infinity;

      /**
       * A function to decide if a potential finish coordinate is permissible
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.finishCondition_ = options.finishCondition
        ? options.finishCondition
        : TRUE;

      /**
       * @private
       * @type {import("../geom/Geometry.js").GeometryLayout}
       */
      this.geometryLayout_ = options.geometryLayout
        ? options.geometryLayout
        : 'XY';

      let geometryFunction = options.geometryFunction;
      if (!geometryFunction) {
        const mode = this.mode_;
        if (mode === 'Circle') {
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default|undefined} geometry Optional geometry.
           * @param {import("../proj/Projection.js").default} projection The view projection.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function (coordinates, geometry, projection) {
            const circle = geometry
              ? /** @type {Circle} */ (geometry)
              : new Circle$1([NaN, NaN]);
            const center = fromUserCoordinate(coordinates[0], projection);
            const squaredLength = squaredDistance(
              center,
              fromUserCoordinate(coordinates[coordinates.length - 1], projection)
            );
            circle.setCenterAndRadius(
              center,
              Math.sqrt(squaredLength),
              this.geometryLayout_
            );
            const userProjection = getUserProjection();
            if (userProjection) {
              circle.transform(projection, userProjection);
            }
            return circle;
          };
        } else {
          let Constructor;
          if (mode === 'Point') {
            Constructor = Point$1;
          } else if (mode === 'LineString') {
            Constructor = LineString$1;
          } else if (mode === 'Polygon') {
            Constructor = Polygon$1;
          }
          /**
           * @param {!LineCoordType} coordinates The coordinates.
           * @param {import("../geom/SimpleGeometry.js").default|undefined} geometry Optional geometry.
           * @param {import("../proj/Projection.js").default} projection The view projection.
           * @return {import("../geom/SimpleGeometry.js").default} A geometry.
           */
          geometryFunction = function (coordinates, geometry, projection) {
            if (geometry) {
              if (mode === 'Polygon') {
                if (coordinates[0].length) {
                  // Add a closing coordinate to match the first
                  geometry.setCoordinates(
                    [coordinates[0].concat([coordinates[0][0]])],
                    this.geometryLayout_
                  );
                } else {
                  geometry.setCoordinates([], this.geometryLayout_);
                }
              } else {
                geometry.setCoordinates(coordinates, this.geometryLayout_);
              }
            } else {
              geometry = new Constructor(coordinates, this.geometryLayout_);
            }
            return geometry;
          };
        }
      }

      /**
       * @type {GeometryFunction}
       * @private
       */
      this.geometryFunction_ = geometryFunction;

      /**
       * @type {number}
       * @private
       */
      this.dragVertexDelay_ =
        options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;

      /**
       * Finish coordinate for the feature (first point for polygons, last point for
       * linestrings).
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.finishCoordinate_ = null;

      /**
       * Sketch feature.
       * @type {Feature<import('../geom/SimpleGeometry.js').default>}
       * @private
       */
      this.sketchFeature_ = null;

      /**
       * Sketch point.
       * @type {Feature<Point>}
       * @private
       */
      this.sketchPoint_ = null;

      /**
       * Sketch coordinates. Used when drawing a line or polygon.
       * @type {SketchCoordType}
       * @private
       */
      this.sketchCoords_ = null;

      /**
       * Sketch line. Used when drawing polygon.
       * @type {Feature<LineString>}
       * @private
       */
      this.sketchLine_ = null;

      /**
       * Sketch line coordinates. Used when drawing a polygon or circle.
       * @type {LineCoordType}
       * @private
       */
      this.sketchLineCoords_ = null;

      /**
       * Squared tolerance for handling up events.  If the squared distance
       * between a down and up event is greater than this tolerance, up events
       * will not be handled.
       * @type {number}
       * @private
       */
      this.squaredClickTolerance_ = options.clickTolerance
        ? options.clickTolerance * options.clickTolerance
        : 36;

      /**
       * Draw overlay where our sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: options.wrapX ? options.wrapX : false,
        }),
        style: options.style ? options.style : getDefaultStyleFunction$2(),
        updateWhileInteracting: true,
      });

      /**
       * Name of the geometry attribute for newly created features.
       * @type {string|undefined}
       * @private
       */
      this.geometryName_ = options.geometryName;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : noModifierKeys;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.freehandCondition_;
      if (options.freehand) {
        this.freehandCondition_ = always;
      } else {
        this.freehandCondition_ = options.freehandCondition
          ? options.freehandCondition
          : shiftKeyOnly;
      }

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.traceCondition_;
      this.setTrace(options.trace || false);

      /**
       * @type {TraceState}
       * @private
       */
      this.traceState_ = {active: false};

      /**
       * @type {VectorSource|null}
       * @private
       */
      this.traceSource_ = options.traceSource || options.source || null;

      this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);
    }

    /**
     * Toggle tracing mode or set a tracing condition.
     *
     * @param {boolean|import("../events/condition.js").Condition} trace A boolean to toggle tracing mode or an event
     *     condition that will be checked when a feature is clicked to determine if tracing should be active.
     */
    setTrace(trace) {
      let condition;
      if (!trace) {
        condition = never;
      } else if (trace === true) {
        condition = always;
      } else {
        condition = trace;
      }
      this.traceCondition_ = condition;
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     */
    setMap(map) {
      super.setMap(map);
      this.updateState_();
    }

    /**
     * Get the overlay layer that this interaction renders sketch features to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.overlay_;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} `false` to stop event propagation.
     * @api
     */
    handleEvent(event) {
      if (event.originalEvent.type === EventType.CONTEXTMENU) {
        // Avoid context menu for long taps when drawing on mobile
        event.originalEvent.preventDefault();
      }
      this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);
      let move = event.type === MapBrowserEventType.POINTERMOVE;
      let pass = true;
      if (
        !this.freehand_ &&
        this.lastDragTime_ &&
        event.type === MapBrowserEventType.POINTERDRAG
      ) {
        const now = Date.now();
        if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
          this.downPx_ = event.pixel;
          this.shouldHandle_ = !this.freehand_;
          move = true;
        } else {
          this.lastDragTime_ = undefined;
        }
        if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }
      }
      if (
        this.freehand_ &&
        event.type === MapBrowserEventType.POINTERDRAG &&
        this.sketchFeature_ !== null
      ) {
        this.addToDrawing_(event.coordinate);
        pass = false;
      } else if (
        this.freehand_ &&
        event.type === MapBrowserEventType.POINTERDOWN
      ) {
        pass = false;
      } else if (move && this.getPointerCount() < 2) {
        pass = event.type === MapBrowserEventType.POINTERMOVE;
        if (pass && this.freehand_) {
          this.handlePointerMove_(event);
          if (this.shouldHandle_) {
            // Avoid page scrolling when freehand drawing on mobile
            event.originalEvent.preventDefault();
          }
        } else if (
          event.originalEvent.pointerType === 'mouse' ||
          (event.type === MapBrowserEventType.POINTERDRAG &&
            this.downTimeout_ === undefined)
        ) {
          this.handlePointerMove_(event);
        }
      } else if (event.type === MapBrowserEventType.DBLCLICK) {
        pass = false;
      }

      return super.handleEvent(event) && pass;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(event) {
      this.shouldHandle_ = !this.freehand_;

      if (this.freehand_) {
        this.downPx_ = event.pixel;
        if (!this.finishCoordinate_) {
          this.startDrawing_(event.coordinate);
        }
        return true;
      }

      if (!this.condition_(event)) {
        this.lastDragTime_ = undefined;
        return false;
      }

      this.lastDragTime_ = Date.now();
      this.downTimeout_ = setTimeout(() => {
        this.handlePointerMove_(
          new MapBrowserEvent$1(
            MapBrowserEventType.POINTERMOVE,
            event.map,
            event.originalEvent,
            false,
            event.frameState
          )
        );
      }, this.dragVertexDelay_);
      this.downPx_ = event.pixel;
      return true;
    }

    /**
     * @private
     */
    deactivateTrace_() {
      this.traceState_ = {active: false};
    }

    /**
     * Activate or deactivate trace state based on a browser event.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    toggleTraceState_(event) {
      if (!this.traceSource_ || !this.traceCondition_(event)) {
        return;
      }

      if (this.traceState_.active) {
        this.deactivateTrace_();
        return;
      }

      const map = this.getMap();
      const lowerLeft = map.getCoordinateFromPixel([
        event.pixel[0] - this.snapTolerance_,
        event.pixel[1] + this.snapTolerance_,
      ]);
      const upperRight = map.getCoordinateFromPixel([
        event.pixel[0] + this.snapTolerance_,
        event.pixel[1] - this.snapTolerance_,
      ]);
      const extent = boundingExtent([lowerLeft, upperRight]);
      const features = this.traceSource_.getFeaturesInExtent(extent);
      if (features.length === 0) {
        return;
      }

      const targets = getTraceTargets(event.coordinate, features);
      if (targets.length) {
        this.traceState_ = {
          active: true,
          startPx: event.pixel.slice(),
          targets: targets,
          targetIndex: -1,
        };
      }
    }

    /**
     * @param {TraceTarget} target The trace target.
     * @param {number} endIndex The new end index of the trace.
     * @private
     */
    addOrRemoveTracedCoordinates_(target, endIndex) {
      // three cases to handle:
      //  1. traced in the same direction and points need adding
      //  2. traced in the same direction and points need removing
      //  3. traced in a new direction
      const previouslyForward = target.startIndex <= target.endIndex;
      const currentlyForward = target.startIndex <= endIndex;
      if (previouslyForward === currentlyForward) {
        // same direction
        if (
          (previouslyForward && endIndex > target.endIndex) ||
          (!previouslyForward && endIndex < target.endIndex)
        ) {
          // case 1 - add new points
          this.addTracedCoordinates_(target, target.endIndex, endIndex);
        } else if (
          (previouslyForward && endIndex < target.endIndex) ||
          (!previouslyForward && endIndex > target.endIndex)
        ) {
          // case 2 - remove old points
          this.removeTracedCoordinates_(endIndex, target.endIndex);
        }
      } else {
        // case 3 - remove old points, add new points
        this.removeTracedCoordinates_(target.startIndex, target.endIndex);
        this.addTracedCoordinates_(target, target.startIndex, endIndex);
      }
    }

    /**
     * @param {number} fromIndex The start index.
     * @param {number} toIndex The end index.
     * @private
     */
    removeTracedCoordinates_(fromIndex, toIndex) {
      if (fromIndex === toIndex) {
        return;
      }

      let remove = 0;
      if (fromIndex < toIndex) {
        const start = Math.ceil(fromIndex);
        let end = Math.floor(toIndex);
        if (end === toIndex) {
          end -= 1;
        }
        remove = end - start + 1;
      } else {
        const start = Math.floor(fromIndex);
        let end = Math.ceil(toIndex);
        if (end === toIndex) {
          end += 1;
        }
        remove = start - end + 1;
      }

      if (remove > 0) {
        this.removeLastPoints_(remove);
      }
    }

    /**
     * @param {TraceTarget} target The trace target.
     * @param {number} fromIndex The start index.
     * @param {number} toIndex The end index.
     * @private
     */
    addTracedCoordinates_(target, fromIndex, toIndex) {
      if (fromIndex === toIndex) {
        return;
      }

      const coordinates = [];
      if (fromIndex < toIndex) {
        // forward trace
        const start = Math.ceil(fromIndex);
        let end = Math.floor(toIndex);
        if (end === toIndex) {
          // if end is snapped to a vertex, it will be added later
          end -= 1;
        }
        for (let i = start; i <= end; ++i) {
          coordinates.push(getCoordinate(target.coordinates, i));
        }
      } else {
        // reverse trace
        const start = Math.floor(fromIndex);
        let end = Math.ceil(toIndex);
        if (end === toIndex) {
          end += 1;
        }
        for (let i = start; i >= end; --i) {
          coordinates.push(getCoordinate(target.coordinates, i));
        }
      }
      if (coordinates.length) {
        this.appendCoordinates(coordinates);
      }
    }

    /**
     * Update the trace.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @private
     */
    updateTrace_(event) {
      const traceState = this.traceState_;
      if (!traceState.active) {
        return;
      }

      if (traceState.targetIndex === -1) {
        // check if we are ready to pick a target
        if (distance(traceState.startPx, event.pixel) < this.snapTolerance_) {
          return;
        }
      }

      const updatedTraceTarget = getTraceTargetUpdate(
        event.coordinate,
        traceState,
        this.getMap(),
        this.snapTolerance_
      );

      if (traceState.targetIndex !== updatedTraceTarget.index) {
        // target changed
        if (traceState.targetIndex !== -1) {
          // remove points added during previous trace
          const oldTarget = traceState.targets[traceState.targetIndex];
          this.removeTracedCoordinates_(oldTarget.startIndex, oldTarget.endIndex);
        }
        // add points for the new target
        const newTarget = traceState.targets[updatedTraceTarget.index];
        this.addTracedCoordinates_(
          newTarget,
          newTarget.startIndex,
          updatedTraceTarget.endIndex
        );
      } else {
        // target stayed the same
        const target = traceState.targets[traceState.targetIndex];
        this.addOrRemoveTracedCoordinates_(target, updatedTraceTarget.endIndex);
      }

      // modify the state with updated info
      traceState.targetIndex = updatedTraceTarget.index;
      const target = traceState.targets[traceState.targetIndex];
      target.endIndex = updatedTraceTarget.endIndex;

      // update event coordinate and pixel to match end point of final segment
      const coordinate = interpolateCoordinate(
        target.coordinates,
        target.endIndex
      );
      const pixel = this.getMap().getPixelFromCoordinate(coordinate);
      event.coordinate = coordinate;
      event.pixel = [Math.round(pixel[0]), Math.round(pixel[1])];
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(event) {
      let pass = true;

      if (this.getPointerCount() === 0) {
        if (this.downTimeout_) {
          clearTimeout(this.downTimeout_);
          this.downTimeout_ = undefined;
        }

        this.handlePointerMove_(event);
        const tracing = this.traceState_.active;
        this.toggleTraceState_(event);

        if (this.shouldHandle_) {
          const startingToDraw = !this.finishCoordinate_;
          if (startingToDraw) {
            this.startDrawing_(event.coordinate);
          }
          if (!startingToDraw && this.freehand_) {
            this.finishDrawing();
          } else if (
            !this.freehand_ &&
            (!startingToDraw || this.mode_ === 'Point')
          ) {
            if (this.atFinish_(event.pixel, tracing)) {
              if (this.finishCondition_(event)) {
                this.finishDrawing();
              }
            } else {
              this.addToDrawing_(event.coordinate);
            }
          }
          pass = false;
        } else if (this.freehand_) {
          this.abortDrawing();
        }
      }

      if (!pass && this.stopClick_) {
        event.preventDefault();
      }
      return pass;
    }

    /**
     * Handle move events.
     * @param {import("../MapBrowserEvent.js").default} event A move event.
     * @private
     */
    handlePointerMove_(event) {
      this.pointerType_ = event.originalEvent.pointerType;
      if (
        this.downPx_ &&
        ((!this.freehand_ && this.shouldHandle_) ||
          (this.freehand_ && !this.shouldHandle_))
      ) {
        const downPx = this.downPx_;
        const clickPx = event.pixel;
        const dx = downPx[0] - clickPx[0];
        const dy = downPx[1] - clickPx[1];
        const squaredDistance = dx * dx + dy * dy;
        this.shouldHandle_ = this.freehand_
          ? squaredDistance > this.squaredClickTolerance_
          : squaredDistance <= this.squaredClickTolerance_;
        if (!this.shouldHandle_) {
          return;
        }
      }

      if (!this.finishCoordinate_) {
        this.createOrUpdateSketchPoint_(event.coordinate.slice());
        return;
      }

      this.updateTrace_(event);
      this.modifyDrawing_(event.coordinate);
    }

    /**
     * Determine if an event is within the snapping tolerance of the start coord.
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @param {boolean} [tracing] Drawing in trace mode (only stop if at the starting point).
     * @return {boolean} The event is within the snapping tolerance of the start.
     * @private
     */
    atFinish_(pixel, tracing) {
      let at = false;
      if (this.sketchFeature_) {
        let potentiallyDone = false;
        let potentiallyFinishCoordinates = [this.finishCoordinate_];
        const mode = this.mode_;
        if (mode === 'Point') {
          at = true;
        } else if (mode === 'Circle') {
          at = this.sketchCoords_.length === 2;
        } else if (mode === 'LineString') {
          potentiallyDone =
            !tracing && this.sketchCoords_.length > this.minPoints_;
        } else if (mode === 'Polygon') {
          const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);
          potentiallyDone = sketchCoords[0].length > this.minPoints_;
          potentiallyFinishCoordinates = [
            sketchCoords[0][0],
            sketchCoords[0][sketchCoords[0].length - 2],
          ];
          if (tracing) {
            potentiallyFinishCoordinates = [sketchCoords[0][0]];
          } else {
            potentiallyFinishCoordinates = [
              sketchCoords[0][0],
              sketchCoords[0][sketchCoords[0].length - 2],
            ];
          }
        }
        if (potentiallyDone) {
          const map = this.getMap();
          for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
            const finishCoordinate = potentiallyFinishCoordinates[i];
            const finishPixel = map.getPixelFromCoordinate(finishCoordinate);
            const dx = pixel[0] - finishPixel[0];
            const dy = pixel[1] - finishPixel[1];
            const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
            at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
            if (at) {
              this.finishCoordinate_ = finishCoordinate;
              break;
            }
          }
        }
      }
      return at;
    }

    /**
     * @param {import("../coordinate").Coordinate} coordinates Coordinate.
     * @private
     */
    createOrUpdateSketchPoint_(coordinates) {
      if (!this.sketchPoint_) {
        this.sketchPoint_ = new Feature$1(new Point$1(coordinates));
        this.updateSketchFeatures_();
      } else {
        const sketchPointGeom = this.sketchPoint_.getGeometry();
        sketchPointGeom.setCoordinates(coordinates);
      }
    }

    /**
     * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
     * @private
     */
    createOrUpdateCustomSketchLine_(geometry) {
      if (!this.sketchLine_) {
        this.sketchLine_ = new Feature$1();
      }
      const ring = geometry.getLinearRing(0);
      let sketchLineGeom = this.sketchLine_.getGeometry();
      if (!sketchLineGeom) {
        sketchLineGeom = new LineString$1(
          ring.getFlatCoordinates(),
          ring.getLayout()
        );
        this.sketchLine_.setGeometry(sketchLineGeom);
      } else {
        sketchLineGeom.setFlatCoordinates(
          ring.getLayout(),
          ring.getFlatCoordinates()
        );
        sketchLineGeom.changed();
      }
    }

    /**
     * Start the drawing.
     * @param {import("../coordinate.js").Coordinate} start Start coordinate.
     * @private
     */
    startDrawing_(start) {
      const projection = this.getMap().getView().getProjection();
      const stride = getStrideForLayout(this.geometryLayout_);
      while (start.length < stride) {
        start.push(0);
      }
      this.finishCoordinate_ = start;
      if (this.mode_ === 'Point') {
        this.sketchCoords_ = start.slice();
      } else if (this.mode_ === 'Polygon') {
        this.sketchCoords_ = [[start.slice(), start.slice()]];
        this.sketchLineCoords_ = this.sketchCoords_[0];
      } else {
        this.sketchCoords_ = [start.slice(), start.slice()];
      }
      if (this.sketchLineCoords_) {
        this.sketchLine_ = new Feature$1(new LineString$1(this.sketchLineCoords_));
      }
      const geometry = this.geometryFunction_(
        this.sketchCoords_,
        undefined,
        projection
      );
      this.sketchFeature_ = new Feature$1();
      if (this.geometryName_) {
        this.sketchFeature_.setGeometryName(this.geometryName_);
      }
      this.sketchFeature_.setGeometry(geometry);
      this.updateSketchFeatures_();
      this.dispatchEvent(
        new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)
      );
    }

    /**
     * Modify the drawing.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @private
     */
    modifyDrawing_(coordinate) {
      const map = this.getMap();
      const geometry = this.sketchFeature_.getGeometry();
      const projection = map.getView().getProjection();
      const stride = getStrideForLayout(this.geometryLayout_);
      let coordinates, last;
      while (coordinate.length < stride) {
        coordinate.push(0);
      }
      if (this.mode_ === 'Point') {
        last = this.sketchCoords_;
      } else if (this.mode_ === 'Polygon') {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        last = coordinates[coordinates.length - 1];
        if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {
          // snap to finish
          coordinate = this.finishCoordinate_.slice();
        }
      } else {
        coordinates = this.sketchCoords_;
        last = coordinates[coordinates.length - 1];
      }
      last[0] = coordinate[0];
      last[1] = coordinate[1];
      this.geometryFunction_(
        /** @type {!LineCoordType} */ (this.sketchCoords_),
        geometry,
        projection
      );
      if (this.sketchPoint_) {
        const sketchPointGeom = this.sketchPoint_.getGeometry();
        sketchPointGeom.setCoordinates(coordinate);
      }
      if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {
        this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));
      } else if (this.sketchLineCoords_) {
        const sketchLineGeom = this.sketchLine_.getGeometry();
        sketchLineGeom.setCoordinates(this.sketchLineCoords_);
      }
      this.updateSketchFeatures_();
    }

    /**
     * Add a new coordinate to the drawing.
     * @param {!PointCoordType} coordinate Coordinate
     * @private
     */
    addToDrawing_(coordinate) {
      const geometry = this.sketchFeature_.getGeometry();
      const projection = this.getMap().getView().getProjection();
      let done;
      let coordinates;
      const mode = this.mode_;
      if (mode === 'LineString' || mode === 'Circle') {
        this.finishCoordinate_ = coordinate.slice();
        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        this.geometryFunction_(coordinates, geometry, projection);
      } else if (mode === 'Polygon') {
        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
        if (coordinates.length >= this.maxPoints_) {
          if (this.freehand_) {
            coordinates.pop();
          } else {
            done = true;
          }
        }
        coordinates.push(coordinate.slice());
        if (done) {
          this.finishCoordinate_ = coordinates[0];
        }
        this.geometryFunction_(this.sketchCoords_, geometry, projection);
      }
      this.createOrUpdateSketchPoint_(coordinate.slice());
      this.updateSketchFeatures_();
      if (done) {
        this.finishDrawing();
      }
    }

    /**
     * @param {number} n The number of points to remove.
     */
    removeLastPoints_(n) {
      if (!this.sketchFeature_) {
        return;
      }
      const geometry = this.sketchFeature_.getGeometry();
      const projection = this.getMap().getView().getProjection();
      const mode = this.mode_;
      for (let i = 0; i < n; ++i) {
        let coordinates;
        if (mode === 'LineString' || mode === 'Circle') {
          coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
          coordinates.splice(-2, 1);
          if (coordinates.length >= 2) {
            this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
            const finishCoordinate = this.finishCoordinate_.slice();
            coordinates[coordinates.length - 1] = finishCoordinate;
            this.createOrUpdateSketchPoint_(finishCoordinate);
          }
          this.geometryFunction_(coordinates, geometry, projection);
          if (geometry.getType() === 'Polygon' && this.sketchLine_) {
            this.createOrUpdateCustomSketchLine_(
              /** @type {Polygon} */ (geometry)
            );
          }
        } else if (mode === 'Polygon') {
          coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
          coordinates.splice(-2, 1);
          const sketchLineGeom = this.sketchLine_.getGeometry();
          if (coordinates.length >= 2) {
            const finishCoordinate = coordinates[coordinates.length - 2].slice();
            coordinates[coordinates.length - 1] = finishCoordinate;
            this.createOrUpdateSketchPoint_(finishCoordinate);
          }
          sketchLineGeom.setCoordinates(coordinates);
          this.geometryFunction_(this.sketchCoords_, geometry, projection);
        }

        if (coordinates.length === 1) {
          this.abortDrawing();
          break;
        }
      }

      this.updateSketchFeatures_();
    }

    /**
     * Remove last point of the feature currently being drawn. Does not do anything when
     * drawing POINT or MULTI_POINT geometries.
     * @api
     */
    removeLastPoint() {
      this.removeLastPoints_(1);
    }

    /**
     * Stop drawing and add the sketch feature to the target layer.
     * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
     * dispatched before inserting the feature.
     * @api
     */
    finishDrawing() {
      const sketchFeature = this.abortDrawing_();
      if (!sketchFeature) {
        return;
      }
      let coordinates = this.sketchCoords_;
      const geometry = sketchFeature.getGeometry();
      const projection = this.getMap().getView().getProjection();
      if (this.mode_ === 'LineString') {
        // remove the redundant last point
        coordinates.pop();
        this.geometryFunction_(coordinates, geometry, projection);
      } else if (this.mode_ === 'Polygon') {
        // remove the redundant last point in ring
        /** @type {PolyCoordType} */ (coordinates)[0].pop();
        this.geometryFunction_(coordinates, geometry, projection);
        coordinates = geometry.getCoordinates();
      }

      // cast multi-part geometries
      if (this.type_ === 'MultiPoint') {
        sketchFeature.setGeometry(
          new MultiPoint$1([/** @type {PointCoordType} */ (coordinates)])
        );
      } else if (this.type_ === 'MultiLineString') {
        sketchFeature.setGeometry(
          new MultiLineString$1([/** @type {LineCoordType} */ (coordinates)])
        );
      } else if (this.type_ === 'MultiPolygon') {
        sketchFeature.setGeometry(
          new MultiPolygon$1([/** @type {PolyCoordType} */ (coordinates)])
        );
      }

      // First dispatch event to allow full set up of feature
      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));

      // Then insert feature
      if (this.features_) {
        this.features_.push(sketchFeature);
      }
      if (this.source_) {
        this.source_.addFeature(sketchFeature);
      }
    }

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @return {Feature<import("../geom/SimpleGeometry.js").default>|null} The sketch feature (or null if none).
     * @private
     */
    abortDrawing_() {
      this.finishCoordinate_ = null;
      const sketchFeature = this.sketchFeature_;
      this.sketchFeature_ = null;
      this.sketchPoint_ = null;
      this.sketchLine_ = null;
      this.overlay_.getSource().clear(true);
      this.deactivateTrace_();
      return sketchFeature;
    }

    /**
     * Stop drawing without adding the sketch feature to the target layer.
     * @api
     */
    abortDrawing() {
      const sketchFeature = this.abortDrawing_();
      if (sketchFeature) {
        this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));
      }
    }

    /**
     * Append coordinates to the end of the geometry that is currently being drawn.
     * This can be used when drawing LineStrings or Polygons. Coordinates will
     * either be appended to the current LineString or the outer ring of the current
     * Polygon. If no geometry is being drawn, a new one will be created.
     * @param {!LineCoordType} coordinates Linear coordinates to be appended to
     * the coordinate array.
     * @api
     */
    appendCoordinates(coordinates) {
      const mode = this.mode_;
      const newDrawing = !this.sketchFeature_;
      if (newDrawing) {
        this.startDrawing_(coordinates[0]);
      }
      /** @type {LineCoordType} */
      let sketchCoords;
      if (mode === 'LineString' || mode === 'Circle') {
        sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);
      } else if (mode === 'Polygon') {
        sketchCoords =
          this.sketchCoords_ && this.sketchCoords_.length
            ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]
            : [];
      } else {
        return;
      }

      if (newDrawing) {
        sketchCoords.shift();
      }

      // Remove last coordinate from sketch drawing (this coordinate follows cursor position)
      sketchCoords.pop();

      // Append coordinate list
      for (let i = 0; i < coordinates.length; i++) {
        this.addToDrawing_(coordinates[i]);
      }

      const ending = coordinates[coordinates.length - 1];
      // Duplicate last coordinate for sketch drawing (cursor position)
      this.addToDrawing_(ending);
      this.modifyDrawing_(ending);
    }

    /**
     * Initiate draw mode by starting from an existing geometry which will
     * receive new additional points. This only works on features with
     * `LineString` geometries, where the interaction will extend lines by adding
     * points to the end of the coordinates array.
     * This will change the original feature, instead of drawing a copy.
     *
     * The function will dispatch a `drawstart` event.
     *
     * @param {!Feature<LineString>} feature Feature to be extended.
     * @api
     */
    extend(feature) {
      const geometry = feature.getGeometry();
      const lineString = geometry;
      this.sketchFeature_ = feature;
      this.sketchCoords_ = lineString.getCoordinates();
      const last = this.sketchCoords_[this.sketchCoords_.length - 1];
      this.finishCoordinate_ = last.slice();
      this.sketchCoords_.push(last.slice());
      this.sketchPoint_ = new Feature$1(new Point$1(last));
      this.updateSketchFeatures_();
      this.dispatchEvent(
        new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)
      );
    }

    /**
     * Redraw the sketch features.
     * @private
     */
    updateSketchFeatures_() {
      const sketchFeatures = [];
      if (this.sketchFeature_) {
        sketchFeatures.push(this.sketchFeature_);
      }
      if (this.sketchLine_) {
        sketchFeatures.push(this.sketchLine_);
      }
      if (this.sketchPoint_) {
        sketchFeatures.push(this.sketchPoint_);
      }
      const overlaySource = this.overlay_.getSource();
      overlaySource.clear(true);
      overlaySource.addFeatures(sketchFeatures);
    }

    /**
     * @private
     */
    updateState_() {
      const map = this.getMap();
      const active = this.getActive();
      if (!map || !active) {
        this.abortDrawing();
      }
      this.overlay_.setMap(active ? map : null);
    }
  }

  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$2() {
    const styles = createEditingStyle();
    return function (feature, resolution) {
      return styles[feature.getGeometry().getType()];
    };
  }

  /**
   * Create a `geometryFunction` that will create a box-shaped polygon (aligned
   * with the coordinate system axes).  Use this with the draw interaction and
   * `type: 'Circle'` to return a box instead of a circle geometry.
   * @return {GeometryFunction} Function that draws a box-shaped polygon.
   * @api
   */
  function createBox() {
    return function (coordinates, geometry, projection) {
      const extent = boundingExtent(
        /** @type {LineCoordType} */ ([
          coordinates[0],
          coordinates[coordinates.length - 1],
        ]).map(function (coordinate) {
          return fromUserCoordinate(coordinate, projection);
        })
      );
      const boxCoordinates = [
        [
          getBottomLeft(extent),
          getBottomRight(extent),
          getTopRight(extent),
          getTopLeft(extent),
          getBottomLeft(extent),
        ],
      ];
      if (geometry) {
        geometry.setCoordinates(boxCoordinates);
      } else {
        geometry = new Polygon$1(boxCoordinates);
      }
      const userProjection = getUserProjection();
      if (userProjection) {
        geometry.transform(projection, userProjection);
      }
      return geometry;
    };
  }

  /**
   * Get the drawing mode.  The mode for multi-part geometries is the same as for
   * their single-part cousins.
   * @param {import("../geom/Geometry.js").Type} type Geometry type.
   * @return {Mode} Drawing mode.
   */
  function getMode(type) {
    switch (type) {
      case 'Point':
      case 'MultiPoint':
        return 'Point';
      case 'LineString':
      case 'MultiLineString':
        return 'LineString';
      case 'Polygon':
      case 'MultiPolygon':
        return 'Polygon';
      case 'Circle':
        return 'Circle';
      default:
        throw new Error('Invalid type: ' + type);
    }
  }

  var Draw$1 = Draw;

  /**
   * @module ol/interaction/Extent
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.always}.
   * @property {import("../extent.js").Extent} [extent] Initial extent. Defaults to no
   * initial extent.
   * @property {import("../style/Style.js").StyleLike} [boxStyle]
   * Style for the drawn extent box. Defaults to the `Polygon` editing style
   * documented in {@link module:ol/style/Style~Style}
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike} [pointerStyle]
   * Style for the cursor used to draw the extent. Defaults to the `Point` editing style
   * documented in {@link module:ol/style/Style~Style}
   * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
   * in the X direction? Only affects visuals, not functionality.
   */

  /**
   * @enum {string}
   */
  const ExtentEventType = {
    /**
     * Triggered after the extent is changed
     * @event ExtentEvent#extentchanged
     * @api
     */
    EXTENTCHANGED: 'extentchanged',
  };

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are
   * instances of this type.
   */
  class ExtentEvent extends BaseEvent {
    /**
     * @param {import("../extent.js").Extent} extent the new extent
     */
    constructor(extent) {
      super(ExtentEventType.EXTENTCHANGED);

      /**
       * The current extent.
       * @type {import("../extent.js").Extent}
       * @api
       */
      this.extent = extent;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'extentchanged', ExtentEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'extentchanged', Return>} ExtentOnSignature
   */

  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map.
   * Once drawn, the vector box can be modified by dragging its vertices or edges.
   * This interaction is only supported for mouse devices.
   *
   * @fires ExtentEvent
   * @api
   */
  class Extent extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options || {};

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /***
       * @type {ExtentOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {ExtentOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {ExtentOnSignature<void>}
       */
      this.un;

      /**
       * Condition
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.condition_ = options.condition ? options.condition : always;

      /**
       * Extent of the drawn box
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.extent_ = null;

      /**
       * Handler for pointer move events
       * @type {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null}
       * @private
       */
      this.pointerHandler_ = null;

      /**
       * Pixel threshold to snap to extent
       * @type {number}
       * @private
       */
      this.pixelTolerance_ =
        options.pixelTolerance !== undefined ? options.pixelTolerance : 10;

      /**
       * Is the pointer snapped to an extent vertex
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Feature for displaying the visible extent
       * @type {Feature}
       * @private
       */
      this.extentFeature_ = null;

      /**
       * Feature for displaying the visible pointer
       * @type {Feature<Point>}
       * @private
       */
      this.vertexFeature_ = null;

      if (!options) {
        options = {};
      }

      /**
       * Layer for the extentFeature
       * @type {VectorLayer}
       * @private
       */
      this.extentOverlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: !!options.wrapX,
        }),
        style: options.boxStyle
          ? options.boxStyle
          : getDefaultExtentStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true,
      });

      /**
       * Layer for the vertexFeature
       * @type {VectorLayer}
       * @private
       */
      this.vertexOverlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: !!options.wrapX,
        }),
        style: options.pointerStyle
          ? options.pointerStyle
          : getDefaultPointerStyleFunction(),
        updateWhileAnimating: true,
        updateWhileInteracting: true,
      });

      if (options.extent) {
        this.setExtent(options.extent);
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel cursor location
     * @param {import("../Map.js").default} map map
     * @return {import("../coordinate.js").Coordinate|null} snapped vertex on extent
     * @private
     */
    snapToVertex_(pixel, map) {
      const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);
      const sortByDistance = function (a, b) {
        return (
          squaredDistanceToSegment(pixelCoordinate, a) -
          squaredDistanceToSegment(pixelCoordinate, b)
        );
      };
      const extent = this.getExtentInternal();
      if (extent) {
        //convert extents to line segments and find the segment closest to pixelCoordinate
        const segments = getSegments(extent);
        segments.sort(sortByDistance);
        const closestSegment = segments[0];

        let vertex = closestOnSegment(pixelCoordinate, closestSegment);
        const vertexPixel = map.getPixelFromCoordinateInternal(vertex);

        //if the distance is within tolerance, snap to the segment
        if (distance(pixel, vertexPixel) <= this.pixelTolerance_) {
          //test if we should further snap to a vertex
          const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);
          const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);
          const squaredDist1 = squaredDistance(vertexPixel, pixel1);
          const squaredDist2 = squaredDistance(vertexPixel, pixel2);
          const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
          this.snappedToVertex_ = dist <= this.pixelTolerance_;
          if (this.snappedToVertex_) {
            vertex =
              squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
          }
          return vertex;
        }
      }
      return null;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent pointer move event
     * @private
     */
    handlePointerMove_(mapBrowserEvent) {
      const pixel = mapBrowserEvent.pixel;
      const map = mapBrowserEvent.map;

      let vertex = this.snapToVertex_(pixel, map);
      if (!vertex) {
        vertex = map.getCoordinateFromPixelInternal(pixel);
      }
      this.createOrUpdatePointerFeature_(vertex);
    }

    /**
     * @param {import("../extent.js").Extent} extent extent
     * @return {Feature} extent as featrue
     * @private
     */
    createOrUpdateExtentFeature_(extent) {
      let extentFeature = this.extentFeature_;

      if (!extentFeature) {
        if (!extent) {
          extentFeature = new Feature$1({});
        } else {
          extentFeature = new Feature$1(fromExtent(extent));
        }
        this.extentFeature_ = extentFeature;
        this.extentOverlay_.getSource().addFeature(extentFeature);
      } else {
        if (!extent) {
          extentFeature.setGeometry(undefined);
        } else {
          extentFeature.setGeometry(fromExtent(extent));
        }
      }
      return extentFeature;
    }

    /**
     * @param {import("../coordinate.js").Coordinate} vertex location of feature
     * @return {Feature} vertex as feature
     * @private
     */
    createOrUpdatePointerFeature_(vertex) {
      let vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature$1(new Point$1(vertex));
        this.vertexFeature_ = vertexFeature;
        this.vertexOverlay_.getSource().addFeature(vertexFeature);
      } else {
        const geometry = vertexFeature.getGeometry();
        geometry.setCoordinates(vertex);
      }
      return vertexFeature;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {
        return true;
      }
      //display pointer (if not dragging)
      if (
        mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&
        !this.handlingDownUpSequence
      ) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      //call pointer to determine up/down/drag
      super.handleEvent(mapBrowserEvent);
      //return false to stop propagation
      return false;
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(mapBrowserEvent) {
      const pixel = mapBrowserEvent.pixel;
      const map = mapBrowserEvent.map;

      const extent = this.getExtentInternal();
      let vertex = this.snapToVertex_(pixel, map);

      //find the extent corner opposite the passed corner
      const getOpposingPoint = function (point) {
        let x_ = null;
        let y_ = null;
        if (point[0] == extent[0]) {
          x_ = extent[2];
        } else if (point[0] == extent[2]) {
          x_ = extent[0];
        }
        if (point[1] == extent[1]) {
          y_ = extent[3];
        } else if (point[1] == extent[3]) {
          y_ = extent[1];
        }
        if (x_ !== null && y_ !== null) {
          return [x_, y_];
        }
        return null;
      };
      if (vertex && extent) {
        const x =
          vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;
        const y =
          vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;

        //snap to point
        if (x !== null && y !== null) {
          this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
          //snap to edge
        } else if (x !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([x, extent[1]]),
            getOpposingPoint([x, extent[3]])
          );
        } else if (y !== null) {
          this.pointerHandler_ = getEdgeHandler(
            getOpposingPoint([extent[0], y]),
            getOpposingPoint([extent[2], y])
          );
        }
        //no snap - new bbox
      } else {
        vertex = map.getCoordinateFromPixelInternal(pixel);
        this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);
        this.pointerHandler_ = getPointHandler(vertex);
      }
      return true; //event handled; start downup sequence
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     */
    handleDragEvent(mapBrowserEvent) {
      if (this.pointerHandler_) {
        const pixelCoordinate = mapBrowserEvent.coordinate;
        this.setExtent(this.pointerHandler_(pixelCoordinate));
        this.createOrUpdatePointerFeature_(pixelCoordinate);
      }
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(mapBrowserEvent) {
      this.pointerHandler_ = null;
      //If bbox is zero area, set to null;
      const extent = this.getExtentInternal();
      if (!extent || getArea$1(extent) === 0) {
        this.setExtent(null);
      }
      return false; //Stop handling downup sequence
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     */
    setMap(map) {
      this.extentOverlay_.setMap(map);
      this.vertexOverlay_.setMap(map);
      super.setMap(map);
    }

    /**
     * Returns the current drawn extent in the view projection (or user projection if set)
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */
    getExtent() {
      return toUserExtent(
        this.getExtentInternal(),
        this.getMap().getView().getProjection()
      );
    }

    /**
     * Returns the current drawn extent in the view projection
     *
     * @return {import("../extent.js").Extent} Drawn extent in the view projection.
     * @api
     */
    getExtentInternal() {
      return this.extent_;
    }

    /**
     * Manually sets the drawn extent, using the view projection.
     *
     * @param {import("../extent.js").Extent} extent Extent
     * @api
     */
    setExtent(extent) {
      //Null extent means no bbox
      this.extent_ = extent ? extent : null;
      this.createOrUpdateExtentFeature_(extent);
      this.dispatchEvent(new ExtentEvent(this.extent_));
    }
  }

  /**
   * Returns the default style for the drawn bbox
   *
   * @return {import("../style/Style.js").StyleFunction} Default Extent style
   */
  function getDefaultExtentStyleFunction() {
    const style = createEditingStyle();
    return function (feature, resolution) {
      return style['Polygon'];
    };
  }

  /**
   * Returns the default style for the pointer
   *
   * @return {import("../style/Style.js").StyleFunction} Default pointer style
   */
  function getDefaultPointerStyleFunction() {
    const style = createEditingStyle();
    return function (feature, resolution) {
      return style['Point'];
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedPoint corner that will be unchanged in the new extent
   * @return {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent} event handler
   */
  function getPointHandler(fixedPoint) {
    return function (point) {
      return boundingExtent([fixedPoint, point]);
    };
  }

  /**
   * @param {import("../coordinate.js").Coordinate} fixedP1 first corner that will be unchanged in the new extent
   * @param {import("../coordinate.js").Coordinate} fixedP2 second corner that will be unchanged in the new extent
   * @return {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null} event handler
   */
  function getEdgeHandler(fixedP1, fixedP2) {
    if (fixedP1[0] == fixedP2[0]) {
      return function (point) {
        return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);
      };
    } else if (fixedP1[1] == fixedP2[1]) {
      return function (point) {
        return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);
      };
    }
    return null;
  }

  /**
   * @param {import("../extent.js").Extent} extent extent
   * @return {Array<Array<import("../coordinate.js").Coordinate>>} extent line segments
   */
  function getSegments(extent) {
    return [
      [
        [extent[0], extent[1]],
        [extent[0], extent[3]],
      ],
      [
        [extent[0], extent[3]],
        [extent[2], extent[3]],
      ],
      [
        [extent[2], extent[3]],
        [extent[2], extent[1]],
      ],
      [
        [extent[2], extent[1]],
        [extent[0], extent[1]],
      ],
    ];
  }

  var Extent$1 = Extent;

  /**
   * @module ol/interaction/Link
   */

  /**
   * @param {number} number A number.
   * @return {number} A number with at most 5 decimal places.
   */
  function to5(number) {
    return toFixed(number, 5);
  }

  /**
   * @param {string} string A string.
   * @return {number} A number representing the string.
   */
  function readNumber(string) {
    return parseFloat(string);
  }

  /**
   * @param {number} number A number.
   * @return {string} A string representing the number.
   */
  function writeNumber(number) {
    return to5(number).toString();
  }

  /**
   * @param {number} a A number.
   * @param {number} b A number.
   * @return {boolean} The numbers are different.
   */
  function differentNumber(a, b) {
    if (isNaN(a)) {
      return false;
    }
    return a !== readNumber(writeNumber(b));
  }

  /**
   * @param {Array<number>} a An array of two numbers.
   * @param {Array<number>} b An array of two numbers.
   * @return {boolean} The arrays are different.
   */
  function differentArray(a, b) {
    return differentNumber(a[0], b[0]) || differentNumber(a[1], b[1]);
  }

  /** @typedef {'x'|'y'|'z'|'r'|'l'} Params */

  /**
   * @typedef {Object} Options
   * @property {boolean|import('../View.js').AnimationOptions} [animate=true] Animate view transitions.
   * @property {Array<Params>} [params=['x', 'y', 'z', 'r', 'l']] Properties to track. Default is to track
   * `x` (center x), `y` (center y), `z` (zoom), `r` (rotation) and `l` (layers).
   * @property {boolean} [replace=false] Replace the current URL without creating the new entry in browser history.
   * By default, changes in the map state result in a new entry being added to the browser history.
   * @property {string} [prefix=''] By default, the URL will be updated with search parameters x, y, z, and r.  To
   * avoid collisions with existing search parameters that your application uses, you can supply a custom prefix for
   * the ones used by this interaction (e.g. 'ol:').
   */

  /**
   * @classdesc
   * An interaction that synchronizes the map state with the URL.
   *
   * @api
   */
  class Link extends Interaction$1 {
    /**
     * @param {Options} [options] Link options.
     */
    constructor(options) {
      super();

      options = Object.assign(
        {
          animate: true,
          params: ['x', 'y', 'z', 'r', 'l'],
          replace: false,
          prefix: '',
        },
        options || {}
      );

      let animationOptions;
      if (options.animate === true) {
        animationOptions = {duration: 250};
      } else if (!options.animate) {
        animationOptions = null;
      } else {
        animationOptions = options.animate;
      }

      /**
       * @type {import('../View.js').AnimationOptions|null}
       * @private
       */
      this.animationOptions_ = animationOptions;

      /**
       * @type {Object<Params, boolean>}
       * @private
       */
      this.params_ = options.params.reduce((acc, value) => {
        acc[value] = true;
        return acc;
      }, {});

      /**
       * @private
       * @type {boolean}
       */
      this.replace_ = options.replace;

      /**
       * @private
       * @type {string}
       */
      this.prefix_ = options.prefix;

      /**
       * @private
       * @type {!Array<import("../events.js").EventsKey>}
       */
      this.listenerKeys_ = [];

      /**
       * @private
       * @type {boolean}
       */
      this.initial_ = true;

      this.updateState_ = this.updateState_.bind(this);
    }

    /**
     * @private
     * @param {string} name A parameter name.
     * @return {string} A name with the prefix applied.
     */
    getParamName_(name) {
      if (!this.prefix_) {
        return name;
      }
      return this.prefix_ + name;
    }

    /**
     * @private
     * @param {URLSearchParams} params The search params.
     * @param {string} name The unprefixed parameter name.
     * @return {string|null} The parameter value.
     */
    get_(params, name) {
      return params.get(this.getParamName_(name));
    }

    /**
     * @private
     * @param {URLSearchParams} params The search params.
     * @param {string} name The unprefixed parameter name.
     * @param {string} value The param value.
     */
    set_(params, name, value) {
      if (!(name in this.params_)) {
        return;
      }
      params.set(this.getParamName_(name), value);
    }

    /**
     * @private
     * @param {URLSearchParams} params The search params.
     * @param {string} name The unprefixed parameter name.
     */
    delete_(params, name) {
      if (!(name in this.params_)) {
        return;
      }
      params.delete(this.getParamName_(name));
    }

    /**
     * @param {import("../Map.js").default|null} map Map.
     */
    setMap(map) {
      const oldMap = this.getMap();
      super.setMap(map);
      if (map === oldMap) {
        return;
      }
      if (oldMap) {
        this.unregisterListeners_(oldMap);
      }
      if (map) {
        this.initial_ = true;
        this.updateState_();
        this.registerListeners_(map);
      }
    }

    /**
     * @param {import("../Map.js").default} map Map.
     * @private
     */
    registerListeners_(map) {
      this.listenerKeys_.push(
        listen(map, MapEventType.MOVEEND, this.updateUrl_, this),
        listen(map.getLayerGroup(), EventType.CHANGE, this.updateUrl_, this),
        listen(map, 'change:layergroup', this.handleChangeLayerGroup_, this)
      );

      if (!this.replace_) {
        addEventListener('popstate', this.updateState_);
      }
    }

    /**
     * @param {import("../Map.js").default} map Map.
     * @private
     */
    unregisterListeners_(map) {
      for (let i = 0, ii = this.listenerKeys_.length; i < ii; ++i) {
        unlistenByKey(this.listenerKeys_[i]);
      }
      this.listenerKeys_.length = 0;

      if (!this.replace_) {
        removeEventListener('popstate', this.updateState_);
      }

      const url = new URL(window.location.href);
      const params = url.searchParams;
      this.delete_(params, 'x');
      this.delete_(params, 'y');
      this.delete_(params, 'z');
      this.delete_(params, 'r');
      this.delete_(params, 'l');
      window.history.replaceState(null, '', url);
    }

    /**
     * @private
     */
    handleChangeLayerGroup_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      this.unregisterListeners_(map);
      this.registerListeners_(map);
      this.initial_ = true;
      this.updateUrl_();
    }

    /**
     * @private
     */
    updateState_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      const view = map.getView();
      if (!view) {
        return;
      }
      const url = new URL(window.location.href);
      const params = url.searchParams;

      let updateView = false;

      /**
       * @type {import('../View.js').AnimationOptions}
       */
      const viewProperties = {};

      const zoom = readNumber(this.get_(params, 'z'));
      if ('z' in this.params_ && differentNumber(zoom, view.getZoom())) {
        updateView = true;
        viewProperties.zoom = zoom;
      }

      const rotation = readNumber(this.get_(params, 'r'));
      if ('r' in this.params_ && differentNumber(rotation, view.getRotation())) {
        updateView = true;
        viewProperties.rotation = rotation;
      }

      const center = [
        readNumber(this.get_(params, 'x')),
        readNumber(this.get_(params, 'y')),
      ];
      if (
        ('x' in this.params_ || 'y' in this.params_) &&
        differentArray(center, view.getCenter())
      ) {
        updateView = true;
        viewProperties.center = center;
      }

      if (updateView) {
        if (!this.initial_ && this.animationOptions_) {
          view.animate(Object.assign(viewProperties, this.animationOptions_));
        } else {
          if (viewProperties.center) {
            view.setCenter(viewProperties.center);
          }
          if ('zoom' in viewProperties) {
            view.setZoom(viewProperties.zoom);
          }
          if ('rotation' in viewProperties) {
            view.setRotation(viewProperties.rotation);
          }
        }
      }

      const layers = map.getAllLayers();
      const layersParam = this.get_(params, 'l');
      if (
        'l' in this.params_ &&
        layersParam &&
        layersParam.length === layers.length
      ) {
        for (let i = 0, ii = layers.length; i < ii; ++i) {
          const value = parseInt(layersParam[i]);
          if (!isNaN(value)) {
            const visible = Boolean(value);
            const layer = layers[i];
            if (layer.getVisible() !== visible) {
              layer.setVisible(visible);
            }
          }
        }
      }
    }

    /**
     * @private
     */
    updateUrl_() {
      const map = this.getMap();
      if (!map) {
        return;
      }
      const view = map.getView();
      if (!view) {
        return;
      }
      const initial = this.initial_;
      this.initial_ = false;

      const center = view.getCenter();
      const zoom = view.getZoom();
      const rotation = view.getRotation();

      const layers = map.getAllLayers();
      const visibilities = new Array(layers.length);
      for (let i = 0, ii = layers.length; i < ii; ++i) {
        visibilities[i] = layers[i].getVisible() ? '1' : '0';
      }

      const url = new URL(window.location.href);
      const params = url.searchParams;

      this.set_(params, 'x', writeNumber(center[0]));
      this.set_(params, 'y', writeNumber(center[1]));
      this.set_(params, 'z', writeNumber(zoom));
      this.set_(params, 'r', writeNumber(rotation));
      this.set_(params, 'l', visibilities.join(''));

      if (url.href !== window.location.href) {
        if (initial || this.replace_) {
          window.history.replaceState(history.state, '', url);
        } else {
          window.history.pushState(null, '', url);
        }
      }
    }
  }

  var Link$1 = Link;

  /**
   * @module ol/interaction/Modify
   */

  /**
   * The segment index assigned to a circle's center when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  const CIRCLE_CENTER_INDEX = 0;

  /**
   * The segment index assigned to a circle's circumference when
   * breaking up a circle into ModifySegmentDataType segments.
   * @type {number}
   */
  const CIRCLE_CIRCUMFERENCE_INDEX = 1;

  const tempExtent = [0, 0, 0, 0];
  const tempSegment$1 = [];

  /**
   * @enum {string}
   */
  const ModifyEventType = {
    /**
     * Triggered upon feature modification start
     * @event ModifyEvent#modifystart
     * @api
     */
    MODIFYSTART: 'modifystart',
    /**
     * Triggered upon feature modification end
     * @event ModifyEvent#modifyend
     * @api
     */
    MODIFYEND: 'modifyend',
  };

  /**
   * @typedef {Object} SegmentData
   * @property {Array<number>} [depth] Depth.
   * @property {Feature} feature Feature.
   * @property {import("../geom/SimpleGeometry.js").default} geometry Geometry.
   * @property {number} [index] Index.
   * @property {Array<Array<number>>} segment Segment.
   * @property {Array<SegmentData>} [featureSegments] FeatureSegments.
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event will be considered to add or move a
   * vertex to the sketch. Default is
   * {@link module:ol/events/condition.primaryAction}.
   * @property {import("../events/condition.js").Condition} [deleteCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. By default,
   * {@link module:ol/events/condition.singleClick} with
   * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.
   * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
   * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
   * returns a boolean to indicate whether a new vertex should be added to the sketch
   * features. Default is {@link module:ol/events/condition.always}.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
   * pointer close enough to a segment or vertex for editing.
   * @property {import("../style/Style.js").StyleLike|import("../style/flat.js").FlatStyleLike} [style]
   * Style used for the modification point or vertex. For linestrings and polygons, this will
   * be the affected vertex, for circles a point along the circle, and for points the actual
   * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).
   * When using a style function, the point feature passed to the function will have a `features`
   * property - an array whose entries are the features that are being modified, and a `geometries`
   * property - an array whose entries are the geometries that are being modified. Both arrays are
   * in the same order. The `geometries` are only useful when modifying geometry collections, where
   * the geometry will be the particular geometry from the collection that is being modified.
   * @property {VectorSource} [source] The vector source with
   * features to modify.  If a vector source is not provided, a feature collection
   * must be provided with the `features` option.
   * @property {boolean|import("../layer/BaseVector").default} [hitDetection] When configured, point
   * features will be considered for modification based on their visual appearance, instead of being within
   * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is
   * provided, only the rendered representation of the features on that layer will be considered.
   * @property {Collection<Feature>} [features]
   * The features the interaction works on.  If a feature collection is not
   * provided, a vector source must be provided with the `source` option.
   * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
   * overlay.
   * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the
   * pointer coordinate when clicked within the `pixelTolerance`.
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
   * instances of this type.
   */
  class ModifyEvent extends BaseEvent {
    /**
     * @param {ModifyEventType} type Type.
     * @param {Collection<Feature>} features
     * The features modified.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent
     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     */
    constructor(type, features, mapBrowserEvent) {
      super(type);

      /**
       * The features being modified.
       * @type {Collection<Feature>}
       * @api
       */
      this.features = features;

      /**
       * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature
   */

  /**
   * @classdesc
   * Interaction for modifying feature geometries.  To modify features that have
   * been added to an existing source, construct the modify interaction with the
   * `source` option.  If you want to modify features in a collection (for example,
   * the collection used by a select interaction), construct the interaction with
   * the `features` option.  The interaction must be constructed with either a
   * `source` or `features` option.
   *
   * Cartesian distance from the pointer is used to determine the features that
   * will be modified. This means that geometries will only be considered for
   * modification when they are within the configured `pixelTolerance`. For point
   * geometries, the `hitDetection` option can be used to match their visual
   * appearance.
   *
   * By default, the interaction will allow deletion of vertices when the `alt`
   * key is pressed.  To configure the interaction with a different condition
   * for deletion, use the `deleteCondition` option.
   * @fires ModifyEvent
   * @api
   */
  class Modify extends PointerInteraction$1 {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      super(/** @type {import("./Pointer.js").Options} */ (options));

      /***
       * @type {ModifyOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {ModifyOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {ModifyOnSignature<void>}
       */
      this.un;

      /** @private */
      this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : primaryAction;

      /**
       * @private
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
       * @return {boolean} Combined condition result.
       */
      this.defaultDeleteCondition_ = function (mapBrowserEvent) {
        return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);
      };

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.deleteCondition_ = options.deleteCondition
        ? options.deleteCondition
        : this.defaultDeleteCondition_;

      /**
       * @type {import("../events/condition.js").Condition}
       * @private
       */
      this.insertVertexCondition_ = options.insertVertexCondition
        ? options.insertVertexCondition
        : always;

      /**
       * Editing vertex.
       * @type {Feature<Point>}
       * @private
       */
      this.vertexFeature_ = null;

      /**
       * Segments intersecting {@link this.vertexFeature_} by segment uid.
       * @type {Object<string, boolean>}
       * @private
       */
      this.vertexSegments_ = null;

      /**
       * @type {import("../pixel.js").Pixel}
       * @private
       */
      this.lastPixel_ = [0, 0];

      /**
       * Tracks if the next `singleclick` event should be ignored to prevent
       * accidental deletion right after vertex creation.
       * @type {boolean}
       * @private
       */
      this.ignoreNextSingleClick_ = false;

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.featuresBeingModified_ = null;

      /**
       * Segment RTree for each layer
       * @type {RBush<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush$1();

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ =
        options.pixelTolerance !== undefined ? options.pixelTolerance : 10;

      /**
       * @type {boolean}
       * @private
       */
      this.snappedToVertex_ = false;

      /**
       * Indicate whether the interaction is currently changing a feature's
       * coordinates.
       * @type {boolean}
       * @private
       */
      this.changingFeature_ = false;

      /**
       * @type {Array}
       * @private
       */
      this.dragSegments_ = [];

      /**
       * Draw overlay where sketch features are drawn.
       * @type {VectorLayer}
       * @private
       */
      this.overlay_ = new VectorLayer$1({
        source: new VectorSource$1({
          useSpatialIndex: false,
          wrapX: !!options.wrapX,
        }),
        style: options.style ? options.style : getDefaultStyleFunction$1(),
        updateWhileAnimating: true,
        updateWhileInteracting: true,
      });

      /**
       * @const
       * @private
       * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default): void>}
       */
      this.SEGMENT_WRITERS_ = {
        'Point': this.writePointGeometry_.bind(this),
        'LineString': this.writeLineStringGeometry_.bind(this),
        'LinearRing': this.writeLineStringGeometry_.bind(this),
        'Polygon': this.writePolygonGeometry_.bind(this),
        'MultiPoint': this.writeMultiPointGeometry_.bind(this),
        'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),
        'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),
        'Circle': this.writeCircleGeometry_.bind(this),
        'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),
      };

      /**
       * @type {VectorSource}
       * @private
       */
      this.source_ = null;

      /**
       * @type {boolean|import("../layer/BaseVector").default}
       */
      this.hitDetection_ = null;

      /** @type {Collection<Feature>} */
      let features;
      if (options.features) {
        features = options.features;
      } else if (options.source) {
        this.source_ = options.source;
        features = new Collection$1(this.source_.getFeatures());
        this.source_.addEventListener(
          VectorEventType.ADDFEATURE,
          this.handleSourceAdd_.bind(this)
        );
        this.source_.addEventListener(
          VectorEventType.REMOVEFEATURE,
          this.handleSourceRemove_.bind(this)
        );
      }
      if (!features) {
        throw new Error(
          'The modify interaction requires features, a source or a layer'
        );
      }
      if (options.hitDetection) {
        this.hitDetection_ = options.hitDetection;
      }

      /**
       * @type {Collection<Feature>}
       * @private
       */
      this.features_ = features;

      this.features_.forEach(this.addFeature_.bind(this));
      this.features_.addEventListener(
        CollectionEventType.ADD,
        this.handleFeatureAdd_.bind(this)
      );
      this.features_.addEventListener(
        CollectionEventType.REMOVE,
        this.handleFeatureRemove_.bind(this)
      );

      /**
       * @type {import("../MapBrowserEvent.js").default}
       * @private
       */
      this.lastPointerEvent_ = null;

      /**
       * Delta (x, y in map units) between matched rtree vertex and pointer vertex.
       * @type {Array<number>}
       */
      this.delta_ = [0, 0];

      /**
       * @private
       */
      this.snapToPointer_ =
        options.snapToPointer === undefined
          ? !this.hitDetection_
          : options.snapToPointer;
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    addFeature_(feature) {
      const geometry = feature.getGeometry();
      if (geometry) {
        const writer = this.SEGMENT_WRITERS_[geometry.getType()];
        if (writer) {
          writer(feature, geometry);
        }
      }
      const map = this.getMap();
      if (map && map.isRendered() && this.getActive()) {
        this.handlePointerAtPixel_(this.lastPixel_, map);
      }
      feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.
     * @private
     */
    willModifyFeatures_(evt, segments) {
      if (!this.featuresBeingModified_) {
        this.featuresBeingModified_ = new Collection$1();
        const features = this.featuresBeingModified_.getArray();
        for (let i = 0, ii = segments.length; i < ii; ++i) {
          const segment = segments[i];
          for (let s = 0, ss = segment.length; s < ss; ++s) {
            const feature = segment[s].feature;
            if (feature && !features.includes(feature)) {
              this.featuresBeingModified_.push(feature);
            }
          }
        }
        if (this.featuresBeingModified_.getLength() === 0) {
          this.featuresBeingModified_ = null;
        } else {
          this.dispatchEvent(
            new ModifyEvent(
              ModifyEventType.MODIFYSTART,
              this.featuresBeingModified_,
              evt
            )
          );
        }
      }
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeature_(feature) {
      this.removeFeatureSegmentData_(feature);
      // Remove the vertex feature if the collection of candidate features is empty.
      if (this.vertexFeature_ && this.features_.getLength() === 0) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      feature.removeEventListener(
        EventType.CHANGE,
        this.boundHandleFeatureChange_
      );
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeatureSegmentData_(feature) {
      const rBush = this.rBush_;
      /** @type {Array<SegmentData>} */
      const nodesToRemove = [];
      rBush.forEach(
        /**
         * @param {SegmentData} node RTree node.
         */
        function (node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        }
      );
      for (let i = nodesToRemove.length - 1; i >= 0; --i) {
        const nodeToRemove = nodesToRemove[i];
        for (let j = this.dragSegments_.length - 1; j >= 0; --j) {
          if (this.dragSegments_[j][0] === nodeToRemove) {
            this.dragSegments_.splice(j, 1);
          }
        }
        rBush.remove(nodeToRemove);
      }
    }

    /**
     * Activate or deactivate the interaction.
     * @param {boolean} active Active.
     * @observable
     * @api
     */
    setActive(active) {
      if (this.vertexFeature_ && !active) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
      super.setActive(active);
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     */
    setMap(map) {
      this.overlay_.setMap(map);
      super.setMap(map);
    }

    /**
     * Get the overlay layer that this interaction renders the modification point or vertex to.
     * @return {VectorLayer} Overlay layer.
     * @api
     */
    getOverlay() {
      return this.overlay_;
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceAdd_(event) {
      if (event.feature) {
        this.features_.push(event.feature);
      }
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceRemove_(event) {
      if (event.feature) {
        this.features_.remove(event.feature);
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    handleFeatureAdd_(evt) {
      this.addFeature_(evt.element);
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    handleFeatureChange_(evt) {
      if (!this.changingFeature_) {
        const feature = /** @type {Feature} */ (evt.target);
        this.removeFeature_(feature);
        this.addFeature_(feature);
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    handleFeatureRemove_(evt) {
      this.removeFeature_(evt.element);
    }

    /**
     * @param {Feature} feature Feature
     * @param {Point} geometry Geometry.
     * @private
     */
    writePointGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();

      /** @type {SegmentData} */
      const segmentData = {
        feature: feature,
        geometry: geometry,
        segment: [coordinates, coordinates],
      };

      this.rBush_.insert(geometry.getExtent(), segmentData);
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    writeMultiPointGeometry_(feature, geometry) {
      const points = geometry.getCoordinates();
      for (let i = 0, ii = points.length; i < ii; ++i) {
        const coordinates = points[i];

        /** @type {SegmentData} */
        const segmentData = {
          feature: feature,
          geometry: geometry,
          depth: [i],
          index: i,
          segment: [coordinates, coordinates],
        };

        this.rBush_.insert(geometry.getExtent(), segmentData);
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    writeLineStringGeometry_(feature, geometry) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        const segment = coordinates.slice(i, i + 2);

        /** @type {SegmentData} */
        const segmentData = {
          feature: feature,
          geometry: geometry,
          index: i,
          segment: segment,
        };

        this.rBush_.insert(boundingExtent(segment), segmentData);
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    writeMultiLineStringGeometry_(feature, geometry) {
      const lines = geometry.getCoordinates();
      for (let j = 0, jj = lines.length; j < jj; ++j) {
        const coordinates = lines[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);

          /** @type {SegmentData} */
          const segmentData = {
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment,
          };

          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    writePolygonGeometry_(feature, geometry) {
      const rings = geometry.getCoordinates();
      for (let j = 0, jj = rings.length; j < jj; ++j) {
        const coordinates = rings[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          const segment = coordinates.slice(i, i + 2);

          /** @type {SegmentData} */
          const segmentData = {
            feature: feature,
            geometry: geometry,
            depth: [j],
            index: i,
            segment: segment,
          };

          this.rBush_.insert(boundingExtent(segment), segmentData);
        }
      }
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    writeMultiPolygonGeometry_(feature, geometry) {
      const polygons = geometry.getCoordinates();
      for (let k = 0, kk = polygons.length; k < kk; ++k) {
        const rings = polygons[k];
        for (let j = 0, jj = rings.length; j < jj; ++j) {
          const coordinates = rings[j];
          for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            const segment = coordinates.slice(i, i + 2);

            /** @type {SegmentData} */
            const segmentData = {
              feature: feature,
              geometry: geometry,
              depth: [j, k],
              index: i,
              segment: segment,
            };

            this.rBush_.insert(boundingExtent(segment), segmentData);
          }
        }
      }
    }

    /**
     * We convert a circle into two segments.  The segment at index
     * {@link CIRCLE_CENTER_INDEX} is the
     * circle's center (a point).  The segment at index
     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
     * the circumference, and is not a line segment.
     *
     * @param {Feature} feature Feature.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    writeCircleGeometry_(feature, geometry) {
      const coordinates = geometry.getCenter();

      /** @type {SegmentData} */
      const centerSegmentData = {
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CENTER_INDEX,
        segment: [coordinates, coordinates],
      };

      /** @type {SegmentData} */
      const circumferenceSegmentData = {
        feature: feature,
        geometry: geometry,
        index: CIRCLE_CIRCUMFERENCE_INDEX,
        segment: [coordinates, coordinates],
      };

      const featureSegments = [centerSegmentData, circumferenceSegmentData];
      centerSegmentData.featureSegments = featureSegments;
      circumferenceSegmentData.featureSegments = featureSegments;
      this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
      let circleGeometry = /** @type {import("../geom/Geometry.js").default} */ (
        geometry
      );
      const userProjection = getUserProjection();
      if (userProjection && this.getMap()) {
        const projection = this.getMap().getView().getProjection();
        circleGeometry = circleGeometry
          .clone()
          .transform(userProjection, projection);
        circleGeometry = fromCircle(
          /** @type {import("../geom/Circle.js").default} */ (circleGeometry)
        ).transform(projection, userProjection);
      }
      this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);
    }

    /**
     * @param {Feature} feature Feature
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    writeGeometryCollectionGeometry_(feature, geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0; i < geometries.length; ++i) {
        const geometry = geometries[i];
        const writer = this.SEGMENT_WRITERS_[geometry.getType()];
        writer(feature, geometry);
      }
    }

    /**
     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
     * @param {Array<Feature>} features The features being modified.
     * @param {Array<import("../geom/SimpleGeometry.js").default>} geometries The geometries being modified.
     * @return {Feature} Vertex feature.
     * @private
     */
    createOrUpdateVertexFeature_(coordinates, features, geometries) {
      let vertexFeature = this.vertexFeature_;
      if (!vertexFeature) {
        vertexFeature = new Feature$1(new Point$1(coordinates));
        this.vertexFeature_ = vertexFeature;
        this.overlay_.getSource().addFeature(vertexFeature);
      } else {
        const geometry = vertexFeature.getGeometry();
        geometry.setCoordinates(coordinates);
      }
      vertexFeature.set('features', features);
      vertexFeature.set('geometries', geometries);
      return vertexFeature;
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent) {
        return true;
      }
      this.lastPointerEvent_ = mapBrowserEvent;

      let handled;
      if (
        !mapBrowserEvent.map.getView().getInteracting() &&
        mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&
        !this.handlingDownUpSequence
      ) {
        this.handlePointerMove_(mapBrowserEvent);
      }
      if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
        if (
          mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||
          !this.ignoreNextSingleClick_
        ) {
          handled = this.removePoint();
        } else {
          handled = true;
        }
      }

      if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {
        this.ignoreNextSingleClick_ = false;
      }

      return super.handleEvent(mapBrowserEvent) && !handled;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     */
    handleDragEvent(evt) {
      this.ignoreNextSingleClick_ = false;
      this.willModifyFeatures_(evt, this.dragSegments_);

      const vertex = [
        evt.coordinate[0] + this.delta_[0],
        evt.coordinate[1] + this.delta_[1],
      ];
      const features = [];
      const geometries = [];
      for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
        const dragSegment = this.dragSegments_[i];
        const segmentData = dragSegment[0];
        const feature = segmentData.feature;
        if (!features.includes(feature)) {
          features.push(feature);
        }
        const geometry = segmentData.geometry;
        if (!geometries.includes(geometry)) {
          geometries.push(geometry);
        }
        const depth = segmentData.depth;
        let coordinates;
        const segment = segmentData.segment;
        const index = dragSegment[1];

        while (vertex.length < geometry.getStride()) {
          vertex.push(segment[index][vertex.length]);
        }

        switch (geometry.getType()) {
          case 'Point':
            coordinates = vertex;
            segment[0] = vertex;
            segment[1] = vertex;
            break;
          case 'MultiPoint':
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index] = vertex;
            segment[0] = vertex;
            segment[1] = vertex;
            break;
          case 'LineString':
            coordinates = geometry.getCoordinates();
            coordinates[segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'MultiLineString':
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'Polygon':
            coordinates = geometry.getCoordinates();
            coordinates[depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'MultiPolygon':
            coordinates = geometry.getCoordinates();
            coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
            segment[index] = vertex;
            break;
          case 'Circle':
            segment[0] = vertex;
            segment[1] = vertex;
            if (segmentData.index === CIRCLE_CENTER_INDEX) {
              this.changingFeature_ = true;
              geometry.setCenter(vertex);
              this.changingFeature_ = false;
            } else {
              // We're dragging the circle's circumference:
              this.changingFeature_ = true;
              const projection = evt.map.getView().getProjection();
              let radius = distance(
                fromUserCoordinate(geometry.getCenter(), projection),
                fromUserCoordinate(vertex, projection)
              );
              const userProjection = getUserProjection();
              if (userProjection) {
                const circleGeometry = geometry
                  .clone()
                  .transform(userProjection, projection);
                circleGeometry.setRadius(radius);
                radius = circleGeometry
                  .transform(projection, userProjection)
                  .getRadius();
              }
              geometry.setRadius(radius);
              this.changingFeature_ = false;
            }
            break;
          // pass
        }

        if (coordinates) {
          this.setGeometryCoordinates_(geometry, coordinates);
        }
      }
      this.createOrUpdateVertexFeature_(vertex, features, geometries);
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(evt) {
      if (!this.condition_(evt)) {
        return false;
      }
      const pixelCoordinate = evt.coordinate;
      this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);
      this.dragSegments_.length = 0;
      this.featuresBeingModified_ = null;
      const vertexFeature = this.vertexFeature_;
      if (vertexFeature) {
        const projection = evt.map.getView().getProjection();
        const insertVertices = [];
        const vertex = vertexFeature.getGeometry().getCoordinates();
        const vertexExtent = boundingExtent([vertex]);
        const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
        const componentSegments = {};
        segmentDataMatches.sort(compareIndexes);
        for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
          const segmentDataMatch = segmentDataMatches[i];
          const segment = segmentDataMatch.segment;
          let uid = getUid(segmentDataMatch.geometry);
          const depth = segmentDataMatch.depth;
          if (depth) {
            uid += '-' + depth.join('-'); // separate feature components
          }
          if (!componentSegments[uid]) {
            componentSegments[uid] = new Array(2);
          }

          if (
            segmentDataMatch.geometry.getType() === 'Circle' &&
            segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX
          ) {
            const closestVertex = closestOnSegmentData(
              pixelCoordinate,
              segmentDataMatch,
              projection
            );
            if (
              equals$1(closestVertex, vertex) &&
              !componentSegments[uid][0]
            ) {
              this.dragSegments_.push([segmentDataMatch, 0]);
              componentSegments[uid][0] = segmentDataMatch;
            }
            continue;
          }

          if (
            equals$1(segment[0], vertex) &&
            !componentSegments[uid][0]
          ) {
            this.dragSegments_.push([segmentDataMatch, 0]);
            componentSegments[uid][0] = segmentDataMatch;
            continue;
          }

          if (
            equals$1(segment[1], vertex) &&
            !componentSegments[uid][1]
          ) {
            if (
              componentSegments[uid][0] &&
              componentSegments[uid][0].index === 0
            ) {
              let coordinates = segmentDataMatch.geometry.getCoordinates();
              switch (segmentDataMatch.geometry.getType()) {
                // prevent dragging closed linestrings by the connecting node
                case 'LineString':
                case 'MultiLineString':
                  continue;
                // if dragging the first vertex of a polygon, ensure the other segment
                // belongs to the closing vertex of the linear ring
                case 'MultiPolygon':
                  coordinates = coordinates[depth[1]];
                /* falls through */
                case 'Polygon':
                  if (
                    segmentDataMatch.index !==
                    coordinates[depth[0]].length - 2
                  ) {
                    continue;
                  }
                  break;
                // pass
              }
            }

            this.dragSegments_.push([segmentDataMatch, 1]);
            componentSegments[uid][1] = segmentDataMatch;
            continue;
          }

          if (
            getUid(segment) in this.vertexSegments_ &&
            !componentSegments[uid][0] &&
            !componentSegments[uid][1] &&
            this.insertVertexCondition_(evt)
          ) {
            insertVertices.push(segmentDataMatch);
          }
        }

        if (insertVertices.length) {
          this.willModifyFeatures_(evt, [insertVertices]);
        }

        for (let j = insertVertices.length - 1; j >= 0; --j) {
          this.insertVertex_(insertVertices[j], vertex);
        }
      }
      return !!this.vertexFeature_;
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(evt) {
      for (let i = this.dragSegments_.length - 1; i >= 0; --i) {
        const segmentData = this.dragSegments_[i][0];
        const geometry = segmentData.geometry;
        if (geometry.getType() === 'Circle') {
          // Update a circle object in the R* bush:
          const coordinates = geometry.getCenter();
          const centerSegmentData = segmentData.featureSegments[0];
          const circumferenceSegmentData = segmentData.featureSegments[1];
          centerSegmentData.segment[0] = coordinates;
          centerSegmentData.segment[1] = coordinates;
          circumferenceSegmentData.segment[0] = coordinates;
          circumferenceSegmentData.segment[1] = coordinates;
          this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);
          let circleGeometry = geometry;
          const userProjection = getUserProjection();
          if (userProjection) {
            const projection = evt.map.getView().getProjection();
            circleGeometry = circleGeometry
              .clone()
              .transform(userProjection, projection);
            circleGeometry = fromCircle(circleGeometry).transform(
              projection,
              userProjection
            );
          }
          this.rBush_.update(
            circleGeometry.getExtent(),
            circumferenceSegmentData
          );
        } else {
          this.rBush_.update(boundingExtent(segmentData.segment), segmentData);
        }
      }
      if (this.featuresBeingModified_) {
        this.dispatchEvent(
          new ModifyEvent(
            ModifyEventType.MODIFYEND,
            this.featuresBeingModified_,
            evt
          )
        );
        this.featuresBeingModified_ = null;
      }
      return false;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @private
     */
    handlePointerMove_(evt) {
      this.lastPixel_ = evt.pixel;
      this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../Map.js").default} map Map.
     * @param {import("../coordinate.js").Coordinate} [coordinate] The pixel Coordinate.
     * @private
     */
    handlePointerAtPixel_(pixel, map, coordinate) {
      const pixelCoordinate = coordinate || map.getCoordinateFromPixel(pixel);
      const projection = map.getView().getProjection();
      const sortByDistance = function (a, b) {
        return (
          projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -
          projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)
        );
      };

      /** @type {Array<SegmentData>|undefined} */
      let nodes;
      /** @type {Point|undefined} */
      let hitPointGeometry;
      if (this.hitDetection_) {
        const layerFilter =
          typeof this.hitDetection_ === 'object'
            ? (layer) => layer === this.hitDetection_
            : undefined;
        map.forEachFeatureAtPixel(
          pixel,
          (feature, layer, geometry) => {
            const geom = geometry || feature.getGeometry();
            if (
              geom.getType() === 'Point' &&
              feature instanceof Feature$1 &&
              this.features_.getArray().includes(feature)
            ) {
              hitPointGeometry = /** @type {Point} */ (geom);
              const coordinate = hitPointGeometry
                .getFlatCoordinates()
                .slice(0, 2);
              nodes = [
                {
                  feature,
                  geometry: hitPointGeometry,
                  segment: [coordinate, coordinate],
                },
              ];
            }
            return true;
          },
          {layerFilter}
        );
      }
      if (!nodes) {
        const viewExtent = fromUserExtent(
          createOrUpdateFromCoordinate(pixelCoordinate, tempExtent),
          projection
        );
        const buffer = map.getView().getResolution() * this.pixelTolerance_;
        const box = toUserExtent(
          buffer$2(viewExtent, buffer, tempExtent),
          projection
        );
        nodes = this.rBush_.getInExtent(box);
      }

      if (nodes && nodes.length > 0) {
        const node = nodes.sort(sortByDistance)[0];
        const closestSegment = node.segment;
        let vertex = closestOnSegmentData(pixelCoordinate, node, projection);
        const vertexPixel = map.getPixelFromCoordinate(vertex);
        let dist = distance(pixel, vertexPixel);
        if (hitPointGeometry || dist <= this.pixelTolerance_) {
          /** @type {Object<string, boolean>} */
          const vertexSegments = {};
          vertexSegments[getUid(closestSegment)] = true;

          if (!this.snapToPointer_) {
            this.delta_[0] = vertex[0] - pixelCoordinate[0];
            this.delta_[1] = vertex[1] - pixelCoordinate[1];
          }
          if (
            node.geometry.getType() === 'Circle' &&
            node.index === CIRCLE_CIRCUMFERENCE_INDEX
          ) {
            this.snappedToVertex_ = true;
            this.createOrUpdateVertexFeature_(
              vertex,
              [node.feature],
              [node.geometry]
            );
          } else {
            const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
            const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
            const squaredDist1 = squaredDistance(vertexPixel, pixel1);
            const squaredDist2 = squaredDistance(vertexPixel, pixel2);
            dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
            this.snappedToVertex_ = dist <= this.pixelTolerance_;
            if (this.snappedToVertex_) {
              vertex =
                squaredDist1 > squaredDist2
                  ? closestSegment[1]
                  : closestSegment[0];
            }
            this.createOrUpdateVertexFeature_(
              vertex,
              [node.feature],
              [node.geometry]
            );
            const geometries = {};
            geometries[getUid(node.geometry)] = true;
            for (let i = 1, ii = nodes.length; i < ii; ++i) {
              const segment = nodes[i].segment;
              if (
                (equals$1(closestSegment[0], segment[0]) &&
                  equals$1(closestSegment[1], segment[1])) ||
                (equals$1(closestSegment[0], segment[1]) &&
                  equals$1(closestSegment[1], segment[0]))
              ) {
                const geometryUid = getUid(nodes[i].geometry);
                if (!(geometryUid in geometries)) {
                  geometries[geometryUid] = true;
                  vertexSegments[getUid(segment)] = true;
                }
              } else {
                break;
              }
            }
          }

          this.vertexSegments_ = vertexSegments;
          return;
        }
      }
      if (this.vertexFeature_) {
        this.overlay_.getSource().removeFeature(this.vertexFeature_);
        this.vertexFeature_ = null;
      }
    }

    /**
     * @param {SegmentData} segmentData Segment data.
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @private
     */
    insertVertex_(segmentData, vertex) {
      const segment = segmentData.segment;
      const feature = segmentData.feature;
      const geometry = segmentData.geometry;
      const depth = segmentData.depth;
      const index = segmentData.index;
      let coordinates;

      while (vertex.length < geometry.getStride()) {
        vertex.push(0);
      }

      switch (geometry.getType()) {
        case 'MultiLineString':
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case 'Polygon':
          coordinates = geometry.getCoordinates();
          coordinates[depth[0]].splice(index + 1, 0, vertex);
          break;
        case 'MultiPolygon':
          coordinates = geometry.getCoordinates();
          coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
          break;
        case 'LineString':
          coordinates = geometry.getCoordinates();
          coordinates.splice(index + 1, 0, vertex);
          break;
        default:
          return;
      }

      this.setGeometryCoordinates_(geometry, coordinates);
      const rTree = this.rBush_;
      rTree.remove(segmentData);
      this.updateSegmentIndices_(geometry, index, depth, 1);

      /** @type {SegmentData} */
      const newSegmentData = {
        segment: [segment[0], vertex],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index,
      };

      rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);
      this.dragSegments_.push([newSegmentData, 1]);

      /** @type {SegmentData} */
      const newSegmentData2 = {
        segment: [vertex, segment[1]],
        feature: feature,
        geometry: geometry,
        depth: depth,
        index: index + 1,
      };

      rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);
      this.dragSegments_.push([newSegmentData2, 0]);
      this.ignoreNextSingleClick_ = true;
    }

    /**
     * Removes the vertex currently being pointed.
     * @return {boolean} True when a vertex was removed.
     * @api
     */
    removePoint() {
      if (
        this.lastPointerEvent_ &&
        this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG
      ) {
        const evt = this.lastPointerEvent_;
        this.willModifyFeatures_(evt, this.dragSegments_);
        const removed = this.removeVertex_();
        if (this.featuresBeingModified_) {
          this.dispatchEvent(
            new ModifyEvent(
              ModifyEventType.MODIFYEND,
              this.featuresBeingModified_,
              evt
            )
          );
        }

        this.featuresBeingModified_ = null;
        return removed;
      }
      return false;
    }

    /**
     * Removes a vertex from all matching features.
     * @return {boolean} True when a vertex was removed.
     * @private
     */
    removeVertex_() {
      const dragSegments = this.dragSegments_;
      const segmentsByFeature = {};
      let deleted = false;
      let component, coordinates, dragSegment, geometry, i, index, left;
      let newIndex, right, segmentData, uid;
      for (i = dragSegments.length - 1; i >= 0; --i) {
        dragSegment = dragSegments[i];
        segmentData = dragSegment[0];
        uid = getUid(segmentData.feature);
        if (segmentData.depth) {
          // separate feature components
          uid += '-' + segmentData.depth.join('-');
        }
        if (!(uid in segmentsByFeature)) {
          segmentsByFeature[uid] = {};
        }
        if (dragSegment[1] === 0) {
          segmentsByFeature[uid].right = segmentData;
          segmentsByFeature[uid].index = segmentData.index;
        } else if (dragSegment[1] == 1) {
          segmentsByFeature[uid].left = segmentData;
          segmentsByFeature[uid].index = segmentData.index + 1;
        }
      }
      for (uid in segmentsByFeature) {
        right = segmentsByFeature[uid].right;
        left = segmentsByFeature[uid].left;
        index = segmentsByFeature[uid].index;
        newIndex = index - 1;
        if (left !== undefined) {
          segmentData = left;
        } else {
          segmentData = right;
        }
        if (newIndex < 0) {
          newIndex = 0;
        }
        geometry = segmentData.geometry;
        coordinates = geometry.getCoordinates();
        component = coordinates;
        deleted = false;
        switch (geometry.getType()) {
          case 'MultiLineString':
            if (coordinates[segmentData.depth[0]].length > 2) {
              coordinates[segmentData.depth[0]].splice(index, 1);
              deleted = true;
            }
            break;
          case 'LineString':
            if (coordinates.length > 2) {
              coordinates.splice(index, 1);
              deleted = true;
            }
            break;
          case 'MultiPolygon':
            component = component[segmentData.depth[1]];
          /* falls through */
          case 'Polygon':
            component = component[segmentData.depth[0]];
            if (component.length > 4) {
              if (index == component.length - 1) {
                index = 0;
              }
              component.splice(index, 1);
              deleted = true;
              if (index === 0) {
                // close the ring again
                component.pop();
                component.push(component[0]);
                newIndex = component.length - 1;
              }
            }
            break;
          // pass
        }

        if (deleted) {
          this.setGeometryCoordinates_(geometry, coordinates);
          const segments = [];
          if (left !== undefined) {
            this.rBush_.remove(left);
            segments.push(left.segment[0]);
          }
          if (right !== undefined) {
            this.rBush_.remove(right);
            segments.push(right.segment[1]);
          }
          if (left !== undefined && right !== undefined) {
            /** @type {SegmentData} */
            const newSegmentData = {
              depth: segmentData.depth,
              feature: segmentData.feature,
              geometry: segmentData.geometry,
              index: newIndex,
              segment: segments,
            };

            this.rBush_.insert(
              boundingExtent(newSegmentData.segment),
              newSegmentData
            );
          }
          this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
          if (this.vertexFeature_) {
            this.overlay_.getSource().removeFeature(this.vertexFeature_);
            this.vertexFeature_ = null;
          }
          dragSegments.length = 0;
        }
      }
      return deleted;
    }

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array} coordinates Coordinates.
     * @private
     */
    setGeometryCoordinates_(geometry, coordinates) {
      this.changingFeature_ = true;
      geometry.setCoordinates(coordinates);
      this.changingFeature_ = false;
    }

    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {number} index Index.
     * @param {Array<number>|undefined} depth Depth.
     * @param {number} delta Delta (1 or -1).
     * @private
     */
    updateSegmentIndices_(geometry, index, depth, delta) {
      this.rBush_.forEachInExtent(
        geometry.getExtent(),
        function (segmentDataMatch) {
          if (
            segmentDataMatch.geometry === geometry &&
            (depth === undefined ||
              segmentDataMatch.depth === undefined ||
              equals$3(segmentDataMatch.depth, depth)) &&
            segmentDataMatch.index > index
          ) {
            segmentDataMatch.index += delta;
          }
        }
      );
    }
  }

  /**
   * @param {SegmentData} a The first segment data.
   * @param {SegmentData} b The second segment data.
   * @return {number} The difference in indexes.
   */
  function compareIndexes(a, b) {
    return a.index - b.index;
  }

  /**
   * Returns the distance from a point to a line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
   *        which to calculate the distance.
   * @param {SegmentData} segmentData The object describing the line
   *        segment we are calculating the distance to.
   * @param {import("../proj/Projection.js").default} projection The view projection.
   * @return {number} The square of the distance between a point and a line segment.
   */
  function projectedDistanceToSegmentDataSquared(
    pointCoordinates,
    segmentData,
    projection
  ) {
    const geometry = segmentData.geometry;

    if (geometry.getType() === 'Circle') {
      let circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
        geometry
      );

      if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
        const userProjection = getUserProjection();
        if (userProjection) {
          circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
            circleGeometry.clone().transform(userProjection, projection)
          );
        }
        const distanceToCenterSquared = squaredDistance(
          circleGeometry.getCenter(),
          fromUserCoordinate(pointCoordinates, projection)
        );
        const distanceToCircumference =
          Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
        return distanceToCircumference * distanceToCircumference;
      }
    }

    const coordinate = fromUserCoordinate(pointCoordinates, projection);
    tempSegment$1[0] = fromUserCoordinate(segmentData.segment[0], projection);
    tempSegment$1[1] = fromUserCoordinate(segmentData.segment[1], projection);
    return squaredDistanceToSegment(coordinate, tempSegment$1);
  }

  /**
   * Returns the point closest to a given line segment.
   *
   * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
   *        should be found.
   * @param {SegmentData} segmentData The object describing the line
   *        segment which should contain the closest point.
   * @param {import("../proj/Projection.js").default} projection The view projection.
   * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
   */
  function closestOnSegmentData(pointCoordinates, segmentData, projection) {
    const geometry = segmentData.geometry;

    if (
      geometry.getType() === 'Circle' &&
      segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX
    ) {
      let circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
        geometry
      );
      const userProjection = getUserProjection();
      if (userProjection) {
        circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
          circleGeometry.clone().transform(userProjection, projection)
        );
      }
      return toUserCoordinate(
        circleGeometry.getClosestPoint(
          fromUserCoordinate(pointCoordinates, projection)
        ),
        projection
      );
    }
    const coordinate = fromUserCoordinate(pointCoordinates, projection);
    tempSegment$1[0] = fromUserCoordinate(segmentData.segment[0], projection);
    tempSegment$1[1] = fromUserCoordinate(segmentData.segment[1], projection);
    return toUserCoordinate(
      closestOnSegment(coordinate, tempSegment$1),
      projection
    );
  }

  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction$1() {
    const style = createEditingStyle();
    return function (feature, resolution) {
      return style['Point'];
    };
  }

  var Modify$1 = Modify;

  /**
   * @module ol/interaction/Select
   */

  /**
   * @enum {string}
   */
  const SelectEventType = {
    /**
     * Triggered when feature(s) has been (de)selected.
     * @event SelectEvent#select
     * @api
     */
    SELECT: 'select',
  };

  /**
   * A function that takes an {@link module:ol/Feature~Feature} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @typedef {function(import("../Feature.js").default, import("../layer/Layer.js").default<import("../source/Source").default>):boolean} FilterFunction
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [addCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition.never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is the event
   * for the selected features as a whole. By default, this is
   * {@link module:ol/events/condition.singleClick}. Clicking on a feature selects that
   * feature and removes any that were in the selection. Clicking outside any
   * feature removes all from the selection.
   * See `toggle`, `add`, `remove` options for adding/removing extra features to/
   * from the selection.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} [layers]
   * A list of layers from which features should be selected. Alternatively, a
   * filter function can be provided. The function will be called for each layer
   * in the map and should return `true` for layers that you want to be
   * selectable. If the option is absent, all visible layers will be considered
   * selectable.
   * @property {import("../style/Style.js").StyleLike|null} [style]
   * Style for the selected features. By default the default edit style is used
   * (see {@link module:ol/style/Style~Style}). Set to `null` if this interaction should not apply
   * any style changes for selected features.
   * If set to a falsey value, the selected feature's style will not change.
   * @property {import("../events/condition.js").Condition} [removeCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * By default, this is {@link module:ol/events/condition.never}. Use this if you
   * want to use different events for add and remove instead of `toggle`.
   * @property {import("../events/condition.js").Condition} [toggleCondition] A function
   * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. This is in addition
   * to the `condition` event. By default,
   * {@link module:ol/events/condition.shiftKeyOnly}, i.e. pressing `shift` as
   * well as the `condition` event, adds that feature to the current selection if
   * it is not currently selected, and removes it if it is. See `add` and `remove`
   * if you want to use different events instead of a toggle.
   * @property {boolean} [multi=false] A boolean that determines if the default
   * behaviour should select only single features or all (overlapping) features at
   * the clicked map position. The default of `false` means single select.
   * @property {Collection<Feature>} [features]
   * Collection where the interaction will place selected features. Optional. If
   * not set the interaction will create a collection. In any case the collection
   * used by the interaction is returned by
   * {@link module:ol/interaction/Select~Select#getFeatures}.
   * @property {FilterFunction} [filter] A function
   * that takes an {@link module:ol/Feature~Feature} and an
   * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
   * selected or `false` otherwise.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
   * the radius around the given position will be checked for features.
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
   * this type.
   */
  class SelectEvent extends BaseEvent {
    /**
     * @param {SelectEventType} type The event type.
     * @param {Array<import("../Feature.js").default>} selected Selected features.
     * @param {Array<import("../Feature.js").default>} deselected Deselected features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Associated
     *     {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
     */
    constructor(type, selected, deselected, mapBrowserEvent) {
      super(type);

      /**
       * Selected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.selected = selected;

      /**
       * Deselected features array.
       * @type {Array<import("../Feature.js").default>}
       * @api
       */
      this.deselected = deselected;

      /**
       * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /**
   * Original feature styles to reset to when features are no longer selected.
   * @type {Object<number, import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction>}
   */
  const originalFeatureStyles = {};

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'select', SelectEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'select', Return>} SelectOnSignature
   */

  /**
   * @classdesc
   * Interaction for selecting vector features. By default, selected features are
   * styled differently, so this interaction can be used for visual highlighting,
   * as well as selecting features for other actions, such as modification or
   * output. There are three ways of controlling which features are selected:
   * using the browser event as defined by the `condition` and optionally the
   * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
   * further feature filter using the `filter` option.
   *
   * @fires SelectEvent
   * @api
   */
  class Select extends Interaction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();

      /***
       * @type {SelectOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {SelectOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {SelectOnSignature<void>}
       */
      this.un;

      options = options ? options : {};

      /**
       * @private
       */
      this.boundAddFeature_ = this.addFeature_.bind(this);

      /**
       * @private
       */
      this.boundRemoveFeature_ = this.removeFeature_.bind(this);

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : singleClick;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.addCondition_ = options.addCondition ? options.addCondition : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.removeCondition_ = options.removeCondition
        ? options.removeCondition
        : never;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.toggleCondition_ = options.toggleCondition
        ? options.toggleCondition
        : shiftKeyOnly;

      /**
       * @private
       * @type {boolean}
       */
      this.multi_ = options.multi ? options.multi : false;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      /**
       * @private
       * @type {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null}
       */
      this.style_ =
        options.style !== undefined ? options.style : getDefaultStyleFunction();

      /**
       * @private
       * @type {Collection<Feature>}
       */
      this.features_ = options.features || new Collection$1();

      /** @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} */
      let layerFilter;
      if (options.layers) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          const layers = options.layers;
          layerFilter = function (layer) {
            return layers.includes(layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * An association between selected feature (key)
       * and layer (value)
       * @private
       * @type {Object<string, import("../layer/Layer.js").default>}
       */
      this.featureLayerAssociation_ = {};
    }

    /**
     * @param {import("../Feature.js").default} feature Feature.
     * @param {import("../layer/Layer.js").default} layer Layer.
     * @private
     */
    addFeatureLayerAssociation_(feature, layer) {
      this.featureLayerAssociation_[getUid(feature)] = layer;
    }

    /**
     * Get the selected features.
     * @return {Collection<Feature>} Features collection.
     * @api
     */
    getFeatures() {
      return this.features_;
    }

    /**
     * Returns the Hit-detection tolerance.
     * @return {number} Hit tolerance in pixels.
     * @api
     */
    getHitTolerance() {
      return this.hitTolerance_;
    }

    /**
     * Returns the associated {@link module:ol/layer/Vector~VectorLayer vector layer} of
     * a selected feature.
     * @param {import("../Feature.js").default} feature Feature
     * @return {import('../layer/Vector.js').default} Layer.
     * @api
     */
    getLayer(feature) {
      return /** @type {import('../layer/Vector.js').default} */ (
        this.featureLayerAssociation_[getUid(feature)]
      );
    }

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    setHitTolerance(hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    }

    /**
     * Remove the interaction from its current map, if any,  and attach it to a new
     * map, if any. Pass `null` to just remove the interaction from the current map.
     * @param {import("../Map.js").default|null} map Map.
     * @api
     */
    setMap(map) {
      const currentMap = this.getMap();
      if (currentMap && this.style_) {
        this.features_.forEach(this.restorePreviousStyle_.bind(this));
      }
      super.setMap(map);
      if (map) {
        this.features_.addEventListener(
          CollectionEventType.ADD,
          this.boundAddFeature_
        );
        this.features_.addEventListener(
          CollectionEventType.REMOVE,
          this.boundRemoveFeature_
        );

        if (this.style_) {
          this.features_.forEach(this.applySelectedStyle_.bind(this));
        }
      } else {
        this.features_.removeEventListener(
          CollectionEventType.ADD,
          this.boundAddFeature_
        );
        this.features_.removeEventListener(
          CollectionEventType.REMOVE,
          this.boundRemoveFeature_
        );
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    addFeature_(evt) {
      const feature = evt.element;
      if (this.style_) {
        this.applySelectedStyle_(feature);
      }
      if (!this.getLayer(feature)) {
        const layer = /** @type {VectorLayer} */ (
          this.getMap()
            .getAllLayers()
            .find(function (layer) {
              if (
                layer instanceof VectorLayer$1 &&
                layer.getSource() &&
                layer.getSource().hasFeature(feature)
              ) {
                return layer;
              }
            })
        );
        if (layer) {
          this.addFeatureLayerAssociation_(feature, layer);
        }
      }
    }

    /**
     * @param {import("../Collection.js").CollectionEvent<Feature>} evt Event.
     * @private
     */
    removeFeature_(evt) {
      if (this.style_) {
        this.restorePreviousStyle_(evt.element);
      }
    }

    /**
     * @return {import("../style/Style.js").StyleLike|null} Select style.
     */
    getStyle() {
      return this.style_;
    }

    /**
     * @param {Feature} feature Feature
     * @private
     */
    applySelectedStyle_(feature) {
      const key = getUid(feature);
      if (!(key in originalFeatureStyles)) {
        originalFeatureStyles[key] = feature.getStyle();
      }
      feature.setStyle(this.style_);
    }

    /**
     * @param {Feature} feature Feature
     * @private
     */
    restorePreviousStyle_(feature) {
      const interactions = this.getMap().getInteractions().getArray();
      for (let i = interactions.length - 1; i >= 0; --i) {
        const interaction = interactions[i];
        if (
          interaction !== this &&
          interaction instanceof Select &&
          interaction.getStyle() &&
          interaction.getFeatures().getArray().lastIndexOf(feature) !== -1
        ) {
          feature.setStyle(interaction.getStyle());
          return;
        }
      }

      const key = getUid(feature);
      feature.setStyle(originalFeatureStyles[key]);
      delete originalFeatureStyles[key];
    }

    /**
     * @param {Feature} feature Feature.
     * @private
     */
    removeFeatureLayerAssociation_(feature) {
      delete this.featureLayerAssociation_[getUid(feature)];
    }

    /**
     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may change the
     * selected state of features.
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(mapBrowserEvent) {
      if (!this.condition_(mapBrowserEvent)) {
        return true;
      }
      const add = this.addCondition_(mapBrowserEvent);
      const remove = this.removeCondition_(mapBrowserEvent);
      const toggle = this.toggleCondition_(mapBrowserEvent);
      const set = !add && !remove && !toggle;
      const map = mapBrowserEvent.map;
      const features = this.getFeatures();

      /**
       * @type {Array<Feature>}
       */
      const deselected = [];

      /**
       * @type {Array<Feature>}
       */
      const selected = [];

      if (set) {
        // Replace the currently selected feature(s) with the feature(s) at the
        // pixel, or clear the selected feature(s) if there is no feature at
        // the pixel.
        clear$2(this.featureLayerAssociation_);
        map.forEachFeatureAtPixel(
          mapBrowserEvent.pixel,
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          (feature, layer) => {
            if (!(feature instanceof Feature$1) || !this.filter_(feature, layer)) {
              return;
            }
            this.addFeatureLayerAssociation_(feature, layer);
            selected.push(feature);
            return !this.multi_;
          },
          {
            layerFilter: this.layerFilter_,
            hitTolerance: this.hitTolerance_,
          }
        );
        for (let i = features.getLength() - 1; i >= 0; --i) {
          const feature = features.item(i);
          const index = selected.indexOf(feature);
          if (index > -1) {
            // feature is already selected
            selected.splice(index, 1);
          } else {
            features.remove(feature);
            deselected.push(feature);
          }
        }
        if (selected.length !== 0) {
          features.extend(selected);
        }
      } else {
        // Modify the currently selected feature(s).
        map.forEachFeatureAtPixel(
          mapBrowserEvent.pixel,
          /**
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {boolean|undefined} Continue to iterate over the features.
           */
          (feature, layer) => {
            if (!(feature instanceof Feature$1) || !this.filter_(feature, layer)) {
              return;
            }
            if ((add || toggle) && !features.getArray().includes(feature)) {
              this.addFeatureLayerAssociation_(feature, layer);
              selected.push(feature);
            } else if (
              (remove || toggle) &&
              features.getArray().includes(feature)
            ) {
              deselected.push(feature);
              this.removeFeatureLayerAssociation_(feature);
            }
            return !this.multi_;
          },
          {
            layerFilter: this.layerFilter_,
            hitTolerance: this.hitTolerance_,
          }
        );
        for (let j = deselected.length - 1; j >= 0; --j) {
          features.remove(deselected[j]);
        }
        features.extend(selected);
      }
      if (selected.length > 0 || deselected.length > 0) {
        this.dispatchEvent(
          new SelectEvent(
            SelectEventType.SELECT,
            selected,
            deselected,
            mapBrowserEvent
          )
        );
      }
      return true;
    }
  }

  /**
   * @return {import("../style/Style.js").StyleFunction} Styles.
   */
  function getDefaultStyleFunction() {
    const styles = createEditingStyle();
    extend$1(styles['Polygon'], styles['LineString']);
    extend$1(styles['GeometryCollection'], styles['LineString']);

    return function (feature) {
      if (!feature.getGeometry()) {
        return null;
      }
      return styles[feature.getGeometry().getType()];
    };
  }

  var Select$1 = Select;

  /**
   * @module ol/interaction/Snap
   */

  /**
   * @typedef {Object} Result
   * @property {import("../coordinate.js").Coordinate|null} vertex Vertex.
   * @property {import("../pixel.js").Pixel|null} vertexPixel VertexPixel.
   */

  /**
   * @typedef {Object} SegmentData
   * @property {import("../Feature.js").default} feature Feature.
   * @property {Array<import("../coordinate.js").Coordinate>} segment Segment.
   */

  /**
   * @typedef {Object} Options
   * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
   * @property {boolean} [edge=true] Snap to edges.
   * @property {boolean} [vertex=true] Snap to vertices.
   * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
   * vertex for snapping.
   * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
   */

  /**
   * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent<import("../Feature.js").default>} evt Event.
   * @return {import("../Feature.js").default} Feature.
   */
  function getFeatureFromEvent(evt) {
    if (
      /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature
    ) {
      return /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt)
        .feature;
    } else if (
      /** @type {import("../Collection.js").CollectionEvent<import("../Feature.js").default>} */ (
        evt
      ).element
    ) {
      return /** @type {import("../Collection.js").CollectionEvent<import("../Feature.js").default>} */ (
        evt
      ).element;
    }
  }

  const tempSegment = [];

  /**
   * @classdesc
   * Handles snapping of vector features while modifying or drawing them.  The
   * features can come from a {@link module:ol/source/Vector~VectorSource} or {@link module:ol/Collection~Collection}
   * Any interaction object that allows the user to interact
   * with the features using the mouse can benefit from the snapping, as long
   * as it is added before.
   *
   * The snap interaction modifies map browser event `coordinate` and `pixel`
   * properties to force the snap to occur to any interaction that them.
   *
   * Example:
   *
   *     import Snap from 'ol/interaction/Snap.js';
   *
   *     const snap = new Snap({
   *       source: source
   *     });
   *
   *     map.addInteraction(snap);
   *
   * @api
   */
  class Snap extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const pointerOptions = /** @type {import("./Pointer.js").Options} */ (
        options
      );

      if (!pointerOptions.handleDownEvent) {
        pointerOptions.handleDownEvent = TRUE;
      }

      if (!pointerOptions.stopDown) {
        pointerOptions.stopDown = FALSE;
      }

      super(pointerOptions);

      /**
       * @type {import("../source/Vector.js").default|null}
       * @private
       */
      this.source_ = options.source ? options.source : null;

      /**
       * @private
       * @type {boolean}
       */
      this.vertex_ = options.vertex !== undefined ? options.vertex : true;

      /**
       * @private
       * @type {boolean}
       */
      this.edge_ = options.edge !== undefined ? options.edge : true;

      /**
       * @type {import("../Collection.js").default<import("../Feature.js").default>|null}
       * @private
       */
      this.features_ = options.features ? options.features : null;

      /**
       * @type {Array<import("../events.js").EventsKey>}
       * @private
       */
      this.featuresListenerKeys_ = [];

      /**
       * @type {Object<string, import("../events.js").EventsKey>}
       * @private
       */
      this.featureChangeListenerKeys_ = {};

      /**
       * Extents are preserved so indexed segment can be quickly removed
       * when its feature geometry changes
       * @type {Object<string, import("../extent.js").Extent>}
       * @private
       */
      this.indexedFeaturesExtents_ = {};

      /**
       * If a feature geometry changes while a pointer drag|move event occurs, the
       * feature doesn't get updated right away.  It will be at the next 'pointerup'
       * event fired.
       * @type {!Object<string, import("../Feature.js").default>}
       * @private
       */
      this.pendingFeatures_ = {};

      /**
       * @type {number}
       * @private
       */
      this.pixelTolerance_ =
        options.pixelTolerance !== undefined ? options.pixelTolerance : 10;

      /**
       * Segment RTree for each layer
       * @type {import("../structs/RBush.js").default<SegmentData>}
       * @private
       */
      this.rBush_ = new RBush$1();

      /**
       * @const
       * @private
       * @type {Object<string, function(Array<Array<import('../coordinate.js').Coordinate>>, import("../geom/Geometry.js").default): void>}
       */
      this.GEOMETRY_SEGMENTERS_ = {
        'Point': this.segmentPointGeometry_.bind(this),
        'LineString': this.segmentLineStringGeometry_.bind(this),
        'LinearRing': this.segmentLineStringGeometry_.bind(this),
        'Polygon': this.segmentPolygonGeometry_.bind(this),
        'MultiPoint': this.segmentMultiPointGeometry_.bind(this),
        'MultiLineString': this.segmentMultiLineStringGeometry_.bind(this),
        'MultiPolygon': this.segmentMultiPolygonGeometry_.bind(this),
        'GeometryCollection': this.segmentGeometryCollectionGeometry_.bind(this),
        'Circle': this.segmentCircleGeometry_.bind(this),
      };
    }

    /**
     * Add a feature to the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {boolean} [register] Whether to listen to the feature change or not
     *     Defaults to `true`.
     * @api
     */
    addFeature(feature, register) {
      register = register !== undefined ? register : true;
      const feature_uid = getUid(feature);
      const geometry = feature.getGeometry();
      if (geometry) {
        const segmenter = this.GEOMETRY_SEGMENTERS_[geometry.getType()];
        if (segmenter) {
          this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(
            createEmpty()
          );
          const segments =
            /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */ ([]);
          segmenter(segments, geometry);
          if (segments.length === 1) {
            this.rBush_.insert(boundingExtent(segments[0]), {
              feature: feature,
              segment: segments[0],
            });
          } else if (segments.length > 1) {
            const extents = segments.map((s) => boundingExtent(s));
            const segmentsData = segments.map((segment) => ({
              feature: feature,
              segment: segment,
            }));
            this.rBush_.load(extents, segmentsData);
          }
        }
      }

      if (register) {
        this.featureChangeListenerKeys_[feature_uid] = listen(
          feature,
          EventType.CHANGE,
          this.handleFeatureChange_,
          this
        );
      }
    }

    /**
     * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
     * @private
     */
    getFeatures_() {
      /** @type {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} */
      let features;
      if (this.features_) {
        features = this.features_;
      } else if (this.source_) {
        features = this.source_.getFeatures();
      }
      return features;
    }

    /**
     * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
     * @return {boolean} `false` to stop event propagation.
     */
    handleEvent(evt) {
      const result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
      if (result) {
        evt.coordinate = result.vertex.slice(0, 2);
        evt.pixel = result.vertexPixel;
      }
      return super.handleEvent(evt);
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent<import("../Feature.js").default>} evt Event.
     * @private
     */
    handleFeatureAdd_(evt) {
      const feature = getFeatureFromEvent(evt);
      this.addFeature(feature);
    }

    /**
     * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent<import("../Feature.js").default>} evt Event.
     * @private
     */
    handleFeatureRemove_(evt) {
      const feature = getFeatureFromEvent(evt);
      this.removeFeature(feature);
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     * @private
     */
    handleFeatureChange_(evt) {
      const feature = /** @type {import("../Feature.js").default} */ (evt.target);
      if (this.handlingDownUpSequence) {
        const uid = getUid(feature);
        if (!(uid in this.pendingFeatures_)) {
          this.pendingFeatures_[uid] = feature;
        }
      } else {
        this.updateFeature_(feature);
      }
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} evt Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(evt) {
      const featuresToUpdate = Object.values(this.pendingFeatures_);
      if (featuresToUpdate.length) {
        featuresToUpdate.forEach(this.updateFeature_.bind(this));
        this.pendingFeatures_ = {};
      }
      return false;
    }

    /**
     * Remove a feature from the collection of features that we may snap to.
     * @param {import("../Feature.js").default} feature Feature
     * @param {boolean} [unlisten] Whether to unlisten to the feature change
     *     or not. Defaults to `true`.
     * @api
     */
    removeFeature(feature, unlisten) {
      const unregister = unlisten !== undefined ? unlisten : true;
      const feature_uid = getUid(feature);
      const extent = this.indexedFeaturesExtents_[feature_uid];
      if (extent) {
        const rBush = this.rBush_;
        const nodesToRemove = [];
        rBush.forEachInExtent(extent, function (node) {
          if (feature === node.feature) {
            nodesToRemove.push(node);
          }
        });
        for (let i = nodesToRemove.length - 1; i >= 0; --i) {
          rBush.remove(nodesToRemove[i]);
        }
      }

      if (unregister) {
        unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);
        delete this.featureChangeListenerKeys_[feature_uid];
      }
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     */
    setMap(map) {
      const currentMap = this.getMap();
      const keys = this.featuresListenerKeys_;
      const features = /** @type {Array<import("../Feature.js").default>} */ (
        this.getFeatures_()
      );

      if (currentMap) {
        keys.forEach(unlistenByKey);
        keys.length = 0;
        this.rBush_.clear();
        Object.values(this.featureChangeListenerKeys_).forEach(unlistenByKey);
        this.featureChangeListenerKeys_ = {};
      }
      super.setMap(map);

      if (map) {
        if (this.features_) {
          keys.push(
            listen(
              this.features_,
              CollectionEventType.ADD,
              this.handleFeatureAdd_,
              this
            ),
            listen(
              this.features_,
              CollectionEventType.REMOVE,
              this.handleFeatureRemove_,
              this
            )
          );
        } else if (this.source_) {
          keys.push(
            listen(
              this.source_,
              VectorEventType.ADDFEATURE,
              this.handleFeatureAdd_,
              this
            ),
            listen(
              this.source_,
              VectorEventType.REMOVEFEATURE,
              this.handleFeatureRemove_,
              this
            )
          );
        }
        features.forEach((feature) => this.addFeature(feature));
      }
    }

    /**
     * @param {import("../pixel.js").Pixel} pixel Pixel
     * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
     * @param {import("../Map.js").default} map Map.
     * @return {Result|null} Snap result
     */
    snapTo(pixel, pixelCoordinate, map) {
      const projection = map.getView().getProjection();
      const projectedCoordinate = fromUserCoordinate(pixelCoordinate, projection);

      const box = toUserExtent(
        buffer$2(
          boundingExtent([projectedCoordinate]),
          map.getView().getResolution() * this.pixelTolerance_
        ),
        projection
      );

      const segments = this.rBush_.getInExtent(box);

      const segmentsLength = segments.length;
      if (segmentsLength === 0) {
        return null;
      }

      let closestVertex;
      let minSquaredDistance = Infinity;

      const squaredPixelTolerance = this.pixelTolerance_ * this.pixelTolerance_;
      const getResult = () => {
        if (closestVertex) {
          const vertexPixel = map.getPixelFromCoordinate(closestVertex);
          const squaredPixelDistance = squaredDistance(pixel, vertexPixel);
          if (squaredPixelDistance <= squaredPixelTolerance) {
            return {
              vertex: closestVertex,
              vertexPixel: [
                Math.round(vertexPixel[0]),
                Math.round(vertexPixel[1]),
              ],
            };
          }
        }
        return null;
      };

      if (this.vertex_) {
        for (let i = 0; i < segmentsLength; ++i) {
          const segmentData = segments[i];
          if (segmentData.feature.getGeometry().getType() !== 'Circle') {
            segmentData.segment.forEach((vertex) => {
              const tempVertexCoord = fromUserCoordinate(vertex, projection);
              const delta = squaredDistance(projectedCoordinate, tempVertexCoord);
              if (delta < minSquaredDistance) {
                closestVertex = vertex;
                minSquaredDistance = delta;
              }
            });
          }
        }
        const result = getResult();
        if (result) {
          return result;
        }
      }

      if (this.edge_) {
        for (let i = 0; i < segmentsLength; ++i) {
          let vertex = null;
          const segmentData = segments[i];
          if (segmentData.feature.getGeometry().getType() === 'Circle') {
            let circleGeometry = segmentData.feature.getGeometry();
            const userProjection = getUserProjection();
            if (userProjection) {
              circleGeometry = circleGeometry
                .clone()
                .transform(userProjection, projection);
            }
            vertex = closestOnCircle(
              projectedCoordinate,
              /** @type {import("../geom/Circle.js").default} */ (circleGeometry)
            );
          } else {
            const [segmentStart, segmentEnd] = segmentData.segment;
            // points have only one coordinate
            if (segmentEnd) {
              tempSegment[0] = fromUserCoordinate(segmentStart, projection);
              tempSegment[1] = fromUserCoordinate(segmentEnd, projection);
              vertex = closestOnSegment(projectedCoordinate, tempSegment);
            }
          }
          if (vertex) {
            const delta = squaredDistance(projectedCoordinate, vertex);
            if (delta < minSquaredDistance) {
              closestVertex = toUserCoordinate(vertex, projection);
              minSquaredDistance = delta;
            }
          }
        }

        const result = getResult();
        if (result) {
          return result;
        }
      }

      return null;
    }

    /**
     * @param {import("../Feature.js").default} feature Feature
     * @private
     */
    updateFeature_(feature) {
      this.removeFeature(feature, false);
      this.addFeature(feature, false);
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @private
     */
    segmentCircleGeometry_(segments, geometry) {
      const projection = this.getMap().getView().getProjection();
      let circleGeometry = geometry;
      const userProjection = getUserProjection();
      if (userProjection) {
        circleGeometry = /** @type {import("../geom/Circle.js").default} */ (
          circleGeometry.clone().transform(userProjection, projection)
        );
      }
      const polygon = fromCircle(circleGeometry);
      if (userProjection) {
        polygon.transform(projection, userProjection);
      }
      const coordinates = polygon.getCoordinates()[0];
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        segments.push(coordinates.slice(i, i + 2));
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @private
     */
    segmentGeometryCollectionGeometry_(segments, geometry) {
      const geometries = geometry.getGeometriesArray();
      for (let i = 0; i < geometries.length; ++i) {
        const segmenter = this.GEOMETRY_SEGMENTERS_[geometries[i].getType()];
        if (segmenter) {
          segmenter(segments, geometries[i]);
        }
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/LineString.js").default} geometry Geometry.
     * @private
     */
    segmentLineStringGeometry_(segments, geometry) {
      const coordinates = geometry.getCoordinates();
      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        segments.push(coordinates.slice(i, i + 2));
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
     * @private
     */
    segmentMultiLineStringGeometry_(segments, geometry) {
      const lines = geometry.getCoordinates();
      for (let j = 0, jj = lines.length; j < jj; ++j) {
        const coordinates = lines[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          segments.push(coordinates.slice(i, i + 2));
        }
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
     * @private
     */
    segmentMultiPointGeometry_(segments, geometry) {
      geometry.getCoordinates().forEach((point) => {
        segments.push([point]);
      });
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @private
     */
    segmentMultiPolygonGeometry_(segments, geometry) {
      const polygons = geometry.getCoordinates();
      for (let k = 0, kk = polygons.length; k < kk; ++k) {
        const rings = polygons[k];
        for (let j = 0, jj = rings.length; j < jj; ++j) {
          const coordinates = rings[j];
          for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
            segments.push(coordinates.slice(i, i + 2));
          }
        }
      }
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @private
     */
    segmentPointGeometry_(segments, geometry) {
      segments.push([geometry.getCoordinates()]);
    }

    /**
     * @param {Array<Array<import('../coordinate.js').Coordinate>>} segments Segments
     * @param {import("../geom/Polygon.js").default} geometry Geometry.
     * @private
     */
    segmentPolygonGeometry_(segments, geometry) {
      const rings = geometry.getCoordinates();
      for (let j = 0, jj = rings.length; j < jj; ++j) {
        const coordinates = rings[j];
        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
          segments.push(coordinates.slice(i, i + 2));
        }
      }
    }
  }

  var Snap$1 = Snap;

  /**
   * @module ol/interaction/Translate
   */

  /**
   * @enum {string}
   */
  const TranslateEventType = {
    /**
     * Triggered upon feature translation start.
     * @event TranslateEvent#translatestart
     * @api
     */
    TRANSLATESTART: 'translatestart',
    /**
     * Triggered upon feature translation.
     * @event TranslateEvent#translating
     * @api
     */
    TRANSLATING: 'translating',
    /**
     * Triggered upon feature translation end.
     * @event TranslateEvent#translateend
     * @api
     */
    TRANSLATEEND: 'translateend',
  };

  /**
   * A function that takes an {@link module:ol/Feature~Feature} or
   * {@link module:ol/render/Feature~RenderFeature} and an
   * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
   * translated or `false` otherwise.
   * @typedef {function(Feature, import("../layer/Layer.js").default<import("../source/Source").default>):boolean} FilterFunction
   */

  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition.always}.
   * @property {Collection<Feature>} [features] Features contained in this collection will be able to be translated together.
   * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} [layers] A list of layers from which features should be
   * translated. Alternatively, a filter function can be provided. The
   * function will be called for each layer in the map and should return
   * `true` for layers that you want to be translatable. If the option is
   * absent, all visible layers will be considered translatable.
   * Not used if `features` is provided.
   * @property {FilterFunction} [filter] A function
   * that takes an {@link module:ol/Feature~Feature} and an
   * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be
   * translated or `false` otherwise. Not used if `features` is provided.
   * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
   * will be checked for features.
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
   * are instances of this type.
   */
  class TranslateEvent extends BaseEvent {
    /**
     * @param {TranslateEventType} type Type.
     * @param {Collection<Feature>} features The features translated.
     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
     * @param {import("../coordinate.js").Coordinate} startCoordinate The original coordinates before.translation started
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     */
    constructor(type, features, coordinate, startCoordinate, mapBrowserEvent) {
      super(type);

      /**
       * The features being translated.
       * @type {Collection<Feature>}
       * @api
       */
      this.features = features;

      /**
       * The coordinate of the drag event.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.coordinate = coordinate;

      /**
       * The coordinate of the start position before translation started.
       * @const
       * @type {import("../coordinate.js").Coordinate}
       * @api
       */
      this.startCoordinate = startCoordinate;

      /**
       * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
       * @type {import("../MapBrowserEvent.js").default}
       * @api
       */
      this.mapBrowserEvent = mapBrowserEvent;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types|
   *     'change:active', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<'translateend'|'translatestart'|'translating', TranslateEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     'change:active'|'translateend'|'translatestart'|'translating', Return>} TranslateOnSignature
   */

  /**
   * @classdesc
   * Interaction for translating (moving) features.
   * If you want to translate multiple features in a single action (for example,
   * the collection used by a select interaction), construct the interaction with
   * the `features` option.
   *
   * @fires TranslateEvent
   * @api
   */
  class Translate extends PointerInteraction$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      super(/** @type {import("./Pointer.js").Options} */ (options));

      /***
       * @type {TranslateOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {TranslateOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {TranslateOnSignature<void>}
       */
      this.un;

      /**
       * The last position we translated to.
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.lastCoordinate_ = null;

      /**
       * The start position before translation started.
       * @type {import("../coordinate.js").Coordinate}
       * @private
       */
      this.startCoordinate_ = null;

      /**
       * @type {Collection<Feature>|null}
       * @private
       */
      this.features_ = options.features !== undefined ? options.features : null;

      /** @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean} */
      let layerFilter;
      if (options.layers && !this.features_) {
        if (typeof options.layers === 'function') {
          layerFilter = options.layers;
        } else {
          const layers = options.layers;
          layerFilter = function (layer) {
            return layers.includes(layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }

      /**
       * @private
       * @type {function(import("../layer/Layer.js").default<import("../source/Source").default>): boolean}
       */
      this.layerFilter_ = layerFilter;

      /**
       * @private
       * @type {FilterFunction}
       */
      this.filter_ = options.filter && !this.features_ ? options.filter : TRUE;

      /**
       * @private
       * @type {number}
       */
      this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;

      /**
       * @private
       * @type {import("../events/condition.js").Condition}
       */
      this.condition_ = options.condition ? options.condition : always;

      /**
       * @type {Feature}
       * @private
       */
      this.lastFeature_ = null;

      this.addChangeListener(
        InteractionProperty.ACTIVE,
        this.handleActiveChanged_
      );
    }

    /**
     * Handle pointer down events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */
    handleDownEvent(event) {
      if (!event.originalEvent || !this.condition_(event)) {
        return false;
      }
      this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
      if (!this.lastCoordinate_ && this.lastFeature_) {
        this.startCoordinate_ = event.coordinate;
        this.lastCoordinate_ = event.coordinate;
        this.handleMoveEvent(event);

        const features = this.features_ || new Collection$1([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATESTART,
            features,
            event.coordinate,
            this.startCoordinate_,
            event
          )
        );
        return true;
      }
      return false;
    }

    /**
     * Handle pointer up events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     * @return {boolean} If the event was consumed.
     */
    handleUpEvent(event) {
      if (this.lastCoordinate_) {
        this.lastCoordinate_ = null;
        this.handleMoveEvent(event);

        const features = this.features_ || new Collection$1([this.lastFeature_]);

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATEEND,
            features,
            event.coordinate,
            this.startCoordinate_,
            event
          )
        );
        // cleanup
        this.startCoordinate_ = null;
        return true;
      }
      return false;
    }

    /**
     * Handle pointer drag events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */
    handleDragEvent(event) {
      if (this.lastCoordinate_) {
        const newCoordinate = event.coordinate;
        const deltaX = newCoordinate[0] - this.lastCoordinate_[0];
        const deltaY = newCoordinate[1] - this.lastCoordinate_[1];

        const features = this.features_ || new Collection$1([this.lastFeature_]);

        features.forEach(function (feature) {
          const geom = feature.getGeometry();
          geom.translate(deltaX, deltaY);
          feature.setGeometry(geom);
        });

        this.lastCoordinate_ = newCoordinate;

        this.dispatchEvent(
          new TranslateEvent(
            TranslateEventType.TRANSLATING,
            features,
            newCoordinate,
            this.startCoordinate_,
            event
          )
        );
      }
    }

    /**
     * Handle pointer move events.
     * @param {import("../MapBrowserEvent.js").default} event Event.
     */
    handleMoveEvent(event) {
      const elem = event.map.getViewport();

      // Change the cursor to grab/grabbing if hovering any of the features managed
      // by the interaction
      if (this.featuresAtPixel_(event.pixel, event.map)) {
        elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');
        elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');
      } else {
        elem.classList.remove('ol-grab', 'ol-grabbing');
      }
    }

    /**
     * Tests to see if the given coordinates intersects any of our selected
     * features.
     * @param {import("../pixel.js").Pixel} pixel Pixel coordinate to test for intersection.
     * @param {import("../Map.js").default} map Map to test the intersection on.
     * @return {Feature} Returns the feature found at the specified pixel
     * coordinates.
     * @private
     */
    featuresAtPixel_(pixel, map) {
      return map.forEachFeatureAtPixel(
        pixel,
        (feature, layer) => {
          if (!(feature instanceof Feature$1) || !this.filter_(feature, layer)) {
            return undefined;
          }
          if (this.features_ && !this.features_.getArray().includes(feature)) {
            return undefined;
          }
          return feature;
        },
        {
          layerFilter: this.layerFilter_,
          hitTolerance: this.hitTolerance_,
        }
      );
    }

    /**
     * Returns the Hit-detection tolerance.
     * @return {number} Hit tolerance in pixels.
     * @api
     */
    getHitTolerance() {
      return this.hitTolerance_;
    }

    /**
     * Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @api
     */
    setHitTolerance(hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    }

    /**
     * Remove the interaction from its current map and attach it to the new map.
     * Subclasses may set up event handlers to get notified about changes to
     * the map here.
     * @param {import("../Map.js").default} map Map.
     */
    setMap(map) {
      const oldMap = this.getMap();
      super.setMap(map);
      this.updateState_(oldMap);
    }

    /**
     * @private
     */
    handleActiveChanged_() {
      this.updateState_(null);
    }

    /**
     * @param {import("../Map.js").default} oldMap Old map.
     * @private
     */
    updateState_(oldMap) {
      let map = this.getMap();
      const active = this.getActive();
      if (!map || !active) {
        map = map || oldMap;
        if (map) {
          const elem = map.getViewport();
          elem.classList.remove('ol-grab', 'ol-grabbing');
        }
      }
    }
  }

  var Translate$1 = Translate;

  /**
   * @module ol/interaction
   */

  var interaction0 = {
    __proto__: null,
    DoubleClickZoom: DoubleClickZoom$1,
    DragAndDrop: DragAndDrop$1,
    DragBox: DragBox$1,
    DragPan: DragPan$1,
    DragRotate: DragRotate$1,
    DragRotateAndZoom: DragRotateAndZoom$1,
    DragZoom: DragZoom$1,
    Draw: Draw$1,
    Extent: Extent$1,
    Interaction: Interaction$1,
    KeyboardPan: KeyboardPan$1,
    KeyboardZoom: KeyboardZoom$1,
    Link: Link$1,
    Modify: Modify$1,
    MouseWheelZoom: MouseWheelZoom$1,
    PinchRotate: PinchRotate$1,
    PinchZoom: PinchZoom$1,
    Pointer: PointerInteraction$1,
    Select: Select$1,
    Snap: Snap$1,
    Translate: Translate$1,
    defaults: defaults
  };

  /**
   * @module ol/webgl
   */

  /**
   * Constants taken from goog.webgl
   */

  /**
   * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as
   * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer
   * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).
   * @const
   * @type {number}
   * @api
   */
  const ARRAY_BUFFER = 0x8892;

  /**
   * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.
   * Index buffers are essentially lists of references to vertices defined in a vertex buffer
   * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.
   * @const
   * @type {number}
   * @api
   */
  const ELEMENT_ARRAY_BUFFER = 0x8893;

  /**
   * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.
   * @const
   * @type {number}
   * @api
   */
  const STREAM_DRAW = 0x88e0;

  /**
   * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.
   * @const
   * @type {number}
   * @api
   */
  const STATIC_DRAW = 0x88e4;

  /**
   * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.
   * @const
   * @type {number}
   * @api
   */
  const DYNAMIC_DRAW = 0x88e8;

  /**
   * @const
   * @type {number}
   */
  const UNSIGNED_BYTE = 0x1401;

  /**
   * @const
   * @type {number}
   */
  const UNSIGNED_SHORT = 0x1403;

  /**
   * @const
   * @type {number}
   */
  const UNSIGNED_INT = 0x1405;

  /**
   * @const
   * @type {number}
   */
  const FLOAT = 0x1406;

  /** end of goog.webgl constants
   */

  /**
   * @const
   * @type {Array<string>}
   */
  const CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];

  /**
   * @param {HTMLCanvasElement} canvas Canvas.
   * @param {Object} [attributes] Attributes.
   * @return {WebGLRenderingContext} WebGL rendering context.
   */
  function getContext(canvas, attributes) {
    attributes = Object.assign(
      {
        preserveDrawingBuffer: true,
        antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906
      },
      attributes
    );
    const ii = CONTEXT_IDS.length;
    for (let i = 0; i < ii; ++i) {
      try {
        const context = canvas.getContext(CONTEXT_IDS[i], attributes);
        if (context) {
          return /** @type {!WebGLRenderingContext} */ (context);
        }
      } catch (e) {
        // pass
      }
    }
    return null;
  }

  /**
   * @module ol/webgl/Buffer
   */

  /**
   * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`
   * or `DYNAMIC_DRAW`.
   * @enum {number}
   */
  const BufferUsage = {
    STATIC_DRAW: STATIC_DRAW,
    STREAM_DRAW: STREAM_DRAW,
    DYNAMIC_DRAW: DYNAMIC_DRAW,
  };

  /**
   * @classdesc
   * Object used to store an array of data as well as usage information for that data.
   * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on
   * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.
   *
   * To populate the array, you can either use:
   * * A size using `#ofSize(buffer)`
   * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`
   * * A plain array using `#fromArray(array)`
   *
   * Note:
   * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)
   * for more info on buffer usage.
   * @api
   */
  class WebGLArrayBuffer {
    /**
     * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.
     * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.
     * Default is `DYNAMIC_DRAW`.
     */
    constructor(type, usage) {
      /**
       * @private
       * @type {Float32Array|Uint32Array}
       */
      this.array = null;

      /**
       * @private
       * @type {number}
       */
      this.type = type;

      assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);

      /**
       * @private
       * @type {number}
       */
      this.usage = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;
    }

    /**
     * Populates the buffer with an array of the given size (all values will be zeroes).
     * @param {number} size Array size
     */
    ofSize(size) {
      this.array = new (getArrayClassForType(this.type))(size);
    }

    /**
     * Populates the buffer with an array of the given size.
     * @param {Array<number>} array Numerical array
     */
    fromArray(array) {
      this.array = getArrayClassForType(this.type).from(array);
    }

    /**
     * Populates the buffer with a raw binary array buffer.
     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been
     * initialized for the same typed array class.
     */
    fromArrayBuffer(buffer) {
      this.array = new (getArrayClassForType(this.type))(buffer);
    }

    /**
     * @return {number} Buffer type.
     */
    getType() {
      return this.type;
    }

    /**
     * Will return null if the buffer was not initialized
     * @return {Float32Array|Uint32Array} Array.
     */
    getArray() {
      return this.array;
    }

    /**
     * @return {number} Usage.
     */
    getUsage() {
      return this.usage;
    }

    /**
     * Will return 0 if the buffer is not initialized
     * @return {number} Array size
     */
    getSize() {
      return this.array ? this.array.length : 0;
    }
  }

  /**
   * Returns a typed array constructor based on the given buffer type
   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.
   * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.
   */
  function getArrayClassForType(type) {
    switch (type) {
      case ARRAY_BUFFER:
        return Float32Array;
      case ELEMENT_ARRAY_BUFFER:
        return Uint32Array;
      default:
        return Float32Array;
    }
  }

  var WebGLArrayBuffer$1 = WebGLArrayBuffer;

  /**
   * @module ol/webgl/ContextEventType
   */

  /**
   * @enum {string}
   */
  var ContextEventType = {
    LOST: 'webglcontextlost',
    RESTORED: 'webglcontextrestored',
  };

  /**
   * @module ol/webgl/PostProcessingPass
   */

  const DEFAULT_VERTEX_SHADER = `
  precision mediump float;
  
  attribute vec2 a_position;
  varying vec2 v_texCoord;
  varying vec2 v_screenCoord;
  
  uniform vec2 u_screenSize;
   
  void main() {
    v_texCoord = a_position * 0.5 + 0.5;
    v_screenCoord = v_texCoord * u_screenSize;
    gl_Position = vec4(a_position, 0.0, 1.0);
  }
`;

  const DEFAULT_FRAGMENT_SHADER = `
  precision mediump float;
   
  uniform sampler2D u_image;
  uniform float u_opacity;
   
  varying vec2 v_texCoord;
   
  void main() {
    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;
  }
`;

  /**
   * @typedef {Object} Options
   * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.
   * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
   * the main canvas that will then be sampled up (useful for saving resource on blur steps).
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object<string,import("./Helper").UniformValue>} [uniforms] Uniform definitions for the post process step
   */

  /**
   * @typedef {Object} UniformInternalDescription
   * @property {import("./Helper").UniformValue} value Value
   * @property {WebGLUniformLocation} location Location
   * @property {WebGLTexture} [texture] Texture
   * @private
   */

  /**
   * @classdesc
   * This class is used to define Post Processing passes with custom shaders and uniforms.
   * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.
   *
   * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that
   * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).
   * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.
   *
   * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be
   * premultiplied.
   *
   * Default shaders are shown hereafter:
   *
   * * Vertex shader:
   *
   *   ```
   *   precision mediump float;
   *
   *   attribute vec2 a_position;
   *   varying vec2 v_texCoord;
   *   varying vec2 v_screenCoord;
   *
   *   uniform vec2 u_screenSize;
   *
   *   void main() {
   *     v_texCoord = a_position * 0.5 + 0.5;
   *     v_screenCoord = v_texCoord * u_screenSize;
   *     gl_Position = vec4(a_position, 0.0, 1.0);
   *   }
   *   ```
   *
   * * Fragment shader:
   *
   *   ```
   *   precision mediump float;
   *
   *   uniform sampler2D u_image;
   *   uniform float u_opacity;
   *
   *   varying vec2 v_texCoord;
   *
   *   void main() {
   *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;
   *   }
   *   ```
   *
   * @api
   */
  class WebGLPostProcessingPass {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      this.gl_ = options.webGlContext;
      const gl = this.gl_;

      this.scaleRatio_ = options.scaleRatio || 1;

      this.renderTargetTexture_ = gl.createTexture();
      this.renderTargetTextureSize_ = null;

      this.frameBuffer_ = gl.createFramebuffer();

      // compile the program for the frame buffer
      // TODO: make compilation errors show up
      const vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(
        vertexShader,
        options.vertexShader || DEFAULT_VERTEX_SHADER
      );
      gl.compileShader(vertexShader);
      const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(
        fragmentShader,
        options.fragmentShader || DEFAULT_FRAGMENT_SHADER
      );
      gl.compileShader(fragmentShader);
      this.renderTargetProgram_ = gl.createProgram();
      gl.attachShader(this.renderTargetProgram_, vertexShader);
      gl.attachShader(this.renderTargetProgram_, fragmentShader);
      gl.linkProgram(this.renderTargetProgram_);

      // bind the vertices buffer for the frame buffer
      this.renderTargetVerticesBuffer_ = gl.createBuffer();
      const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];
      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);
      gl.bufferData(
        gl.ARRAY_BUFFER,
        new Float32Array(verticesArray),
        gl.STATIC_DRAW
      );

      this.renderTargetAttribLocation_ = gl.getAttribLocation(
        this.renderTargetProgram_,
        'a_position'
      );
      this.renderTargetUniformLocation_ = gl.getUniformLocation(
        this.renderTargetProgram_,
        'u_screenSize'
      );
      this.renderTargetOpacityLocation_ = gl.getUniformLocation(
        this.renderTargetProgram_,
        'u_opacity'
      );
      this.renderTargetTextureLocation_ = gl.getUniformLocation(
        this.renderTargetProgram_,
        'u_image'
      );

      /**
       * Holds info about custom uniforms used in the post processing pass
       * @type {Array<UniformInternalDescription>}
       * @private
       */
      this.uniforms_ = [];
      options.uniforms &&
        Object.keys(options.uniforms).forEach((name) => {
          this.uniforms_.push({
            value: options.uniforms[name],
            location: gl.getUniformLocation(this.renderTargetProgram_, name),
          });
        });
    }

    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     * @api
     */
    getGL() {
      return this.gl_;
    }

    /**
     * Initialize the render target texture of the post process, make sure it is at the
     * right size and bind it as a render target for the next draw calls.
     * The last step to be initialized will be the one where the primitives are rendered.
     * @param {import("../Map.js").FrameState} frameState current frame state
     * @api
     */
    init(frameState) {
      const gl = this.getGL();
      const textureSize = [
        gl.drawingBufferWidth * this.scaleRatio_,
        gl.drawingBufferHeight * this.scaleRatio_,
      ];

      // rendering goes to my buffer
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());
      gl.viewport(0, 0, textureSize[0], textureSize[1]);

      // if size has changed: adjust canvas & render target texture
      if (
        !this.renderTargetTextureSize_ ||
        this.renderTargetTextureSize_[0] !== textureSize[0] ||
        this.renderTargetTextureSize_[1] !== textureSize[1]
      ) {
        this.renderTargetTextureSize_ = textureSize;

        // create a new texture
        const level = 0;
        const internalFormat = gl.RGBA;
        const border = 0;
        const format = gl.RGBA;
        const type = gl.UNSIGNED_BYTE;
        const data = null;
        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);
        gl.texImage2D(
          gl.TEXTURE_2D,
          level,
          internalFormat,
          textureSize[0],
          textureSize[1],
          border,
          format,
          type,
          data
        );

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        // bind the texture to the framebuffer
        gl.framebufferTexture2D(
          gl.FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          gl.TEXTURE_2D,
          this.renderTargetTexture_,
          0
        );
      }
    }

    /**
     * Render to the next postprocessing pass (or to the canvas if final pass).
     * @param {import("../Map.js").FrameState} frameState current frame state
     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional
     * @param {function(WebGLRenderingContext, import("../Map.js").FrameState):void} [preCompose] Called before composing.
     * @param {function(WebGLRenderingContext, import("../Map.js").FrameState):void} [postCompose] Called before composing.
     * @api
     */
    apply(frameState, nextPass, preCompose, postCompose) {
      const gl = this.getGL();
      const size = frameState.size;

      gl.bindFramebuffer(
        gl.FRAMEBUFFER,
        nextPass ? nextPass.getFrameBuffer() : null
      );
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);

      if (!nextPass) {
        // clear the canvas if we are the first to render to it
        // and preserveDrawingBuffer is true
        const canvasId = getUid(gl.canvas);
        if (!frameState.renderTargets[canvasId]) {
          const attributes = gl.getContextAttributes();
          if (attributes && attributes.preserveDrawingBuffer) {
            gl.clearColor(0.0, 0.0, 0.0, 0.0);
            gl.clear(gl.COLOR_BUFFER_BIT);
          }

          frameState.renderTargets[canvasId] = true;
        }
      }

      gl.enable(gl.BLEND);
      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

      gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);

      gl.useProgram(this.renderTargetProgram_);
      gl.enableVertexAttribArray(this.renderTargetAttribLocation_);
      gl.vertexAttribPointer(
        this.renderTargetAttribLocation_,
        2,
        gl.FLOAT,
        false,
        0,
        0
      );
      gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);
      gl.uniform1i(this.renderTargetTextureLocation_, 0);

      const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;
      gl.uniform1f(this.renderTargetOpacityLocation_, opacity);

      this.applyUniforms(frameState);

      if (preCompose) {
        preCompose(gl, frameState);
      }
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      if (postCompose) {
        postCompose(gl, frameState);
      }
    }

    /**
     * @return {WebGLFramebuffer} Frame buffer
     * @api
     */
    getFrameBuffer() {
      return this.frameBuffer_;
    }

    /**
     * Sets the custom uniforms based on what was given in the constructor.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @private
     */
    applyUniforms(frameState) {
      const gl = this.getGL();

      let value;
      let textureSlot = 1;
      this.uniforms_.forEach(function (uniform) {
        value =
          typeof uniform.value === 'function'
            ? uniform.value(frameState)
            : uniform.value;

        // apply value based on type
        if (value instanceof HTMLCanvasElement || value instanceof ImageData) {
          // create a texture & put data
          if (!uniform.texture) {
            uniform.texture = gl.createTexture();
          }
          gl.activeTexture(gl[`TEXTURE${textureSlot}`]);
          gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

          if (value instanceof ImageData) {
            gl.texImage2D(
              gl.TEXTURE_2D,
              0,
              gl.RGBA,
              gl.RGBA,
              value.width,
              value.height,
              0,
              gl.UNSIGNED_BYTE,
              new Uint8Array(value.data)
            );
          } else {
            gl.texImage2D(
              gl.TEXTURE_2D,
              0,
              gl.RGBA,
              gl.RGBA,
              gl.UNSIGNED_BYTE,
              value
            );
          }

          // fill texture slots
          gl.uniform1i(uniform.location, textureSlot++);
        } else if (Array.isArray(value)) {
          switch (value.length) {
            case 2:
              gl.uniform2f(uniform.location, value[0], value[1]);
              return;
            case 3:
              gl.uniform3f(uniform.location, value[0], value[1], value[2]);
              return;
            case 4:
              gl.uniform4f(
                uniform.location,
                value[0],
                value[1],
                value[2],
                value[3]
              );
              return;
            default:
              return;
          }
        } else if (typeof value === 'number') {
          gl.uniform1f(uniform.location, value);
        }
      });
    }
  }

  var WebGLPostProcessingPass$1 = WebGLPostProcessingPass;

  /**
   * @module ol/vec/mat4
   */

  /**
   * @return {Array<number>} "4x4 matrix representing a 3D identity transform."
   */
  function create$2() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }

  /**
   * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.
   * @param {import("../transform.js").Transform} transform Transformation matrix.
   * @return {Array<number>} "2D transformation matrix as flattened 4x4 matrix."
   */
  function fromTransform(mat4, transform) {
    mat4[0] = transform[0];
    mat4[1] = transform[1];
    mat4[4] = transform[2];
    mat4[5] = transform[3];
    mat4[12] = transform[4];
    mat4[13] = transform[5];
    return mat4;
  }

  /**
   * @module ol/webgl/Helper
   */

  /**
   * Names of uniforms made available to all shaders.
   * Please note: changing these *will* break custom shaders!
   * @enum {string}
   */
  const DefaultUniform = {
    PROJECTION_MATRIX: 'u_projectionMatrix',
    OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',
    OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',
    TIME: 'u_time',
    ZOOM: 'u_zoom',
    RESOLUTION: 'u_resolution',
    SIZE_PX: 'u_sizePx',
    PIXEL_RATIO: 'u_pixelRatio',
  };

  /**
   * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`
   * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.
   * @enum {number}
   */
  const AttributeType = {
    UNSIGNED_BYTE: UNSIGNED_BYTE,
    UNSIGNED_SHORT: UNSIGNED_SHORT,
    UNSIGNED_INT: UNSIGNED_INT,
    FLOAT: FLOAT,
  };

  /**
   * Description of an attribute in a buffer
   * @typedef {Object} AttributeDescription
   * @property {string} name Attribute name to use in shaders
   * @property {number} size Number of components per attributes
   * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is
   * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).
   * Default is `FLOAT`.
   */

  /**
   * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import("../transform").Transform} UniformLiteralValue
   */

  /**
   * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning
   * one of the previous types.
   * @typedef {UniformLiteralValue|function(import("../Map.js").FrameState):UniformLiteralValue} UniformValue
   */

  /**
   * @typedef {Object} PostProcessesOptions
   * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
   * the main canvas which will then be sampled up (useful for saving resource on blur steps).
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step
   */

  /**
   * @typedef {Object} Options
   * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform
   * names in the provided or default shaders.
   * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions
   * @property {string} [canvasCacheKey] The cache key for the canvas.
   */

  /**
   * @typedef {Object} UniformInternalDescription
   * @property {string} name Name
   * @property {UniformValue} [value] Value
   * @property {UniformValue} [prevValue] The previous value.
   * @property {WebGLTexture} [texture] Texture
   * @private
   */

  /**
   * @typedef {Object} CanvasCacheItem
   * @property {HTMLCanvasElement} canvas Canvas element.
   * @property {number} users The count of users of this canvas.
   */

  /**
   * @type {Object<string,CanvasCacheItem>}
   */
  const canvasCache = {};

  /**
   * @param {string} key The cache key for the canvas.
   * @return {string} The shared cache key.
   */
  function getSharedCanvasCacheKey(key) {
    return 'shared/' + key;
  }

  let uniqueCanvasCacheKeyCount = 0;

  /**
   * @return {string} The unique cache key.
   */
  function getUniqueCanvasCacheKey() {
    const key = 'unique/' + uniqueCanvasCacheKeyCount;
    uniqueCanvasCacheKeyCount += 1;
    return key;
  }

  /**
   * @param {string} key The cache key for the canvas.
   * @return {HTMLCanvasElement} The canvas.
   */
  function getCanvas(key) {
    let cacheItem = canvasCache[key];
    if (!cacheItem) {
      const canvas = document.createElement('canvas');
      canvas.style.position = 'absolute';
      canvas.style.left = '0';
      cacheItem = {users: 0, canvas};
      canvasCache[key] = cacheItem;
    }

    cacheItem.users += 1;
    return cacheItem.canvas;
  }

  /**
   * @param {string} key The cache key for the canvas.
   */
  function releaseCanvas(key) {
    const cacheItem = canvasCache[key];
    if (!cacheItem) {
      return;
    }

    cacheItem.users -= 1;
    if (cacheItem.users > 0) {
      return;
    }

    const canvas = cacheItem.canvas;
    const gl = getContext(canvas);
    const extension = gl.getExtension('WEBGL_lose_context');
    if (extension) {
      extension.loseContext();
    }

    delete canvasCache[key];
  }

  /**
   * @classdesc
   * This class is intended to provide low-level functions related to WebGL rendering, so that accessing
   * directly the WebGL API should not be required anymore.
   *
   * Several operations are handled by the `WebGLHelper` class:
   *
   * ### Define custom shaders and uniforms
   *
   *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:
   *
   *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).
   *   Outputs are:
   *
   *   * `gl_Position`: position of the vertex in screen space
   *
   *   * Varyings usually prefixed with `v_` are passed on to the fragment shader
   *
   *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.
   *
   *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that
   *   can be changed at every frame and can be of type float, arrays of float or images.
   *
   *   Shaders must be compiled and assembled into a program like so:
   *   ```js
   *   // here we simply create two shaders and assemble them in a program which is then used
   *   // for subsequent rendering calls; note how a frameState is required to set up a program,
   *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)
   *   const vertexShader = new WebGLVertex(VERTEX_SHADER);
   *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);
   *   const program = this.context.getProgram(fragmentShader, vertexShader);
   *   helper.useProgram(this.program, frameState);
   *   ```
   *
   *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.
   *   You can also change their value along the way like so:
   *   ```js
   *   helper.setUniformFloatValue('u_value', valueAsNumber);
   *   ```
   *
   * ### Defining post processing passes
   *
   *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas
   *   while applying special effects in screen space.
   *   Typical uses are: blurring, color manipulation, depth of field, filtering...
   *
   *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.
   *   A post process step accepts the following options:
   *
   *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.
   *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.
   *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.
   *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.
   *
   *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.
   *
   * ### Binding WebGL buffers and flushing data into them
   *
   *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.
   *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.
   *   This is done using {@link bindBuffer}.
   *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using
   *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.
   *
   *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}
   *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).
   *
   *   Examples below:
   *   ```js
   *   // at initialization phase
   *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);
   *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);
   *
   *   // when array values have changed
   *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);
   *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);
   *
   *   // at rendering phase
   *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);
   *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);
   *   ```
   *
   * ### Specifying attributes
   *
   *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).
   *   Attributes are used to specify these uses. Specify the attribute names with
   *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).
   *
   *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.
   *   ```js
   *   // here we indicate that the data array has the following structure:
   *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]
   *   helper.enableAttributes([
   *     {
   *        name: 'a_position',
   *        size: 2
   *     },
   *     {
   *       name: 'a_offset',
   *       size: 2
   *     },
   *     {
   *       name: 'a_texCoord',
   *       size: 2
   *     }
   *   ])
   *   ```
   *
   * ### Rendering primitives
   *
   *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.
   *   ```js
   *   // frame preparation step
   *   helper.prepareDraw(frameState);
   *
   *   // call this for every data array that has to be rendered on screen
   *   helper.drawElements(0, this.indicesBuffer.getArray().length);
   *
   *   // finalize the rendering by applying post processes
   *   helper.finalizeDraw(frameState);
   *   ```
   *
   * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.
   */
  class WebGLHelper extends Disposable$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      super();
      options = options || {};

      /** @private */
      this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);

      /** @private */
      this.boundHandleWebGLContextRestored_ =
        this.handleWebGLContextRestored.bind(this);

      /**
       * @private
       * @type {string}
       */
      this.canvasCacheKey_ = options.canvasCacheKey
        ? getSharedCanvasCacheKey(options.canvasCacheKey)
        : getUniqueCanvasCacheKey();

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = getCanvas(this.canvasCacheKey_);

      /**
       * @private
       * @type {WebGLRenderingContext}
       */
      this.gl_ = getContext(this.canvas_);

      /**
       * @private
       * @type {!Object<string, BufferCacheEntry>}
       */
      this.bufferCache_ = {};

      /**
       * @private
       * @type {Object<string, Object>}
       */
      this.extensionCache_ = {};

      /**
       * @private
       * @type {WebGLProgram}
       */
      this.currentProgram_ = null;

      this.canvas_.addEventListener(
        ContextEventType.LOST,
        this.boundHandleWebGLContextLost_
      );
      this.canvas_.addEventListener(
        ContextEventType.RESTORED,
        this.boundHandleWebGLContextRestored_
      );

      /**
       * @private
       * @type {import("../transform.js").Transform}
       */
      this.offsetRotateMatrix_ = create$3();

      /**
       * @private
       * @type {import("../transform.js").Transform}
       */
      this.offsetScaleMatrix_ = create$3();

      /**
       * @private
       * @type {Array<number>}
       */
      this.tmpMat4_ = create$2();

      /**
       * @private
       * @type {Object<string, WebGLUniformLocation>}
       */
      this.uniformLocations_ = {};

      /**
       * @private
       * @type {Object<string, number>}
       */
      this.attribLocations_ = {};

      /**
       * Holds info about custom uniforms used in the post processing pass.
       * If the uniform is a texture, the WebGL Texture object will be stored here.
       * @type {Array<UniformInternalDescription>}
       * @private
       */
      this.uniforms_ = [];
      if (options.uniforms) {
        this.setUniforms(options.uniforms);
      }

      const gl = this.getGL();

      /**
       * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the
       * options. If no post process was given, a default one is used (so as not to have to make an exception to
       * the frame buffer logic).
       * @type {Array<WebGLPostProcessingPass>}
       * @private
       */
      this.postProcessPasses_ = options.postProcesses
        ? options.postProcesses.map(function (options) {
            return new WebGLPostProcessingPass$1({
              webGlContext: gl,
              scaleRatio: options.scaleRatio,
              vertexShader: options.vertexShader,
              fragmentShader: options.fragmentShader,
              uniforms: options.uniforms,
            });
          })
        : [new WebGLPostProcessingPass$1({webGlContext: gl})];

      /**
       * @type {string|null}
       * @private
       */
      this.shaderCompileErrors_ = null;

      /**
       * @type {number}
       * @private
       */
      this.startTime_ = Date.now();
    }

    /**
     * @param {Object<string, UniformValue>} uniforms Uniform definitions.
     */
    setUniforms(uniforms) {
      this.uniforms_ = [];
      for (const name in uniforms) {
        this.uniforms_.push({
          name: name,
          value: uniforms[name],
        });
      }
      this.uniformLocations_ = {};
    }

    /**
     * @param {string} canvasCacheKey The canvas cache key.
     * @return {boolean} The provided key matches the one this helper was constructed with.
     */
    canvasCacheKeyMatches(canvasCacheKey) {
      return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);
    }

    /**
     * Get a WebGL extension.  If the extension is not supported, null is returned.
     * Extensions are cached after they are enabled for the first time.
     * @param {string} name The extension name.
     * @return {Object|null} The extension or null if not supported.
     */
    getExtension(name) {
      if (name in this.extensionCache_) {
        return this.extensionCache_[name];
      }
      const extension = this.gl_.getExtension(name);
      this.extensionCache_[name] = extension;
      return extension;
    }

    /**
     * Just bind the buffer if it's in the cache. Otherwise create
     * the WebGL buffer, bind it, populate it, and add an entry to
     * the cache.
     * @param {import("./Buffer").default} buffer Buffer.
     */
    bindBuffer(buffer) {
      const gl = this.getGL();
      const bufferKey = getUid(buffer);
      let bufferCache = this.bufferCache_[bufferKey];
      if (!bufferCache) {
        const webGlBuffer = gl.createBuffer();
        bufferCache = {
          buffer: buffer,
          webGlBuffer: webGlBuffer,
        };
        this.bufferCache_[bufferKey] = bufferCache;
      }
      gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);
    }

    /**
     * Update the data contained in the buffer array; this is required for the
     * new data to be rendered
     * @param {import("./Buffer").default} buffer Buffer.
     */
    flushBufferData(buffer) {
      const gl = this.getGL();
      this.bindBuffer(buffer);
      gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());
    }

    /**
     * @param {import("./Buffer.js").default} buf Buffer.
     */
    deleteBuffer(buf) {
      const gl = this.getGL();
      const bufferKey = getUid(buf);
      const bufferCacheEntry = this.bufferCache_[bufferKey];
      if (bufferCacheEntry && !gl.isContextLost()) {
        gl.deleteBuffer(bufferCacheEntry.webGlBuffer);
      }
      delete this.bufferCache_[bufferKey];
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.canvas_.removeEventListener(
        ContextEventType.LOST,
        this.boundHandleWebGLContextLost_
      );
      this.canvas_.removeEventListener(
        ContextEventType.RESTORED,
        this.boundHandleWebGLContextRestored_
      );

      releaseCanvas(this.canvasCacheKey_);

      delete this.gl_;
      delete this.canvas_;
    }

    /**
     * Clear the buffer & set the viewport to draw.
     * Post process passes will be initialized here, the first one being bound as a render target for
     * subsequent draw calls.
     * @param {import("../Map.js").FrameState} frameState current frame state
     * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.
     */
    prepareDraw(frameState, disableAlphaBlend) {
      const gl = this.getGL();
      const canvas = this.getCanvas();
      const size = frameState.size;
      const pixelRatio = frameState.pixelRatio;

      canvas.width = size[0] * pixelRatio;
      canvas.height = size[1] * pixelRatio;
      canvas.style.width = size[0] + 'px';
      canvas.style.height = size[1] + 'px';

      // loop backwards in post processes list
      for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {
        this.postProcessPasses_[i].init(frameState);
      }

      gl.bindTexture(gl.TEXTURE_2D, null);

      gl.clearColor(0.0, 0.0, 0.0, 0.0);
      gl.clear(gl.COLOR_BUFFER_BIT);

      gl.enable(gl.BLEND);
      gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);
    }

    /**
     * Clear the render target & bind it for future draw operations.
     * This is similar to `prepareDraw`, only post processes will not be applied.
     * Note: the whole viewport will be drawn to the render target, regardless of its size.
     * @param {import("../Map.js").FrameState} frameState current frame state
     * @param {import("./RenderTarget.js").default} renderTarget Render target to draw to
     * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.
     */
    prepareDrawToRenderTarget(frameState, renderTarget, disableAlphaBlend) {
      const gl = this.getGL();
      const size = renderTarget.getSize();

      gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());
      gl.viewport(0, 0, size[0], size[1]);
      gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());
      gl.clearColor(0.0, 0.0, 0.0, 0.0);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.enable(gl.BLEND);
      gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);
    }

    /**
     * Execute a draw call based on the currently bound program, texture, buffers, attributes.
     * @param {number} start Start index.
     * @param {number} end End index.
     */
    drawElements(start, end) {
      const gl = this.getGL();
      this.getExtension('OES_element_index_uint');

      const elementType = gl.UNSIGNED_INT;
      const elementSize = 4;

      const numItems = end - start;
      const offsetInBytes = start * elementSize;
      gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);
    }

    /**
     * Apply the successive post process passes which will eventually render to the actual canvas.
     * @param {import("../Map.js").FrameState} frameState current frame state
     * @param {function(WebGLRenderingContext, import("../Map.js").FrameState):void} [preCompose] Called before composing.
     * @param {function(WebGLRenderingContext, import("../Map.js").FrameState):void} [postCompose] Called before composing.
     */
    finalizeDraw(frameState, preCompose, postCompose) {
      // apply post processes using the next one as target
      for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {
        if (i === ii - 1) {
          this.postProcessPasses_[i].apply(
            frameState,
            null,
            preCompose,
            postCompose
          );
        } else {
          this.postProcessPasses_[i].apply(
            frameState,
            this.postProcessPasses_[i + 1]
          );
        }
      }
    }

    /**
     * @return {HTMLCanvasElement} Canvas.
     */
    getCanvas() {
      return this.canvas_;
    }

    /**
     * Get the WebGL rendering context
     * @return {WebGLRenderingContext} The rendering context.
     */
    getGL() {
      return this.gl_;
    }

    /**
     * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    applyFrameState(frameState) {
      const size = frameState.size;
      const rotation = frameState.viewState.rotation;
      const pixelRatio = frameState.pixelRatio;

      const offsetScaleMatrix = reset(this.offsetScaleMatrix_);
      scale$3(offsetScaleMatrix, 2 / size[0], 2 / size[1]);

      const offsetRotateMatrix = reset(this.offsetRotateMatrix_);
      if (rotation !== 0) {
        rotate$2(offsetRotateMatrix, -rotation);
      }

      this.setUniformMatrixValue(
        DefaultUniform.OFFSET_SCALE_MATRIX,
        fromTransform(this.tmpMat4_, offsetScaleMatrix)
      );
      this.setUniformMatrixValue(
        DefaultUniform.OFFSET_ROTATION_MATRIX,
        fromTransform(this.tmpMat4_, offsetRotateMatrix)
      );

      this.setUniformFloatValue(
        DefaultUniform.TIME,
        (Date.now() - this.startTime_) * 0.001
      );
      this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);
      this.setUniformFloatValue(
        DefaultUniform.RESOLUTION,
        frameState.viewState.resolution
      );
      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);
      this.setUniformFloatVec2(DefaultUniform.SIZE_PX, [size[0], size[1]]);
    }

    /**
     * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    applyUniforms(frameState) {
      const gl = this.getGL();

      let value;
      let textureSlot = 0;
      this.uniforms_.forEach((uniform) => {
        value =
          typeof uniform.value === 'function'
            ? uniform.value(frameState)
            : uniform.value;

        // apply value based on type
        if (
          value instanceof HTMLCanvasElement ||
          value instanceof HTMLImageElement ||
          value instanceof ImageData
        ) {
          // create a texture & put data
          if (!uniform.texture) {
            uniform.prevValue = undefined;
            uniform.texture = gl.createTexture();
          }
          gl.activeTexture(gl[`TEXTURE${textureSlot}`]);
          gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

          const imageReady =
            !(value instanceof HTMLImageElement) ||
            /** @type {HTMLImageElement} */ (value).complete;
          if (imageReady && uniform.prevValue !== value) {
            uniform.prevValue = value;
            gl.texImage2D(
              gl.TEXTURE_2D,
              0,
              gl.RGBA,
              gl.RGBA,
              gl.UNSIGNED_BYTE,
              value
            );
          }

          // fill texture slots by increasing index
          gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);
        } else if (Array.isArray(value) && value.length === 6) {
          this.setUniformMatrixValue(
            uniform.name,
            fromTransform(this.tmpMat4_, value)
          );
        } else if (Array.isArray(value) && value.length <= 4) {
          switch (value.length) {
            case 2:
              gl.uniform2f(
                this.getUniformLocation(uniform.name),
                value[0],
                value[1]
              );
              return;
            case 3:
              gl.uniform3f(
                this.getUniformLocation(uniform.name),
                value[0],
                value[1],
                value[2]
              );
              return;
            case 4:
              gl.uniform4f(
                this.getUniformLocation(uniform.name),
                value[0],
                value[1],
                value[2],
                value[3]
              );
              return;
            default:
              return;
          }
        } else if (typeof value === 'number') {
          gl.uniform1f(this.getUniformLocation(uniform.name), value);
        }
      });
    }

    /**
     * Set up a program for use. The program will be set as the current one. Then, the uniforms used
     * in the program will be set based on the current frame state and the helper configuration.
     * @param {WebGLProgram} program Program.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     */
    useProgram(program, frameState) {
      const gl = this.getGL();
      gl.useProgram(program);
      this.currentProgram_ = program;
      this.uniformLocations_ = {};
      this.attribLocations_ = {};
      this.applyFrameState(frameState);
      this.applyUniforms(frameState);
    }

    /**
     * Will attempt to compile a vertex or fragment shader based on source
     * On error, the shader will be returned but
     * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`
     * Use `gl.getShaderInfoLog(shader)` to have details
     * @param {string} source Shader source
     * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER
     * @return {WebGLShader} Shader object
     */
    compileShader(source, type) {
      const gl = this.getGL();
      const shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      return shader;
    }

    /**
     * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.
     * @param {string} fragmentShaderSource Fragment shader source.
     * @param {string} vertexShaderSource Vertex shader source.
     * @return {WebGLProgram} Program
     */
    getProgram(fragmentShaderSource, vertexShaderSource) {
      const gl = this.getGL();

      const fragmentShader = this.compileShader(
        fragmentShaderSource,
        gl.FRAGMENT_SHADER
      );

      const vertexShader = this.compileShader(
        vertexShaderSource,
        gl.VERTEX_SHADER
      );

      const program = gl.createProgram();
      gl.attachShader(program, fragmentShader);
      gl.attachShader(program, vertexShader);
      gl.linkProgram(program);

      if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(
        fragmentShader
      )}`;
        throw new Error(message);
      }
      gl.deleteShader(fragmentShader);

      if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(
        vertexShader
      )}`;
        throw new Error(message);
      }
      gl.deleteShader(vertexShader);

      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        const message = `GL program linking failed: ${gl.getShaderInfoLog(
        vertexShader
      )}`;
        throw new Error(message);
      }

      return program;
    }

    /**
     * Will get the location from the shader or the cache
     * @param {string} name Uniform name
     * @return {WebGLUniformLocation} uniformLocation
     */
    getUniformLocation(name) {
      if (this.uniformLocations_[name] === undefined) {
        this.uniformLocations_[name] = this.getGL().getUniformLocation(
          this.currentProgram_,
          name
        );
      }
      return this.uniformLocations_[name];
    }

    /**
     * Will get the location from the shader or the cache
     * @param {string} name Attribute name
     * @return {number} attribLocation
     */
    getAttributeLocation(name) {
      if (this.attribLocations_[name] === undefined) {
        this.attribLocations_[name] = this.getGL().getAttribLocation(
          this.currentProgram_,
          name
        );
      }
      return this.attribLocations_[name];
    }

    /**
     * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.
     * The resulting transform can be used to convert world space coordinates to view coordinates.
     * @param {import("../Map.js").FrameState} frameState Frame state.
     * @param {import("../transform").Transform} transform Transform to update.
     * @return {import("../transform").Transform} The updated transform object.
     */
    makeProjectionTransform(frameState, transform) {
      const size = frameState.size;
      const rotation = frameState.viewState.rotation;
      const resolution = frameState.viewState.resolution;
      const center = frameState.viewState.center;

      reset(transform);
      compose(
        transform,
        0,
        0,
        2 / (resolution * size[0]),
        2 / (resolution * size[1]),
        -rotation,
        -center[0],
        -center[1]
      );
      return transform;
    }

    /**
     * Give a value for a standard float uniform
     * @param {string} uniform Uniform name
     * @param {number} value Value
     */
    setUniformFloatValue(uniform, value) {
      this.getGL().uniform1f(this.getUniformLocation(uniform), value);
    }

    /**
     * Give a value for a vec2 uniform
     * @param {string} uniform Uniform name
     * @param {Array<number>} value Array of length 4.
     */
    setUniformFloatVec2(uniform, value) {
      this.getGL().uniform2fv(this.getUniformLocation(uniform), value);
    }

    /**
     * Give a value for a vec4 uniform
     * @param {string} uniform Uniform name
     * @param {Array<number>} value Array of length 4.
     */
    setUniformFloatVec4(uniform, value) {
      this.getGL().uniform4fv(this.getUniformLocation(uniform), value);
    }

    /**
     * Give a value for a standard matrix4 uniform
     * @param {string} uniform Uniform name
     * @param {Array<number>} value Matrix value
     */
    setUniformMatrixValue(uniform, value) {
      this.getGL().uniformMatrix4fv(
        this.getUniformLocation(uniform),
        false,
        value
      );
    }

    /**
     * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`
     * internally.
     * @param {string} attribName Attribute name
     * @param {number} size Number of components per attributes
     * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT
     * @param {number} stride Stride in bytes (0 means attribs are packed)
     * @param {number} offset Offset in bytes
     * @private
     */
    enableAttributeArray_(attribName, size, type, stride, offset) {
      const location = this.getAttributeLocation(attribName);
      // the attribute has not been found in the shaders; do not enable it
      if (location < 0) {
        return;
      }
      this.getGL().enableVertexAttribArray(location);
      this.getGL().vertexAttribPointer(
        location,
        size,
        type,
        false,
        stride,
        offset
      );
    }

    /**
     * Will enable the following attributes to be read from the currently bound buffer,
     * i.e. tell the GPU where to read the different attributes in the buffer. An error in the
     * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.
     * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer
     */
    enableAttributes(attributes) {
      const stride = computeAttributesStride(attributes);
      let offset = 0;
      for (let i = 0; i < attributes.length; i++) {
        const attr = attributes[i];
        this.enableAttributeArray_(
          attr.name,
          attr.size,
          attr.type || FLOAT,
          stride,
          offset
        );
        offset += attr.size * getByteSizeFromType(attr.type);
      }
    }

    /**
     * WebGL context was lost
     * @private
     */
    handleWebGLContextLost() {
      clear$2(this.bufferCache_);
      this.currentProgram_ = null;
    }

    /**
     * WebGL context was restored
     * @private
     */
    handleWebGLContextRestored() {}

    /**
     * Will create or reuse a given webgl texture and apply the given size. If no image data
     * specified, the texture will be empty, otherwise image data will be used and the `size`
     * parameter will be ignored.
     * Note: wrap parameters are set to clamp to edge, min filter is set to linear.
     * @param {Array<number>} size Expected size of the texture
     * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture
     * @param {WebGLTexture} [texture] Existing texture to reuse
     * @return {WebGLTexture} The generated texture
     */
    createTexture(size, data, texture) {
      const gl = this.getGL();
      texture = texture || gl.createTexture();

      // set params & size
      const level = 0;
      const internalFormat = gl.RGBA;
      const border = 0;
      const format = gl.RGBA;
      const type = gl.UNSIGNED_BYTE;
      gl.bindTexture(gl.TEXTURE_2D, texture);
      if (data) {
        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);
      } else {
        gl.texImage2D(
          gl.TEXTURE_2D,
          level,
          internalFormat,
          size[0],
          size[1],
          border,
          format,
          type,
          null
        );
      }
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

      return texture;
    }
  }

  /**
   * Compute a stride in bytes based on a list of attributes
   * @param {Array<AttributeDescription>} attributes Ordered list of attributes
   * @return {number} Stride, ie amount of values for each vertex in the vertex buffer
   */
  function computeAttributesStride(attributes) {
    let stride = 0;
    for (let i = 0; i < attributes.length; i++) {
      const attr = attributes[i];
      stride += attr.size * getByteSizeFromType(attr.type);
    }
    return stride;
  }

  /**
   * Computes the size in byte of an attribute type.
   * @param {AttributeType} type Attribute type
   * @return {number} The size in bytes
   */
  function getByteSizeFromType(type) {
    switch (type) {
      case AttributeType.UNSIGNED_BYTE:
        return Uint8Array.BYTES_PER_ELEMENT;
      case AttributeType.UNSIGNED_SHORT:
        return Uint16Array.BYTES_PER_ELEMENT;
      case AttributeType.UNSIGNED_INT:
        return Uint32Array.BYTES_PER_ELEMENT;
      case AttributeType.FLOAT:
      default:
        return Float32Array.BYTES_PER_ELEMENT;
    }
  }

  /**
   * @module ol/renderer/webgl/Layer
   */

  /**
   * @typedef {Object} PostProcessesOptions
   * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than
   * the main canvas that will then be sampled up (useful for saving resource on blur steps).
   * @property {string} [vertexShader] Vertex shader source
   * @property {string} [fragmentShader] Fragment shader source
   * @property {Object<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process step
   */

  /**
   * @typedef {Object} Options
   * @property {Object<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process steps
   * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions
   */

  /**
   * @classdesc
   * Base WebGL renderer class.
   * Holds all logic related to data manipulation & some common rendering logic
   * @template {import("../../layer/Layer.js").default} LayerType
   * @extends {LayerRenderer<LayerType>}
   */
  class WebGLLayerRenderer extends LayerRenderer$1 {
    /**
     * @param {LayerType} layer Layer.
     * @param {Options} [options] Options.
     */
    constructor(layer, options) {
      super(layer);

      options = options || {};

      /**
       * The transform for viewport CSS pixels to rendered pixels.  This transform is only
       * set before dispatching rendering events.
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.inversePixelTransform_ = create$3();

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.pixelContext_ = null;

      /**
       * @private
       */
      this.postProcesses_ = options.postProcesses;

      /**
       * @private
       */
      this.uniforms_ = options.uniforms;

      /**
       * @type {WebGLHelper}
       * @protected
       */
      this.helper;

      layer.addChangeListener(LayerProperty.MAP, this.removeHelper.bind(this));

      this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);
      this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);
    }

    /**
     * @param {WebGLRenderingContext} context The WebGL rendering context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    dispatchPreComposeEvent(context, frameState) {
      const layer = this.getLayer();
      if (layer.hasListener(RenderEventType.PRECOMPOSE)) {
        const event = new RenderEvent$1(
          RenderEventType.PRECOMPOSE,
          undefined,
          frameState,
          context
        );
        layer.dispatchEvent(event);
      }
    }

    /**
     * @param {WebGLRenderingContext} context The WebGL rendering context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    dispatchPostComposeEvent(context, frameState) {
      const layer = this.getLayer();
      if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {
        const event = new RenderEvent$1(
          RenderEventType.POSTCOMPOSE,
          undefined,
          frameState,
          context
        );
        layer.dispatchEvent(event);
      }
    }

    /**
     * Reset options (only handles uniforms).
     * @param {Options} options Options.
     */
    reset(options) {
      this.uniforms_ = options.uniforms;
      if (this.helper) {
        this.helper.setUniforms(this.uniforms_);
      }
    }

    /**
     * @protected
     */
    removeHelper() {
      if (this.helper) {
        this.helper.dispose();
        delete this.helper;
      }
    }

    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      if (this.getLayer().getRenderSource()) {
        let incrementGroup = true;
        let groupNumber = -1;
        let className;
        for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {
          const layer = frameState.layerStatesArray[i].layer;
          const renderer = layer.getRenderer();
          if (!(renderer instanceof WebGLLayerRenderer)) {
            incrementGroup = true;
            continue;
          }
          const layerClassName = layer.getClassName();
          if (incrementGroup || layerClassName !== className) {
            groupNumber += 1;
            incrementGroup = false;
          }
          className = layerClassName;
          if (renderer === this) {
            break;
          }
        }

        const canvasCacheKey =
          'map/' + frameState.mapId + '/group/' + groupNumber;

        if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {
          this.removeHelper();

          this.helper = new WebGLHelper({
            postProcesses: this.postProcesses_,
            uniforms: this.uniforms_,
            canvasCacheKey: canvasCacheKey,
          });

          if (className) {
            this.helper.getCanvas().className = className;
          }

          this.afterHelperCreated();
        }
      }

      return this.prepareFrameInternal(frameState);
    }

    /**
     * @protected
     */
    afterHelperCreated() {}

    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     * @protected
     */
    prepareFrameInternal(frameState) {
      return true;
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.removeHelper();
      super.disposeInternal();
    }

    /**
     * @param {import("../../render/EventType.js").default} type Event type.
     * @param {WebGLRenderingContext} context The rendering context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @private
     */
    dispatchRenderEvent_(type, context, frameState) {
      const layer = this.getLayer();
      if (layer.hasListener(type)) {
        compose(
          this.inversePixelTransform_,
          0,
          0,
          frameState.pixelRatio,
          -frameState.pixelRatio,
          0,
          0,
          -frameState.size[1]
        );

        const event = new RenderEvent$1(
          type,
          this.inversePixelTransform_,
          frameState,
          context
        );
        layer.dispatchEvent(event);
      }
    }

    /**
     * @param {WebGLRenderingContext} context The rendering context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    preRender(context, frameState) {
      this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
    }

    /**
     * @param {WebGLRenderingContext} context The rendering context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @protected
     */
    postRender(context, frameState) {
      this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
    }
  }

  var WebGLLayerRenderer$1 = WebGLLayerRenderer;

  /**
   * A wrapper class to simplify rendering to a texture instead of the final canvas
   * @module ol/webgl/RenderTarget
   */

  // for pixel color reading
  const tmpArray4 = new Uint8Array(4);

  /**
   * @classdesc
   * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,
   * simplifying initialization and binding for rendering.
   * @api
   */
  class WebGLRenderTarget {
    /**
     * @param {import("./Helper.js").default} helper WebGL helper; mandatory.
     * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.
     */
    constructor(helper, size) {
      /**
       * @private
       * @type {import("./Helper.js").default}
       */
      this.helper_ = helper;
      const gl = helper.getGL();

      /**
       * @private
       * @type {WebGLTexture}
       */
      this.texture_ = gl.createTexture();

      /**
       * @private
       * @type {WebGLFramebuffer}
       */
      this.framebuffer_ = gl.createFramebuffer();

      /**
       * @type {Array<number>}
       * @private
       */
      this.size_ = size || [1, 1];

      /**
       * @type {Uint8Array}
       * @private
       */
      this.data_ = new Uint8Array(0);

      /**
       * @type {boolean}
       * @private
       */
      this.dataCacheDirty_ = true;

      this.updateSize_();
    }

    /**
     * Changes the size of the render target texture. Note: will do nothing if the size
     * is already the same.
     * @param {Array<number>} size Expected size of the render target texture
     * @api
     */
    setSize(size) {
      if (equals$3(size, this.size_)) {
        return;
      }
      this.size_[0] = size[0];
      this.size_[1] = size[1];
      this.updateSize_();
    }

    /**
     * Returns the size of the render target texture
     * @return {Array<number>} Size of the render target texture
     * @api
     */
    getSize() {
      return this.size_;
    }

    /**
     * This will cause following calls to `#readAll` or `#readPixel` to download the content of the
     * render target into memory, which is an expensive operation.
     * This content will be kept in cache but should be cleared after each new render.
     * @api
     */
    clearCachedData() {
      this.dataCacheDirty_ = true;
    }

    /**
     * Returns the full content of the frame buffer as a series of r, g, b, a components
     * in the 0-255 range (unsigned byte).
     * @return {Uint8Array} Integer array of color values
     * @api
     */
    readAll() {
      if (this.dataCacheDirty_) {
        const size = this.size_;
        const gl = this.helper_.getGL();

        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
        gl.readPixels(
          0,
          0,
          size[0],
          size[1],
          gl.RGBA,
          gl.UNSIGNED_BYTE,
          this.data_
        );
        this.dataCacheDirty_ = false;
      }
      return this.data_;
    }

    /**
     * Reads one pixel of the frame buffer as an array of r, g, b, a components
     * in the 0-255 range (unsigned byte).
     * If x and/or y are outside of existing data, an array filled with 0 is returned.
     * @param {number} x Pixel coordinate
     * @param {number} y Pixel coordinate
     * @return {Uint8Array} Integer array with one color value (4 components)
     * @api
     */
    readPixel(x, y) {
      if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {
        tmpArray4[0] = 0;
        tmpArray4[1] = 0;
        tmpArray4[2] = 0;
        tmpArray4[3] = 0;
        return tmpArray4;
      }

      this.readAll();
      const index =
        Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];
      tmpArray4[0] = this.data_[index * 4];
      tmpArray4[1] = this.data_[index * 4 + 1];
      tmpArray4[2] = this.data_[index * 4 + 2];
      tmpArray4[3] = this.data_[index * 4 + 3];
      return tmpArray4;
    }

    /**
     * @return {WebGLTexture} Texture to render to
     */
    getTexture() {
      return this.texture_;
    }

    /**
     * @return {WebGLFramebuffer} Frame buffer of the render target
     */
    getFramebuffer() {
      return this.framebuffer_;
    }

    /**
     * @private
     */
    updateSize_() {
      const size = this.size_;
      const gl = this.helper_.getGL();

      this.texture_ = this.helper_.createTexture(size, null, this.texture_);

      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
      gl.viewport(0, 0, size[0], size[1]);
      gl.framebufferTexture2D(
        gl.FRAMEBUFFER,
        gl.COLOR_ATTACHMENT0,
        gl.TEXTURE_2D,
        this.texture_,
        0
      );

      this.data_ = new Uint8Array(size[0] * size[1] * 4);
    }
  }

  var WebGLRenderTarget$1 = WebGLRenderTarget;

  /**
   * @module ol/render/webgl/constants
   */

  /**
   * @enum {string}
   */
  const WebGLWorkerMessageType = {
    GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',
    GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',
    GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS',
  };

  /**
   * @typedef {Object} WebGLWorkerGenerateBuffersMessage
   * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.
   * When the buffers are generated, the worked will send a message of the same type to the main thread, with
   * the generated buffers in it.
   * Note that any addition properties present in the message *will* be sent back to the main thread.
   * @property {number} id Message id; will be used both in request and response as a means of identification
   * @property {WebGLWorkerMessageType} type Message type
   * @property {ArrayBuffer} renderInstructions Polygon render instructions raw binary buffer.
   * @property {number} [customAttributesCount] Amount of custom attributes count in the polygon render instructions.
   * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).
   * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).
   * @property {import("../../transform").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates
   */

  var earcut$1 = {exports: {}};

  earcut$1.exports = earcut;
  earcut$1.exports.default = earcut;

  function earcut(data, holeIndices, dim) {

      dim = dim || 2;

      var hasHoles = holeIndices && holeIndices.length,
          outerLen = hasHoles ? holeIndices[0] * dim : data.length,
          outerNode = linkedList(data, 0, outerLen, dim, true),
          triangles = [];

      if (!outerNode || outerNode.next === outerNode.prev) return triangles;

      var minX, minY, maxX, maxY, x, y, invSize;

      if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

      // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
      if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];

          for (var i = dim; i < outerLen; i += dim) {
              x = data[i];
              y = data[i + 1];
              if (x < minX) minX = x;
              if (y < minY) minY = y;
              if (x > maxX) maxX = x;
              if (y > maxY) maxY = y;
          }

          // minX, minY and invSize are later used to transform coords into integers for z-order calculation
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
      }

      earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);

      return triangles;
  }

  // create a circular doubly linked list from polygon points in the specified winding order
  function linkedList(data, start, end, dim, clockwise) {
      var i, last;

      if (clockwise === (signedArea(data, start, end, dim) > 0)) {
          for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
      } else {
          for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
      }

      if (last && equals(last, last.next)) {
          removeNode(last);
          last = last.next;
      }

      return last;
  }

  // eliminate colinear or duplicate points
  function filterPoints(start, end) {
      if (!start) return start;
      if (!end) end = start;

      var p = start,
          again;
      do {
          again = false;

          if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
              removeNode(p);
              p = end = p.prev;
              if (p === p.next) break;
              again = true;

          } else {
              p = p.next;
          }
      } while (again || p !== end);

      return end;
  }

  // main ear slicing loop which triangulates a polygon (given as a linked list)
  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
      if (!ear) return;

      // interlink polygon nodes in z-order
      if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

      var stop = ear,
          prev, next;

      // iterate through ears, slicing them one by one
      while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;

          if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
              // cut off the triangle
              triangles.push(prev.i / dim | 0);
              triangles.push(ear.i / dim | 0);
              triangles.push(next.i / dim | 0);

              removeNode(ear);

              // skipping the next vertex leads to less sliver triangles
              ear = next.next;
              stop = next.next;

              continue;
          }

          ear = next;

          // if we looped through the whole remaining polygon and can't find any more ears
          if (ear === stop) {
              // try filtering points and slicing again
              if (!pass) {
                  earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

              // if this didn't work, try curing all small self-intersections locally
              } else if (pass === 1) {
                  ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                  earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

              // as a last resort, try splitting the remaining polygon into two
              } else if (pass === 2) {
                  splitEarcut(ear, triangles, dim, minX, minY, invSize);
              }

              break;
          }
      }
  }

  // check whether a polygon node forms a valid ear with adjacent nodes
  function isEar(ear) {
      var a = ear.prev,
          b = ear,
          c = ear.next;

      if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

      // now make sure we don't have other points inside the potential ear
      var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

      // triangle bbox; min & max are calculated like this for speed
      var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
          y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
          x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
          y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

      var p = c.next;
      while (p !== a) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&
              pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
              area(p.prev, p, p.next) >= 0) return false;
          p = p.next;
      }

      return true;
  }

  function isEarHashed(ear, minX, minY, invSize) {
      var a = ear.prev,
          b = ear,
          c = ear.next;

      if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

      var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

      // triangle bbox; min & max are calculated like this for speed
      var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
          y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
          x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
          y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);

      // z-order range for the current triangle bbox;
      var minZ = zOrder(x0, y0, minX, minY, invSize),
          maxZ = zOrder(x1, y1, minX, minY, invSize);

      var p = ear.prevZ,
          n = ear.nextZ;

      // look for points inside the triangle in both directions
      while (p && p.z >= minZ && n && n.z <= maxZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
              pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
          p = p.prevZ;

          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
              pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
          n = n.nextZ;
      }

      // look for remaining points in decreasing z-order
      while (p && p.z >= minZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
              pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
          p = p.prevZ;
      }

      // look for remaining points in increasing z-order
      while (n && n.z <= maxZ) {
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
              pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
          n = n.nextZ;
      }

      return true;
  }

  // go through all polygon nodes and cure small local self-intersections
  function cureLocalIntersections(start, triangles, dim) {
      var p = start;
      do {
          var a = p.prev,
              b = p.next.next;

          if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

              triangles.push(a.i / dim | 0);
              triangles.push(p.i / dim | 0);
              triangles.push(b.i / dim | 0);

              // remove two nodes involved
              removeNode(p);
              removeNode(p.next);

              p = start = b;
          }
          p = p.next;
      } while (p !== start);

      return filterPoints(p);
  }

  // try splitting polygon into two and triangulate them independently
  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
      // look for a valid diagonal that divides the polygon into two
      var a = start;
      do {
          var b = a.next.next;
          while (b !== a.prev) {
              if (a.i !== b.i && isValidDiagonal(a, b)) {
                  // split the polygon in two by the diagonal
                  var c = splitPolygon(a, b);

                  // filter colinear points around the cuts
                  a = filterPoints(a, a.next);
                  c = filterPoints(c, c.next);

                  // run earcut on each half
                  earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                  earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                  return;
              }
              b = b.next;
          }
          a = a.next;
      } while (a !== start);
  }

  // link every hole into the outer loop, producing a single-ring polygon without holes
  function eliminateHoles(data, holeIndices, outerNode, dim) {
      var queue = [],
          i, len, start, end, list;

      for (i = 0, len = holeIndices.length; i < len; i++) {
          start = holeIndices[i] * dim;
          end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
          list = linkedList(data, start, end, dim, false);
          if (list === list.next) list.steiner = true;
          queue.push(getLeftmost(list));
      }

      queue.sort(compareX);

      // process holes from left to right
      for (i = 0; i < queue.length; i++) {
          outerNode = eliminateHole(queue[i], outerNode);
      }

      return outerNode;
  }

  function compareX(a, b) {
      return a.x - b.x;
  }

  // find a bridge between vertices that connects hole with an outer ring and and link it
  function eliminateHole(hole, outerNode) {
      var bridge = findHoleBridge(hole, outerNode);
      if (!bridge) {
          return outerNode;
      }

      var bridgeReverse = splitPolygon(bridge, hole);

      // filter collinear points around the cuts
      filterPoints(bridgeReverse, bridgeReverse.next);
      return filterPoints(bridge, bridge.next);
  }

  // David Eberly's algorithm for finding a bridge between hole and outer polygon
  function findHoleBridge(hole, outerNode) {
      var p = outerNode,
          hx = hole.x,
          hy = hole.y,
          qx = -Infinity,
          m;

      // find a segment intersected by a ray from the hole's leftmost point to the left;
      // segment's endpoint with lesser x will be potential connection point
      do {
          if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
              var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
              if (x <= hx && x > qx) {
                  qx = x;
                  m = p.x < p.next.x ? p : p.next;
                  if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint
              }
          }
          p = p.next;
      } while (p !== outerNode);

      if (!m) return null;

      // look for points inside the triangle of hole point, segment intersection and endpoint;
      // if there are no points found, we have a valid connection;
      // otherwise choose the point of the minimum angle with the ray as connection point

      var stop = m,
          mx = m.x,
          my = m.y,
          tanMin = Infinity,
          tan;

      p = m;

      do {
          if (hx >= p.x && p.x >= mx && hx !== p.x &&
                  pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

              tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

              if (locallyInside(p, hole) &&
                  (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                  m = p;
                  tanMin = tan;
              }
          }

          p = p.next;
      } while (p !== stop);

      return m;
  }

  // whether sector in vertex m contains sector in vertex p in the same coordinates
  function sectorContainsSector(m, p) {
      return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
  }

  // interlink polygon nodes in z-order
  function indexCurve(start, minX, minY, invSize) {
      var p = start;
      do {
          if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
      } while (p !== start);

      p.prevZ.nextZ = null;
      p.prevZ = null;

      sortLinked(p);
  }

  // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
  function sortLinked(list) {
      var i, p, q, e, tail, numMerges, pSize, qSize,
          inSize = 1;

      do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;

          while (p) {
              numMerges++;
              q = p;
              pSize = 0;
              for (i = 0; i < inSize; i++) {
                  pSize++;
                  q = q.nextZ;
                  if (!q) break;
              }
              qSize = inSize;

              while (pSize > 0 || (qSize > 0 && q)) {

                  if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                      e = p;
                      p = p.nextZ;
                      pSize--;
                  } else {
                      e = q;
                      q = q.nextZ;
                      qSize--;
                  }

                  if (tail) tail.nextZ = e;
                  else list = e;

                  e.prevZ = tail;
                  tail = e;
              }

              p = q;
          }

          tail.nextZ = null;
          inSize *= 2;

      } while (numMerges > 1);

      return list;
  }

  // z-order of a point given coords and inverse of the longer side of data bbox
  function zOrder(x, y, minX, minY, invSize) {
      // coords are transformed into non-negative 15-bit integer range
      x = (x - minX) * invSize | 0;
      y = (y - minY) * invSize | 0;

      x = (x | (x << 8)) & 0x00FF00FF;
      x = (x | (x << 4)) & 0x0F0F0F0F;
      x = (x | (x << 2)) & 0x33333333;
      x = (x | (x << 1)) & 0x55555555;

      y = (y | (y << 8)) & 0x00FF00FF;
      y = (y | (y << 4)) & 0x0F0F0F0F;
      y = (y | (y << 2)) & 0x33333333;
      y = (y | (y << 1)) & 0x55555555;

      return x | (y << 1);
  }

  // find the leftmost node of a polygon ring
  function getLeftmost(start) {
      var p = start,
          leftmost = start;
      do {
          if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
          p = p.next;
      } while (p !== start);

      return leftmost;
  }

  // check if a point lies within a convex triangle
  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
      return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&
             (ax - px) * (by - py) >= (bx - px) * (ay - py) &&
             (bx - px) * (cy - py) >= (cx - px) * (by - py);
  }

  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
  function isValidDiagonal(a, b) {
      return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
             (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
              (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
              equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
  }

  // signed area of a triangle
  function area(p, q, r) {
      return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  }

  // check if two points are equal
  function equals(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
  }

  // check if two segments intersect
  function intersects(p1, q1, p2, q2) {
      var o1 = sign(area(p1, q1, p2));
      var o2 = sign(area(p1, q1, q2));
      var o3 = sign(area(p2, q2, p1));
      var o4 = sign(area(p2, q2, q1));

      if (o1 !== o2 && o3 !== o4) return true; // general case

      if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
      if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
      if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
      if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

      return false;
  }

  // for collinear points p, q, r, check if point q lies on segment pr
  function onSegment(p, q, r) {
      return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
  }

  function sign(num) {
      return num > 0 ? 1 : num < 0 ? -1 : 0;
  }

  // check if a polygon diagonal intersects any polygon segments
  function intersectsPolygon(a, b) {
      var p = a;
      do {
          if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                  intersects(p, p.next, a, b)) return true;
          p = p.next;
      } while (p !== a);

      return false;
  }

  // check if a polygon diagonal is locally inside the polygon
  function locallyInside(a, b) {
      return area(a.prev, a, a.next) < 0 ?
          area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
          area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
  }

  // check if the middle point of a polygon diagonal is inside the polygon
  function middleInside(a, b) {
      var p = a,
          inside = false,
          px = (a.x + b.x) / 2,
          py = (a.y + b.y) / 2;
      do {
          if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                  (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
              inside = !inside;
          p = p.next;
      } while (p !== a);

      return inside;
  }

  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring
  function splitPolygon(a, b) {
      var a2 = new Node$1(a.i, a.x, a.y),
          b2 = new Node$1(b.i, b.x, b.y),
          an = a.next,
          bp = b.prev;

      a.next = b;
      b.prev = a;

      a2.next = an;
      an.prev = a2;

      b2.next = a2;
      a2.prev = b2;

      bp.next = b2;
      b2.prev = bp;

      return b2;
  }

  // create a node and optionally link it with previous one (in a circular doubly linked list)
  function insertNode(i, x, y, last) {
      var p = new Node$1(i, x, y);

      if (!last) {
          p.prev = p;
          p.next = p;

      } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
      }
      return p;
  }

  function removeNode(p) {
      p.next.prev = p.prev;
      p.prev.next = p.next;

      if (p.prevZ) p.prevZ.nextZ = p.nextZ;
      if (p.nextZ) p.nextZ.prevZ = p.prevZ;
  }

  function Node$1(i, x, y) {
      // vertex index in coordinates array
      this.i = i;

      // vertex coordinates
      this.x = x;
      this.y = y;

      // previous and next vertex nodes in a polygon ring
      this.prev = null;
      this.next = null;

      // z-order curve value
      this.z = 0;

      // previous and next nodes in z-order
      this.prevZ = null;
      this.nextZ = null;

      // indicates whether this is a steiner point
      this.steiner = false;
  }

  // return a percentage difference between the polygon area and its triangulation area;
  // used to verify correctness of triangulation
  earcut.deviation = function (data, holeIndices, dim, triangles) {
      var hasHoles = holeIndices && holeIndices.length;
      var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

      var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
      if (hasHoles) {
          for (var i = 0, len = holeIndices.length; i < len; i++) {
              var start = holeIndices[i] * dim;
              var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
              polygonArea -= Math.abs(signedArea(data, start, end, dim));
          }
      }

      var trianglesArea = 0;
      for (i = 0; i < triangles.length; i += 3) {
          var a = triangles[i] * dim;
          var b = triangles[i + 1] * dim;
          var c = triangles[i + 2] * dim;
          trianglesArea += Math.abs(
              (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
              (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
      }

      return polygonArea === 0 && trianglesArea === 0 ? 0 :
          Math.abs((trianglesArea - polygonArea) / polygonArea);
  };

  function signedArea(data, start, end, dim) {
      var sum = 0;
      for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
          j = i;
      }
      return sum;
  }

  // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
  earcut.flatten = function (data) {
      var dim = data[0][0].length,
          result = {vertices: [], holes: [], dimensions: dim},
          holeIndex = 0;

      for (var i = 0; i < data.length; i++) {
          for (var j = 0; j < data[i].length; j++) {
              for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
          }
          if (i > 0) {
              holeIndex += data[i - 1].length;
              result.holes.push(holeIndex);
          }
      }
      return result;
  };

  /**
   * @module ol/render/webgl/utils
   */

  /**
   * Generates a color array based on a numerical id
   * Note: the range for each component is 0 to 1 with 256 steps
   * @param {number} id Id
   * @param {Array<number>} [array] Reusable array
   * @return {Array<number>} Color array containing the encoded id
   */
  function colorEncodeId(id, array) {
    array = array || [];
    const radix = 256;
    const divide = radix - 1;
    array[0] = Math.floor(id / radix / radix / radix) / divide;
    array[1] = (Math.floor(id / radix / radix) % radix) / divide;
    array[2] = (Math.floor(id / radix) % radix) / divide;
    array[3] = (id % radix) / divide;
    return array;
  }

  /**
   * Reads an id from a color-encoded array
   * Note: the expected range for each component is 0 to 1 with 256 steps.
   * @param {Array<number>} color Color array containing the encoded id
   * @return {number} Decoded id
   */
  function colorDecodeId(color) {
    let id = 0;
    const radix = 256;
    const mult = radix - 1;
    id += Math.round(color[0] * radix * radix * radix * mult);
    id += Math.round(color[1] * radix * radix * mult);
    id += Math.round(color[2] * radix * mult);
    id += Math.round(color[3] * mult);
    return id;
  }

  function create$1() {
            const source = "const e=\"GENERATE_POLYGON_BUFFERS\",t=\"GENERATE_POINT_BUFFERS\",n=\"GENERATE_LINE_STRING_BUFFERS\",r={1:\"The view center is not defined\",2:\"The view resolution is not defined\",3:\"The view rotation is not defined\",4:\"`image` and `src` cannot be provided at the same time\",5:\"`imgSize` must be set when `image` is provided\",7:\"`format` must be set when `url` is set\",8:\"Unknown `serverType` configured\",9:\"`url` must be configured or set using `#setUrl()`\",10:\"The default `geometryFunction` can only handle `Point` geometries\",11:\"`options.featureTypes` must be an Array\",12:\"`options.geometryName` must also be provided when `options.bbox` is set\",13:\"Invalid corner\",14:\"Invalid color\",15:\"Tried to get a value for a key that does not exist in the cache\",16:\"Tried to set a value for a key that is used already\",17:\"`resolutions` must be sorted in descending order\",18:\"Either `origin` or `origins` must be configured, never both\",19:\"Number of `tileSizes` and `resolutions` must be equal\",20:\"Number of `origins` and `resolutions` must be equal\",22:\"Either `tileSize` or `tileSizes` must be configured, never both\",24:\"Invalid extent or geometry provided as `geometry`\",25:\"Cannot fit empty extent provided as `geometry`\",26:\"Features must have an id set\",27:\"Features must have an id set\",28:'`renderMode` must be `\"hybrid\"` or `\"vector\"`',30:\"The passed `feature` was already added to the source\",31:\"Tried to enqueue an `element` that was already added to the queue\",32:\"Transformation matrix cannot be inverted\",33:\"Invalid units\",34:\"Invalid geometry layout\",36:\"Unknown SRS type\",37:\"Unknown geometry type found\",38:\"`styleMapValue` has an unknown type\",39:\"Unknown geometry type\",40:\"Expected `feature` to have a geometry\",41:\"Expected an `ol/style/Style` or an array of `ol/style/Style.js`\",42:\"Question unknown, the answer is 42\",43:\"Expected `layers` to be an array or a `Collection`\",47:\"Expected `controls` to be an array or an `ol/Collection`\",48:\"Expected `interactions` to be an array or an `ol/Collection`\",49:\"Expected `overlays` to be an array or an `ol/Collection`\",50:\"`options.featureTypes` should be an Array\",51:\"Either `url` or `tileJSON` options must be provided\",52:\"Unknown `serverType` configured\",53:\"Unknown `tierSizeCalculation` configured\",55:\"The {-y} placeholder requires a tile grid with extent\",56:\"mapBrowserEvent must originate from a pointer event\",57:\"At least 2 conditions are required\",59:\"Invalid command found in the PBF\",60:\"Missing or invalid `size`\",61:\"Cannot determine IIIF Image API version from provided image information JSON\",62:\"A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`\",64:\"Layer opacity must be a number\",66:\"`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`\",67:\"A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both\",68:\"A VectorTile source can only be rendered if it has a projection compatible with the view projection\",69:\"`width` or `height` cannot be provided together with `scale`\"};class o extends Error{constructor(e){const t=r[e];super(t),this.code=e,this.name=\"AssertionError\",this.message=t}}var i=o;function a(e,t){const n=t[0],r=t[1];return t[0]=e[0]*n+e[2]*r+e[4],t[1]=e[1]*n+e[3]*r+e[5],t}function s(e,t){const n=(r=t)[0]*r[3]-r[1]*r[2];var r;!function(e,t){if(!e)throw new i(t)}(0!==n,32);const o=t[0],a=t[1],s=t[2],u=t[3],f=t[4],x=t[5];return e[0]=u/n,e[1]=-a/n,e[2]=-s/n,e[3]=o/n,e[4]=(s*x-u*f)/n,e[5]=-(o*x-a*f)/n,e}new Array(6);var u={};function f(e,t,n){n=n||2;var r,o,i,a,s,u,f,l=t&&t.length,c=l?t[0]*n:e.length,v=x(e,0,c,n,!0),d=[];if(!v||v.next===v.prev)return d;if(l&&(v=function(e,t,n,r){var o,i,a,s=[];for(o=0,i=t.length;o<i;o++)(a=x(e,t[o]*r,o<i-1?t[o+1]*r:e.length,r,!1))===a.next&&(a.steiner=!0),s.push(w(a));for(s.sort(p),o=0;o<s.length;o++)n=b(s[o],n);return n}(e,t,v,n)),e.length>80*n){r=i=e[0],o=a=e[1];for(var y=n;y<c;y+=n)(s=e[y])<r&&(r=s),(u=e[y+1])<o&&(o=u),s>i&&(i=s),u>a&&(a=u);f=0!==(f=Math.max(i-r,a-o))?32767/f:0}return h(v,d,n,r,o,f,0),d}function x(e,t,n,r,o){var i,a;if(o===B(e,t,n,r)>0)for(i=t;i<n;i+=r)a=k(i,e[i],e[i+1],a);else for(i=n-r;i>=t;i-=r)a=k(i,e[i],e[i+1],a);return a&&M(a,a.next)&&(z(a),a=a.next),a}function l(e,t){if(!e)return e;t||(t=e);var n,r=e;do{if(n=!1,r.steiner||!M(r,r.next)&&0!==Z(r.prev,r,r.next))r=r.next;else{if(z(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function h(e,t,n,r,o,i,a){if(e){!a&&i&&function(e,t,n,r){var o=e;do{0===o.z&&(o.z=m(o.x,o.y,t,n,r)),o.prevZ=o.prev,o.nextZ=o.next,o=o.next}while(o!==e);o.prevZ.nextZ=null,o.prevZ=null,function(e){var t,n,r,o,i,a,s,u,f=1;do{for(n=e,e=null,i=null,a=0;n;){for(a++,r=n,s=0,t=0;t<f&&(s++,r=r.nextZ);t++);for(u=f;s>0||u>0&&r;)0!==s&&(0===u||!r||n.z<=r.z)?(o=n,n=n.nextZ,s--):(o=r,r=r.nextZ,u--),i?i.nextZ=o:e=o,o.prevZ=i,i=o;n=r}i.nextZ=null,f*=2}while(a>1)}(o)}(e,r,o,i);for(var s,u,f=e;e.prev!==e.next;)if(s=e.prev,u=e.next,i?v(e,r,o,i):c(e))t.push(s.i/n|0),t.push(e.i/n|0),t.push(u.i/n|0),z(e),e=u.next,f=u.next;else if((e=u)===f){a?1===a?h(e=d(l(e),t,n),t,n,r,o,i,2):2===a&&y(e,t,n,r,o,i):h(l(e),t,n,r,o,i,1);break}}}function c(e){var t=e.prev,n=e,r=e.next;if(Z(t,n,r)>=0)return!1;for(var o=t.x,i=n.x,a=r.x,s=t.y,u=n.y,f=r.y,x=o<i?o<a?o:a:i<a?i:a,l=s<u?s<f?s:f:u<f?u:f,h=o>i?o>a?o:a:i>a?i:a,c=s>u?s>f?s:f:u>f?u:f,v=r.next;v!==t;){if(v.x>=x&&v.x<=h&&v.y>=l&&v.y<=c&&A(o,s,i,u,a,f,v.x,v.y)&&Z(v.prev,v,v.next)>=0)return!1;v=v.next}return!0}function v(e,t,n,r){var o=e.prev,i=e,a=e.next;if(Z(o,i,a)>=0)return!1;for(var s=o.x,u=i.x,f=a.x,x=o.y,l=i.y,h=a.y,c=s<u?s<f?s:f:u<f?u:f,v=x<l?x<h?x:h:l<h?l:h,d=s>u?s>f?s:f:u>f?u:f,y=x>l?x>h?x:h:l>h?l:h,p=m(c,v,t,n,r),b=m(d,y,t,n,r),g=e.prevZ,w=e.nextZ;g&&g.z>=p&&w&&w.z<=b;){if(g.x>=c&&g.x<=d&&g.y>=v&&g.y<=y&&g!==o&&g!==a&&A(s,x,u,l,f,h,g.x,g.y)&&Z(g.prev,g,g.next)>=0)return!1;if(g=g.prevZ,w.x>=c&&w.x<=d&&w.y>=v&&w.y<=y&&w!==o&&w!==a&&A(s,x,u,l,f,h,w.x,w.y)&&Z(w.prev,w,w.next)>=0)return!1;w=w.nextZ}for(;g&&g.z>=p;){if(g.x>=c&&g.x<=d&&g.y>=v&&g.y<=y&&g!==o&&g!==a&&A(s,x,u,l,f,h,g.x,g.y)&&Z(g.prev,g,g.next)>=0)return!1;g=g.prevZ}for(;w&&w.z<=b;){if(w.x>=c&&w.x<=d&&w.y>=v&&w.y<=y&&w!==o&&w!==a&&A(s,x,u,l,f,h,w.x,w.y)&&Z(w.prev,w,w.next)>=0)return!1;w=w.nextZ}return!0}function d(e,t,n){var r=e;do{var o=r.prev,i=r.next.next;!M(o,i)&&F(o,r,r.next,i)&&S(o,i)&&S(i,o)&&(t.push(o.i/n|0),t.push(r.i/n|0),t.push(i.i/n|0),z(r),z(r.next),r=e=i),r=r.next}while(r!==e);return l(r)}function y(e,t,n,r,o,i){var a=e;do{for(var s=a.next.next;s!==a.prev;){if(a.i!==s.i&&E(a,s)){var u=U(a,s);return a=l(a,a.next),u=l(u,u.next),h(a,t,n,r,o,i,0),void h(u,t,n,r,o,i,0)}s=s.next}a=a.next}while(a!==e)}function p(e,t){return e.x-t.x}function b(e,t){var n=function(e,t){var n,r=t,o=e.x,i=e.y,a=-1/0;do{if(i<=r.y&&i>=r.next.y&&r.next.y!==r.y){var s=r.x+(i-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(s<=o&&s>a&&(a=s,n=r.x<r.next.x?r:r.next,s===o))return n}r=r.next}while(r!==t);if(!n)return null;var u,f=n,x=n.x,l=n.y,h=1/0;r=n;do{o>=r.x&&r.x>=x&&o!==r.x&&A(i<l?o:a,i,x,l,i<l?a:o,i,r.x,r.y)&&(u=Math.abs(i-r.y)/(o-r.x),S(r,e)&&(u<h||u===h&&(r.x>n.x||r.x===n.x&&g(n,r)))&&(n=r,h=u)),r=r.next}while(r!==f);return n}(e,t);if(!n)return t;var r=U(n,e);return l(r,r.next),l(n,n.next)}function g(e,t){return Z(e.prev,e,t.prev)<0&&Z(t.next,e,e.next)<0}function m(e,t,n,r,o){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*o|0)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-r)*o|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function w(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function A(e,t,n,r,o,i,a,s){return(o-a)*(t-s)>=(e-a)*(i-s)&&(e-a)*(r-s)>=(n-a)*(t-s)&&(n-a)*(i-s)>=(o-a)*(r-s)}function E(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&F(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(S(e,t)&&S(t,e)&&function(e,t){var n=e,r=!1,o=(e.x+t.x)/2,i=(e.y+t.y)/2;do{n.y>i!=n.next.y>i&&n.next.y!==n.y&&o<(n.next.x-n.x)*(i-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==e);return r}(e,t)&&(Z(e.prev,e,t.prev)||Z(e,t.prev,t))||M(e,t)&&Z(e.prev,e,e.next)>0&&Z(t.prev,t,t.next)>0)}function Z(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function M(e,t){return e.x===t.x&&e.y===t.y}function F(e,t,n,r){var o=I(Z(e,t,n)),i=I(Z(e,t,r)),a=I(Z(n,r,e)),s=I(Z(n,r,t));return o!==i&&a!==s||(!(0!==o||!T(e,n,t))||(!(0!==i||!T(e,r,t))||(!(0!==a||!T(n,e,r))||!(0!==s||!T(n,t,r)))))}function T(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function I(e){return e>0?1:e<0?-1:0}function S(e,t){return Z(e.prev,e,e.next)<0?Z(e,t,e.next)>=0&&Z(e,e.prev,t)>=0:Z(e,t,e.prev)<0||Z(e,e.next,t)<0}function U(e,t){var n=new R(e.i,e.x,e.y),r=new R(t.i,t.x,t.y),o=e.next,i=t.prev;return e.next=t,t.prev=e,n.next=o,o.prev=n,r.next=n,n.prev=r,i.next=r,r.prev=i,r}function k(e,t,n,r){var o=new R(e,t,n);return r?(o.next=r.next,o.prev=r,r.next.prev=o,r.next=o):(o.prev=o,o.next=o),o}function z(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function R(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function B(e,t,n,r){for(var o=0,i=t,a=n-r;i<n;i+=r)o+=(e[a]-e[i])*(e[i+1]+e[a+1]),a=i;return o}({get exports(){return u},set exports(e){u=e}}).exports=f,u.default=f,f.deviation=function(e,t,n,r){var o=t&&t.length,i=o?t[0]*n:e.length,a=Math.abs(B(e,0,i,n));if(o)for(var s=0,u=t.length;s<u;s++){var f=t[s]*n,x=s<u-1?t[s+1]*n:e.length;a-=Math.abs(B(e,f,x,n))}var l=0;for(s=0;s<r.length;s+=3){var h=r[s]*n,c=r[s+1]*n,v=r[s+2]*n;l+=Math.abs((e[h]-e[v])*(e[c+1]-e[h+1])-(e[h]-e[c])*(e[v+1]-e[h+1]))}return 0===a&&0===l?0:Math.abs((l-a)/a)},f.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,o=0;o<e.length;o++){for(var i=0;i<e[o].length;i++)for(var a=0;a<t;a++)n.vertices.push(e[o][i][a]);o>0&&(r+=e[o-1].length,n.holes.push(r))}return n};const N=[],P={vertexPosition:0,indexPosition:0};function C(e,t,n,r,o){e[t+0]=n,e[t+1]=r,e[t+2]=o}function _(e,t,n,r,o,i){const a=3+o,s=e[t+0],u=e[t+1],f=N;f.length=o;for(let n=0;n<f.length;n++)f[n]=e[t+2+n];let x=i?i.vertexPosition:0,l=i?i.indexPosition:0;const h=x/a;return C(n,x,s,u,0),f.length&&n.set(f,x+3),x+=a,C(n,x,s,u,1),f.length&&n.set(f,x+3),x+=a,C(n,x,s,u,2),f.length&&n.set(f,x+3),x+=a,C(n,x,s,u,3),f.length&&n.set(f,x+3),x+=a,r[l++]=h,r[l++]=h+1,r[l++]=h+3,r[l++]=h+1,r[l++]=h+2,r[l++]=h+3,P.vertexPosition=x,P.indexPosition=l,P}function q(e,t,n,r,o,i,s,u,f,x){const l=5+u.length,h=i.length/l,c=[e[t+0],e[t+1]],v=[e[n],e[n+1]],d=a(x,[...c]),y=a(x,[...v]);function p(e,t,n){const r=1e4;return Math.round(1500*t)+Math.round(1500*n)*r+e*r*r}function b(e,t,n){const r=Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])),o=[(t[0]-e[0])/r,(t[1]-e[1])/r],i=[-o[1],o[0]],a=Math.sqrt((n[0]-e[0])*(n[0]-e[0])+(n[1]-e[1])*(n[1]-e[1])),s=[(n[0]-e[0])/a,(n[1]-e[1])/a],u=0===r||0===a?0:Math.acos((f=s[0]*o[0]+s[1]*o[1],x=-1,l=1,Math.min(Math.max(f,x),l)));var f,x,l;return s[0]*i[0]+s[1]*i[1]>0?u:2*Math.PI-u}const g=null!==o;let m=0,w=0;if(null!==r){m=b(d,y,a(x,[...[e[r],e[r+1]]]))}if(g){w=b(y,d,a(x,[...[e[o],e[o+1]]]))}i.push(c[0],c[1],v[0],v[1],p(0,m,w)),i.push(...u),i.push(c[0],c[1],v[0],v[1],p(1,m,w)),i.push(...u),i.push(c[0],c[1],v[0],v[1],p(2,m,w)),i.push(...u),i.push(c[0],c[1],v[0],v[1],p(3,m,w)),i.push(...u),s.push(h,h+1,h+2,h+1,h+3,h+2)}function L(e,t,n,r,o){const i=2+o;let a=t;const s=e.slice(a,a+o);a+=o;const f=e[a++];let x=0;const l=new Array(f-1);for(let t=0;t<f;t++)x+=e[a++],t<f-1&&(l[t]=x);const h=e.slice(a,a+2*x),c=u(h,l,2);for(let e=0;e<c.length;e++)r.push(c[e]+n.length/i);for(let e=0;e<h.length;e+=2)n.push(h[e],h[e+1],...s);return a+2*x}const G=self;G.onmessage=r=>{const o=r.data;switch(o.type){case t:{const e=3,t=2,n=o.customAttributesCount,r=t+n,i=new Float32Array(o.renderInstructions),a=i.length/r,s=4*a*(n+e),u=new Uint32Array(6*a),f=new Float32Array(s);let x;for(let e=0;e<i.length;e+=r)x=_(i,e,f,u,n,x);const l=Object.assign({vertexBuffer:f.buffer,indexBuffer:u.buffer,renderInstructions:i.buffer},o);G.postMessage(l,[f.buffer,u.buffer,i.buffer]);break}case n:{const e=[],t=[],n=o.customAttributesCount,r=2,i=new Float32Array(o.renderInstructions);let a=0;const u=o.renderInstructionsTransform,f=[1,0,0,1,0,0];let x,l;for(s(f,u);a<i.length;){l=Array.from(i.slice(a,a+n)),a+=n,x=i[a++];for(let n=0;n<x-1;n++)q(i,a+n*r,a+(n+1)*r,n>0?a+(n-1)*r:null,n<x-2?a+(n+2)*r:null,e,t,l,0,f);a+=x*r}const h=Uint32Array.from(t),c=Float32Array.from(e),v=Object.assign({vertexBuffer:c.buffer,indexBuffer:h.buffer,renderInstructions:i.buffer},o);G.postMessage(v,[c.buffer,h.buffer,i.buffer]);break}case e:{const e=[],t=[],n=o.customAttributesCount,r=new Float32Array(o.renderInstructions);let i=0;for(;i<r.length;)i=L(r,i,e,t,n);const a=Uint32Array.from(t),s=Float32Array.from(e),u=Object.assign({vertexBuffer:s.buffer,indexBuffer:a.buffer,renderInstructions:r.buffer},o);G.postMessage(u,[s.buffer,a.buffer,r.buffer]);break}}};";
            return new Worker(typeof Blob === 'undefined'
              ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')
              : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));
          }

  /**
   * @module ol/renderer/webgl/PointsLayer
   */

  /**
   * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different
   * for each feature.
   * @property {string} name Attribute name.
   * @property {function(import("../../Feature").default, Object<string, *>):number} callback This callback computes the numerical value of the
   * attribute for a given feature (properties are available as 2nd arg for quicker access).
   */

  /**
   * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize
   * rebuildBuffers by accessing these objects quicker.
   * @property {import("../../Feature").default} feature Feature
   * @property {Object<string, *>} properties Feature properties
   * @property {import("../../geom").Geometry} geometry Feature geometry
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.
   * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then
   * passed to the GPU. The `name` property of each attribute will serve as its identifier:
   *  * In the vertex shader as an `attribute` by prefixing it with `a_`
   *  * In the fragment shader as a `varying` by prefixing it with `v_`
   * Please note that these can only be numerical values.
   * @property {string} vertexShader Vertex shader source, mandatory.
   * @property {string} fragmentShader Fragment shader source, mandatory.
   * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.
   * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.
   * @property {Object<string,import("../../webgl/Helper").UniformValue>} [uniforms] Uniform definitions for the post process steps
   * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.
   * @property {Array<import("./Layer").PostProcessesOptions>} [postProcesses] Post-processes definitions
   */

  /**
   * @classdesc
   * WebGL vector renderer optimized for points.
   * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU
   * every time the vector source changes.
   *
   * You need to provide vertex and fragment shaders for rendering. This can be done using
   * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute
   * containing the screen-space projected center of the quad, as well as a `a_index` attribute
   * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).
   *
   * To include variable attributes in the shaders, you need to declare them using the `attributes` property of
   * the options object like so:
   * ```js
   * new WebGLPointsLayerRenderer(layer, {
   *   attributes: [
   *     {
   *       name: 'size',
   *       callback: function(feature) {
   *         // compute something with the feature
   *       }
   *     },
   *     {
   *       name: 'weight',
   *       callback: function(feature) {
   *         // compute something with the feature
   *       }
   *     },
   *   ],
   *   vertexShader:
   *     // shader using attribute a_weight and a_size
   *   fragmentShader:
   *     // shader using varying v_weight and v_size
   * ```
   *
   * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`
   * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain
   * the final color that will have to be output for hit detection to work.
   *
   * The following uniform is used for the main texture: `u_texture`.
   * The following uniform is used for the layer opacity: `u_opacity`.
   *
   * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.
   *
   * Points are rendered as quads with the following structure:
   *
   * ```
   *   (u0, v1)      (u1, v1)
   *  [3]----------[2]
   *   |`           |
   *   |  `         |
   *   |    `       |
   *   |      `     |
   *   |        `   |
   *   |          ` |
   *  [0]----------[1]
   *   (u0, v0)      (u1, v0)
   *  ```
   *
   * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.
   *
   * @api
   */
  class WebGLPointsLayerRenderer extends WebGLLayerRenderer$1 {
    /**
     * @param {import("../../layer/Layer.js").default} layer Layer.
     * @param {Options} options Options.
     */
    constructor(layer, options) {
      const uniforms = options.uniforms || {};
      const projectionMatrixTransform = create$3();
      uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;

      super(layer, {
        uniforms: uniforms,
        postProcesses: options.postProcesses,
      });

      this.ready = false;

      this.sourceRevision_ = -1;

      this.verticesBuffer_ = new WebGLArrayBuffer$1(ARRAY_BUFFER, DYNAMIC_DRAW);
      this.hitVerticesBuffer_ = new WebGLArrayBuffer$1(ARRAY_BUFFER, DYNAMIC_DRAW);
      this.indicesBuffer_ = new WebGLArrayBuffer$1(
        ELEMENT_ARRAY_BUFFER,
        DYNAMIC_DRAW
      );

      /**
       * @private
       */
      this.vertexShader_ = options.vertexShader;

      /**
       * @private
       */
      this.fragmentShader_ = options.fragmentShader;

      /**
       * @type {WebGLProgram}
       * @private
       */
      this.program_;

      /**
       * @type {boolean}
       * @private
       */
      this.hitDetectionEnabled_ =
        options.hitFragmentShader && options.hitVertexShader ? true : false;

      /**
       * @private
       */
      this.hitVertexShader_ = options.hitVertexShader;

      /**
       * @private
       */
      this.hitFragmentShader_ = options.hitFragmentShader;

      /**
       * @type {WebGLProgram}
       * @private
       */
      this.hitProgram_;

      const customAttributes = options.attributes
        ? options.attributes.map(function (attribute) {
            return {
              name: 'a_' + attribute.name,
              size: 1,
              type: AttributeType.FLOAT,
            };
          })
        : [];

      /**
       * A list of attributes used by the renderer. By default only the position and
       * index of the vertex (0 to 3) are required.
       * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}
       */
      this.attributes = [
        {
          name: 'a_position',
          size: 2,
          type: AttributeType.FLOAT,
        },
        {
          name: 'a_index',
          size: 1,
          type: AttributeType.FLOAT,
        },
      ].concat(customAttributes);

      /**
       * A list of attributes used for hit detection.
       * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}
       */
      this.hitDetectionAttributes = [
        {
          name: 'a_position',
          size: 2,
          type: AttributeType.FLOAT,
        },
        {
          name: 'a_index',
          size: 1,
          type: AttributeType.FLOAT,
        },
        {
          name: 'a_hitColor',
          size: 4,
          type: AttributeType.FLOAT,
        },
        {
          name: 'a_featureUid',
          size: 1,
          type: AttributeType.FLOAT,
        },
      ].concat(customAttributes);

      this.customAttributes = options.attributes ? options.attributes : [];

      this.previousExtent_ = createEmpty();

      /**
       * This transform is updated on every frame and is the composition of:
       * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)
       * - current world->screen transform
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.currentTransform_ = projectionMatrixTransform;

      /**
       * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.renderTransform_ = create$3();

      /**
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.invertRenderTransform_ = create$3();

      /**
       * @type {Float32Array}
       * @private
       */
      this.renderInstructions_ = new Float32Array(0);

      /**
       * These instructions are used for hit detection
       * @type {Float32Array}
       * @private
       */
      this.hitRenderInstructions_ = new Float32Array(0);

      /**
       * @type {WebGLRenderTarget}
       * @private
       */
      this.hitRenderTarget_;

      /**
       * Keep track of latest message sent to worker
       * @type {number}
       * @private
       */
      this.generateBuffersRun_ = 0;

      /**
       * @private
       */
      this.worker_ = create$1();

      this.worker_.addEventListener(
        'message',
        /**
         * @param {*} event Event.
         */
        (event) => {
          const received = event.data;
          if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {
            const projectionTransform = received.projectionTransform;
            if (received.hitDetection) {
              this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);
              this.helper.flushBufferData(this.hitVerticesBuffer_);
            } else {
              this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);
              this.helper.flushBufferData(this.verticesBuffer_);
            }
            this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);
            this.helper.flushBufferData(this.indicesBuffer_);

            this.renderTransform_ = projectionTransform;
            makeInverse(
              this.invertRenderTransform_,
              this.renderTransform_
            );
            if (received.hitDetection) {
              this.hitRenderInstructions_ = new Float32Array(
                event.data.renderInstructions
              );
            } else {
              this.renderInstructions_ = new Float32Array(
                event.data.renderInstructions
              );
              if (received.generateBuffersRun === this.generateBuffersRun_) {
                this.ready = true;
              }
            }

            this.getLayer().changed();
          }
        }
      );

      /**
       * This object will be updated when the source changes. Key is uid.
       * @type {Object<string, FeatureCacheItem>}
       * @private
       */
      this.featureCache_ = {};

      /**
       * Amount of features in the cache.
       * @type {number}
       * @private
       */
      this.featureCount_ = 0;

      const source = this.getLayer().getSource();
      this.sourceListenKeys_ = [
        listen(
          source,
          VectorEventType.ADDFEATURE,
          this.handleSourceFeatureAdded_,
          this
        ),
        listen(
          source,
          VectorEventType.CHANGEFEATURE,
          this.handleSourceFeatureChanged_,
          this
        ),
        listen(
          source,
          VectorEventType.REMOVEFEATURE,
          this.handleSourceFeatureDelete_,
          this
        ),
        listen(
          source,
          VectorEventType.CLEAR,
          this.handleSourceFeatureClear_,
          this
        ),
      ];
      source.forEachFeature((feature) => {
        this.featureCache_[getUid(feature)] = {
          feature: feature,
          properties: feature.getProperties(),
          geometry: feature.getGeometry(),
        };
        this.featureCount_++;
      });
    }

    afterHelperCreated() {
      this.program_ = this.helper.getProgram(
        this.fragmentShader_,
        this.vertexShader_
      );

      if (this.hitDetectionEnabled_) {
        this.hitProgram_ = this.helper.getProgram(
          this.hitFragmentShader_,
          this.hitVertexShader_
        );

        this.hitRenderTarget_ = new WebGLRenderTarget$1(this.helper);
      }
    }

    /**
     * @param {import("../../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceFeatureAdded_(event) {
      const feature = event.feature;
      this.featureCache_[getUid(feature)] = {
        feature: feature,
        properties: feature.getProperties(),
        geometry: feature.getGeometry(),
      };
      this.featureCount_++;
    }

    /**
     * @param {import("../../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceFeatureChanged_(event) {
      const feature = event.feature;
      this.featureCache_[getUid(feature)] = {
        feature: feature,
        properties: feature.getProperties(),
        geometry: feature.getGeometry(),
      };
    }

    /**
     * @param {import("../../source/Vector.js").VectorSourceEvent} event Event.
     * @private
     */
    handleSourceFeatureDelete_(event) {
      const feature = event.feature;
      delete this.featureCache_[getUid(feature)];
      this.featureCount_--;
    }

    /**
     * @private
     */
    handleSourceFeatureClear_() {
      this.featureCache_ = {};
      this.featureCount_ = 0;
    }

    /**
     * Render the layer.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState) {
      const gl = this.helper.getGL();
      this.preRender(gl, frameState);

      const projection = frameState.viewState.projection;
      const layer = this.getLayer();
      const vectorSource = layer.getSource();
      // FIXME fix hit detection isn't reliable when rendering multiple worlds
      const multiWorld = vectorSource.getWrapX() && projection.canWrapX();
      const projectionExtent = projection.getExtent();

      const extent = frameState.extent;
      const worldWidth = multiWorld ? getWidth(projectionExtent) : null;
      const endWorld = multiWorld
        ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1
        : 1;

      const startWorld = multiWorld
        ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)
        : 0;

      let world = startWorld;
      const renderCount = this.indicesBuffer_.getSize();

      do {
        // apply the current projection transform with the invert of the one used to fill buffers
        this.helper.makeProjectionTransform(frameState, this.currentTransform_);
        translate$1(this.currentTransform_, world * worldWidth, 0);
        multiply(this.currentTransform_, this.invertRenderTransform_);
        this.helper.applyUniforms(frameState);

        this.helper.drawElements(0, renderCount);
      } while (++world < endWorld);

      this.helper.finalizeDraw(
        frameState,
        this.dispatchPreComposeEvent,
        this.dispatchPostComposeEvent
      );
      const canvas = this.helper.getCanvas();

      if (this.hitDetectionEnabled_) {
        this.renderHitDetection(frameState, startWorld, endWorld, worldWidth);
        this.hitRenderTarget_.clearCachedData();
      }

      this.postRender(gl, frameState);

      return canvas;
    }

    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrameInternal(frameState) {
      const layer = this.getLayer();
      const vectorSource = layer.getSource();
      const viewState = frameState.viewState;
      const viewNotMoving =
        !frameState.viewHints[ViewHint.ANIMATING] &&
        !frameState.viewHints[ViewHint.INTERACTING];
      const extentChanged = !equals$2(this.previousExtent_, frameState.extent);
      const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();

      if (sourceChanged) {
        this.sourceRevision_ = vectorSource.getRevision();
      }

      if (viewNotMoving && (extentChanged || sourceChanged)) {
        const projection = viewState.projection;
        const resolution = viewState.resolution;

        const renderBuffer =
          layer instanceof BaseVectorLayer$1 ? layer.getRenderBuffer() : 0;
        const extent = buffer$2(frameState.extent, renderBuffer * resolution);
        vectorSource.loadFeatures(extent, resolution, projection);

        this.rebuildBuffers_(frameState);
        this.previousExtent_ = frameState.extent.slice();
      }

      this.helper.useProgram(this.program_, frameState);
      this.helper.prepareDraw(frameState);

      // write new data
      this.helper.bindBuffer(this.verticesBuffer_);
      this.helper.bindBuffer(this.indicesBuffer_);
      this.helper.enableAttributes(this.attributes);

      return true;
    }

    /**
     * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much
     * @param {import("../../Map").FrameState} frameState Frame state.
     * @private
     */
    rebuildBuffers_(frameState) {
      // saves the projection transform for the current frame state
      const projectionTransform = create$3();
      this.helper.makeProjectionTransform(frameState, projectionTransform);

      // here we anticipate the amount of render instructions that we well generate
      // this can be done since we know that for normal render we only have x, y as base instructions,
      // and x, y, r, g, b, a and featureUid for hit render instructions
      // and we also know the amount of custom attributes to append to these
      const totalInstructionsCount =
        (2 + this.customAttributes.length) * this.featureCount_;
      if (
        !this.renderInstructions_ ||
        this.renderInstructions_.length !== totalInstructionsCount
      ) {
        this.renderInstructions_ = new Float32Array(totalInstructionsCount);
      }
      if (this.hitDetectionEnabled_) {
        const totalHitInstructionsCount =
          (7 + this.customAttributes.length) * this.featureCount_;
        if (
          !this.hitRenderInstructions_ ||
          this.hitRenderInstructions_.length !== totalHitInstructionsCount
        ) {
          this.hitRenderInstructions_ = new Float32Array(
            totalHitInstructionsCount
          );
        }
      }

      // loop on features to fill the buffer
      let featureCache, geometry;
      const tmpCoords = [];
      const tmpColor = [];
      let renderIndex = 0;
      let hitIndex = 0;
      let hitColor;
      for (const featureUid in this.featureCache_) {
        featureCache = this.featureCache_[featureUid];
        geometry = /** @type {import("../../geom").Point} */ (
          featureCache.geometry
        );
        if (!geometry || geometry.getType() !== 'Point') {
          continue;
        }

        tmpCoords[0] = geometry.getFlatCoordinates()[0];
        tmpCoords[1] = geometry.getFlatCoordinates()[1];
        apply(projectionTransform, tmpCoords);

        hitColor = colorEncodeId(hitIndex + 6, tmpColor);

        this.renderInstructions_[renderIndex++] = tmpCoords[0];
        this.renderInstructions_[renderIndex++] = tmpCoords[1];

        // for hit detection, the feature uid is saved in the opacity value
        // and the index of the opacity value is encoded in the color values
        if (this.hitDetectionEnabled_) {
          this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];
          this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];
          this.hitRenderInstructions_[hitIndex++] = hitColor[0];
          this.hitRenderInstructions_[hitIndex++] = hitColor[1];
          this.hitRenderInstructions_[hitIndex++] = hitColor[2];
          this.hitRenderInstructions_[hitIndex++] = hitColor[3];
          this.hitRenderInstructions_[hitIndex++] = Number(featureUid);
        }

        // pushing custom attributes
        let value;
        for (let j = 0; j < this.customAttributes.length; j++) {
          value = this.customAttributes[j].callback(
            featureCache.feature,
            featureCache.properties
          );
          this.renderInstructions_[renderIndex++] = value;
          if (this.hitDetectionEnabled_) {
            this.hitRenderInstructions_[hitIndex++] = value;
          }
        }
      }

      /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */
      const message = {
        id: 0,
        type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,
        renderInstructions: this.renderInstructions_.buffer,
        customAttributesCount: this.customAttributes.length,
      };
      // additional properties will be sent back as-is by the worker
      message['projectionTransform'] = projectionTransform;
      message['generateBuffersRun'] = ++this.generateBuffersRun_;
      this.ready = false;
      this.worker_.postMessage(message, [this.renderInstructions_.buffer]);
      this.renderInstructions_ = null;

      /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */
      if (this.hitDetectionEnabled_) {
        const hitMessage = {
          id: 0,
          type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,
          renderInstructions: this.hitRenderInstructions_.buffer,
          customAttributesCount: 5 + this.customAttributes.length,
        };
        hitMessage['projectionTransform'] = projectionTransform;
        hitMessage['hitDetection'] = true;
        this.worker_.postMessage(hitMessage, [
          this.hitRenderInstructions_.buffer,
        ]);
        this.hitRenderInstructions_ = null;
      }
    }

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches
    ) {
      assert(this.hitDetectionEnabled_, 66);
      if (!this.hitRenderInstructions_) {
        return undefined;
      }

      const pixel = apply(
        frameState.coordinateToPixelTransform,
        coordinate.slice()
      );

      const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);
      const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];
      const index = colorDecodeId(color);
      const opacity = this.hitRenderInstructions_[index];
      const uid = Math.floor(opacity).toString();

      const source = this.getLayer().getSource();
      const feature = source.getFeatureByUid(uid);
      if (feature) {
        return callback(feature, this.getLayer(), null);
      }
      return undefined;
    }

    /**
     * Render the hit detection data to the corresponding render target
     * @param {import("../../Map.js").FrameState} frameState current frame state
     * @param {number} startWorld the world to render in the first iteration
     * @param {number} endWorld the last world to render
     * @param {number} worldWidth the width of the worlds being rendered
     */
    renderHitDetection(frameState, startWorld, endWorld, worldWidth) {
      // skip render entirely if vertex buffers not ready/generated yet
      if (!this.hitVerticesBuffer_.getSize()) {
        return;
      }

      let world = startWorld;

      this.hitRenderTarget_.setSize([
        Math.floor(frameState.size[0] / 2),
        Math.floor(frameState.size[1] / 2),
      ]);

      this.helper.useProgram(this.hitProgram_, frameState);
      this.helper.prepareDrawToRenderTarget(
        frameState,
        this.hitRenderTarget_,
        true
      );

      this.helper.bindBuffer(this.hitVerticesBuffer_);
      this.helper.bindBuffer(this.indicesBuffer_);
      this.helper.enableAttributes(this.hitDetectionAttributes);

      do {
        this.helper.makeProjectionTransform(frameState, this.currentTransform_);
        translate$1(this.currentTransform_, world * worldWidth, 0);
        multiply(this.currentTransform_, this.invertRenderTransform_);
        this.helper.applyUniforms(frameState);

        const renderCount = this.indicesBuffer_.getSize();
        this.helper.drawElements(0, renderCount);
      } while (++world < endWorld);
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.worker_.terminate();
      this.layer_ = null;
      this.sourceListenKeys_.forEach(function (key) {
        unlistenByKey(key);
      });
      this.sourceListenKeys_ = null;
      super.disposeInternal();
    }
  }

  var WebGLPointsLayerRenderer$1 = WebGLPointsLayerRenderer;

  /**
   * @module ol/layer/Heatmap
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient
   * of the heatmap, specified as an array of CSS color strings.
   * @property {number} [radius=8] Radius size in pixels.
   * @property {number} [blur=15] Blur size in pixels.
   * @property {string|function(import("../Feature.js").default):number} [weight='weight'] The feature
   * attribute to use for the weight or a function that returns a weight from a feature. Weight values
   * should range from 0 to 1 (and values outside will be clamped to that range).
   * @property {import("../source/Vector.js").default<import("../geom/Point.js").default>} [source] Point source.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @enum {string}
   * @private
   */
  const Property = {
    BLUR: 'blur',
    GRADIENT: 'gradient',
    RADIUS: 'radius',
  };

  /**
   * @const
   * @type {Array<string>}
   */
  const DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];

  /**
   * @classdesc
   * Layer for rendering vector data as a heatmap.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @fires import("../render/Event.js").RenderEvent
   * @extends {BaseVector<import("../source/Vector.js").default, WebGLPointsLayerRenderer>}
   * @api
   */
  class Heatmap extends BaseVectorLayer$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign({}, options);

      delete baseOptions.gradient;
      delete baseOptions.radius;
      delete baseOptions.blur;
      delete baseOptions.weight;
      super(baseOptions);

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.gradient_ = null;

      this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);

      this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);

      this.setBlur(options.blur !== undefined ? options.blur : 15);

      this.setRadius(options.radius !== undefined ? options.radius : 8);

      const weight = options.weight ? options.weight : 'weight';
      if (typeof weight === 'string') {
        this.weightFunction_ = function (feature) {
          return feature.get(weight);
        };
      } else {
        this.weightFunction_ = weight;
      }

      // For performance reasons, don't sort the features before rendering.
      // The render order is not relevant for a heatmap representation.
      this.setRenderOrder(null);
    }

    /**
     * Return the blur size in pixels.
     * @return {number} Blur size in pixels.
     * @api
     * @observable
     */
    getBlur() {
      return /** @type {number} */ (this.get(Property.BLUR));
    }

    /**
     * Return the gradient colors as array of strings.
     * @return {Array<string>} Colors.
     * @api
     * @observable
     */
    getGradient() {
      return /** @type {Array<string>} */ (this.get(Property.GRADIENT));
    }

    /**
     * Return the size of the radius in pixels.
     * @return {number} Radius size in pixel.
     * @api
     * @observable
     */
    getRadius() {
      return /** @type {number} */ (this.get(Property.RADIUS));
    }

    /**
     * @private
     */
    handleGradientChanged_() {
      this.gradient_ = createGradient(this.getGradient());
    }

    /**
     * Set the blur size in pixels.
     * @param {number} blur Blur size in pixels.
     * @api
     * @observable
     */
    setBlur(blur) {
      this.set(Property.BLUR, blur);
    }

    /**
     * Set the gradient colors as array of strings.
     * @param {Array<string>} colors Gradient.
     * @api
     * @observable
     */
    setGradient(colors) {
      this.set(Property.GRADIENT, colors);
    }

    /**
     * Set the size of the radius in pixels.
     * @param {number} radius Radius size in pixel.
     * @api
     * @observable
     */
    setRadius(radius) {
      this.set(Property.RADIUS, radius);
    }

    createRenderer() {
      return new WebGLPointsLayerRenderer$1(this, {
        className: this.getClassName(),
        attributes: [
          {
            name: 'weight',
            callback: (feature) => {
              const weight = this.weightFunction_(feature);
              return weight !== undefined ? clamp(weight, 0, 1) : 1;
            },
          },
        ],
        vertexShader: `
        precision mediump float;
        uniform mat4 u_projectionMatrix;
        uniform mat4 u_offsetScaleMatrix;
        uniform float u_size;
        attribute vec2 a_position;
        attribute float a_index;
        attribute float a_weight;

        varying vec2 v_texCoord;
        varying float v_weight;

        void main(void) {
          mat4 offsetMatrix = u_offsetScaleMatrix;
          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;
          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;
          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);
          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;
          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;
          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;
          v_texCoord = vec2(u, v);
          v_weight = a_weight;
        }`,
        fragmentShader: `
        precision mediump float;
        uniform float u_blurSlope;

        varying vec2 v_texCoord;
        varying float v_weight;

        void main(void) {
          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);
          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;
          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;
          float alpha = smoothstep(0.0, 1.0, value) * v_weight;
          gl_FragColor = vec4(alpha, alpha, alpha, alpha);
        }`,
        hitVertexShader: `
        precision mediump float;
        uniform mat4 u_projectionMatrix;
        uniform mat4 u_offsetScaleMatrix;
        uniform float u_size;
        attribute vec2 a_position;
        attribute float a_index;
        attribute float a_weight;
        attribute vec4 a_hitColor;

        varying vec2 v_texCoord;
        varying float v_weight;
        varying vec4 v_hitColor;

        void main(void) {
          mat4 offsetMatrix = u_offsetScaleMatrix;
          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;
          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;
          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);
          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;
          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;
          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;
          v_texCoord = vec2(u, v);
          v_hitColor = a_hitColor;
          v_weight = a_weight;
        }`,
        hitFragmentShader: `
        precision mediump float;
        uniform float u_blurSlope;

        varying vec2 v_texCoord;
        varying float v_weight;
        varying vec4 v_hitColor;

        void main(void) {
          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);
          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;
          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;
          float alpha = smoothstep(0.0, 1.0, value) * v_weight;
          if (alpha < 0.05) {
            discard;
          }

          gl_FragColor = v_hitColor;
        }`,
        uniforms: {
          u_size: () => {
            return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;
          },
          u_blurSlope: () => {
            return (
              this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))
            );
          },
        },
        postProcesses: [
          {
            fragmentShader: `
            precision mediump float;

            uniform sampler2D u_image;
            uniform sampler2D u_gradientTexture;
            uniform float u_opacity;

            varying vec2 v_texCoord;

            void main() {
              vec4 color = texture2D(u_image, v_texCoord);
              gl_FragColor.a = color.a * u_opacity;
              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;
              gl_FragColor.rgb *= gl_FragColor.a;
            }`,
            uniforms: {
              u_gradientTexture: () => {
                return this.gradient_;
              },
              u_opacity: () => {
                return this.getOpacity();
              },
            },
          },
        ],
      });
    }

    renderDeclutter() {}
  }

  /**
   * @param {Array<string>} colors A list of colored.
   * @return {HTMLCanvasElement} canvas with gradient texture.
   */
  function createGradient(colors) {
    const width = 1;
    const height = 256;
    const context = createCanvasContext2D(width, height);

    const gradient = context.createLinearGradient(0, 0, width, height);
    const step = 1 / (colors.length - 1);
    for (let i = 0, ii = colors.length; i < ii; ++i) {
      gradient.addColorStop(i * step, colors[i]);
    }

    context.fillStyle = gradient;
    context.fillRect(0, 0, width, height);

    return context.canvas;
  }

  var Heatmap$1 = Heatmap;

  /**
   * @module ol/layer/BaseImage
   */

  /**
   * @template {import("../source/Image.js").default} ImageSourceType
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link import("../Map.js").default#addLayer map.addLayer()}.
   * @property {ImageSourceType} [source] Source for this layer.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Server-rendered images that are available for arbitrary extents and
   * resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Image.js").default} ImageSourceType
   * @template {import("../renderer/Layer.js").default} RendererType
   * @extends {Layer<ImageSourceType, RendererType>}
   * @api
   */
  class BaseImageLayer extends Layer$1 {
    /**
     * @param {Options<ImageSourceType>} [options] Layer options.
     */
    constructor(options) {
      options = options ? options : {};
      super(options);
    }
  }

  var BaseImageLayer$1 = BaseImageLayer;

  /**
   * @module ol/renderer/canvas/ImageLayer
   */

  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  class CanvasImageLayerRenderer extends CanvasLayerRenderer$1 {
    /**
     * @param {import("../../layer/Image.js").default} imageLayer Image layer.
     */
    constructor(imageLayer) {
      super(imageLayer);

      /**
       * @protected
       * @type {?import("../../ImageBase.js").default}
       */
      this.image_ = null;
    }

    /**
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */
    getImage() {
      return this.image_ ? this.image_.getImage() : null;
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const viewResolution = viewState.resolution;

      const imageSource = this.getLayer().getSource();

      const hints = frameState.viewHints;

      let renderedExtent = frameState.extent;
      if (layerState.extent !== undefined) {
        renderedExtent = getIntersection(
          renderedExtent,
          fromUserExtent(layerState.extent, viewState.projection)
        );
      }

      if (
        !hints[ViewHint.ANIMATING] &&
        !hints[ViewHint.INTERACTING] &&
        !isEmpty(renderedExtent)
      ) {
        if (imageSource) {
          const projection = viewState.projection;
          const image = imageSource.getImage(
            renderedExtent,
            viewResolution,
            pixelRatio,
            projection
          );
          if (image) {
            if (this.loadImage(image)) {
              this.image_ = image;
            } else if (image.getState() === ImageState.EMPTY) {
              this.image_ = null;
            }
          }
        } else {
          this.image_ = null;
        }
      }

      return !!this.image_;
    }

    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray} Data at the pixel location.
     */
    getData(pixel) {
      const frameState = this.frameState;
      if (!frameState) {
        return null;
      }

      const layer = this.getLayer();
      const coordinate = apply(
        frameState.pixelToCoordinateTransform,
        pixel.slice()
      );

      const layerExtent = layer.getExtent();
      if (layerExtent) {
        if (!containsCoordinate(layerExtent, coordinate)) {
          return null;
        }
      }

      const imageExtent = this.image_.getExtent();
      const img = this.getImage();

      const imageMapWidth = getWidth(imageExtent);
      const col = Math.floor(
        img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)
      );
      if (col < 0 || col >= img.width) {
        return null;
      }

      const imageMapHeight = getHeight(imageExtent);
      const row = Math.floor(
        img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)
      );
      if (row < 0 || row >= img.height) {
        return null;
      }

      return this.getImageData(img, col, row);
    }

    /**
     * Render the layer.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      const image = this.image_;
      const imageExtent = image.getExtent();
      const imageResolution = image.getResolution();
      const imagePixelRatio = image.getPixelRatio();
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const viewCenter = viewState.center;
      const viewResolution = viewState.resolution;
      const scale =
        (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);

      const extent = frameState.extent;
      const resolution = viewState.resolution;
      const rotation = viewState.rotation;
      // desired dimensions of the canvas in pixels
      const width = Math.round((getWidth(extent) / resolution) * pixelRatio);
      const height = Math.round((getHeight(extent) / resolution) * pixelRatio);

      // set forward and inverse pixel transforms
      compose(
        this.pixelTransform,
        frameState.size[0] / 2,
        frameState.size[1] / 2,
        1 / pixelRatio,
        1 / pixelRatio,
        rotation,
        -width / 2,
        -height / 2
      );
      makeInverse(this.inversePixelTransform, this.pixelTransform);

      const canvasTransform = toString$4(this.pixelTransform);

      this.useContainer(target, canvasTransform, this.getBackground(frameState));

      const context = this.context;
      const canvas = context.canvas;

      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }

      // clipped rendering if layer extent is set
      let clipped = false;
      let render = true;
      if (layerState.extent) {
        const layerExtent = fromUserExtent(
          layerState.extent,
          viewState.projection
        );
        render = intersects$2(layerExtent, frameState.extent);
        clipped = render && !containsExtent(layerExtent, frameState.extent);
        if (clipped) {
          this.clipUnrotated(context, frameState, layerExtent);
        }
      }

      const img = this.getImage();

      const transform = compose(
        this.tempTransform,
        width / 2,
        height / 2,
        scale,
        scale,
        0,
        (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution,
        (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution
      );

      this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;

      const dw = img.width * transform[0];
      const dh = img.height * transform[3];

      if (!this.getLayer().getSource().getInterpolate()) {
        context.imageSmoothingEnabled = false;
      }

      this.preRender(context, frameState);
      if (render && dw >= 0.5 && dh >= 0.5) {
        const dx = transform[4];
        const dy = transform[5];
        const opacity = layerState.opacity;
        let previousAlpha;
        if (opacity !== 1) {
          previousAlpha = context.globalAlpha;
          context.globalAlpha = opacity;
        }
        context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);
        if (opacity !== 1) {
          context.globalAlpha = previousAlpha;
        }
      }
      this.postRender(context, frameState);

      if (clipped) {
        context.restore();
      }
      context.imageSmoothingEnabled = true;

      if (canvasTransform !== canvas.style.transform) {
        canvas.style.transform = canvasTransform;
      }

      return this.container;
    }
  }

  var CanvasImageLayerRenderer$1 = CanvasImageLayerRenderer;

  /**
   * @module ol/layer/Image
   */

  /**
   * @classdesc
   * Server-rendered images that are available for arbitrary extents and
   * resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Image.js").default} ImageSourceType
   * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}
   * @api
   */
  class ImageLayer extends BaseImageLayer$1 {
    /**
     * @param {import("./BaseImage.js").Options<ImageSourceType>} [options] Layer options.
     */
    constructor(options) {
      super(options);
    }

    createRenderer() {
      return new CanvasImageLayerRenderer$1(this);
    }

    /**
     * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the
     * layer extent, `null` will be returned.  Data for an image can only be retrieved if the
     * source's `crossOrigin` property is set.
     *
     * ```js
     * // display layer data on every pointer move
     * map.on('pointermove', (event) => {
     *   console.log(layer.getData(event.pixel));
     * });
     * ```
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     * @api
     */
    getData(pixel) {
      return super.getData(pixel);
    }
  }

  var ImageLayer$1 = ImageLayer;

  /**
   * @module ol/reproj/common
   */

  /**
   * Default maximum allowed threshold  (in pixels) for reprojection
   * triangulation.
   * @type {number}
   */
  const ERROR_THRESHOLD = 0.5;

  /**
   * @module ol/reproj/Triangulation
   */

  /**
   * Single triangle; consists of 3 source points and 3 target points.
   * @typedef {Object} Triangle
   * @property {Array<import("../coordinate.js").Coordinate>} source Source.
   * @property {Array<import("../coordinate.js").Coordinate>} target Target.
   */

  /**
   * Maximum number of subdivision steps during raster reprojection triangulation.
   * Prevents high memory usage and large number of proj4 calls (for certain
   * transformations and areas). At most `2*(2^this)` triangles are created for
   * each triangulated extent (tile/image).
   * @type {number}
   */
  const MAX_SUBDIVISION = 10;

  /**
   * Maximum allowed size of triangle relative to world width. When transforming
   * corners of world extent between certain projections, the resulting
   * triangulation seems to have zero error and no subdivision is performed. If
   * the triangle width is more than this (relative to world width; 0-1),
   * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
   * @type {number}
   */
  const MAX_TRIANGLE_WIDTH = 0.25;

  /**
   * @classdesc
   * Class containing triangulation of the given target extent.
   * Used for determining source data and the reprojection itself.
   */
  class Triangulation {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
     * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
     * @param {number} errorThreshold Acceptable error (in source units).
     * @param {?number} destinationResolution The (optional) resolution of the destination.
     */
    constructor(
      sourceProj,
      targetProj,
      targetExtent,
      maxSourceExtent,
      errorThreshold,
      destinationResolution
    ) {
      /**
       * @type {import("../proj/Projection.js").default}
       * @private
       */
      this.sourceProj_ = sourceProj;

      /**
       * @type {import("../proj/Projection.js").default}
       * @private
       */
      this.targetProj_ = targetProj;

      /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
      let transformInvCache = {};
      const transformInv = getTransform(this.targetProj_, this.sourceProj_);

      /**
       * @param {import("../coordinate.js").Coordinate} c A coordinate.
       * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
       * @private
       */
      this.transformInv_ = function (c) {
        const key = c[0] + '/' + c[1];
        if (!transformInvCache[key]) {
          transformInvCache[key] = transformInv(c);
        }
        return transformInvCache[key];
      };

      /**
       * @type {import("../extent.js").Extent}
       * @private
       */
      this.maxSourceExtent_ = maxSourceExtent;

      /**
       * @type {number}
       * @private
       */
      this.errorThresholdSquared_ = errorThreshold * errorThreshold;

      /**
       * @type {Array<Triangle>}
       * @private
       */
      this.triangles_ = [];

      /**
       * Indicates that the triangulation crosses edge of the source projection.
       * @type {boolean}
       * @private
       */
      this.wrapsXInSource_ = false;

      /**
       * @type {boolean}
       * @private
       */
      this.canWrapXInSource_ =
        this.sourceProj_.canWrapX() &&
        !!maxSourceExtent &&
        !!this.sourceProj_.getExtent() &&
        getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());

      /**
       * @type {?number}
       * @private
       */
      this.sourceWorldWidth_ = this.sourceProj_.getExtent()
        ? getWidth(this.sourceProj_.getExtent())
        : null;

      /**
       * @type {?number}
       * @private
       */
      this.targetWorldWidth_ = this.targetProj_.getExtent()
        ? getWidth(this.targetProj_.getExtent())
        : null;

      const destinationTopLeft = getTopLeft(targetExtent);
      const destinationTopRight = getTopRight(targetExtent);
      const destinationBottomRight = getBottomRight(targetExtent);
      const destinationBottomLeft = getBottomLeft(targetExtent);
      const sourceTopLeft = this.transformInv_(destinationTopLeft);
      const sourceTopRight = this.transformInv_(destinationTopRight);
      const sourceBottomRight = this.transformInv_(destinationBottomRight);
      const sourceBottomLeft = this.transformInv_(destinationBottomLeft);

      /*
       * The maxSubdivision controls how many splittings of the target area can
       * be done. The idea here is to do a linear mapping of the target areas
       * but the actual overal reprojection (can be) extremely non-linear. The
       * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
       * tile size. However this function is also called to remap canvas rendered
       * layers which can be much larger. This calculation increases the maxSubdivision
       * value by the right factor so that each 256x256 pixel area has
       * MAX_SUBDIVISION divisions.
       */
      const maxSubdivision =
        MAX_SUBDIVISION +
        (destinationResolution
          ? Math.max(
              0,
              Math.ceil(
                Math.log2(
                  getArea$1(targetExtent) /
                    (destinationResolution * destinationResolution * 256 * 256)
                )
              )
            )
          : 0);

      this.addQuad_(
        destinationTopLeft,
        destinationTopRight,
        destinationBottomRight,
        destinationBottomLeft,
        sourceTopLeft,
        sourceTopRight,
        sourceBottomRight,
        sourceBottomLeft,
        maxSubdivision
      );

      if (this.wrapsXInSource_) {
        let leftBound = Infinity;
        this.triangles_.forEach(function (triangle, i, arr) {
          leftBound = Math.min(
            leftBound,
            triangle.source[0][0],
            triangle.source[1][0],
            triangle.source[2][0]
          );
        });

        // Shift triangles to be as close to `leftBound` as possible
        // (if the distance is more than `worldWidth / 2` it can be closer.
        this.triangles_.forEach((triangle) => {
          if (
            Math.max(
              triangle.source[0][0],
              triangle.source[1][0],
              triangle.source[2][0]
            ) -
              leftBound >
            this.sourceWorldWidth_ / 2
          ) {
            const newTriangle = [
              [triangle.source[0][0], triangle.source[0][1]],
              [triangle.source[1][0], triangle.source[1][1]],
              [triangle.source[2][0], triangle.source[2][1]],
            ];
            if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {
              newTriangle[0][0] -= this.sourceWorldWidth_;
            }
            if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {
              newTriangle[1][0] -= this.sourceWorldWidth_;
            }
            if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {
              newTriangle[2][0] -= this.sourceWorldWidth_;
            }

            // Rarely (if the extent contains both the dateline and prime meridian)
            // the shift can in turn break some triangles.
            // Detect this here and don't shift in such cases.
            const minX = Math.min(
              newTriangle[0][0],
              newTriangle[1][0],
              newTriangle[2][0]
            );
            const maxX = Math.max(
              newTriangle[0][0],
              newTriangle[1][0],
              newTriangle[2][0]
            );
            if (maxX - minX < this.sourceWorldWidth_ / 2) {
              triangle.source = newTriangle;
            }
          }
        });
      }

      transformInvCache = {};
    }

    /**
     * Adds triangle to the triangulation.
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @private
     */
    addTriangle_(a, b, c, aSrc, bSrc, cSrc) {
      this.triangles_.push({
        source: [aSrc, bSrc, cSrc],
        target: [a, b, c],
      });
    }

    /**
     * Adds quad (points in clock-wise order) to the triangulation
     * (and reprojects the vertices) if valid.
     * Performs quad subdivision if needed to increase precision.
     *
     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
     * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
     * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
     * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
     * @private
     */
    addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
      const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
      const sourceCoverageX = this.sourceWorldWidth_
        ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_
        : null;
      const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);

      // when the quad is wrapped in the source projection
      // it covers most of the projection extent, but not fully
      const wrapsX =
        this.sourceProj_.canWrapX() &&
        sourceCoverageX > 0.5 &&
        sourceCoverageX < 1;

      let needsSubdivision = false;

      if (maxSubdivision > 0) {
        if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
          const targetQuadExtent = boundingExtent([a, b, c, d]);
          const targetCoverageX =
            getWidth(targetQuadExtent) / this.targetWorldWidth_;
          needsSubdivision =
            targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
        }
        if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
          needsSubdivision =
            sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
        }
      }

      if (!needsSubdivision && this.maxSourceExtent_) {
        if (
          isFinite(sourceQuadExtent[0]) &&
          isFinite(sourceQuadExtent[1]) &&
          isFinite(sourceQuadExtent[2]) &&
          isFinite(sourceQuadExtent[3])
        ) {
          if (!intersects$2(sourceQuadExtent, this.maxSourceExtent_)) {
            // whole quad outside source projection extent -> ignore
            return;
          }
        }
      }

      let isNotFinite = 0;

      if (!needsSubdivision) {
        if (
          !isFinite(aSrc[0]) ||
          !isFinite(aSrc[1]) ||
          !isFinite(bSrc[0]) ||
          !isFinite(bSrc[1]) ||
          !isFinite(cSrc[0]) ||
          !isFinite(cSrc[1]) ||
          !isFinite(dSrc[0]) ||
          !isFinite(dSrc[1])
        ) {
          if (maxSubdivision > 0) {
            needsSubdivision = true;
          } else {
            // It might be the case that only 1 of the points is infinite. In this case
            // we can draw a single triangle with the other three points
            isNotFinite =
              (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +
              (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +
              (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +
              (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
            if (
              isNotFinite != 1 &&
              isNotFinite != 2 &&
              isNotFinite != 4 &&
              isNotFinite != 8
            ) {
              return;
            }
          }
        }
      }

      if (maxSubdivision > 0) {
        if (!needsSubdivision) {
          const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
          const centerSrc = this.transformInv_(center);

          let dx;
          if (wrapsX) {
            const centerSrcEstimX =
              (modulo(aSrc[0], sourceWorldWidth) +
                modulo(cSrc[0], sourceWorldWidth)) /
              2;
            dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);
          } else {
            dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
          }
          const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
          const centerSrcErrorSquared = dx * dx + dy * dy;
          needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
        }
        if (needsSubdivision) {
          if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
            // split horizontally (top & bottom)
            const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
            const bcSrc = this.transformInv_(bc);
            const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
            const daSrc = this.transformInv_(da);

            this.addQuad_(
              a,
              b,
              bc,
              da,
              aSrc,
              bSrc,
              bcSrc,
              daSrc,
              maxSubdivision - 1
            );
            this.addQuad_(
              da,
              bc,
              c,
              d,
              daSrc,
              bcSrc,
              cSrc,
              dSrc,
              maxSubdivision - 1
            );
          } else {
            // split vertically (left & right)
            const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
            const abSrc = this.transformInv_(ab);
            const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
            const cdSrc = this.transformInv_(cd);

            this.addQuad_(
              a,
              ab,
              cd,
              d,
              aSrc,
              abSrc,
              cdSrc,
              dSrc,
              maxSubdivision - 1
            );
            this.addQuad_(
              ab,
              b,
              c,
              cd,
              abSrc,
              bSrc,
              cSrc,
              cdSrc,
              maxSubdivision - 1
            );
          }
          return;
        }
      }

      if (wrapsX) {
        if (!this.canWrapXInSource_) {
          return;
        }
        this.wrapsXInSource_ = true;
      }

      // Exactly zero or one of *Src is not finite
      // The triangles must have the diagonal line as the first side
      // This is to allow easy code in reproj.s to make it straight for broken
      // browsers that can't handle diagonal clipping
      if ((isNotFinite & 0xb) == 0) {
        this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
      }
      if ((isNotFinite & 0xe) == 0) {
        this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
      }
      if (isNotFinite) {
        // Try the other two triangles
        if ((isNotFinite & 0xd) == 0) {
          this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
        }
        if ((isNotFinite & 0x7) == 0) {
          this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
        }
      }
    }

    /**
     * Calculates extent of the `source` coordinates from all the triangles.
     *
     * @return {import("../extent.js").Extent} Calculated extent.
     */
    calculateSourceExtent() {
      const extent = createEmpty();

      this.triangles_.forEach(function (triangle, i, arr) {
        const src = triangle.source;
        extendCoordinate(extent, src[0]);
        extendCoordinate(extent, src[1]);
        extendCoordinate(extent, src[2]);
      });

      return extent;
    }

    /**
     * @return {Array<Triangle>} Array of the calculated triangles.
     */
    getTriangles() {
      return this.triangles_;
    }
  }

  var Triangulation$1 = Triangulation;

  /**
   * @module ol/reproj
   */

  let brokenDiagonalRendering_;

  /**
   * @type {Array<HTMLCanvasElement>}
   */
  const canvasPool = [];

  /**
   * This draws a small triangle into a canvas by setting the triangle as the clip region
   * and then drawing a (too large) rectangle
   *
   * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
   * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
   * @param {number} v1 The y-coordinate of the second point.
   * @param {number} u2 The x-coordinate of the third point.
   * @param {number} v2 The y-coordinate of the third point.
   */
  function drawTestTriangle(ctx, u1, v1, u2, v2) {
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(u1, v1);
    ctx.lineTo(u2, v2);
    ctx.closePath();
    ctx.save();
    ctx.clip();
    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
    ctx.restore();
  }

  /**
   * Given the data from getImageData, see if the right values appear at the provided offset.
   * Returns true if either the color or transparency is off
   *
   * @param {Uint8ClampedArray} data The data returned from getImageData
   * @param {number} offset The pixel offset from the start of data.
   * @return {boolean} true if the diagonal rendering is broken
   */
  function verifyBrokenDiagonalRendering(data, offset) {
    // the values ought to be close to the rgba(210, 0, 0, 0.75)
    return (
      Math.abs(data[offset * 4] - 210) > 2 ||
      Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2
    );
  }

  /**
   * Determines if the current browser configuration can render triangular clip regions correctly.
   * This value is cached so the function is only expensive the first time called.
   * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
   * Chrome works, and everything seems to work on OSX and Android. This function caches the
   * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
   * running, but lets hope not.
   *
   * @return {boolean} true if the Diagonal Rendering is broken.
   */
  function isBrokenDiagonalRendering() {
    if (brokenDiagonalRendering_ === undefined) {
      const ctx = createCanvasContext2D(6, 6, canvasPool);
      ctx.globalCompositeOperation = 'lighter';
      ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';
      drawTestTriangle(ctx, 4, 5, 4, 0);
      drawTestTriangle(ctx, 4, 5, 0, 5);
      const data = ctx.getImageData(0, 0, 3, 3).data;
      brokenDiagonalRendering_ =
        verifyBrokenDiagonalRendering(data, 0) ||
        verifyBrokenDiagonalRendering(data, 4) ||
        verifyBrokenDiagonalRendering(data, 8);
      releaseCanvas$1(ctx);
      canvasPool.push(ctx.canvas);
    }

    return brokenDiagonalRendering_;
  }

  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceResolution(
    sourceProj,
    targetProj,
    targetCenter,
    targetResolution
  ) {
    const sourceCenter = transform(targetCenter, targetProj, sourceProj);

    // calculate the ideal resolution of the source data
    let sourceResolution = getPointResolution(
      targetProj,
      targetResolution,
      targetCenter
    );

    const targetMetersPerUnit = targetProj.getMetersPerUnit();
    if (targetMetersPerUnit !== undefined) {
      sourceResolution *= targetMetersPerUnit;
    }
    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();
    if (sourceMetersPerUnit !== undefined) {
      sourceResolution /= sourceMetersPerUnit;
    }

    // Based on the projection properties, the point resolution at the specified
    // coordinates may be slightly different. We need to reverse-compensate this
    // in order to achieve optimal results.

    const sourceExtent = sourceProj.getExtent();
    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
      const compensationFactor =
        getPointResolution(sourceProj, sourceResolution, sourceCenter) /
        sourceResolution;
      if (isFinite(compensationFactor) && compensationFactor > 0) {
        sourceResolution /= compensationFactor;
      }
    }

    return sourceResolution;
  }

  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./extent.js").Extent} targetExtent Target extent
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceExtentResolution(
    sourceProj,
    targetProj,
    targetExtent,
    targetResolution
  ) {
    const targetCenter = getCenter(targetExtent);
    let sourceResolution = calculateSourceResolution(
      sourceProj,
      targetProj,
      targetCenter,
      targetResolution
    );

    if (!isFinite(sourceResolution) || sourceResolution <= 0) {
      forEachCorner(targetExtent, function (corner) {
        sourceResolution = calculateSourceResolution(
          sourceProj,
          targetProj,
          corner,
          targetResolution
        );
        return isFinite(sourceResolution) && sourceResolution > 0;
      });
    }

    return sourceResolution;
  }

  /**
   * @typedef {Object} ImageExtent
   * @property {import("./extent.js").Extent} extent Extent.
   * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
   */

  /**
   * Renders the source data into new canvas based on the triangulation.
   *
   * @param {number} width Width of the canvas.
   * @param {number} height Height of the canvas.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} sourceResolution Source resolution.
   * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
   * @param {number} targetResolution Target resolution.
   * @param {import("./extent.js").Extent} targetExtent Target extent.
   * @param {import("./reproj/Triangulation.js").default} triangulation Calculated triangulation.
   * @param {Array<ImageExtent>} sources Array of sources.
   * @param {number} gutter Gutter of the sources.
   * @param {boolean} [renderEdges] Render reprojection edges.
   * @param {boolean} [interpolate] Use linear interpolation when resampling.
   * @return {HTMLCanvasElement} Canvas with reprojected data.
   */
  function render(
    width,
    height,
    pixelRatio,
    sourceResolution,
    sourceExtent,
    targetResolution,
    targetExtent,
    triangulation,
    sources,
    gutter,
    renderEdges,
    interpolate
  ) {
    const context = createCanvasContext2D(
      Math.round(pixelRatio * width),
      Math.round(pixelRatio * height),
      canvasPool
    );

    if (!interpolate) {
      context.imageSmoothingEnabled = false;
    }

    if (sources.length === 0) {
      return context.canvas;
    }

    context.scale(pixelRatio, pixelRatio);

    function pixelRound(value) {
      return Math.round(value * pixelRatio) / pixelRatio;
    }

    context.globalCompositeOperation = 'lighter';

    const sourceDataExtent = createEmpty();
    sources.forEach(function (src, i, arr) {
      extend(sourceDataExtent, src.extent);
    });

    const canvasWidthInUnits = getWidth(sourceDataExtent);
    const canvasHeightInUnits = getHeight(sourceDataExtent);
    const stitchContext = createCanvasContext2D(
      Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),
      Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution),
      canvasPool
    );

    if (!interpolate) {
      stitchContext.imageSmoothingEnabled = false;
    }

    const stitchScale = pixelRatio / sourceResolution;

    sources.forEach(function (src, i, arr) {
      const xPos = src.extent[0] - sourceDataExtent[0];
      const yPos = -(src.extent[3] - sourceDataExtent[3]);
      const srcWidth = getWidth(src.extent);
      const srcHeight = getHeight(src.extent);

      // This test should never fail -- but it does. Need to find a fix the upstream condition
      if (src.image.width > 0 && src.image.height > 0) {
        stitchContext.drawImage(
          src.image,
          gutter,
          gutter,
          src.image.width - 2 * gutter,
          src.image.height - 2 * gutter,
          xPos * stitchScale,
          yPos * stitchScale,
          srcWidth * stitchScale,
          srcHeight * stitchScale
        );
      }
    });

    const targetTopLeft = getTopLeft(targetExtent);

    triangulation.getTriangles().forEach(function (triangle, i, arr) {
      /* Calculate affine transform (src -> dst)
       * Resulting matrix can be used to transform coordinate
       * from `sourceProjection` to destination pixels.
       *
       * To optimize number of context calls and increase numerical stability,
       * we also do the following operations:
       * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
       * here before solving the linear system so [ui, vi] are pixel coordinates.
       *
       * Src points: xi, yi
       * Dst points: ui, vi
       * Affine coefficients: aij
       *
       * | x0 y0 1  0  0 0 |   |a00|   |u0|
       * | x1 y1 1  0  0 0 |   |a01|   |u1|
       * | x2 y2 1  0  0 0 | x |a02| = |u2|
       * |  0  0 0 x0 y0 1 |   |a10|   |v0|
       * |  0  0 0 x1 y1 1 |   |a11|   |v1|
       * |  0  0 0 x2 y2 1 |   |a12|   |v2|
       */
      const source = triangle.source;
      const target = triangle.target;
      let x0 = source[0][0],
        y0 = source[0][1];
      let x1 = source[1][0],
        y1 = source[1][1];
      let x2 = source[2][0],
        y2 = source[2][1];
      // Make sure that everything is on pixel boundaries
      const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
      const v0 = pixelRound(
        -(target[0][1] - targetTopLeft[1]) / targetResolution
      );
      const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
      const v1 = pixelRound(
        -(target[1][1] - targetTopLeft[1]) / targetResolution
      );
      const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
      const v2 = pixelRound(
        -(target[2][1] - targetTopLeft[1]) / targetResolution
      );

      // Shift all the source points to improve numerical stability
      // of all the subsequent calculations. The [x0, y0] is used here.
      // This is also used to simplify the linear system.
      const sourceNumericalShiftX = x0;
      const sourceNumericalShiftY = y0;
      x0 = 0;
      y0 = 0;
      x1 -= sourceNumericalShiftX;
      y1 -= sourceNumericalShiftY;
      x2 -= sourceNumericalShiftX;
      y2 -= sourceNumericalShiftY;

      const augmentedMatrix = [
        [x1, y1, 0, 0, u1 - u0],
        [x2, y2, 0, 0, u2 - u0],
        [0, 0, x1, y1, v1 - v0],
        [0, 0, x2, y2, v2 - v0],
      ];
      const affineCoefs = solveLinearSystem(augmentedMatrix);
      if (!affineCoefs) {
        return;
      }

      context.save();
      context.beginPath();

      if (isBrokenDiagonalRendering() || !interpolate) {
        // Make sure that all lines are horizontal or vertical
        context.moveTo(u1, v1);
        // This is the diagonal line. Do it in 4 steps
        const steps = 4;
        const ud = u0 - u1;
        const vd = v0 - v1;
        for (let step = 0; step < steps; step++) {
          // Go horizontally
          context.lineTo(
            u1 + pixelRound(((step + 1) * ud) / steps),
            v1 + pixelRound((step * vd) / (steps - 1))
          );
          // Go vertically
          if (step != steps - 1) {
            context.lineTo(
              u1 + pixelRound(((step + 1) * ud) / steps),
              v1 + pixelRound(((step + 1) * vd) / (steps - 1))
            );
          }
        }
        // We are almost at u0r, v0r
        context.lineTo(u2, v2);
      } else {
        context.moveTo(u1, v1);
        context.lineTo(u0, v0);
        context.lineTo(u2, v2);
      }

      context.clip();

      context.transform(
        affineCoefs[0],
        affineCoefs[2],
        affineCoefs[1],
        affineCoefs[3],
        u0,
        v0
      );

      context.translate(
        sourceDataExtent[0] - sourceNumericalShiftX,
        sourceDataExtent[3] - sourceNumericalShiftY
      );

      context.scale(
        sourceResolution / pixelRatio,
        -sourceResolution / pixelRatio
      );

      context.drawImage(stitchContext.canvas, 0, 0);
      context.restore();
    });

    releaseCanvas$1(stitchContext);
    canvasPool.push(stitchContext.canvas);

    if (renderEdges) {
      context.save();

      context.globalCompositeOperation = 'source-over';
      context.strokeStyle = 'black';
      context.lineWidth = 1;

      triangulation.getTriangles().forEach(function (triangle, i, arr) {
        const target = triangle.target;
        const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
        const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
        const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
        const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
        const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
        const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;

        context.beginPath();
        context.moveTo(u1, v1);
        context.lineTo(u0, v0);
        context.lineTo(u2, v2);
        context.closePath();
        context.stroke();
      });

      context.restore();
    }
    return context.canvas;
  }

  /**
   * @module ol/reproj/Tile
   */

  /**
   * @typedef {function(number, number, number, number) : (import("../ImageTile.js").default)} FunctionType
   */

  /**
   * @classdesc
   * Class encapsulating single reprojected tile.
   * See {@link module:ol/source/TileImage~TileImage}.
   *
   */
  class ReprojTile extends Tile$1 {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
     * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
     * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} gutter Gutter of the source tiles.
     * @param {FunctionType} getTileFunction
     *     Function returning source tiles (z, x, y, pixelRatio).
     * @param {number} [errorThreshold] Acceptable reprojection error (in px).
     * @param {boolean} [renderEdges] Render reprojection edges.
     * @param {boolean} [interpolate] Use linear interpolation when resampling.
     */
    constructor(
      sourceProj,
      sourceTileGrid,
      targetProj,
      targetTileGrid,
      tileCoord,
      wrappedTileCoord,
      pixelRatio,
      gutter,
      getTileFunction,
      errorThreshold,
      renderEdges,
      interpolate
    ) {
      super(tileCoord, TileState.IDLE, {interpolate: !!interpolate});

      /**
       * @private
       * @type {boolean}
       */
      this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = gutter;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.sourceTileGrid_ = sourceTileGrid;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.targetTileGrid_ = targetTileGrid;

      /**
       * @private
       * @type {import("../tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;

      /**
       * @private
       * @type {!Array<import("../ImageTile.js").default>}
       */
      this.sourceTiles_ = [];

      /**
       * @private
       * @type {?Array<import("../events.js").EventsKey>}
       */
      this.sourcesListenerKeys_ = null;

      /**
       * @private
       * @type {number}
       */
      this.sourceZ_ = 0;

      const targetExtent = targetTileGrid.getTileCoordExtent(
        this.wrappedTileCoord_
      );
      const maxTargetExtent = this.targetTileGrid_.getExtent();
      let maxSourceExtent = this.sourceTileGrid_.getExtent();

      const limitedTargetExtent = maxTargetExtent
        ? getIntersection(targetExtent, maxTargetExtent)
        : targetExtent;

      if (getArea$1(limitedTargetExtent) === 0) {
        // Tile is completely outside range -> EMPTY
        // TODO: is it actually correct that the source even creates the tile ?
        this.state = TileState.EMPTY;
        return;
      }

      const sourceProjExtent = sourceProj.getExtent();
      if (sourceProjExtent) {
        if (!maxSourceExtent) {
          maxSourceExtent = sourceProjExtent;
        } else {
          maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
        }
      }

      const targetResolution = targetTileGrid.getResolution(
        this.wrappedTileCoord_[0]
      );

      const sourceResolution = calculateSourceExtentResolution(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        targetResolution
      );

      if (!isFinite(sourceResolution) || sourceResolution <= 0) {
        // invalid sourceResolution -> EMPTY
        // probably edges of the projections when no extent is defined
        this.state = TileState.EMPTY;
        return;
      }

      const errorThresholdInPixels =
        errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = new Triangulation$1(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        maxSourceExtent,
        sourceResolution * errorThresholdInPixels,
        targetResolution
      );

      if (this.triangulation_.getTriangles().length === 0) {
        // no valid triangles -> EMPTY
        this.state = TileState.EMPTY;
        return;
      }

      this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
      let sourceExtent = this.triangulation_.calculateSourceExtent();

      if (maxSourceExtent) {
        if (sourceProj.canWrapX()) {
          sourceExtent[1] = clamp(
            sourceExtent[1],
            maxSourceExtent[1],
            maxSourceExtent[3]
          );
          sourceExtent[3] = clamp(
            sourceExtent[3],
            maxSourceExtent[1],
            maxSourceExtent[3]
          );
        } else {
          sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
        }
      }

      if (!getArea$1(sourceExtent)) {
        this.state = TileState.EMPTY;
      } else {
        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(
          sourceExtent,
          this.sourceZ_
        );

        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
            if (tile) {
              this.sourceTiles_.push(tile);
            }
          }
        }

        if (this.sourceTiles_.length === 0) {
          this.state = TileState.EMPTY;
        }
      }
    }

    /**
     * Get the HTML Canvas element for this tile.
     * @return {HTMLCanvasElement} Canvas.
     */
    getImage() {
      return this.canvas_;
    }

    /**
     * @private
     */
    reproject_() {
      const sources = [];
      this.sourceTiles_.forEach((tile) => {
        if (tile && tile.getState() == TileState.LOADED) {
          sources.push({
            extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
            image: tile.getImage(),
          });
        }
      });
      this.sourceTiles_.length = 0;

      if (sources.length === 0) {
        this.state = TileState.ERROR;
      } else {
        const z = this.wrappedTileCoord_[0];
        const size = this.targetTileGrid_.getTileSize(z);
        const width = typeof size === 'number' ? size : size[0];
        const height = typeof size === 'number' ? size : size[1];
        const targetResolution = this.targetTileGrid_.getResolution(z);
        const sourceResolution = this.sourceTileGrid_.getResolution(
          this.sourceZ_
        );

        const targetExtent = this.targetTileGrid_.getTileCoordExtent(
          this.wrappedTileCoord_
        );

        this.canvas_ = render(
          width,
          height,
          this.pixelRatio_,
          sourceResolution,
          this.sourceTileGrid_.getExtent(),
          targetResolution,
          targetExtent,
          this.triangulation_,
          sources,
          this.gutter_,
          this.renderEdges_,
          this.interpolate
        );

        this.state = TileState.LOADED;
      }
      this.changed();
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        this.changed();

        let leftToLoad = 0;

        this.sourcesListenerKeys_ = [];
        this.sourceTiles_.forEach((tile) => {
          const state = tile.getState();
          if (state == TileState.IDLE || state == TileState.LOADING) {
            leftToLoad++;

            const sourceListenKey = listen(
              tile,
              EventType.CHANGE,
              function (e) {
                const state = tile.getState();
                if (
                  state == TileState.LOADED ||
                  state == TileState.ERROR ||
                  state == TileState.EMPTY
                ) {
                  unlistenByKey(sourceListenKey);
                  leftToLoad--;
                  if (leftToLoad === 0) {
                    this.unlistenSources_();
                    this.reproject_();
                  }
                }
              },
              this
            );
            this.sourcesListenerKeys_.push(sourceListenKey);
          }
        });

        if (leftToLoad === 0) {
          setTimeout(this.reproject_.bind(this), 0);
        } else {
          this.sourceTiles_.forEach(function (tile, i, arr) {
            const state = tile.getState();
            if (state == TileState.IDLE) {
              tile.load();
            }
          });
        }
      }
    }

    /**
     * @private
     */
    unlistenSources_() {
      this.sourcesListenerKeys_.forEach(unlistenByKey);
      this.sourcesListenerKeys_ = null;
    }

    /**
     * Remove from the cache due to expiry
     */
    release() {
      if (this.canvas_) {
        releaseCanvas$1(this.canvas_.getContext('2d'));
        canvasPool.push(this.canvas_);
        this.canvas_ = null;
      }
      super.release();
    }
  }

  var ReprojTile$1 = ReprojTile;

  /**
   * @module ol/renderer/canvas/TileLayer
   */

  /**
   * @classdesc
   * Canvas renderer for tile layers.
   * @api
   * @template {import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default} [LayerType=import("../../layer/Tile.js").default<import("../../source/Tile.js").default>|import("../../layer/VectorTile.js").default]
   * @extends {CanvasLayerRenderer<LayerType>}
   */
  class CanvasTileLayerRenderer extends CanvasLayerRenderer$1 {
    /**
     * @param {LayerType} tileLayer Tile layer.
     */
    constructor(tileLayer) {
      super(tileLayer);

      /**
       * Rendered extent has changed since the previous `renderFrame()` call
       * @type {boolean}
       */
      this.extentChanged = true;

      /**
       * @private
       * @type {?import("../../extent.js").Extent}
       */
      this.renderedExtent_ = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedPixelRatio;

      /**
       * @protected
       * @type {import("../../proj/Projection.js").default}
       */
      this.renderedProjection = null;

      /**
       * @protected
       * @type {number}
       */
      this.renderedRevision;

      /**
       * @protected
       * @type {!Array<import("../../Tile.js").default>}
       */
      this.renderedTiles = [];

      /**
       * @private
       * @type {boolean}
       */
      this.newTiles_ = false;

      /**
       * @protected
       * @type {import("../../extent.js").Extent}
       */
      this.tmpExtent = createEmpty();

      /**
       * @private
       * @type {import("../../TileRange.js").default}
       */
      this.tmpTileRange_ = new TileRange$1(0, 0, 0, 0);
    }

    /**
     * @protected
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean} Tile is drawable.
     */
    isDrawableTile(tile) {
      const tileLayer = this.getLayer();
      const tileState = tile.getState();
      const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
      return (
        tileState == TileState.LOADED ||
        tileState == TileState.EMPTY ||
        (tileState == TileState.ERROR && !useInterimTilesOnError)
      );
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {!import("../../Tile.js").default} Tile.
     */
    getTile(z, x, y, frameState) {
      const pixelRatio = frameState.pixelRatio;
      const projection = frameState.viewState.projection;
      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getSource();
      let tile = tileSource.getTile(z, x, y, pixelRatio, projection);
      if (tile.getState() == TileState.ERROR) {
        if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {
          // Preloaded tiles for lower resolutions might have finished loading.
          this.newTiles_ = true;
        }
      }
      if (!this.isDrawableTile(tile)) {
        tile = tile.getInterimTile();
      }
      return tile;
    }

    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray} Data at the pixel location.
     */
    getData(pixel) {
      const frameState = this.frameState;
      if (!frameState) {
        return null;
      }

      const layer = this.getLayer();
      const coordinate = apply(
        frameState.pixelToCoordinateTransform,
        pixel.slice()
      );

      const layerExtent = layer.getExtent();
      if (layerExtent) {
        if (!containsCoordinate(layerExtent, coordinate)) {
          return null;
        }
      }

      const pixelRatio = frameState.pixelRatio;
      const projection = frameState.viewState.projection;
      const viewState = frameState.viewState;
      const source = layer.getRenderSource();
      const tileGrid = source.getTileGridForProjection(viewState.projection);
      const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);

      for (
        let z = tileGrid.getZForResolution(viewState.resolution);
        z >= tileGrid.getMinZoom();
        --z
      ) {
        const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
        const tile = source.getTile(
          z,
          tileCoord[1],
          tileCoord[2],
          pixelRatio,
          projection
        );
        if (
          !(tile instanceof ImageTile$1 || tile instanceof ReprojTile$1) ||
          (tile instanceof ReprojTile$1 && tile.getState() === TileState.EMPTY)
        ) {
          return null;
        }

        if (tile.getState() !== TileState.LOADED) {
          continue;
        }

        const tileOrigin = tileGrid.getOrigin(z);
        const tileSize = toSize(tileGrid.getTileSize(z));
        const tileResolution = tileGrid.getResolution(z);

        const col = Math.floor(
          tilePixelRatio *
            ((coordinate[0] - tileOrigin[0]) / tileResolution -
              tileCoord[1] * tileSize[0])
        );

        const row = Math.floor(
          tilePixelRatio *
            ((tileOrigin[1] - coordinate[1]) / tileResolution -
              tileCoord[2] * tileSize[1])
        );

        const gutter = Math.round(
          tilePixelRatio * source.getGutterForProjection(viewState.projection)
        );

        return this.getImageData(tile.getImage(), col + gutter, row + gutter);
      }

      return null;
    }

    /**
     * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
     * @param {number} zoom Zoom level.
     * @param {import("../../Tile.js").default} tile Tile.
     * @return {boolean|void} If `false`, the tile will not be considered loaded.
     */
    loadedTileCallback(tiles, zoom, tile) {
      if (this.isDrawableTile(tile)) {
        return super.loadedTileCallback(tiles, zoom, tile);
      }
      return false;
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      return !!this.getLayer().getSource();
    }

    /**
     * Render the layer.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target that may be used to render content to.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState, target) {
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const viewResolution = viewState.resolution;
      const viewCenter = viewState.center;
      const rotation = viewState.rotation;
      const pixelRatio = frameState.pixelRatio;

      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getSource();
      const sourceRevision = tileSource.getRevision();
      const tileGrid = tileSource.getTileGridForProjection(projection);
      const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
      const tileResolution = tileGrid.getResolution(z);

      let extent = frameState.extent;
      const resolution = frameState.viewState.resolution;
      const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
      // desired dimensions of the canvas in pixels
      const width = Math.round((getWidth(extent) / resolution) * pixelRatio);
      const height = Math.round((getHeight(extent) / resolution) * pixelRatio);

      const layerExtent =
        layerState.extent && fromUserExtent(layerState.extent, projection);
      if (layerExtent) {
        extent = getIntersection(
          extent,
          fromUserExtent(layerState.extent, projection)
        );
      }

      const dx = (tileResolution * width) / 2 / tilePixelRatio;
      const dy = (tileResolution * height) / 2 / tilePixelRatio;
      const canvasExtent = [
        viewCenter[0] - dx,
        viewCenter[1] - dy,
        viewCenter[0] + dx,
        viewCenter[1] + dy,
      ];

      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);

      /**
       * @type {Object<number, Object<string, import("../../Tile.js").default>>}
       */
      const tilesToDrawByZ = {};
      tilesToDrawByZ[z] = {};

      const findLoadedTiles = this.createLoadedTileFinder(
        tileSource,
        projection,
        tilesToDrawByZ
      );

      const tmpExtent = this.tmpExtent;
      const tmpTileRange = this.tmpTileRange_;
      this.newTiles_ = false;
      const viewport = rotation
        ? getRotatedViewport(
            viewState.center,
            resolution,
            rotation,
            frameState.size
          )
        : undefined;
      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
          if (
            rotation &&
            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)
          ) {
            continue;
          }
          const tile = this.getTile(z, x, y, frameState);
          if (this.isDrawableTile(tile)) {
            const uid = getUid(this);
            if (tile.getState() == TileState.LOADED) {
              tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
              let inTransition = tile.inTransition(uid);
              if (inTransition && layerState.opacity !== 1) {
                // Skipping transition when layer is not fully opaque avoids visual artifacts.
                tile.endTransition(uid);
                inTransition = false;
              }
              if (
                !this.newTiles_ &&
                (inTransition || !this.renderedTiles.includes(tile))
              ) {
                this.newTiles_ = true;
              }
            }
            if (tile.getAlpha(uid, frameState.time) === 1) {
              // don't look for alt tiles if alpha is 1
              continue;
            }
          }

          const childTileRange = tileGrid.getTileCoordChildTileRange(
            tile.tileCoord,
            tmpTileRange,
            tmpExtent
          );

          let covered = false;
          if (childTileRange) {
            covered = findLoadedTiles(z + 1, childTileRange);
          }
          if (!covered) {
            tileGrid.forEachTileCoordParentTileRange(
              tile.tileCoord,
              findLoadedTiles,
              tmpTileRange,
              tmpExtent
            );
          }
        }
      }

      const canvasScale =
        ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;

      // set forward and inverse pixel transforms
      compose(
        this.pixelTransform,
        frameState.size[0] / 2,
        frameState.size[1] / 2,
        1 / pixelRatio,
        1 / pixelRatio,
        rotation,
        -width / 2,
        -height / 2
      );

      const canvasTransform = toString$4(this.pixelTransform);

      this.useContainer(target, canvasTransform, this.getBackground(frameState));
      const context = this.context;
      const canvas = context.canvas;

      makeInverse(this.inversePixelTransform, this.pixelTransform);

      // set scale transform for calculating tile positions on the canvas
      compose(
        this.tempTransform,
        width / 2,
        height / 2,
        canvasScale,
        canvasScale,
        0,
        -width / 2,
        -height / 2
      );

      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }

      if (layerExtent) {
        this.clipUnrotated(context, frameState, layerExtent);
      }

      if (!tileSource.getInterpolate()) {
        context.imageSmoothingEnabled = false;
      }

      this.preRender(context, frameState);

      this.renderedTiles.length = 0;
      /** @type {Array<number>} */
      let zs = Object.keys(tilesToDrawByZ).map(Number);
      zs.sort(ascending);

      let clips, clipZs, currentClip;
      if (
        layerState.opacity === 1 &&
        (!this.containerReused ||
          tileSource.getOpaque(frameState.viewState.projection))
      ) {
        zs = zs.reverse();
      } else {
        clips = [];
        clipZs = [];
      }
      for (let i = zs.length - 1; i >= 0; --i) {
        const currentZ = zs[i];
        const currentTilePixelSize = tileSource.getTilePixelSize(
          currentZ,
          pixelRatio,
          projection
        );
        const currentResolution = tileGrid.getResolution(currentZ);
        const currentScale = currentResolution / tileResolution;
        const dx = currentTilePixelSize[0] * currentScale * canvasScale;
        const dy = currentTilePixelSize[1] * currentScale * canvasScale;
        const originTileCoord = tileGrid.getTileCoordForCoordAndZ(
          getTopLeft(canvasExtent),
          currentZ
        );
        const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
        const origin = apply(this.tempTransform, [
          (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /
            tileResolution,
          (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /
            tileResolution,
        ]);
        const tileGutter =
          tilePixelRatio * tileSource.getGutterForProjection(projection);
        const tilesToDraw = tilesToDrawByZ[currentZ];
        for (const tileCoordKey in tilesToDraw) {
          const tile = /** @type {import("../../ImageTile.js").default} */ (
            tilesToDraw[tileCoordKey]
          );
          const tileCoord = tile.tileCoord;

          // Calculate integer positions and sizes so that tiles align
          const xIndex = originTileCoord[1] - tileCoord[1];
          const nextX = Math.round(origin[0] - (xIndex - 1) * dx);
          const yIndex = originTileCoord[2] - tileCoord[2];
          const nextY = Math.round(origin[1] - (yIndex - 1) * dy);
          const x = Math.round(origin[0] - xIndex * dx);
          const y = Math.round(origin[1] - yIndex * dy);
          const w = nextX - x;
          const h = nextY - y;
          const transition = z === currentZ;

          const inTransition =
            transition && tile.getAlpha(getUid(this), frameState.time) !== 1;
          let contextSaved = false;
          if (!inTransition) {
            if (clips) {
              // Clip mask for regions in this tile that already filled by a higher z tile
              currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
              for (let i = 0, ii = clips.length; i < ii; ++i) {
                if (z !== currentZ && currentZ < clipZs[i]) {
                  const clip = clips[i];
                  if (
                    intersects$2(
                      [x, y, x + w, y + h],
                      [clip[0], clip[3], clip[4], clip[7]]
                    )
                  ) {
                    if (!contextSaved) {
                      context.save();
                      contextSaved = true;
                    }
                    context.beginPath();
                    // counter-clockwise (outer ring) for current tile
                    context.moveTo(currentClip[0], currentClip[1]);
                    context.lineTo(currentClip[2], currentClip[3]);
                    context.lineTo(currentClip[4], currentClip[5]);
                    context.lineTo(currentClip[6], currentClip[7]);
                    // clockwise (inner ring) for higher z tile
                    context.moveTo(clip[6], clip[7]);
                    context.lineTo(clip[4], clip[5]);
                    context.lineTo(clip[2], clip[3]);
                    context.lineTo(clip[0], clip[1]);
                    context.clip();
                  }
                }
              }
              clips.push(currentClip);
              clipZs.push(currentZ);
            } else {
              context.clearRect(x, y, w, h);
            }
          }
          this.drawTileImage(
            tile,
            frameState,
            x,
            y,
            w,
            h,
            tileGutter,
            transition
          );
          if (clips && !inTransition) {
            if (contextSaved) {
              context.restore();
            }
            this.renderedTiles.unshift(tile);
          } else {
            this.renderedTiles.push(tile);
          }
          this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
        }
      }

      this.renderedRevision = sourceRevision;
      this.renderedResolution = tileResolution;
      this.extentChanged =
        !this.renderedExtent_ || !equals$2(this.renderedExtent_, canvasExtent);
      this.renderedExtent_ = canvasExtent;
      this.renderedPixelRatio = pixelRatio;
      this.renderedProjection = projection;

      this.manageTilePyramid(
        frameState,
        tileSource,
        tileGrid,
        pixelRatio,
        projection,
        extent,
        z,
        tileLayer.getPreload()
      );
      this.scheduleExpireCache(frameState, tileSource);

      this.postRender(context, frameState);

      if (layerState.extent) {
        context.restore();
      }
      context.imageSmoothingEnabled = true;

      if (canvasTransform !== canvas.style.transform) {
        canvas.style.transform = canvasTransform;
      }

      return this.container;
    }

    /**
     * @param {import("../../ImageTile.js").default} tile Tile.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} x Left of the tile.
     * @param {number} y Top of the tile.
     * @param {number} w Width of the tile.
     * @param {number} h Height of the tile.
     * @param {number} gutter Tile gutter.
     * @param {boolean} transition Apply an alpha transition.
     */
    drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {
      const image = this.getTileImage(tile);
      if (!image) {
        return;
      }
      const uid = getUid(this);
      const layerState = frameState.layerStatesArray[frameState.layerIndex];
      const alpha =
        layerState.opacity *
        (transition ? tile.getAlpha(uid, frameState.time) : 1);
      const alphaChanged = alpha !== this.context.globalAlpha;
      if (alphaChanged) {
        this.context.save();
        this.context.globalAlpha = alpha;
      }
      this.context.drawImage(
        image,
        gutter,
        gutter,
        image.width - 2 * gutter,
        image.height - 2 * gutter,
        x,
        y,
        w,
        h
      );

      if (alphaChanged) {
        this.context.restore();
      }
      if (alpha !== layerState.opacity) {
        frameState.animate = true;
      } else if (transition) {
        tile.endTransition(uid);
      }
    }

    /**
     * @return {HTMLCanvasElement} Image
     */
    getImage() {
      const context = this.context;
      return context ? context.canvas : null;
    }

    /**
     * Get the image from a tile.
     * @param {import("../../ImageTile.js").default} tile Tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     * @protected
     */
    getTileImage(tile) {
      return tile.getImage();
    }

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @protected
     */
    scheduleExpireCache(frameState, tileSource) {
      if (tileSource.canExpireCache()) {
        /**
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import("../../Map.js").default} map Map.
         * @param {import("../../Map.js").FrameState} frameState Frame state.
         */
        const postRenderFunction = function (tileSource, map, frameState) {
          const tileSourceKey = getUid(tileSource);
          if (tileSourceKey in frameState.usedTiles) {
            tileSource.expireCache(
              frameState.viewState.projection,
              frameState.usedTiles[tileSourceKey]
            );
          }
        }.bind(null, tileSource);

        frameState.postRenderFunctions.push(
          /** @type {import("../../Map.js").PostRenderFunction} */ (
            postRenderFunction
          )
        );
      }
    }

    /**
     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import('../../Tile.js').default} tile Tile.
     * @protected
     */
    updateUsedTiles(usedTiles, tileSource, tile) {
      // FIXME should we use tilesToDrawByZ instead?
      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in usedTiles)) {
        usedTiles[tileSourceKey] = {};
      }
      usedTiles[tileSourceKey][tile.getKey()] = true;
    }

    /**
     * Manage tile pyramid.
     * This function performs a number of functions related to the tiles at the
     * current zoom and lower zoom levels:
     * - registers idle tiles in frameState.wantedTiles so that they are not
     *   discarded by the tile queue
     * - enqueues missing tiles
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("../../source/Tile.js").default} tileSource Tile source.
     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {number} currentZ Current Z.
     * @param {number} preload Load low resolution tiles up to `preload` levels.
     * @param {function(import("../../Tile.js").default):void} [tileCallback] Tile callback.
     * @protected
     */
    manageTilePyramid(
      frameState,
      tileSource,
      tileGrid,
      pixelRatio,
      projection,
      extent,
      currentZ,
      preload,
      tileCallback
    ) {
      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in frameState.wantedTiles)) {
        frameState.wantedTiles[tileSourceKey] = {};
      }
      const wantedTiles = frameState.wantedTiles[tileSourceKey];
      const tileQueue = frameState.tileQueue;
      const minZoom = tileGrid.getMinZoom();
      const rotation = frameState.viewState.rotation;
      const viewport = rotation
        ? getRotatedViewport(
            frameState.viewState.center,
            frameState.viewState.resolution,
            rotation,
            frameState.size
          )
        : undefined;
      let tileCount = 0;
      let tile, tileRange, tileResolution, x, y, z;
      for (z = minZoom; z <= currentZ; ++z) {
        tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
        tileResolution = tileGrid.getResolution(z);
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
            if (
              rotation &&
              !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)
            ) {
              continue;
            }
            if (currentZ - z <= preload) {
              ++tileCount;
              tile = tileSource.getTile(z, x, y, pixelRatio, projection);
              if (tile.getState() == TileState.IDLE) {
                wantedTiles[tile.getKey()] = true;
                if (!tileQueue.isKeyQueued(tile.getKey())) {
                  tileQueue.enqueue([
                    tile,
                    tileSourceKey,
                    tileGrid.getTileCoordCenter(tile.tileCoord),
                    tileResolution,
                  ]);
                }
              }
              if (tileCallback !== undefined) {
                tileCallback(tile);
              }
            } else {
              tileSource.useTile(z, x, y, projection);
            }
          }
        }
      }
      tileSource.updateCacheSize(tileCount, projection);
    }
  }

  var CanvasTileLayerRenderer$1 = CanvasTileLayerRenderer;

  /**
   * @module ol/renderer/canvas/VectorTileLayer
   */

  /**
   * @type {!Object<string, Array<import("../../render/canvas.js").BuilderType>>}
   */
  const IMAGE_REPLAYS = {
    'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],
    'hybrid': ['Polygon', 'LineString'],
    'vector': [],
  };

  /**
   * @type {!Object<string, Array<import("../../render/canvas.js").BuilderType>>}
   */
  const VECTOR_REPLAYS = {
    'hybrid': ['Image', 'Text', 'Default'],
    'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],
  };

  /**
   * @classdesc
   * Canvas renderer for vector tile layers.
   * @api
   * @extends {CanvasTileLayerRenderer<import("../../layer/VectorTile.js").default>}
   */
  class CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer$1 {
    /**
     * @param {import("../../layer/VectorTile.js").default} layer VectorTile layer.
     */
    constructor(layer) {
      super(layer);

      /** @private */
      this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);

      /**
       * @private
       * @type {number}
       */
      this.renderedLayerRevision_;

      /**
       * @private
       * @type {import("../../transform").Transform}
       */
      this.renderedPixelToCoordinateTransform_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRotation_;

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.tmpTransform_ = create$3();
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection").default} projection Projection.
     * @return {boolean|undefined} Tile needs to be rendered.
     */
    prepareTile(tile, pixelRatio, projection) {
      let render;
      const state = tile.getState();
      if (state === TileState.LOADED || state === TileState.ERROR) {
        this.updateExecutorGroup_(tile, pixelRatio, projection);
        if (this.tileImageNeedsRender_(tile)) {
          render = true;
        }
      }
      return render;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {!import("../../Tile.js").default} Tile.
     */
    getTile(z, x, y, frameState) {
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const resolution = viewState.resolution;
      const projection = viewState.projection;
      const layer = this.getLayer();
      const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);
      const viewHints = frameState.viewHints;
      const hifi = !(
        viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]
      );
      if (hifi || !tile.wantedResolution) {
        tile.wantedResolution = resolution;
      }
      const render = this.prepareTile(tile, pixelRatio, projection);
      if (
        render &&
        (hifi || Date.now() - frameState.time < 8) &&
        layer.getRenderMode() !== 'vector'
      ) {
        this.renderTileImage_(tile, frameState);
      }
      return super.getTile(z, x, y, frameState);
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @return {boolean} Tile is drawable.
     */
    isDrawableTile(tile) {
      const layer = this.getLayer();
      return (
        super.isDrawableTile(tile) &&
        (layer.getRenderMode() === 'vector'
          ? getUid(layer) in tile.executorGroups
          : tile.hasContext(layer))
      );
    }

    /**
     * @inheritDoc
     */
    getTileImage(tile) {
      return tile.getImage(this.getLayer());
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      const layerRevision = this.getLayer().getRevision();
      if (this.renderedLayerRevision_ !== layerRevision) {
        this.renderedLayerRevision_ = layerRevision;
        this.renderedTiles.length = 0;
      }
      return super.prepareFrame(frameState);
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../../proj/Projection.js").default} projection Projection.
     * @private
     */
    updateExecutorGroup_(tile, pixelRatio, projection) {
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (
        this.getLayer()
      );
      const revision = layer.getRevision();
      const renderOrder = layer.getRenderOrder() || null;

      const resolution = tile.wantedResolution;
      const builderState = tile.getReplayState(layer);
      if (
        !builderState.dirty &&
        builderState.renderedResolution === resolution &&
        builderState.renderedRevision == revision &&
        builderState.renderedRenderOrder == renderOrder
      ) {
        return;
      }

      const source = layer.getSource();
      const declutter = layer.getDeclutter();
      const sourceTileGrid = source.getTileGrid();
      const tileGrid = source.getTileGridForProjection(projection);
      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);

      const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);
      const layerUid = getUid(layer);
      delete tile.hitDetectionImageData[layerUid];
      tile.executorGroups[layerUid] = [];
      if (declutter) {
        tile.declutterExecutorGroups[layerUid] = [];
      }
      builderState.dirty = false;
      for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {
        const sourceTile = sourceTiles[t];
        if (sourceTile.getState() != TileState.LOADED) {
          continue;
        }
        const sourceTileCoord = sourceTile.tileCoord;
        const sourceTileExtent =
          sourceTileGrid.getTileCoordExtent(sourceTileCoord);
        const sharedExtent = getIntersection(tileExtent, sourceTileExtent);
        const builderExtent = buffer$2(
          sharedExtent,
          layer.getRenderBuffer() * resolution,
          this.tmpExtent
        );
        const bufferedExtent = equals$2(sourceTileExtent, sharedExtent)
          ? null
          : builderExtent;
        const builderGroup = new CanvasBuilderGroup(
          0,
          builderExtent,
          resolution,
          pixelRatio
        );
        const declutterBuilderGroup = declutter
          ? new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio)
          : undefined;
        const squaredTolerance = getSquaredTolerance(
          resolution,
          pixelRatio
        );

        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @this {CanvasVectorTileLayerRenderer}
         */
        const render = function (feature) {
          let styles;
          const styleFunction =
            feature.getStyleFunction() || layer.getStyleFunction();
          if (styleFunction) {
            styles = styleFunction(feature, resolution);
          }
          if (styles) {
            const dirty = this.renderFeature(
              feature,
              squaredTolerance,
              styles,
              builderGroup,
              declutterBuilderGroup
            );
            builderState.dirty = builderState.dirty || dirty;
          }
        };

        const features = sourceTile.getFeatures();
        if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {
          features.sort(renderOrder);
        }
        for (let i = 0, ii = features.length; i < ii; ++i) {
          const feature = features[i];
          if (
            !bufferedExtent ||
            intersects$2(bufferedExtent, feature.getGeometry().getExtent())
          ) {
            render.call(this, feature);
          }
        }
        const executorGroupInstructions = builderGroup.finish();
        // no need to clip when the render tile is covered by a single source tile
        const replayExtent =
          layer.getRenderMode() !== 'vector' &&
          declutter &&
          sourceTiles.length === 1
            ? null
            : sharedExtent;
        const renderingReplayGroup = new CanvasExecutorGroup(
          replayExtent,
          resolution,
          pixelRatio,
          source.getOverlaps(),
          executorGroupInstructions,
          layer.getRenderBuffer()
        );
        tile.executorGroups[layerUid].push(renderingReplayGroup);
        if (declutterBuilderGroup) {
          const declutterExecutorGroup = new CanvasExecutorGroup(
            null,
            resolution,
            pixelRatio,
            source.getOverlaps(),
            declutterBuilderGroup.finish(),
            layer.getRenderBuffer()
          );
          tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);
        }
      }
      builderState.renderedRevision = revision;
      builderState.renderedRenderOrder = renderOrder;
      builderState.renderedResolution = resolution;
    }

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches
    ) {
      const resolution = frameState.viewState.resolution;
      const rotation = frameState.viewState.rotation;
      hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
      const layer = this.getLayer();
      const source = layer.getSource();
      const tileGrid = source.getTileGridForProjection(
        frameState.viewState.projection
      );

      const hitExtent = boundingExtent([coordinate]);
      buffer$2(hitExtent, resolution * hitTolerance, hitExtent);

      /** @type {!Object<string, import("../Map.js").HitMatch<T>|true>} */
      const features = {};

      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
       * @param {number} distanceSq The squared distance to the click position.
       * @return {T|undefined} Callback result.
       */
      const featureCallback = function (feature, geometry, distanceSq) {
        let key = feature.getId();
        if (key === undefined) {
          key = getUid(feature);
        }
        const match = features[key];
        if (!match) {
          if (distanceSq === 0) {
            features[key] = true;
            return callback(feature, layer, geometry);
          }
          matches.push(
            (features[key] = {
              feature: feature,
              layer: layer,
              geometry: geometry,
              distanceSq: distanceSq,
              callback: callback,
            })
          );
        } else if (match !== true && distanceSq < match.distanceSq) {
          if (distanceSq === 0) {
            features[key] = true;
            matches.splice(matches.lastIndexOf(match), 1);
            return callback(feature, layer, geometry);
          }
          match.geometry = geometry;
          match.distanceSq = distanceSq;
        }
        return undefined;
      };

      const renderedTiles =
        /** @type {Array<import("../../VectorRenderTile.js").default>} */ (
          this.renderedTiles
        );

      let found;
      for (let i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {
        const tile = renderedTiles[i];
        const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
        if (!intersects$2(tileExtent, hitExtent)) {
          continue;
        }

        const layerUid = getUid(layer);
        const executorGroups = [tile.executorGroups[layerUid]];
        const declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];
        if (declutterExecutorGroups) {
          executorGroups.push(declutterExecutorGroups);
        }
        executorGroups.some((executorGroups) => {
          const declutteredFeatures =
            executorGroups === declutterExecutorGroups
              ? frameState.declutterTree.all().map((item) => item.value)
              : null;
          for (let t = 0, tt = executorGroups.length; t < tt; ++t) {
            const executorGroup = executorGroups[t];
            found = executorGroup.forEachFeatureAtCoordinate(
              coordinate,
              resolution,
              rotation,
              hitTolerance,
              featureCallback,
              declutteredFeatures
            );
            if (found) {
              return true;
            }
          }
        });
      }
      return found;
    }

    /**
     * Asynchronous layer level hit detection.
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../../Feature.js").FeatureLike>>} Promise that resolves with an array of features.
     */
    getFeatures(pixel) {
      return new Promise((resolve, reject) => {
        const layer = this.getLayer();
        const layerUid = getUid(layer);
        const source = layer.getSource();
        const projection = this.renderedProjection;
        const projectionExtent = projection.getExtent();
        const resolution = this.renderedResolution;
        const tileGrid = source.getTileGridForProjection(projection);
        const coordinate = apply(
          this.renderedPixelToCoordinateTransform_,
          pixel.slice()
        );
        const tileCoord = tileGrid.getTileCoordForCoordAndResolution(
          coordinate,
          resolution
        );
        /** @type {import("../../VectorRenderTile.js").default|undefined} */
        let tile;
        for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {
          if (
            tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()
          ) {
            tile = /** @type {import("../../VectorRenderTile.js").default} */ (
              this.renderedTiles[i]
            );
            if (tile.getState() === TileState.LOADED) {
              const extent = tileGrid.getTileCoordExtent(tile.tileCoord);
              if (
                source.getWrapX() &&
                projection.canWrapX() &&
                !containsExtent(projectionExtent, extent)
              ) {
                wrapX$1(coordinate, projection);
              }
              break;
            }
            tile = undefined;
          }
        }
        if (!tile || tile.loadingSourceTiles > 0) {
          resolve([]);
          return;
        }
        const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
        const corner = getTopLeft(extent);
        const tilePixel = [
          (coordinate[0] - corner[0]) / resolution,
          (corner[1] - coordinate[1]) / resolution,
        ];
        /** @type {Array<import("../../Feature.js").FeatureLike>} */
        const features = tile
          .getSourceTiles()
          .reduce(function (accumulator, sourceTile) {
            return accumulator.concat(sourceTile.getFeatures());
          }, []);
        /** @type {ImageData|undefined} */
        let hitDetectionImageData = tile.hitDetectionImageData[layerUid];
        if (!hitDetectionImageData) {
          const tileSize = toSize(
            tileGrid.getTileSize(
              tileGrid.getZForResolution(resolution, source.zDirection)
            )
          );
          const rotation = this.renderedRotation_;
          const transforms = [
            this.getRenderTransform(
              tileGrid.getTileCoordCenter(tile.wrappedTileCoord),
              resolution,
              0,
              HIT_DETECT_RESOLUTION,
              tileSize[0] * HIT_DETECT_RESOLUTION,
              tileSize[1] * HIT_DETECT_RESOLUTION,
              0
            ),
          ];
          hitDetectionImageData = createHitDetectionImageData(
            tileSize,
            transforms,
            features,
            layer.getStyleFunction(),
            tileGrid.getTileCoordExtent(tile.wrappedTileCoord),
            tile.getReplayState(layer).renderedResolution,
            rotation
          );
          tile.hitDetectionImageData[layerUid] = hitDetectionImageData;
        }
        resolve(hitDetect(tilePixel, features, hitDetectionImageData));
      });
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     */
    handleFontsChanged() {
      const layer = this.getLayer();
      if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
        layer.changed();
      }
    }

    /**
     * Handle changes in image style state.
     * @param {import("../../events/Event.js").default} event Image style change event.
     * @private
     */
    handleStyleImageChange_(event) {
      this.renderIfReadyAndVisible();
    }

    /**
     * Render declutter items for this layer
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     */
    renderDeclutter(frameState) {
      const context = this.context;
      const alpha = context.globalAlpha;
      context.globalAlpha = this.getLayer().getOpacity();
      const viewHints = frameState.viewHints;
      const hifi = !(
        viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]
      );
      const tiles =
        /** @type {Array<import("../../VectorRenderTile.js").default>} */ (
          this.renderedTiles
        );
      for (let i = 0, ii = tiles.length; i < ii; ++i) {
        const tile = tiles[i];
        const declutterExecutorGroups =
          tile.declutterExecutorGroups[getUid(this.getLayer())];
        if (declutterExecutorGroups) {
          for (let j = declutterExecutorGroups.length - 1; j >= 0; --j) {
            declutterExecutorGroups[j].execute(
              this.context,
              1,
              this.getTileRenderTransform(tile, frameState),
              frameState.viewState.rotation,
              hifi,
              undefined,
              frameState.declutterTree
            );
          }
        }
      }
      context.globalAlpha = alpha;
    }

    getTileRenderTransform(tile, frameState) {
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const center = viewState.center;
      const resolution = viewState.resolution;
      const rotation = viewState.rotation;
      const size = frameState.size;
      const width = Math.round(size[0] * pixelRatio);
      const height = Math.round(size[1] * pixelRatio);

      const source = this.getLayer().getSource();
      const tileGrid = source.getTileGridForProjection(
        frameState.viewState.projection
      );
      const tileCoord = tile.tileCoord;
      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
      const worldOffset =
        tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];
      const transform = multiply(
        scale$3(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio),
        this.getRenderTransform(
          center,
          resolution,
          rotation,
          pixelRatio,
          width,
          height,
          worldOffset
        )
      );
      return transform;
    }

    /**
     * Render the vectors for this layer.
     * @param {CanvasRenderingContext2D} context Target context.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     */
    postRender(context, frameState) {
      const viewHints = frameState.viewHints;
      const hifi = !(
        viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]
      );

      this.renderedPixelToCoordinateTransform_ =
        frameState.pixelToCoordinateTransform.slice();
      this.renderedRotation_ = frameState.viewState.rotation;

      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (
        this.getLayer()
      );
      const renderMode = layer.getRenderMode();
      const alpha = context.globalAlpha;
      context.globalAlpha = layer.getOpacity();
      const replayTypes = VECTOR_REPLAYS[renderMode];
      const viewState = frameState.viewState;
      const rotation = viewState.rotation;
      const tileSource = layer.getSource();
      const tileGrid = tileSource.getTileGridForProjection(viewState.projection);
      const z = tileGrid.getZForResolution(
        viewState.resolution,
        tileSource.zDirection
      );

      const tiles = this.renderedTiles;
      const clips = [];
      const clipZs = [];
      let ready = true;
      for (let i = tiles.length - 1; i >= 0; --i) {
        const tile = /** @type {import("../../VectorRenderTile.js").default} */ (
          tiles[i]
        );
        ready = ready && !tile.getReplayState(layer).dirty;
        const executorGroups = tile.executorGroups[getUid(layer)].filter(
          (group) => group.hasExecutors(replayTypes)
        );
        if (executorGroups.length === 0) {
          continue;
        }
        const transform = this.getTileRenderTransform(tile, frameState);
        const currentZ = tile.tileCoord[0];
        let contextSaved = false;
        // Clip mask for regions in this tile that already filled by a higher z tile
        const currentClip = executorGroups[0].getClipCoords(transform);
        if (currentClip) {
          for (let j = 0, jj = clips.length; j < jj; ++j) {
            if (z !== currentZ && currentZ < clipZs[j]) {
              const clip = clips[j];
              if (
                intersects$2(
                  [
                    currentClip[0],
                    currentClip[3],
                    currentClip[4],
                    currentClip[7],
                  ],
                  [clip[0], clip[3], clip[4], clip[7]]
                )
              ) {
                if (!contextSaved) {
                  context.save();
                  contextSaved = true;
                }
                context.beginPath();
                // counter-clockwise (outer ring) for current tile
                context.moveTo(currentClip[0], currentClip[1]);
                context.lineTo(currentClip[2], currentClip[3]);
                context.lineTo(currentClip[4], currentClip[5]);
                context.lineTo(currentClip[6], currentClip[7]);
                // clockwise (inner ring) for higher z tile
                context.moveTo(clip[6], clip[7]);
                context.lineTo(clip[4], clip[5]);
                context.lineTo(clip[2], clip[3]);
                context.lineTo(clip[0], clip[1]);
                context.clip();
              }
            }
          }
          clips.push(currentClip);
          clipZs.push(currentZ);
        }
        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {
          const executorGroup = executorGroups[t];
          executorGroup.execute(
            context,
            1,
            transform,
            rotation,
            hifi,
            replayTypes
          );
        }
        if (contextSaved) {
          context.restore();
        }
      }
      context.globalAlpha = alpha;
      this.ready = ready;

      super.postRender(context, frameState);
    }

    /**
     * @param {import("../../Feature.js").FeatureLike} feature Feature.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
     * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../../render/canvas/BuilderGroup.js").default} [declutterBuilderGroup] Builder group for decluttering.
     * @return {boolean} `true` if an image is loading.
     */
    renderFeature(
      feature,
      squaredTolerance,
      styles,
      builderGroup,
      declutterBuilderGroup
    ) {
      if (!styles) {
        return false;
      }
      let loading = false;
      if (Array.isArray(styles)) {
        for (let i = 0, ii = styles.length; i < ii; ++i) {
          loading =
            renderFeature$1(
              builderGroup,
              feature,
              styles[i],
              squaredTolerance,
              this.boundHandleStyleImageChange_,
              undefined,
              declutterBuilderGroup
            ) || loading;
        }
      } else {
        loading = renderFeature$1(
          builderGroup,
          feature,
          styles,
          squaredTolerance,
          this.boundHandleStyleImageChange_,
          undefined,
          declutterBuilderGroup
        );
      }
      return loading;
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @return {boolean} A new tile image was rendered.
     * @private
     */
    tileImageNeedsRender_(tile) {
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (
        this.getLayer()
      );
      if (layer.getRenderMode() === 'vector') {
        return false;
      }
      const replayState = tile.getReplayState(layer);
      const revision = layer.getRevision();
      const resolution = tile.wantedResolution;
      return (
        replayState.renderedTileResolution !== resolution ||
        replayState.renderedTileRevision !== revision
      );
    }

    /**
     * @param {import("../../VectorRenderTile.js").default} tile Tile.
     * @param {import("../../Map").FrameState} frameState Frame state.
     * @private
     */
    renderTileImage_(tile, frameState) {
      const layer = /** @type {import("../../layer/VectorTile.js").default} */ (
        this.getLayer()
      );
      const replayState = tile.getReplayState(layer);
      const revision = layer.getRevision();
      const executorGroups = tile.executorGroups[getUid(layer)];
      replayState.renderedTileRevision = revision;

      const tileCoord = tile.wrappedTileCoord;
      const z = tileCoord[0];
      const source = layer.getSource();
      let pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const projection = viewState.projection;
      const tileGrid = source.getTileGridForProjection(projection);
      const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);
      const renderPixelRatio =
        (frameState.pixelRatio / tile.wantedResolution) * tileResolution;
      const resolution = tileGrid.getResolution(z);
      const context = tile.getContext(layer);

      // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles
      pixelRatio = Math.round(
        Math.max(pixelRatio, renderPixelRatio / pixelRatio)
      );
      const size = source.getTilePixelSize(z, pixelRatio, projection);
      context.canvas.width = size[0];
      context.canvas.height = size[1];
      const renderScale = pixelRatio / renderPixelRatio;
      if (renderScale !== 1) {
        const canvasTransform = reset(this.tmpTransform_);
        scale$3(canvasTransform, renderScale, renderScale);
        context.setTransform.apply(context, canvasTransform);
      }
      const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
      const pixelScale = renderPixelRatio / resolution;
      const transform = reset(this.tmpTransform_);
      scale$3(transform, pixelScale, -pixelScale);
      translate$1(transform, -tileExtent[0], -tileExtent[3]);
      for (let i = 0, ii = executorGroups.length; i < ii; ++i) {
        const executorGroup = executorGroups[i];
        executorGroup.execute(
          context,
          renderScale,
          transform,
          0,
          true,
          IMAGE_REPLAYS[layer.getRenderMode()]
        );
      }
      replayState.renderedTileResolution = tile.wantedResolution;
    }
  }

  var CanvasVectorTileLayerRenderer$1 = CanvasVectorTileLayerRenderer;

  /**
   * @module ol/layer/TileProperty
   */

  /**
   * @enum {string}
   */
  var TileProperty = {
    PRELOAD: 'preload',
    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',
  };

  /**
   * @module ol/layer/VectorTile
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|
   *     import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import("../render/EventType").LayerRenderEventTypes, Return>} VectorTileLayerOnSignature
   */

  /**
   * @typedef {'hybrid' | 'vector'} VectorTileRenderType
   */

  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
   * renderer when getting features from the vector tile for the rendering or hit-detection.
   * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
   * the largest possible buffer of the used tiles. It should be at least the size of the largest
   * point symbol or line width.
   * @property {VectorTileRenderType} [renderMode='hybrid'] Render mode for vector tiles:
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
   *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
   *    rotated views.
   *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector
   *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of
   *    another layer with the same source).
   * @property {import("../source/VectorTile.js").default} [source] Source.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   *
   * As an optimization decluttered features from layers with the same `className` are rendered above
   * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this
   * behavior and place declutterd features with their own layer configure the layer with a `className`
   * other than `ol-layer`.
   * @property {import("../style/Style.js").StyleLike|null} [style] Layer style. When set to `null`, only
   * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
   * which will be used if this is not set.
   * @property {import("./Base.js").BackgroundColor|false} [background] Background color for the layer. If not specified, no
   * background will be rendered.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
   * recreated during animations. This means that no vectors will be shown clipped, but the setting
   * will have a performance impact for large amounts of vector data. When set to `false`, batches
   * will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
   * recreated during interactions. See also `updateWhileAnimating`.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Layer for vector tile data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @param {Options} [options] Options.
   * @extends {BaseVectorLayer<import("../source/VectorTile.js").default, CanvasVectorTileLayerRenderer>}
   * @api
   */
  class VectorTileLayer extends BaseVectorLayer$1 {
    /**
     * @param {Options} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = /** @type {Object} */ (Object.assign({}, options));
      delete baseOptions.preload;
      delete baseOptions.useInterimTilesOnError;

      super(
        /** @type {import("./BaseVector.js").Options<import("../source/VectorTile.js").default>} */ (
          baseOptions
        )
      );

      /***
       * @type {VectorTileLayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {VectorTileLayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {VectorTileLayerOnSignature<void>}
       */
      this.un;

      const renderMode = options.renderMode || 'hybrid';
      // `renderMode` must be `'hybrid'` or `'vector'`.
      assert(renderMode == 'hybrid' || renderMode == 'vector', 28);

      /**
       * @private
       * @type {VectorTileRenderType}
       */
      this.renderMode_ = renderMode;

      this.setPreload(options.preload ? options.preload : 0);
      this.setUseInterimTilesOnError(
        options.useInterimTilesOnError !== undefined
          ? options.useInterimTilesOnError
          : true
      );

      /**
       * @return {import("./Base.js").BackgroundColor} Background color.
       * @function
       * @api
       */
      this.getBackground;

      /**
       * @param {import("./Base.js").BackgroundColor} background Background color.
       * @function
       * @api
       */
      this.setBackground;
    }

    createRenderer() {
      return new CanvasVectorTileLayerRenderer$1(this);
    }

    /**
     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
     * that resolves with an array of features. The array will either contain the topmost feature
     * when a hit was detected, or it will be empty.
     *
     * The hit detection algorithm used for this method is optimized for performance, but is less
     * accurate than the one used in [map.getFeaturesAtPixel()]{@link import("../Map.js").default#getFeaturesAtPixel}.
     * Text is not considered, and icons are only represented by their bounding box instead of the exact
     * image.
     *
     * @param {import("../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../Feature").FeatureLike>>} Promise that resolves with an array of features.
     * @api
     */
    getFeatures(pixel) {
      return super.getFeatures(pixel);
    }

    /**
     * @return {VectorTileRenderType} The render mode.
     */
    getRenderMode() {
      return this.renderMode_;
    }

    /**
     * Return the level as number to which we will preload tiles up to.
     * @return {number} The level to preload tiles up to.
     * @observable
     * @api
     */
    getPreload() {
      return /** @type {number} */ (this.get(TileProperty.PRELOAD));
    }

    /**
     * Whether we use interim tiles on error.
     * @return {boolean} Use interim tiles on error.
     * @observable
     * @api
     */
    getUseInterimTilesOnError() {
      return /** @type {boolean} */ (
        this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)
      );
    }

    /**
     * Set the level as number to which we will preload tiles up to.
     * @param {number} preload The level to preload tiles up to.
     * @observable
     * @api
     */
    setPreload(preload) {
      this.set(TileProperty.PRELOAD, preload);
    }

    /**
     * Set whether we use interim tiles on error.
     * @param {boolean} useInterimTilesOnError Use interim tiles on error.
     * @observable
     * @api
     */
    setUseInterimTilesOnError(useInterimTilesOnError) {
      this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    }
  }

  var VectorTileLayer$1 = VectorTileLayer;

  /**
   * @module ol/tilegrid/TileGrid
   */

  /**
   * @private
   * @type {import("../tilecoord.js").TileCoord}
   */
  const tmpTileCoord = [0, 0, 0];

  /**
   * Number of decimal digits to consider in integer values when rounding.
   * @type {number}
   */
  const DECIMALS$1 = 5;

  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
   * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or
   * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
   * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
   * specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
   * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
   * `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
   * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
   * array will have a length of `maxZoom + 1`.
   * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
   * of the grid for each zoom level. If specified the values
   * define each zoom level's extent together with the `origin` or `origins`.
   * A grid `extent` can be configured in addition, and will further limit the extent
   * for which tile requests are made by sources. If the bottom-left corner of
   * an extent is used as `origin` or `origins`, then the `y` value must be
   * negative because OpenLayers tile coordinates use the top left as the origin.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Default is `[256, 256]`.
   * @property {Array<number|import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * tile size.
   */

  /**
   * @classdesc
   * Base class for setting the grid pattern for sources accessing tiled-image
   * servers.
   * @api
   */
  class TileGrid {
    /**
     * @param {Options} options Tile grid options.
     */
    constructor(options) {
      /**
       * @protected
       * @type {number}
       */
      this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;

      /**
       * @private
       * @type {!Array<number>}
       */
      this.resolutions_ = options.resolutions;
      assert(
        isSorted(
          this.resolutions_,
          function (a, b) {
            return b - a;
          },
          true
        ),
        17
      ); // `resolutions` must be sorted in descending order

      // check if we've got a consistent zoom factor and origin
      let zoomFactor;
      if (!options.origins) {
        for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
          if (!zoomFactor) {
            zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
          } else {
            if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
              zoomFactor = undefined;
              break;
            }
          }
        }
      }

      /**
       * @private
       * @type {number|undefined}
       */
      this.zoomFactor_ = zoomFactor;

      /**
       * @protected
       * @type {number}
       */
      this.maxZoom = this.resolutions_.length - 1;

      /**
       * @private
       * @type {import("../coordinate.js").Coordinate|null}
       */
      this.origin_ = options.origin !== undefined ? options.origin : null;

      /**
       * @private
       * @type {Array<import("../coordinate.js").Coordinate>}
       */
      this.origins_ = null;
      if (options.origins !== undefined) {
        this.origins_ = options.origins;
        assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
      }

      const extent = options.extent;

      if (extent !== undefined && !this.origin_ && !this.origins_) {
        this.origin_ = getTopLeft(extent);
      }

      assert(
        (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),
        18
      ); // Either `origin` or `origins` must be configured, never both

      /**
       * @private
       * @type {Array<number|import("../size.js").Size>}
       */
      this.tileSizes_ = null;
      if (options.tileSizes !== undefined) {
        this.tileSizes_ = options.tileSizes;
        assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
      }

      /**
       * @private
       * @type {number|import("../size.js").Size}
       */
      this.tileSize_ =
        options.tileSize !== undefined
          ? options.tileSize
          : !this.tileSizes_
          ? DEFAULT_TILE_SIZE
          : null;
      assert(
        (!this.tileSize_ && this.tileSizes_) ||
          (this.tileSize_ && !this.tileSizes_),
        22
      ); // Either `tileSize` or `tileSizes` must be configured, never both

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = extent !== undefined ? extent : null;

      /**
       * @private
       * @type {Array<import("../TileRange.js").default>}
       */
      this.fullTileRanges_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.tmpSize_ = [0, 0];

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = [0, 0, 0, 0];

      if (options.sizes !== undefined) {
        this.fullTileRanges_ = options.sizes.map(function (size, z) {
          const tileRange = new TileRange$1(
            Math.min(0, size[0]),
            Math.max(size[0] - 1, -1),
            Math.min(0, size[1]),
            Math.max(size[1] - 1, -1)
          );
          if (extent) {
            const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);
            tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);
            tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);
            tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);
            tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);
          }
          return tileRange;
        }, this);
      } else if (extent) {
        this.calculateTileRanges_(extent);
      }
    }

    /**
     * Call a function with each tile coordinate for a given extent and zoom level.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} zoom Integer zoom level.
     * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
     * @api
     */
    forEachTileCoord(extent, zoom, callback) {
      const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
      for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
        for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
          callback([zoom, i, j]);
        }
      }
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
     * @return {boolean} Callback succeeded.
     */
    forEachTileCoordParentTileRange(
      tileCoord,
      callback,
      tempTileRange,
      tempExtent
    ) {
      let tileRange, x, y;
      let tileCoordExtent = null;
      let z = tileCoord[0] - 1;
      if (this.zoomFactor_ === 2) {
        x = tileCoord[1];
        y = tileCoord[2];
      } else {
        tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);
      }
      while (z >= this.minZoom) {
        if (this.zoomFactor_ === 2) {
          x = Math.floor(x / 2);
          y = Math.floor(y / 2);
          tileRange = createOrUpdate(x, x, y, y, tempTileRange);
        } else {
          tileRange = this.getTileRangeForExtentAndZ(
            tileCoordExtent,
            z,
            tempTileRange
          );
        }
        if (callback(z, tileRange)) {
          return true;
        }
        --z;
      }
      return false;
    }

    /**
     * Get the extent for this tile grid, if it was configured.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getExtent() {
      return this.extent_;
    }

    /**
     * Get the maximum zoom level for the grid.
     * @return {number} Max zoom.
     * @api
     */
    getMaxZoom() {
      return this.maxZoom;
    }

    /**
     * Get the minimum zoom level for the grid.
     * @return {number} Min zoom.
     * @api
     */
    getMinZoom() {
      return this.minZoom;
    }

    /**
     * Get the origin for the grid at the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {import("../coordinate.js").Coordinate} Origin.
     * @api
     */
    getOrigin(z) {
      if (this.origin_) {
        return this.origin_;
      }
      return this.origins_[z];
    }

    /**
     * Get the resolution for the given zoom level.
     * @param {number} z Integer zoom level.
     * @return {number} Resolution.
     * @api
     */
    getResolution(z) {
      return this.resolutions_[z];
    }

    /**
     * Get the list of resolutions for the tile grid.
     * @return {Array<number>} Resolutions.
     * @api
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
     * @return {import("../TileRange.js").default|null} Tile range.
     */
    getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {
      if (tileCoord[0] < this.maxZoom) {
        if (this.zoomFactor_ === 2) {
          const minX = tileCoord[1] * 2;
          const minY = tileCoord[2] * 2;
          return createOrUpdate(
            minX,
            minX + 1,
            minY,
            minY + 1,
            tempTileRange
          );
        }
        const tileCoordExtent = this.getTileCoordExtent(
          tileCoord,
          tempExtent || this.tmpExtent_
        );
        return this.getTileRangeForExtentAndZ(
          tileCoordExtent,
          tileCoord[0] + 1,
          tempTileRange
        );
      }
      return null;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary import("../TileRange.js").default object.
     * @return {import("../TileRange.js").default|null} Tile range.
     */
    getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {
      if (z > this.maxZoom || z < this.minZoom) {
        return null;
      }

      const tileCoordZ = tileCoord[0];
      const tileCoordX = tileCoord[1];
      const tileCoordY = tileCoord[2];

      if (z === tileCoordZ) {
        return createOrUpdate(
          tileCoordX,
          tileCoordY,
          tileCoordX,
          tileCoordY,
          tempTileRange
        );
      }

      if (this.zoomFactor_) {
        const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);
        const minX = Math.floor(tileCoordX * factor);
        const minY = Math.floor(tileCoordY * factor);
        if (z < tileCoordZ) {
          return createOrUpdate(minX, minX, minY, minY, tempTileRange);
        }

        const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;
        const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;
        return createOrUpdate(minX, maxX, minY, maxY, tempTileRange);
      }

      const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);
      return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);
    }

    /**
     * Get the extent for a tile range.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary import("../extent.js").Extent object.
     * @return {import("../extent.js").Extent} Extent.
     */
    getTileRangeExtent(z, tileRange, tempExtent) {
      const origin = this.getOrigin(z);
      const resolution = this.getResolution(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);
      const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
      const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
      const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
      const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
      return createOrUpdate$2(minX, minY, maxX, maxY, tempExtent);
    }

    /**
     * Get a tile range for the given extent and integer zoom level.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} z Integer zoom level.
     * @param {import("../TileRange.js").default} [tempTileRange] Temporary tile range object.
     * @return {import("../TileRange.js").default} Tile range.
     */
    getTileRangeForExtentAndZ(extent, z, tempTileRange) {
      this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);
      const minX = tmpTileCoord[1];
      const minY = tmpTileCoord[2];
      this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);
      const maxX = tmpTileCoord[1];
      const maxY = tmpTileCoord[2];
      return createOrUpdate(minX, maxX, minY, maxY, tempTileRange);
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {import("../coordinate.js").Coordinate} Tile center.
     */
    getTileCoordCenter(tileCoord) {
      const origin = this.getOrigin(tileCoord[0]);
      const resolution = this.getResolution(tileCoord[0]);
      const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
      return [
        origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
        origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,
      ];
    }

    /**
     * Get the extent of a tile coordinate.
     *
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../extent.js").Extent} [tempExtent] Temporary extent object.
     * @return {import("../extent.js").Extent} Extent.
     * @api
     */
    getTileCoordExtent(tileCoord, tempExtent) {
      const origin = this.getOrigin(tileCoord[0]);
      const resolution = this.getResolution(tileCoord[0]);
      const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
      const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
      const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
      const maxX = minX + tileSize[0] * resolution;
      const maxY = minY + tileSize[1] * resolution;
      return createOrUpdate$2(minX, minY, maxX, maxY, tempExtent);
    }

    /**
     * Get the tile coordinate for the given map coordinate and resolution.  This
     * method considers that coordinates that intersect tile boundaries should be
     * assigned the higher tile coordinate.
     *
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */
    getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {
      return this.getTileCoordForXYAndResolution_(
        coordinate[0],
        coordinate[1],
        resolution,
        false,
        opt_tileCoord
      );
    }

    /**
     * Note that this method should not be called for resolutions that correspond
     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} resolution Resolution (for a non-integer zoom level).
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */
    getTileCoordForXYAndResolution_(
      x,
      y,
      resolution,
      reverseIntersectionPolicy,
      opt_tileCoord
    ) {
      const z = this.getZForResolution(resolution);
      const scale = resolution / this.getResolution(z);
      const origin = this.getOrigin(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);

      let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];
      let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];

      if (reverseIntersectionPolicy) {
        tileCoordX = ceil(tileCoordX, DECIMALS$1) - 1;
        tileCoordY = ceil(tileCoordY, DECIMALS$1) - 1;
      } else {
        tileCoordX = floor(tileCoordX, DECIMALS$1);
        tileCoordY = floor(tileCoordY, DECIMALS$1);
      }

      return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
    }

    /**
     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
     * they should have separate implementations.  This method is for integer zoom
     * levels.  The other method should only be called for resolutions corresponding
     * to non-integer zoom levels.
     * @param {number} x Map x coordinate.
     * @param {number} y Map y coordinate.
     * @param {number} z Integer zoom level.
     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
     *     intersections go to the higher tile coordinate, let edge intersections
     *     go to the lower tile coordinate.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Temporary import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @private
     */
    getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
      const origin = this.getOrigin(z);
      const resolution = this.getResolution(z);
      const tileSize = toSize(this.getTileSize(z), this.tmpSize_);

      let tileCoordX = (x - origin[0]) / resolution / tileSize[0];
      let tileCoordY = (origin[1] - y) / resolution / tileSize[1];

      if (reverseIntersectionPolicy) {
        tileCoordX = ceil(tileCoordX, DECIMALS$1) - 1;
        tileCoordY = ceil(tileCoordY, DECIMALS$1) - 1;
      } else {
        tileCoordX = floor(tileCoordX, DECIMALS$1);
        tileCoordY = floor(tileCoordY, DECIMALS$1);
      }

      return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
    }

    /**
     * Get a tile coordinate given a map coordinate and zoom level.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} z Zoom level.
     * @param {import("../tilecoord.js").TileCoord} [opt_tileCoord] Destination import("../tilecoord.js").TileCoord object.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
     * @api
     */
    getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {
      return this.getTileCoordForXYAndZ_(
        coordinate[0],
        coordinate[1],
        z,
        false,
        opt_tileCoord
      );
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @return {number} Tile resolution.
     */
    getTileCoordResolution(tileCoord) {
      return this.resolutions_[tileCoord[0]];
    }

    /**
     * Get the tile size for a zoom level. The type of the return value matches the
     * `tileSize` or `tileSizes` that the tile grid was configured with. To always
     * get an {@link import("../size.js").Size}, run the result through {@link module:ol/size.toSize}.
     * @param {number} z Z.
     * @return {number|import("../size.js").Size} Tile size.
     * @api
     */
    getTileSize(z) {
      if (this.tileSize_) {
        return this.tileSize_;
      }
      return this.tileSizes_[z];
    }

    /**
     * @param {number} z Zoom level.
     * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
     */
    getFullTileRange(z) {
      if (!this.fullTileRanges_) {
        return this.extent_
          ? this.getTileRangeForExtentAndZ(this.extent_, z)
          : null;
      }
      return this.fullTileRanges_[z];
    }

    /**
     * @param {number} resolution Resolution.
     * @param {number|import("../array.js").NearestDirectionFunction} [opt_direction]
     *     If 0, the nearest resolution will be used.
     *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the
     *     nearest lower resolution (higher Z) will be used. Default is 0.
     *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.
     *
     * For example to change tile Z at the midpoint of zoom levels
     * ```js
     * function(value, high, low) {
     *   return value - low * Math.sqrt(high / low);
     * }
     * ```
     * @return {number} Z.
     * @api
     */
    getZForResolution(resolution, opt_direction) {
      const z = linearFindNearest(
        this.resolutions_,
        resolution,
        opt_direction || 0
      );
      return clamp(z, this.minZoom, this.maxZoom);
    }

    /**
     * The tile with the provided tile coordinate intersects the given viewport.
     * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.
     * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.
     * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.
     */
    tileCoordIntersectsViewport(tileCoord, viewport) {
      return intersectsLinearRing(
        viewport,
        0,
        viewport.length,
        2,
        this.getTileCoordExtent(tileCoord)
      );
    }

    /**
     * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
     * @private
     */
    calculateTileRanges_(extent) {
      const length = this.resolutions_.length;
      const fullTileRanges = new Array(length);
      for (let z = this.minZoom; z < length; ++z) {
        fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
      }
      this.fullTileRanges_ = fullTileRanges;
    }
  }

  var TileGrid$1 = TileGrid;

  /**
   * @module ol/source/TileEventType
   */

  /**
   * @enum {string}
   */
  var TileEventType = {
    /**
     * Triggered when a tile starts loading.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
     * @api
     */
    TILELOADSTART: 'tileloadstart',

    /**
     * Triggered when a tile finishes loading, either when its data is loaded,
     * or when loading was aborted because the tile is no longer needed.
     * @event module:ol/source/Tile.TileSourceEvent#tileloadend
     * @api
     */
    TILELOADEND: 'tileloadend',

    /**
     * Triggered if tile loading results in an error. Note that this is not the
     * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}
     * for details.
     * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
     * @api
     */
    TILELOADERROR: 'tileloaderror',
  };

  /**
   * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes
   */

  /**
   * @module ol/tilegrid
   */

  /**
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {!TileGrid} Default tile grid for the
   * passed projection.
   */
  function getForProjection(projection) {
    let tileGrid = projection.getDefaultTileGrid();
    if (!tileGrid) {
      tileGrid = createForProjection(projection);
      projection.setDefaultTileGrid(tileGrid);
    }
    return tileGrid;
  }

  /**
   * @param {TileGrid} tileGrid Tile grid.
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
   */
  function wrapX(tileGrid, tileCoord, projection) {
    const z = tileCoord[0];
    const center = tileGrid.getTileCoordCenter(tileCoord);
    const projectionExtent = extentFromProjection(projection);
    if (!containsCoordinate(projectionExtent, center)) {
      const worldWidth = getWidth(projectionExtent);
      const worldsAway = Math.ceil(
        (projectionExtent[0] - center[0]) / worldWidth
      );
      center[0] += worldWidth * worldsAway;
      return tileGrid.getTileCoordForCoordAndZ(center, z);
    }
    return tileCoord;
  }

  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} [maxZoom] Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {import("./extent.js").Corner} [corner] Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForExtent(extent, maxZoom, tileSize, corner) {
    corner = corner !== undefined ? corner : 'top-left';

    const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);

    return new TileGrid$1({
      extent: extent,
      origin: getCorner(extent, corner),
      resolutions: resolutions,
      tileSize: tileSize,
    });
  }

  /**
   * @typedef {Object} XYZOptions
   * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
   * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
   * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
   * @property {number} [maxResolution] Resolution at level zero.
   * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
   * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
   */

  /**
   * Creates a tile grid with a standard XYZ tiling scheme.
   * @param {XYZOptions} [options] Tile grid options.
   * @return {!TileGrid} Tile grid instance.
   * @api
   */
  function createXYZ(options) {
    const xyzOptions = options || {};

    const extent = xyzOptions.extent || get$2('EPSG:3857').getExtent();

    const gridOptions = {
      extent: extent,
      minZoom: xyzOptions.minZoom,
      tileSize: xyzOptions.tileSize,
      resolutions: resolutionsFromExtent(
        extent,
        xyzOptions.maxZoom,
        xyzOptions.tileSize,
        xyzOptions.maxResolution
      ),
    };
    return new TileGrid$1(gridOptions);
  }

  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} [maxZoom] Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {number} [maxResolution] Resolution at level zero.
   * @return {!Array<number>} Resolutions array.
   */
  function resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {
    maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;
    tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);

    const height = getHeight(extent);
    const width = getWidth(extent);

    maxResolution =
      maxResolution > 0
        ? maxResolution
        : Math.max(width / tileSize[0], height / tileSize[1]);

    const length = maxZoom + 1;
    const resolutions = new Array(length);
    for (let z = 0; z < length; ++z) {
      resolutions[z] = maxResolution / Math.pow(2, z);
    }
    return resolutions;
  }

  /**
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @param {number} [maxZoom] Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size} [tileSize] Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {import("./extent.js").Corner} [corner] Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForProjection(projection, maxZoom, tileSize, corner) {
    const extent = extentFromProjection(projection);
    return createForExtent(extent, maxZoom, tileSize, corner);
  }

  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @return {import("./extent.js").Extent} Extent.
   */
  function extentFromProjection(projection) {
    projection = get$2(projection);
    let extent = projection.getExtent();
    if (!extent) {
      const half =
        (180 * METERS_PER_UNIT$1.degrees) / projection.getMetersPerUnit();
      extent = createOrUpdate$2(-half, -half, half, half);
    }
    return extent;
  }

  /**
   * @module ol/source/Tile
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("./TileEventType").TileSourceEventTypes, TileSourceEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types|
   *     import("./TileEventType").TileSourceEventTypes, Return>} TileSourceOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] CacheSize.
   * @property {boolean} [opaque=false] Whether the layer is opaque.
   * @property {number} [tilePixelRatio] TilePixelRatio.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {import("./Source.js").State} [state] State.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
   * @property {boolean} [wrapX=false] WrapX.
   * @property {number} [transition] Transition.
   * @property {string} [key] Key.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing images divided into a tile grid.
   * @abstract
   * @api
   */
  class TileSource extends Source$1 {
    /**
     * @param {Options} options SourceTile source options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        projection: options.projection,
        state: options.state,
        wrapX: options.wrapX,
        interpolate: options.interpolate,
      });

      /***
       * @type {TileSourceOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {TileSourceOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {TileSourceOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {boolean}
       */
      this.opaque_ = options.opaque !== undefined ? options.opaque : false;

      /**
       * @private
       * @type {number}
       */
      this.tilePixelRatio_ =
        options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;

      /**
       * @type {import("../tilegrid/TileGrid.js").default|null}
       */
      this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;

      const tileSize = [256, 256];
      if (this.tileGrid) {
        toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);
      }

      /**
       * @protected
       * @type {import("../TileCache.js").default}
       */
      this.tileCache = new TileCache$1(options.cacheSize || 0);

      /**
       * @protected
       * @type {import("../size.js").Size}
       */
      this.tmpSize = [0, 0];

      /**
       * @private
       * @type {string}
       */
      this.key_ = options.key || '';

      /**
       * @protected
       * @type {import("../Tile.js").Options}
       */
      this.tileOptions = {
        transition: options.transition,
        interpolate: options.interpolate,
      };

      /**
       * zDirection hint, read by the renderer. Indicates which resolution should be used
       * by a renderer if the views resolution does not match any resolution of the tile source.
       * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
       * will be used. If -1, the nearest higher resolution will be used.
       * @type {number|import("../array.js").NearestDirectionFunction}
       */
      this.zDirection = options.zDirection ? options.zDirection : 0;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      return this.tileCache.canExpireCache();
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */
    expireCache(projection, usedTiles) {
      const tileCache = this.getTileCacheForProjection(projection);
      if (tileCache) {
        tileCache.expireCache(usedTiles);
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {number} z Zoom level.
     * @param {import("../TileRange.js").default} tileRange Tile range.
     * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
     *     loaded tile.  If the callback returns `false`, the tile will not be
     *     considered loaded.
     * @return {boolean} The tile range is fully covered with loaded tiles.
     */
    forEachLoadedTile(projection, z, tileRange, callback) {
      const tileCache = this.getTileCacheForProjection(projection);
      if (!tileCache) {
        return false;
      }

      let covered = true;
      let tile, tileCoordKey, loaded;
      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
          tileCoordKey = getKeyZXY(z, x, y);
          loaded = false;
          if (tileCache.containsKey(tileCoordKey)) {
            tile = /** @type {!import("../Tile.js").default} */ (
              tileCache.get(tileCoordKey)
            );
            loaded = tile.getState() === TileState.LOADED;
            if (loaded) {
              loaded = callback(tile) !== false;
            }
          }
          if (!loaded) {
            covered = false;
          }
        }
      }
      return covered;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    getGutterForProjection(projection) {
      return 0;
    }

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     */
    getKey() {
      return this.key_;
    }

    /**
     * Set the value to be used as the key for all tiles in the source.
     * @param {string} key The key for tiles.
     * @protected
     */
    setKey(key) {
      if (this.key_ !== key) {
        this.key_ = key;
        this.changed();
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */
    getOpaque(projection) {
      return this.opaque_;
    }

    /**
     * @param {import("../proj/Projection").default} [projection] Projection.
     * @return {Array<number>|null} Resolutions.
     */
    getResolutions(projection) {
      const tileGrid = projection
        ? this.getTileGridForProjection(projection)
        : this.tileGrid;
      if (!tileGrid) {
        return null;
      }
      return tileGrid.getResolutions();
    }

    /**
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../Tile.js").default} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      return abstract();
    }

    /**
     * Return the tile grid of the tile source.
     * @return {import("../tilegrid/TileGrid.js").default|null} Tile grid.
     * @api
     */
    getTileGrid() {
      return this.tileGrid;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    getTileGridForProjection(projection) {
      if (!this.tileGrid) {
        return getForProjection(projection);
      }
      return this.tileGrid;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     * @protected
     */
    getTileCacheForProjection(projection) {
      const sourceProjection = this.getProjection();
      assert(
        sourceProjection === null || equivalent(sourceProjection, projection),
        68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.
      );
      return this.tileCache;
    }

    /**
     * Get the tile pixel ratio for this source. Subclasses may override this
     * method, which is meant to return a supported pixel ratio that matches the
     * provided `pixelRatio` as close as possible.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    getTilePixelRatio(pixelRatio) {
      return this.tilePixelRatio_;
    }

    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */
    getTilePixelSize(z, pixelRatio, projection) {
      const tileGrid = this.getTileGridForProjection(projection);
      const tilePixelRatio = this.getTilePixelRatio(pixelRatio);
      const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      if (tilePixelRatio == 1) {
        return tileSize;
      }
      return scale(tileSize, tilePixelRatio, this.tmpSize);
    }

    /**
     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
     * is outside the resolution and extent range of the tile grid, `null` will be
     * returned.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../proj/Projection.js").default} [projection] Projection.
     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
     *     null if no tile URL should be created for the passed `tileCoord`.
     */
    getTileCoordForTileUrlFunction(tileCoord, projection) {
      projection = projection !== undefined ? projection : this.getProjection();
      const tileGrid = this.getTileGridForProjection(projection);
      if (this.getWrapX() && projection.isGlobal()) {
        tileCoord = wrapX(tileGrid, tileCoord, projection);
      }
      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
    }

    /**
     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
     * @api
     */
    clear() {
      this.tileCache.clear();
    }

    refresh() {
      this.clear();
      super.refresh();
    }

    /**
     * Increases the cache size if needed
     * @param {number} tileCount Minimum number of tiles needed.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    updateCacheSize(tileCount, projection) {
      const tileCache = this.getTileCacheForProjection(projection);
      if (tileCount > tileCache.highWaterMark) {
        tileCache.highWaterMark = tileCount;
      }
    }

    /**
     * Marks a tile coord as being used, without triggering a load.
     * @abstract
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    useTile(z, x, y, projection) {}
  }

  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
   * type.
   */
  class TileSourceEvent extends BaseEvent {
    /**
     * @param {string} type Type.
     * @param {import("../Tile.js").default} tile The tile.
     */
    constructor(type, tile) {
      super(type);

      /**
       * The tile related to the event.
       * @type {import("../Tile.js").default}
       * @api
       */
      this.tile = tile;
    }
  }

  var TileSource$1 = TileSource;

  /**
   * @module ol/tileurlfunction
   */

  /**
   * @param {string} template Template.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplate(template, tileGrid) {
    const zRegEx = /\{z\}/g;
    const xRegEx = /\{x\}/g;
    const yRegEx = /\{y\}/g;
    const dashYRegEx = /\{-y\}/g;
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        }
        return template
          .replace(zRegEx, tileCoord[0].toString())
          .replace(xRegEx, tileCoord[1].toString())
          .replace(yRegEx, tileCoord[2].toString())
          .replace(dashYRegEx, function () {
            const z = tileCoord[0];
            const range = tileGrid.getFullTileRange(z);
            assert(range, 55); // The {-y} placeholder requires a tile grid with extent
            const y = range.getHeight() - tileCoord[2] - 1;
            return y.toString();
          });
      }
    );
  }

  /**
   * @param {Array<string>} templates Templates.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplates(templates, tileGrid) {
    const len = templates.length;
    const tileUrlFunctions = new Array(len);
    for (let i = 0; i < len; ++i) {
      tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
    }
    return createFromTileUrlFunctions(tileUrlFunctions);
  }

  /**
   * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTileUrlFunctions(tileUrlFunctions) {
    if (tileUrlFunctions.length === 1) {
      return tileUrlFunctions[0];
    }
    return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
        if (!tileCoord) {
          return undefined;
        }
        const h = hash(tileCoord);
        const index = modulo(h, tileUrlFunctions.length);
        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
      }
    );
  }

  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {string|undefined} Tile URL.
   */
  function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
    return undefined;
  }

  /**
   * @param {string} url URL.
   * @return {Array<string>} Array of urls.
   */
  function expandUrl(url) {
    const urls = [];
    let match = /\{([a-z])-([a-z])\}/.exec(url);
    if (match) {
      // char range
      const startCharCode = match[1].charCodeAt(0);
      const stopCharCode = match[2].charCodeAt(0);
      let charCode;
      for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
        urls.push(url.replace(match[0], String.fromCharCode(charCode)));
      }
      return urls;
    }
    match = /\{(\d+)-(\d+)\}/.exec(url);
    if (match) {
      // number range
      const stop = parseInt(match[2], 10);
      for (let i = parseInt(match[1], 10); i <= stop; i++) {
        urls.push(url.replace(match[0], i.toString()));
      }
      return urls;
    }
    urls.push(url);
    return urls;
  }

  /**
   * @module ol/source/UrlTile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Cache size.
   * @property {boolean} [opaque=false] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {import("./Source.js").State} [state] State.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] TileGrid.
   * @property {import("../Tile.js").LoadFunction} tileLoadFunction TileLoadFunction.
   * @property {number} [tilePixelRatio] TilePixelRatio.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] TileUrlFunction.
   * @property {string} [url] Url.
   * @property {Array<string>} [urls] Urls.
   * @property {boolean} [wrapX=true] WrapX.
   * @property {number} [transition] Transition.
   * @property {string} [key] Key.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0] ZDirection.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @classdesc
   * Base class for sources providing tiles divided into a tile grid over http.
   *
   * @fires import("./Tile.js").TileSourceEvent
   */
  class UrlTile extends TileSource$1 {
    /**
     * @param {Options} options Image tile options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        opaque: options.opaque,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tilePixelRatio: options.tilePixelRatio,
        wrapX: options.wrapX,
        transition: options.transition,
        interpolate: options.interpolate,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {boolean}
       */
      this.generateTileUrlFunction_ =
        this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;

      /**
       * @protected
       * @type {import("../Tile.js").LoadFunction}
       */
      this.tileLoadFunction = options.tileLoadFunction;

      if (options.tileUrlFunction) {
        this.tileUrlFunction = options.tileUrlFunction;
      }

      /**
       * @protected
       * @type {!Array<string>|null}
       */
      this.urls = null;

      if (options.urls) {
        this.setUrls(options.urls);
      } else if (options.url) {
        this.setUrl(options.url);
      }

      /**
       * @private
       * @type {!Object<string, boolean>}
       */
      this.tileLoadingKeys_ = {};
    }

    /**
     * Return the tile load function of the source.
     * @return {import("../Tile.js").LoadFunction} TileLoadFunction
     * @api
     */
    getTileLoadFunction() {
      return this.tileLoadFunction;
    }

    /**
     * Return the tile URL function of the source.
     * @return {import("../Tile.js").UrlFunction} TileUrlFunction
     * @api
     */
    getTileUrlFunction() {
      return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction
        ? this.tileUrlFunction.bind(this)
        : this.tileUrlFunction;
    }

    /**
     * Return the URLs used for this source.
     * When a tileUrlFunction is used instead of url or urls,
     * null will be returned.
     * @return {!Array<string>|null} URLs.
     * @api
     */
    getUrls() {
      return this.urls;
    }

    /**
     * Handle tile change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */
    handleTileChange(event) {
      const tile = /** @type {import("../Tile.js").default} */ (event.target);
      const uid = getUid(tile);
      const tileState = tile.getState();
      let type;
      if (tileState == TileState.LOADING) {
        this.tileLoadingKeys_[uid] = true;
        type = TileEventType.TILELOADSTART;
      } else if (uid in this.tileLoadingKeys_) {
        delete this.tileLoadingKeys_[uid];
        type =
          tileState == TileState.ERROR
            ? TileEventType.TILELOADERROR
            : tileState == TileState.LOADED
            ? TileEventType.TILELOADEND
            : undefined;
      }
      if (type != undefined) {
        this.dispatchEvent(new TileSourceEvent(type, tile));
      }
    }

    /**
     * Set the tile load function of the source.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @api
     */
    setTileLoadFunction(tileLoadFunction) {
      this.tileCache.clear();
      this.tileLoadFunction = tileLoadFunction;
      this.changed();
    }

    /**
     * Set the tile URL function of the source.
     * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
     * @param {string} [key] Optional new tile key for the source.
     * @api
     */
    setTileUrlFunction(tileUrlFunction, key) {
      this.tileUrlFunction = tileUrlFunction;
      this.tileCache.pruneExceptNewestZ();
      if (typeof key !== 'undefined') {
        this.setKey(key);
      } else {
        this.changed();
      }
    }

    /**
     * Set the URL to use for requests.
     * @param {string} url URL.
     * @api
     */
    setUrl(url) {
      const urls = expandUrl(url);
      this.urls = urls;
      this.setUrls(urls);
    }

    /**
     * Set the URLs to use for requests.
     * @param {Array<string>} urls URLs.
     * @api
     */
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join('\n');
      if (this.generateTileUrlFunction_) {
        this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
      } else {
        this.setKey(key);
      }
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    tileUrlFunction(tileCoord, pixelRatio, projection) {
      return undefined;
    }

    /**
     * Marks a tile coord as being used, without triggering a load.
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     */
    useTile(z, x, y) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        this.tileCache.get(tileCoordKey);
      }
    }
  }

  var UrlTile$1 = UrlTile;

  /**
   * @module ol/source/VectorTile
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.
   * @property {import("../extent.js").Extent} [extent] Extent.
   * @property {import("../format/Feature.js").default} [format] Feature format for tiles. Used and required by the default.
   * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this
   * to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.
   * @property {import("./Source.js").State} [state] Source state.
   * @property {typeof import("../VectorTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/VectorTile~VectorTile}.
   * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.
   * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.
   * @property {number|import("../size.js").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.
   * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
   * Optional function to load a tile given a URL. Could look like this for pbf tiles:
   * ```js
   * function(tile, url) {
   *   tile.setLoader(function(extent, resolution, projection) {
   *     fetch(url).then(function(response) {
   *       response.arrayBuffer().then(function(data) {
   *         const format = tile.getFormat() // ol/format/MVT configured as source format
   *         const features = format.readFeatures(data, {
   *           extent: extent,
   *           featureProjection: projection
   *         });
   *         tile.setFeatures(features);
   *       });
   *     });
   *   });
   * }
   * ```
   * If you do not need extent, resolution and projection to get the features for a tile (e.g.
   * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure
   * to call `setFeatures()` on the tile:
   * ```js
   * const format = new GeoJSON({featureProjection: map.getView().getProjection()});
   * async function tileLoadFunction(tile, url) {
   *   const response = await fetch(url);
   *   const data = await response.json();
   *   tile.setFeatures(format.readFeatures(data));
   * }
   * ```
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {number} [transition] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When set to `true`, tiles will be wrapped horizontally to
   * render multiple worlds.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=1]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Class for layer sources providing vector data divided into a tile grid, to be
   * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles
   * with vector features from the server, it is not meant for feature editing.
   * Features are optimized for rendering, their geometries are clipped at or near
   * tile boundaries and simplified for a view resolution. See
   * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature
   * editing.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  class VectorTile extends UrlTile$1 {
    /**
     * @param {!Options} options Vector tile options.
     */
    constructor(options) {
      const projection = options.projection || 'EPSG:3857';

      const extent = options.extent || extentFromProjection(projection);

      const tileGrid =
        options.tileGrid ||
        createXYZ({
          extent: extent,
          maxResolution: options.maxResolution,
          maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,
          minZoom: options.minZoom,
          tileSize: options.tileSize || 512,
        });

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        interpolate: true,
        opaque: false,
        projection: projection,
        state: options.state,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction
          ? options.tileLoadFunction
          : defaultLoadFunction,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX === undefined ? true : options.wrapX,
        transition: options.transition,
        zDirection: options.zDirection === undefined ? 1 : options.zDirection,
      });

      /**
       * @private
       * @type {import("../format/Feature.js").default|null}
       */
      this.format_ = options.format ? options.format : null;

      /**
       * @private
       * @type {TileCache}
       */
      this.sourceTileCache = new TileCache$1(this.tileCache.highWaterMark);

      /**
       * @private
       * @type {boolean}
       */
      this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;

      /**
       * @protected
       * @type {typeof import("../VectorTile.js").default}
       */
      this.tileClass = options.tileClass ? options.tileClass : VectorTile$2;

      /**
       * @private
       * @type {Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGrids_ = {};
    }

    /**
     * Get features whose bounding box intersects the provided extent. Only features for cached
     * tiles for the last rendered zoom level are available in the source. So this method is only
     * suitable for requesting tiles for extents that are currently rendered.
     *
     * Features are returned in random tile order and as they are included in the tiles. This means
     * they can be clipped, duplicated across tiles, and simplified to the render resolution.
     *
     * @param {import("../extent.js").Extent} extent Extent.
     * @return {Array<import("../Feature.js").FeatureLike>} Features.
     * @api
     */
    getFeaturesInExtent(extent) {
      const features = [];
      const tileCache = this.tileCache;
      if (tileCache.getCount() === 0) {
        return features;
      }
      const z = fromKey(tileCache.peekFirstKey())[0];
      const tileGrid = this.tileGrid;
      tileCache.forEach(function (tile) {
        if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {
          return;
        }
        const sourceTiles = tile.getSourceTiles();
        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {
          const sourceTile = sourceTiles[i];
          const tileCoord = sourceTile.tileCoord;
          if (intersects$2(extent, tileGrid.getTileCoordExtent(tileCoord))) {
            const tileFeatures = sourceTile.getFeatures();
            if (tileFeatures) {
              for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {
                const candidate = tileFeatures[j];
                const geometry = candidate.getGeometry();
                if (intersects$2(extent, geometry.getExtent())) {
                  features.push(candidate);
                }
              }
            }
          }
        }
      });
      return features;
    }

    /**
     * @return {boolean} The source can have overlapping geometries.
     */
    getOverlaps() {
      return this.overlaps_;
    }

    /**
     * clear {@link module:ol/TileCache~TileCache} and delete all source tiles
     * @api
     */
    clear() {
      this.tileCache.clear();
      this.sourceTileCache.clear();
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */
    expireCache(projection, usedTiles) {
      const tileCache = this.getTileCacheForProjection(projection);
      const usedSourceTiles = Object.keys(usedTiles).reduce((acc, key) => {
        const cacheKey = getCacheKeyForTileKey(key);
        const tile = tileCache.peek(cacheKey);
        if (tile) {
          const sourceTiles = tile.sourceTiles;
          for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {
            acc[sourceTiles[i].getKey()] = true;
          }
        }
        return acc;
      }, {});
      super.expireCache(projection, usedTiles);
      this.sourceTileCache.expireCache(usedSourceTiles);
    }

    /**
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection").default} projection Projection.
     * @param {VectorRenderTile} tile Vector image tile.
     * @return {Array<import("../VectorTile").default>} Tile keys.
     */
    getSourceTiles(pixelRatio, projection, tile) {
      if (tile.getState() === TileState.IDLE) {
        tile.setState(TileState.LOADING);
        const urlTileCoord = tile.wrappedTileCoord;
        const tileGrid = this.getTileGridForProjection(projection);
        const extent = tileGrid.getTileCoordExtent(urlTileCoord);
        const z = urlTileCoord[0];
        const resolution = tileGrid.getResolution(z);
        // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
        buffer$2(extent, -resolution, extent);
        const sourceTileGrid = this.tileGrid;
        const sourceExtent = sourceTileGrid.getExtent();
        if (sourceExtent) {
          getIntersection(extent, sourceExtent, extent);
        }
        const sourceZ = sourceTileGrid.getZForResolution(
          resolution,
          this.zDirection
        );

        sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {
          const tileUrl = this.tileUrlFunction(
            sourceTileCoord,
            pixelRatio,
            projection
          );
          const sourceTile = this.sourceTileCache.containsKey(tileUrl)
            ? this.sourceTileCache.get(tileUrl)
            : new this.tileClass(
                sourceTileCoord,
                tileUrl ? TileState.IDLE : TileState.EMPTY,
                tileUrl,
                this.format_,
                this.tileLoadFunction
              );
          tile.sourceTiles.push(sourceTile);
          const sourceTileState = sourceTile.getState();
          if (sourceTileState < TileState.LOADED) {
            const listenChange = (event) => {
              this.handleTileChange(event);
              const state = sourceTile.getState();
              if (state === TileState.LOADED || state === TileState.ERROR) {
                const sourceTileKey = sourceTile.getKey();
                if (sourceTileKey in tile.errorTileKeys) {
                  if (sourceTile.getState() === TileState.LOADED) {
                    delete tile.errorTileKeys[sourceTileKey];
                  }
                } else {
                  tile.loadingSourceTiles--;
                }
                if (state === TileState.ERROR) {
                  tile.errorTileKeys[sourceTileKey] = true;
                } else {
                  sourceTile.removeEventListener(EventType.CHANGE, listenChange);
                }
                if (tile.loadingSourceTiles === 0) {
                  tile.setState(
                    isEmpty$1(tile.errorTileKeys)
                      ? TileState.LOADED
                      : TileState.ERROR
                  );
                }
              }
            };
            sourceTile.addEventListener(EventType.CHANGE, listenChange);
            tile.loadingSourceTiles++;
          }
          if (sourceTileState === TileState.IDLE) {
            sourceTile.extent =
              sourceTileGrid.getTileCoordExtent(sourceTileCoord);
            sourceTile.projection = projection;
            sourceTile.resolution = sourceTileGrid.getResolution(
              sourceTileCoord[0]
            );
            this.sourceTileCache.set(tileUrl, sourceTile);
            sourceTile.load();
          }
        });
        if (!tile.loadingSourceTiles) {
          tile.setState(
            tile.sourceTiles.some(
              (sourceTile) => sourceTile.getState() === TileState.ERROR
            )
              ? TileState.ERROR
              : TileState.LOADED
          );
        }
      }

      return tile.sourceTiles;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!VectorRenderTile} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      const coordKey = getKeyZXY(z, x, y);
      const key = this.getKey();
      let tile;
      if (this.tileCache.containsKey(coordKey)) {
        tile = this.tileCache.get(coordKey);
        if (tile.key === key) {
          return tile;
        }
      }
      const tileCoord = [z, x, y];
      let urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        projection
      );
      const sourceExtent = this.getTileGrid().getExtent();
      const tileGrid = this.getTileGridForProjection(projection);
      if (urlTileCoord && sourceExtent) {
        const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);
        // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
        buffer$2(tileExtent, -tileGrid.getResolution(z), tileExtent);
        if (!intersects$2(sourceExtent, tileExtent)) {
          urlTileCoord = null;
        }
      }
      let empty = true;
      if (urlTileCoord !== null) {
        const sourceTileGrid = this.tileGrid;
        const resolution = tileGrid.getResolution(z);
        const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
        // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
        const extent = tileGrid.getTileCoordExtent(urlTileCoord);
        buffer$2(extent, -resolution, extent);
        sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {
          empty =
            empty &&
            !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
        });
      }
      const newTile = new VectorRenderTile$1(
        tileCoord,
        empty ? TileState.EMPTY : TileState.IDLE,
        urlTileCoord,
        this.getSourceTiles.bind(this, pixelRatio, projection)
      );

      newTile.key = key;
      if (tile) {
        newTile.interimTile = tile;
        newTile.refreshInterimChain();
        this.tileCache.replace(coordKey, newTile);
      } else {
        this.tileCache.set(coordKey, newTile);
      }
      return newTile;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    getTileGridForProjection(projection) {
      const code = projection.getCode();
      let tileGrid = this.tileGrids_[code];
      if (!tileGrid) {
        // A tile grid that matches the tile size of the source tile grid is more
        // likely to have 1:1 relationships between source tiles and rendered tiles.
        const sourceTileGrid = this.tileGrid;
        const resolutions = sourceTileGrid.getResolutions().slice();
        const origins = resolutions.map(function (resolution, z) {
          return sourceTileGrid.getOrigin(z);
        });
        const tileSizes = resolutions.map(function (resolution, z) {
          return sourceTileGrid.getTileSize(z);
        });
        const length = DEFAULT_MAX_ZOOM + 1;
        for (let z = resolutions.length; z < length; ++z) {
          resolutions.push(resolutions[z - 1] / 2);
          origins.push(origins[z - 1]);
          tileSizes.push(tileSizes[z - 1]);
        }
        tileGrid = new TileGrid$1({
          extent: sourceTileGrid.getExtent(),
          origins: origins,
          resolutions: resolutions,
          tileSizes: tileSizes,
        });
        this.tileGrids_[code] = tileGrid;
      }
      return tileGrid;
    }

    /**
     * Get the tile pixel ratio for this source.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    getTilePixelRatio(pixelRatio) {
      return pixelRatio;
    }

    /**
     * @param {number} z Z.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../size.js").Size} Tile size.
     */
    getTilePixelSize(z, pixelRatio, projection) {
      const tileGrid = this.getTileGridForProjection(projection);
      const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
      return [
        Math.round(tileSize[0] * pixelRatio),
        Math.round(tileSize[1] * pixelRatio),
      ];
    }

    /**
     * Increases the cache size if needed
     * @param {number} tileCount Minimum number of tiles needed.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    updateCacheSize(tileCount, projection) {
      super.updateCacheSize(tileCount * 2, projection);
      this.sourceTileCache.highWaterMark =
        this.getTileCacheForProjection(projection).highWaterMark;
    }
  }

  var VectorTileSource = VectorTile;

  /**
   * Sets the loader for a tile.
   * @param {import("../VectorTile.js").default} tile Vector tile.
   * @param {string} url URL.
   */
  function defaultLoadFunction(tile, url) {
    tile.setLoader(
      /**
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("../proj/Projection.js").default} projection Projection.
       */
      function (extent, resolution, projection) {
        loadFeaturesXhr(
          url,
          tile.getFormat(),
          extent,
          resolution,
          projection,
          tile.onLoad.bind(tile),
          tile.onError.bind(tile)
        );
      }
    );
  }

  /**
   * @module ol/reproj/Image
   */

  /**
   * @typedef {function(import("../extent.js").Extent, number, number) : import("../ImageBase.js").default} FunctionType
   */

  /**
   * @classdesc
   * Class encapsulating single reprojected image.
   * See {@link module:ol/source/Image~ImageSource}.
   */
  class ReprojImage extends ImageBase$1 {
    /**
     * @param {import("../proj/Projection.js").default} sourceProj Source projection (of the data).
     * @param {import("../proj/Projection.js").default} targetProj Target projection.
     * @param {import("../extent.js").Extent} targetExtent Target extent.
     * @param {number} targetResolution Target resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {FunctionType} getImageFunction
     *     Function returning source images (extent, resolution, pixelRatio).
     * @param {boolean} interpolate Use linear interpolation when resampling.
     */
    constructor(
      sourceProj,
      targetProj,
      targetExtent,
      targetResolution,
      pixelRatio,
      getImageFunction,
      interpolate
    ) {
      const maxSourceExtent = sourceProj.getExtent();
      const maxTargetExtent = targetProj.getExtent();

      const limitedTargetExtent = maxTargetExtent
        ? getIntersection(targetExtent, maxTargetExtent)
        : targetExtent;

      const targetCenter = getCenter(limitedTargetExtent);
      const sourceResolution = calculateSourceResolution(
        sourceProj,
        targetProj,
        targetCenter,
        targetResolution
      );

      const errorThresholdInPixels = ERROR_THRESHOLD;

      const triangulation = new Triangulation$1(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        maxSourceExtent,
        sourceResolution * errorThresholdInPixels,
        targetResolution
      );

      const sourceExtent = triangulation.calculateSourceExtent();
      const sourceImage = getImageFunction(
        sourceExtent,
        sourceResolution,
        pixelRatio
      );
      const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;
      const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;

      super(targetExtent, targetResolution, sourcePixelRatio, state);

      /**
       * @private
       * @type {import("../proj/Projection.js").default}
       */
      this.targetProj_ = targetProj;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.maxSourceExtent_ = maxSourceExtent;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = triangulation;

      /**
       * @private
       * @type {number}
       */
      this.targetResolution_ = targetResolution;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.targetExtent_ = targetExtent;

      /**
       * @private
       * @type {import("../ImageBase.js").default}
       */
      this.sourceImage_ = sourceImage;

      /**
       * @private
       * @type {number}
       */
      this.sourcePixelRatio_ = sourcePixelRatio;

      /**
       * @private
       * @type {boolean}
       */
      this.interpolate_ = interpolate;

      /**
       * @private
       * @type {HTMLCanvasElement}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {?import("../events.js").EventsKey}
       */
      this.sourceListenerKey_ = null;
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      if (this.state == ImageState.LOADING) {
        this.unlistenSource_();
      }
      super.disposeInternal();
    }

    /**
     * @return {HTMLCanvasElement} Image.
     */
    getImage() {
      return this.canvas_;
    }

    /**
     * @return {import("../proj/Projection.js").default} Projection.
     */
    getProjection() {
      return this.targetProj_;
    }

    /**
     * @private
     */
    reproject_() {
      const sourceState = this.sourceImage_.getState();
      if (sourceState == ImageState.LOADED) {
        const width = getWidth(this.targetExtent_) / this.targetResolution_;
        const height = getHeight(this.targetExtent_) / this.targetResolution_;

        this.canvas_ = render(
          width,
          height,
          this.sourcePixelRatio_,
          this.sourceImage_.getResolution(),
          this.maxSourceExtent_,
          this.targetResolution_,
          this.targetExtent_,
          this.triangulation_,
          [
            {
              extent: this.sourceImage_.getExtent(),
              image: this.sourceImage_.getImage(),
            },
          ],
          0,
          undefined,
          this.interpolate_
        );
      }
      this.state = sourceState;
      this.changed();
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.state == ImageState.IDLE) {
        this.state = ImageState.LOADING;
        this.changed();

        const sourceState = this.sourceImage_.getState();
        if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {
          this.reproject_();
        } else {
          this.sourceListenerKey_ = listen(
            this.sourceImage_,
            EventType.CHANGE,
            function (e) {
              const sourceState = this.sourceImage_.getState();
              if (
                sourceState == ImageState.LOADED ||
                sourceState == ImageState.ERROR
              ) {
                this.unlistenSource_();
                this.reproject_();
              }
            },
            this
          );
          this.sourceImage_.load();
        }
      }
    }

    /**
     * @private
     */
    unlistenSource_() {
      unlistenByKey(
        /** @type {!import("../events.js").EventsKey} */ (this.sourceListenerKey_)
      );
      this.sourceListenerKey_ = null;
    }
  }

  var ReprojImage$1 = ReprojImage;

  /**
   * @module ol/source/Image
   */

  /**
   * @enum {string}
   */
  const ImageSourceEventType = {
    /**
     * Triggered when an image starts loading.
     * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
     * @api
     */
    IMAGELOADSTART: 'imageloadstart',

    /**
     * Triggered when an image finishes loading.
     * @event module:ol/source/Image.ImageSourceEvent#imageloadend
     * @api
     */
    IMAGELOADEND: 'imageloadend',

    /**
     * Triggered if image loading results in an error.
     * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
     * @api
     */
    IMAGELOADERROR: 'imageloaderror',
  };

  /**
   * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this
   * type.
   */
  class ImageSourceEvent extends BaseEvent {
    /**
     * @param {string} type Type.
     * @param {import("../Image.js").default} image The image.
     */
    constructor(type, image) {
      super(type);

      /**
       * The image related to the event.
       * @type {import("../Image.js").default}
       * @api
       */
      this.image = image;
    }
  }

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types
   *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {Array<number>} [resolutions] Resolutions.
   * @property {import("./Source.js").State} [state] State.
   */

  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing a single image.
   * @abstract
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageSource extends Source$1 {
    /**
     * @param {Options} options Single image source options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        projection: options.projection,
        state: options.state,
        interpolate:
          options.interpolate !== undefined ? options.interpolate : true,
      });

      /***
       * @type {ImageSourceOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {ImageSourceOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {ImageSourceOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {Array<number>|null}
       */
      this.resolutions_ =
        options.resolutions !== undefined ? options.resolutions : null;

      /**
       * @private
       * @type {import("../reproj/Image.js").default}
       */
      this.reprojectedImage_ = null;

      /**
       * @private
       * @type {number}
       */
      this.reprojectedRevision_ = 0;
    }

    /**
     * @return {Array<number>|null} Resolutions.
     */
    getResolutions() {
      return this.resolutions_;
    }

    /**
     * @param {Array<number>|null} resolutions Resolutions.
     */
    setResolutions(resolutions) {
      this.resolutions_ = resolutions;
    }

    /**
     * @protected
     * @param {number} resolution Resolution.
     * @return {number} Resolution.
     */
    findNearestResolution(resolution) {
      const resolutions = this.getResolutions();
      if (resolutions) {
        const idx = linearFindNearest(resolutions, resolution, 0);
        resolution = resolutions[idx];
      }
      return resolution;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../ImageBase.js").default} Single image.
     */
    getImage(extent, resolution, pixelRatio, projection) {
      const sourceProjection = this.getProjection();
      if (
        !sourceProjection ||
        !projection ||
        equivalent(sourceProjection, projection)
      ) {
        if (sourceProjection) {
          projection = sourceProjection;
        }
        return this.getImageInternal(extent, resolution, pixelRatio, projection);
      }
      if (this.reprojectedImage_) {
        if (
          this.reprojectedRevision_ == this.getRevision() &&
          equivalent(this.reprojectedImage_.getProjection(), projection) &&
          this.reprojectedImage_.getResolution() == resolution &&
          equals$2(this.reprojectedImage_.getExtent(), extent)
        ) {
          return this.reprojectedImage_;
        }
        this.reprojectedImage_.dispose();
        this.reprojectedImage_ = null;
      }

      this.reprojectedImage_ = new ReprojImage$1(
        sourceProjection,
        projection,
        extent,
        resolution,
        pixelRatio,
        (extent, resolution, pixelRatio) =>
          this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),
        this.getInterpolate()
      );
      this.reprojectedRevision_ = this.getRevision();

      return this.reprojectedImage_;
    }

    /**
     * @abstract
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../ImageBase.js").default} Single image.
     * @protected
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      return abstract();
    }

    /**
     * Handle image change events.
     * @param {import("../events/Event.js").default} event Event.
     * @protected
     */
    handleImageChange(event) {
      const image = /** @type {import("../Image.js").default} */ (event.target);
      let type;
      switch (image.getState()) {
        case ImageState.LOADING:
          this.loading = true;
          type = ImageSourceEventType.IMAGELOADSTART;
          break;
        case ImageState.LOADED:
          this.loading = false;
          type = ImageSourceEventType.IMAGELOADEND;
          break;
        case ImageState.ERROR:
          this.loading = false;
          type = ImageSourceEventType.IMAGELOADERROR;
          break;
        default:
          return;
      }
      if (this.hasListener(type)) {
        this.dispatchEvent(new ImageSourceEvent(type, image));
      }
    }
  }

  /**
   * Default image load function for image sources that use import("../Image.js").Image image
   * instances.
   * @param {import("../Image.js").default} image Image.
   * @param {string} src Source.
   */
  function defaultImageLoadFunction(image, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;
  }

  var ImageSource$1 = ImageSource;

  /**
   * @module ol/layer/BaseTile
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("./Base").BaseLayerObjectEventTypes|
   *     import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("../render/EventType").LayerRenderEventTypes, import("../render/Event").default, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("./Base").BaseLayerObjectEventTypes|
   *   import("./Layer.js").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import("../render/EventType").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature
   */

  /**
   * @template {import("../source/Tile.js").default} TileSourceType
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {TileSourceType} [source] Source for this layer.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link import("../Map.js").default#addLayer map.addLayer()}.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Tile.js").default} TileSourceType
   * @template {import("../renderer/Layer.js").default} RendererType
   * @extends {Layer<TileSourceType, RendererType>}
   * @api
   */
  class BaseTileLayer extends Layer$1 {
    /**
     * @param {Options<TileSourceType>} [options] Tile layer options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign({}, options);

      delete baseOptions.preload;
      delete baseOptions.useInterimTilesOnError;
      super(baseOptions);

      /***
       * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {BaseTileLayerOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {BaseTileLayerOnSignature<void>}
       */
      this.un;

      this.setPreload(options.preload !== undefined ? options.preload : 0);
      this.setUseInterimTilesOnError(
        options.useInterimTilesOnError !== undefined
          ? options.useInterimTilesOnError
          : true
      );
    }

    /**
     * Return the level as number to which we will preload tiles up to.
     * @return {number} The level to preload tiles up to.
     * @observable
     * @api
     */
    getPreload() {
      return /** @type {number} */ (this.get(TileProperty.PRELOAD));
    }

    /**
     * Set the level as number to which we will preload tiles up to.
     * @param {number} preload The level to preload tiles up to.
     * @observable
     * @api
     */
    setPreload(preload) {
      this.set(TileProperty.PRELOAD, preload);
    }

    /**
     * Whether we use interim tiles on error.
     * @return {boolean} Use interim tiles on error.
     * @observable
     * @api
     */
    getUseInterimTilesOnError() {
      return /** @type {boolean} */ (
        this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)
      );
    }

    /**
     * Set whether we use interim tiles on error.
     * @param {boolean} useInterimTilesOnError Use interim tiles on error.
     * @observable
     * @api
     */
    setUseInterimTilesOnError(useInterimTilesOnError) {
      this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
    }

    /**
     * Get data for a pixel location.  The return type depends on the source data.  For image tiles,
     * a four element RGBA array will be returned.  For data tiles, the array length will match the
     * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.
     * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.
     *
     * ```js
     * // display layer data on every pointer move
     * map.on('pointermove', (event) => {
     *   console.log(layer.getData(event.pixel));
     * });
     * ```
     * @param {import("../pixel").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.
     * @api
     */
    getData(pixel) {
      return super.getData(pixel);
    }
  }

  var BaseTileLayer$1 = BaseTileLayer;

  /**
   * @module ol/layer/Tile
   */

  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Tile.js").default} TileSourceType
   * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>
   * @api
   */
  class TileLayer extends BaseTileLayer$1 {
    /**
     * @param {import("./BaseTile.js").Options<TileSourceType>} [options] Tile layer options.
     */
    constructor(options) {
      super(options);
    }

    createRenderer() {
      return new CanvasTileLayerRenderer$1(this);
    }
  }

  var TileLayer$1 = TileLayer;

  /**
   * @module ol/source/Raster
   */

  let hasImageData = true;
  try {
    new ImageData(10, 10);
  } catch (_) {
    hasImageData = false;
  }

  /** @type {CanvasRenderingContext2D} */
  let context;

  /**
   * @param {Uint8ClampedArray} data Image data.
   * @param {number} width Number of columns.
   * @param {number} height Number of rows.
   * @return {ImageData} Image data.
   */
  function newImageData(data, width, height) {
    if (hasImageData) {
      return new ImageData(data, width, height);
    }

    if (!context) {
      context = document.createElement('canvas').getContext('2d');
    }
    const imageData = context.createImageData(width, height);
    imageData.data.set(data);
    return imageData;
  }

  /**
   * @typedef {Object} MinionData
   * @property {Array<ArrayBuffer>} buffers Array of buffers.
   * @property {Object} meta Operation metadata.
   * @property {boolean} imageOps The operation is an image operation.
   * @property {number} width The width of the image.
   * @property {number} height The height of the image.
   */

  /* istanbul ignore next */
  /**
   * Create a function for running operations.  This function is serialized for
   * use in a worker.
   * @param {function(Array, Object):*} operation The operation.
   * @return {function(MinionData):ArrayBuffer} A function that takes an object with
   * buffers, meta, imageOps, width, and height properties and returns an array
   * buffer.
   */
  function createMinion(operation) {
    let workerHasImageData = true;
    try {
      new ImageData(10, 10);
    } catch (_) {
      workerHasImageData = false;
    }

    function newWorkerImageData(data, width, height) {
      if (workerHasImageData) {
        return new ImageData(data, width, height);
      }
      return {data: data, width: width, height: height};
    }

    return function (data) {
      // bracket notation for minification support
      const buffers = data['buffers'];
      const meta = data['meta'];
      const imageOps = data['imageOps'];
      const width = data['width'];
      const height = data['height'];

      const numBuffers = buffers.length;
      const numBytes = buffers[0].byteLength;

      if (imageOps) {
        const images = new Array(numBuffers);
        for (let b = 0; b < numBuffers; ++b) {
          images[b] = newWorkerImageData(
            new Uint8ClampedArray(buffers[b]),
            width,
            height
          );
        }
        const output = operation(images, meta).data;
        return output.buffer;
      }

      const output = new Uint8ClampedArray(numBytes);
      const arrays = new Array(numBuffers);
      const pixels = new Array(numBuffers);
      for (let b = 0; b < numBuffers; ++b) {
        arrays[b] = new Uint8ClampedArray(buffers[b]);
        pixels[b] = [0, 0, 0, 0];
      }
      for (let i = 0; i < numBytes; i += 4) {
        for (let j = 0; j < numBuffers; ++j) {
          const array = arrays[j];
          pixels[j][0] = array[i];
          pixels[j][1] = array[i + 1];
          pixels[j][2] = array[i + 2];
          pixels[j][3] = array[i + 3];
        }
        const pixel = operation(pixels, meta);
        output[i] = pixel[0];
        output[i + 1] = pixel[1];
        output[i + 2] = pixel[2];
        output[i + 3] = pixel[3];
      }
      return output.buffer;
    };
  }

  /**
   * Create a worker for running operations.
   * @param {ProcessorOptions} config Processor options.
   * @param {function(MessageEvent): void} onMessage Called with a message event.
   * @return {Worker} The worker.
   */
  function createWorker(config, onMessage) {
    const lib = Object.keys(config.lib || {}).map(function (name) {
      return 'const ' + name + ' = ' + config.lib[name].toString() + ';';
    });

    const lines = lib.concat([
      'const __minion__ = (' + createMinion.toString() + ')(',
      config.operation.toString(),
      ');',
      'self.addEventListener("message", function(event) {',
      '  const buffer = __minion__(event.data);',
      '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',
      '});',
    ]);

    const worker = new Worker(
      typeof Blob === 'undefined'
        ? 'data:text/javascript;base64,' +
          Buffer.from(lines.join('\n'), 'binary').toString('base64')
        : URL.createObjectURL(new Blob(lines, {type: 'text/javascript'}))
    );
    worker.addEventListener('message', onMessage);
    return worker;
  }

  /**
   * @typedef {Object} FauxMessageEvent
   * @property {Object} data Message data.
   */

  /**
   * Create a faux worker for running operations.
   * @param {ProcessorOptions} config Configuration.
   * @param {function(FauxMessageEvent): void} onMessage Called with a message event.
   * @return {Object} The faux worker.
   */
  function createFauxWorker(config, onMessage) {
    const minion = createMinion(config.operation);
    let terminated = false;
    return {
      postMessage: function (data) {
        setTimeout(function () {
          if (terminated) {
            return;
          }
          onMessage({data: {buffer: minion(data), meta: data['meta']}});
        }, 0);
      },
      terminate: function () {
        terminated = true;
      },
    };
  }

  /**
   * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback
   */

  /**
   * @typedef {Object} Job
   * @property {Object} meta Job metadata.
   * @property {Array<ImageData>} inputs Array of input data.
   * @property {JobCallback} callback Called when the job is complete.
   */

  /**
   * @typedef {Object} ProcessorOptions
   * @property {number} threads Number of workers to spawn.
   * @property {Operation} operation The operation.
   * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.
   * @property {number} queue The number of queued jobs to allow.
   * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.
   */

  /**
   * @classdesc
   * A processor runs pixel or image operations in workers.
   */
  class Processor extends Disposable$1 {
    /**
     * @param {ProcessorOptions} config Configuration.
     */
    constructor(config) {
      super();

      this._imageOps = !!config.imageOps;
      let threads;
      if (config.threads === 0) {
        threads = 0;
      } else if (this._imageOps) {
        threads = 1;
      } else {
        threads = config.threads || 1;
      }

      /**
       * @type {Array<Worker>}
       */
      const workers = new Array(threads);
      if (threads) {
        for (let i = 0; i < threads; ++i) {
          workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));
        }
      } else {
        workers[0] = createFauxWorker(
          config,
          this._onWorkerMessage.bind(this, 0)
        );
      }
      this._workers = workers;

      /**
       * @type {Array<Job>}
       * @private
       */
      this._queue = [];

      this._maxQueueLength = config.queue || Infinity;
      this._running = 0;

      /**
       * @type {Object<number, any>}
       * @private
       */
      this._dataLookup = {};

      /**
       * @type {Job}
       * @private
       */
      this._job = null;
    }

    /**
     * Run operation on input data.
     * @param {Array<ImageData>} inputs Array of image data.
     * @param {Object} meta A user data object.  This is passed to all operations
     *     and must be serializable.
     * @param {function(Error, ImageData, Object): void} callback Called when work
     *     completes.  The first argument is any error.  The second is the ImageData
     *     generated by operations.  The third is the user data object.
     */
    process(inputs, meta, callback) {
      this._enqueue({
        inputs: inputs,
        meta: meta,
        callback: callback,
      });
      this._dispatch();
    }

    /**
     * Add a job to the queue.
     * @param {Job} job The job.
     */
    _enqueue(job) {
      this._queue.push(job);
      while (this._queue.length > this._maxQueueLength) {
        this._queue.shift().callback(null, null);
      }
    }

    /**
     * Dispatch a job.
     */
    _dispatch() {
      if (this._running || this._queue.length === 0) {
        return;
      }

      const job = this._queue.shift();
      this._job = job;
      const width = job.inputs[0].width;
      const height = job.inputs[0].height;
      const buffers = job.inputs.map(function (input) {
        return input.data.buffer;
      });
      const threads = this._workers.length;
      this._running = threads;
      if (threads === 1) {
        this._workers[0].postMessage(
          {
            buffers: buffers,
            meta: job.meta,
            imageOps: this._imageOps,
            width: width,
            height: height,
          },
          buffers
        );
        return;
      }

      const length = job.inputs[0].data.length;
      const segmentLength = 4 * Math.ceil(length / 4 / threads);
      for (let i = 0; i < threads; ++i) {
        const offset = i * segmentLength;
        const slices = [];
        for (let j = 0, jj = buffers.length; j < jj; ++j) {
          slices.push(buffers[j].slice(offset, offset + segmentLength));
        }
        this._workers[i].postMessage(
          {
            buffers: slices,
            meta: job.meta,
            imageOps: this._imageOps,
            width: width,
            height: height,
          },
          slices
        );
      }
    }

    /**
     * Handle messages from the worker.
     * @param {number} index The worker index.
     * @param {MessageEvent} event The message event.
     */
    _onWorkerMessage(index, event) {
      if (this.disposed) {
        return;
      }
      this._dataLookup[index] = event.data;
      --this._running;
      if (this._running === 0) {
        this._resolveJob();
      }
    }

    /**
     * Resolve a job.  If there are no more worker threads, the processor callback
     * will be called.
     */
    _resolveJob() {
      const job = this._job;
      const threads = this._workers.length;
      let data, meta;
      if (threads === 1) {
        data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);
        meta = this._dataLookup[0]['meta'];
      } else {
        const length = job.inputs[0].data.length;
        data = new Uint8ClampedArray(length);
        meta = new Array(threads);
        const segmentLength = 4 * Math.ceil(length / 4 / threads);
        for (let i = 0; i < threads; ++i) {
          const buffer = this._dataLookup[i]['buffer'];
          const offset = i * segmentLength;
          data.set(new Uint8ClampedArray(buffer), offset);
          meta[i] = this._dataLookup[i]['meta'];
        }
      }
      this._job = null;
      this._dataLookup = {};
      job.callback(
        null,
        newImageData(data, job.inputs[0].width, job.inputs[0].height),
        meta
      );
      this._dispatch();
    }

    /**
     * Terminate all workers associated with the processor.
     */
    disposeInternal() {
      for (let i = 0; i < this._workers.length; ++i) {
        this._workers[i].terminate();
      }
      this._workers.length = 0;
    }
  }

  /**
   * A function that takes an array of input data, performs some operation, and
   * returns an array of output data.
   * For `pixel` type operations, the function will be called with an array of
   * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the
   * range of 0 - 255. It should return a single pixel array.
   * For `'image'` type operations, functions will be called with an array of
   * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)
   * and should return a single
   * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).
   * The operations
   * are called with a second "data" argument, which can be used for storage.  The
   * data object is accessible from raster events, where it can be initialized in
   * "beforeoperations" and accessed again in "afteroperations".
   *
   * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):
   *     (Array<number>|ImageData)} Operation
   */

  /**
   * @enum {string}
   */
  const RasterEventType = {
    /**
     * Triggered before operations are run.  Listeners will receive an event object with
     * a `data` property that can be used to make data available to operations.
     * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations
     * @api
     */
    BEFOREOPERATIONS: 'beforeoperations',

    /**
     * Triggered after operations are run.  Listeners will receive an event object with
     * a `data` property.  If more than one thread is used, `data` will be an array of
     * objects.  If a single thread is used, `data` will be a single object.
     * @event module:ol/source/Raster.RasterSourceEvent#afteroperations
     * @api
     */
    AFTEROPERATIONS: 'afteroperations',
  };

  /**
   * @typedef {'pixel' | 'image'} RasterOperationType
   * Raster operation type. Supported values are `'pixel'` and `'image'`.
   */

  /**
   * @typedef {import("./Image.js").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes
   */

  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this
   * type.
   */
  class RasterSourceEvent extends BaseEvent {
    /**
     * @param {string} type Type.
     * @param {import("../Map.js").FrameState} frameState The frame state.
     * @param {Object|Array<Object>} data An object made available to operations.  For "afteroperations" evenets
     * this will be an array of objects if more than one thread is used.
     */
    constructor(type, frameState, data) {
      super(type);

      /**
       * The raster extent.
       * @type {import("../extent.js").Extent}
       * @api
       */
      this.extent = frameState.extent;

      /**
       * The pixel resolution (map units per pixel).
       * @type {number}
       * @api
       */
      this.resolution = frameState.viewState.resolution / frameState.pixelRatio;

      /**
       * An object made available to all operations.  This can be used by operations
       * as a storage object (e.g. for calculating statistics).
       * @type {Object}
       * @api
       */
      this.data = data;
    }
  }

  /**
   * @typedef {Object} Options
   * @property {Array<import("./Source.js").default|import("../layer/Layer.js").default>} sources Input
   * sources or layers.  For vector data, use an VectorImage layer.
   * @property {Operation} [operation] Raster operation.
   * The operation will be called with data from input sources
   * and the output will be assigned to the raster source.
   * @property {Object} [lib] Functions that will be made available to operations run in a worker.
   * @property {number} [threads] By default, operations will be run in a single worker thread.
   * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can
   * be run in multiple worker threads.  Note that there is additional overhead in
   * transferring data to multiple workers, and that depending on the user's
   * system, it may not be possible to parallelize the work.
   * @property {RasterOperationType} [operationType='pixel'] Operation type.
   * Supported values are `'pixel'` and `'image'`.  By default,
   * `'pixel'` operations are assumed, and operations will be called with an
   * array of pixels from input sources.  If set to `'image'`, operations will
   * be called with an array of ImageData objects from input sources.
   * @property {Array<number>|null} [resolutions] Resolutions. If specified, raster operations will only
   * be run at the given resolutions.  By default, the resolutions of the first source with resolutions
   * specified will be used, if any. Set to `null` to use any view resolution instead.
   */

  /***
   * @template Return
   * @typedef {import("../Observable").OnSignature<import("../Observable").EventTypes, import("../events/Event.js").default, Return> &
   *   import("../Observable").OnSignature<import("../ObjectEventType").Types, import("../Object").ObjectEvent, Return> &
   *   import("../Observable").OnSignature<import("./Image.js").ImageSourceEventTypes, import("./Image.js").ImageSourceEvent, Return> &
   *   import("../Observable").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &
   *   import("../Observable").CombinedOnSignature<import("../Observable").EventTypes|import("../ObjectEventType").Types
   *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature
   */

  /**
   * @classdesc
   * A source that transforms data from any number of input sources using an
   * {@link module:ol/source/Raster~Operation} function to transform input pixel values into
   * output pixel values.
   *
   * @fires module:ol/source/Raster.RasterSourceEvent
   * @api
   */
  class RasterSource extends ImageSource$1 {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      super({
        projection: null,
      });

      /***
       * @type {RasterSourceOnSignature<import("../events").EventsKey>}
       */
      this.on;

      /***
       * @type {RasterSourceOnSignature<import("../events").EventsKey>}
       */
      this.once;

      /***
       * @type {RasterSourceOnSignature<void>}
       */
      this.un;

      /**
       * @private
       * @type {Processor}
       */
      this.processor_ = null;

      /**
       * @private
       * @type {RasterOperationType}
       */
      this.operationType_ =
        options.operationType !== undefined ? options.operationType : 'pixel';

      /**
       * @private
       * @type {number}
       */
      this.threads_ = options.threads !== undefined ? options.threads : 1;

      /**
       * @private
       * @type {Array<import("../layer/Layer.js").default>}
       */
      this.layers_ = createLayers(options.sources);

      const changed = this.changed.bind(this);
      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {
        this.layers_[i].addEventListener(EventType.CHANGE, changed);
      }

      /** @type {boolean} */
      this.useResolutions_ = options.resolutions !== null;

      /**
       * @private
       * @type {import("../TileQueue.js").default}
       */
      this.tileQueue_ = new TileQueue$1(function () {
        return 1;
      }, this.changed.bind(this));

      /**
       * The most recently requested frame state.
       * @type {import("../Map.js").FrameState}
       * @private
       */
      this.requestedFrameState_;

      /**
       * The most recently rendered image canvas.
       * @type {import("../ImageCanvas.js").default}
       * @private
       */
      this.renderedImageCanvas_ = null;

      /**
       * The most recently rendered revision.
       * @type {number}
       */
      this.renderedRevision_;

      /**
       * @private
       * @type {import("../Map.js").FrameState}
       */
      this.frameState_ = {
        animate: false,
        coordinateToPixelTransform: create$3(),
        declutterTree: null,
        extent: null,
        index: 0,
        layerIndex: 0,
        layerStatesArray: getLayerStatesArray(this.layers_),
        pixelRatio: 1,
        pixelToCoordinateTransform: create$3(),
        postRenderFunctions: [],
        size: [0, 0],
        tileQueue: this.tileQueue_,
        time: Date.now(),
        usedTiles: {},
        viewState: /** @type {import("../View.js").State} */ ({
          rotation: 0,
        }),
        viewHints: [],
        wantedTiles: {},
        mapId: getUid(this),
        renderTargets: {},
      };

      this.setAttributions(function (frameState) {
        const attributions = [];
        for (
          let index = 0, iMax = options.sources.length;
          index < iMax;
          ++index
        ) {
          const sourceOrLayer = options.sources[index];
          const source =
            sourceOrLayer instanceof Source$1
              ? sourceOrLayer
              : sourceOrLayer.getSource();
          if (!source) {
            continue;
          }
          const attributionGetter = source.getAttributions();
          if (typeof attributionGetter === 'function') {
            const sourceAttribution = attributionGetter(frameState);
            attributions.push.apply(attributions, sourceAttribution);
          }
        }
        return attributions.length !== 0 ? attributions : null;
      });

      if (options.operation !== undefined) {
        this.setOperation(options.operation, options.lib);
      }
    }

    /**
     * Set the operation.
     * @param {Operation} operation New operation.
     * @param {Object} [lib] Functions that will be available to operations run
     *     in a worker.
     * @api
     */
    setOperation(operation, lib) {
      if (this.processor_) {
        this.processor_.dispose();
      }

      this.processor_ = new Processor({
        operation: operation,
        imageOps: this.operationType_ === 'image',
        queue: 1,
        lib: lib,
        threads: this.threads_,
      });
      this.changed();
    }

    /**
     * Update the stored frame state.
     * @param {import("../extent.js").Extent} extent The view extent (in map units).
     * @param {number} resolution The view resolution.
     * @param {import("../proj/Projection.js").default} projection The view projection.
     * @return {import("../Map.js").FrameState} The updated frame state.
     * @private
     */
    updateFrameState_(extent, resolution, projection) {
      const frameState = /** @type {import("../Map.js").FrameState} */ (
        Object.assign({}, this.frameState_)
      );

      frameState.viewState = /** @type {import("../View.js").State} */ (
        Object.assign({}, frameState.viewState)
      );

      const center = getCenter(extent);

      frameState.size[0] = Math.ceil(getWidth(extent) / resolution);
      frameState.size[1] = Math.ceil(getHeight(extent) / resolution);
      frameState.extent = [
        center[0] - (frameState.size[0] * resolution) / 2,
        center[1] - (frameState.size[1] * resolution) / 2,
        center[0] + (frameState.size[0] * resolution) / 2,
        center[1] + (frameState.size[1] * resolution) / 2,
      ];
      frameState.time = Date.now();

      const viewState = frameState.viewState;
      viewState.center = center;
      viewState.projection = projection;
      viewState.resolution = resolution;
      return frameState;
    }

    /**
     * Determine if all sources are ready.
     * @return {boolean} All sources are ready.
     * @private
     */
    allSourcesReady_() {
      let ready = true;
      let source;
      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {
        source = this.layers_[i].getSource();
        if (!source || source.getState() !== 'ready') {
          ready = false;
          break;
        }
      }
      return ready;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../ImageCanvas.js").default} Single image.
     */
    getImage(extent, resolution, pixelRatio, projection) {
      if (!this.allSourcesReady_()) {
        return null;
      }

      resolution = this.findNearestResolution(resolution);
      const frameState = this.updateFrameState_(extent, resolution, projection);
      this.requestedFrameState_ = frameState;

      // check if we can't reuse the existing ol/ImageCanvas
      if (this.renderedImageCanvas_) {
        const renderedResolution = this.renderedImageCanvas_.getResolution();
        const renderedExtent = this.renderedImageCanvas_.getExtent();
        if (
          resolution !== renderedResolution ||
          !equals$2(frameState.extent, renderedExtent)
        ) {
          this.renderedImageCanvas_ = null;
        }
      }

      if (
        !this.renderedImageCanvas_ ||
        this.getRevision() !== this.renderedRevision_
      ) {
        this.processSources_();
      }

      frameState.tileQueue.loadMoreTiles(16, 16);

      if (frameState.animate) {
        requestAnimationFrame(this.changed.bind(this));
      }

      return this.renderedImageCanvas_;
    }

    /**
     * Start processing source data.
     * @private
     */
    processSources_() {
      const frameState = this.requestedFrameState_;
      const len = this.layers_.length;
      const imageDatas = new Array(len);
      for (let i = 0; i < len; ++i) {
        frameState.layerIndex = i;
        frameState.renderTargets = {};
        const imageData = getImageData(this.layers_[i], frameState);
        if (imageData) {
          imageDatas[i] = imageData;
        } else {
          return;
        }
      }

      const data = {};
      this.dispatchEvent(
        new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data)
      );
      this.processor_.process(
        imageDatas,
        data,
        this.onWorkerComplete_.bind(this, frameState)
      );
    }

    /**
     * Called when pixel processing is complete.
     * @param {import("../Map.js").FrameState} frameState The frame state.
     * @param {Error} err Any error during processing.
     * @param {ImageData} output The output image data.
     * @param {Object|Array<Object>} data The user data (or an array if more than one thread).
     * @private
     */
    onWorkerComplete_(frameState, err, output, data) {
      if (err || !output) {
        return;
      }

      // do nothing if extent or resolution changed
      const extent = frameState.extent;
      const resolution = frameState.viewState.resolution;
      if (
        resolution !== this.requestedFrameState_.viewState.resolution ||
        !equals$2(extent, this.requestedFrameState_.extent)
      ) {
        return;
      }

      let context;
      if (this.renderedImageCanvas_) {
        context = this.renderedImageCanvas_.getImage().getContext('2d');
      } else {
        const width = Math.round(getWidth(extent) / resolution);
        const height = Math.round(getHeight(extent) / resolution);
        context = createCanvasContext2D(width, height);
        this.renderedImageCanvas_ = new ImageCanvas$1(
          extent,
          resolution,
          1,
          context.canvas
        );
      }
      context.putImageData(output, 0, 0);

      this.changed();
      this.renderedRevision_ = this.getRevision();

      this.dispatchEvent(
        new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data)
      );
      if (frameState.animate) {
        requestAnimationFrame(this.changed.bind(this));
      }
    }

    /**
     * @param {import("../proj/Projection").default} [projection] Projection.
     * @return {Array<number>|null} Resolutions.
     */
    getResolutions(projection) {
      if (!this.useResolutions_) {
        return null;
      }
      let resolutions = super.getResolutions();
      if (!resolutions) {
        for (let i = 0, ii = this.layers_.length; i < ii; ++i) {
          const source = this.layers_[i].getSource();
          resolutions = source.getResolutions(projection);
          if (resolutions) {
            break;
          }
        }
      }
      return resolutions;
    }

    disposeInternal() {
      if (this.processor_) {
        this.processor_.dispose();
      }
      super.disposeInternal();
    }
  }

  /**
   * Clean up and unregister the worker.
   * @function
   * @api
   */
  RasterSource.prototype.dispose;

  /**
   * A reusable canvas context.
   * @type {CanvasRenderingContext2D}
   * @private
   */
  let sharedContext$1 = null;

  /**
   * Get image data from a layer.
   * @param {import("../layer/Layer.js").default} layer Layer to render.
   * @param {import("../Map.js").FrameState} frameState The frame state.
   * @return {ImageData} The image data.
   */
  function getImageData(layer, frameState) {
    const renderer = layer.getRenderer();
    if (!renderer) {
      throw new Error('Unsupported layer type: ' + layer);
    }

    if (!renderer.prepareFrame(frameState)) {
      return null;
    }
    const width = frameState.size[0];
    const height = frameState.size[1];
    if (width === 0 || height === 0) {
      return null;
    }
    const container = renderer.renderFrame(frameState, null);
    let element;
    if (container instanceof HTMLCanvasElement) {
      element = container;
    } else {
      if (container) {
        element = container.firstElementChild;
      }
      if (!(element instanceof HTMLCanvasElement)) {
        throw new Error('Unsupported rendered element: ' + element);
      }
      if (element.width === width && element.height === height) {
        const context = element.getContext('2d');
        return context.getImageData(0, 0, width, height);
      }
    }

    if (!sharedContext$1) {
      sharedContext$1 = createCanvasContext2D(width, height, undefined, {
        willReadFrequently: true,
      });
    } else {
      const canvas = sharedContext$1.canvas;
      if (canvas.width !== width || canvas.height !== height) {
        sharedContext$1 = createCanvasContext2D(width, height, undefined, {
          willReadFrequently: true,
        });
      } else {
        sharedContext$1.clearRect(0, 0, width, height);
      }
    }
    sharedContext$1.drawImage(element, 0, 0, width, height);
    return sharedContext$1.getImageData(0, 0, width, height);
  }

  /**
   * Get a list of layer states from a list of layers.
   * @param {Array<import("../layer/Layer.js").default>} layers Layers.
   * @return {Array<import("../layer/Layer.js").State>} The layer states.
   */
  function getLayerStatesArray(layers) {
    return layers.map(function (layer) {
      return layer.getLayerState();
    });
  }

  /**
   * Create layers for all sources.
   * @param {Array<import("./Source.js").default|import("../layer/Layer.js").default>} sources The sources.
   * @return {Array<import("../layer/Layer.js").default>} Array of layers.
   */
  function createLayers(sources) {
    const len = sources.length;
    const layers = new Array(len);
    for (let i = 0; i < len; ++i) {
      layers[i] = createLayer(sources[i]);
    }
    return layers;
  }

  /**
   * Create a layer for the provided source.
   * @param {import("./Source.js").default|import("../layer/Layer.js").default} layerOrSource The layer or source.
   * @return {import("../layer/Layer.js").default} The layer.
   */
  function createLayer(layerOrSource) {
    // @type {import("../layer/Layer.js").default}
    let layer;
    if (layerOrSource instanceof Source$1) {
      if (layerOrSource instanceof TileSource$1) {
        layer = new TileLayer$1({source: layerOrSource});
      } else if (layerOrSource instanceof ImageSource$1) {
        layer = new ImageLayer$1({source: layerOrSource});
      }
    } else {
      layer = layerOrSource;
    }
    return layer;
  }

  var Raster = RasterSource;

  /**
   * @module ol/source/TileImage
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {boolean} [opaque=false] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./Source.js").State} [state] Source state.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
   * service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
   * request out-of-bounds tiles from the server. When set to `false`, only one
   * world will be rendered. When set to `true`, tiles will be requested for one
   * world only, but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [key] Optional tile key for proper cache fetching
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Base class for sources providing images divided into a tile grid.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  class TileImage extends UrlTile$1 {
    /**
     * @param {!Options} options Image tile options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        opaque: options.opaque,
        projection: options.projection,
        state: options.state,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction
          ? options.tileLoadFunction
          : defaultTileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX,
        transition: options.transition,
        interpolate:
          options.interpolate !== undefined ? options.interpolate : true,
        key: options.key,
        attributionsCollapsible: options.attributionsCollapsible,
        zDirection: options.zDirection,
      });

      /**
       * @protected
       * @type {?string}
       */
      this.crossOrigin =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @protected
       * @type {typeof ImageTile}
       */
      this.tileClass =
        options.tileClass !== undefined ? options.tileClass : ImageTile$1;

      /**
       * @protected
       * @type {!Object<string, TileCache>}
       */
      this.tileCacheForProjection = {};

      /**
       * @protected
       * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGridForProjection = {};

      /**
       * @private
       * @type {number|undefined}
       */
      this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;

      /**
       * @private
       * @type {boolean}
       */
      this.renderReprojectionEdges_ = false;
    }

    /**
     * @return {boolean} Can expire cache.
     */
    canExpireCache() {
      if (this.tileCache.canExpireCache()) {
        return true;
      }
      for (const key in this.tileCacheForProjection) {
        if (this.tileCacheForProjection[key].canExpireCache()) {
          return true;
        }
      }

      return false;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */
    expireCache(projection, usedTiles) {
      const usedTileCache = this.getTileCacheForProjection(projection);

      this.tileCache.expireCache(
        this.tileCache == usedTileCache ? usedTiles : {}
      );
      for (const id in this.tileCacheForProjection) {
        const tileCache = this.tileCacheForProjection[id];
        tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    getGutterForProjection(projection) {
      if (
        this.getProjection() &&
        projection &&
        !equivalent(this.getProjection(), projection)
      ) {
        return 0;
      }
      return this.getGutter();
    }

    /**
     * @return {number} Gutter.
     */
    getGutter() {
      return 0;
    }

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     */
    getKey() {
      let key = super.getKey();
      if (!this.getInterpolate()) {
        key += ':disable-interpolation';
      }
      return key;
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {boolean} Opaque.
     */
    getOpaque(projection) {
      if (
        this.getProjection() &&
        projection &&
        !equivalent(this.getProjection(), projection)
      ) {
        return false;
      }
      return super.getOpaque(projection);
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    getTileGridForProjection(projection) {
      const thisProj = this.getProjection();
      if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
        return this.tileGrid;
      }
      const projKey = getUid(projection);
      if (!(projKey in this.tileGridForProjection)) {
        this.tileGridForProjection[projKey] =
          getForProjection(projection);
      }
      return this.tileGridForProjection[projKey];
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     */
    getTileCacheForProjection(projection) {
      const thisProj = this.getProjection();
      if (!thisProj || equivalent(thisProj, projection)) {
        return this.tileCache;
      }
      const projKey = getUid(projection);
      if (!(projKey in this.tileCacheForProjection)) {
        this.tileCacheForProjection[projKey] = new TileCache$1(
          this.tileCache.highWaterMark
        );
      }
      return this.tileCacheForProjection[projKey];
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {string} key The key set on the tile.
     * @return {!ImageTile} Tile.
     * @private
     */
    createTile_(z, x, y, pixelRatio, projection, key) {
      const tileCoord = [z, x, y];
      const urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        projection
      );
      const tileUrl = urlTileCoord
        ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)
        : undefined;
      const tile = new this.tileClass(
        tileCoord,
        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,
        tileUrl !== undefined ? tileUrl : '',
        this.crossOrigin,
        this.tileLoadFunction,
        this.tileOptions
      );
      tile.key = key;
      tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
      return tile;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!(ImageTile|ReprojTile)} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      const sourceProjection = this.getProjection();
      if (
        !sourceProjection ||
        !projection ||
        equivalent(sourceProjection, projection)
      ) {
        return this.getTileInternal(
          z,
          x,
          y,
          pixelRatio,
          sourceProjection || projection
        );
      }
      const cache = this.getTileCacheForProjection(projection);
      const tileCoord = [z, x, y];
      let tile;
      const tileCoordKey = getKey(tileCoord);
      if (cache.containsKey(tileCoordKey)) {
        tile = cache.get(tileCoordKey);
      }
      const key = this.getKey();
      if (tile && tile.key == key) {
        return tile;
      }
      const sourceTileGrid = this.getTileGridForProjection(sourceProjection);
      const targetTileGrid = this.getTileGridForProjection(projection);
      const wrappedTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        projection
      );
      const newTile = new ReprojTile$1(
        sourceProjection,
        sourceTileGrid,
        projection,
        targetTileGrid,
        tileCoord,
        wrappedTileCoord,
        this.getTilePixelRatio(pixelRatio),
        this.getGutter(),
        (z, x, y, pixelRatio) =>
          this.getTileInternal(z, x, y, pixelRatio, sourceProjection),
        this.reprojectionErrorThreshold_,
        this.renderReprojectionEdges_,
        this.getInterpolate()
      );
      newTile.key = key;

      if (tile) {
        newTile.interimTile = tile;
        newTile.refreshInterimChain();
        cache.replace(tileCoordKey, newTile);
      } else {
        cache.set(tileCoordKey, newTile);
      }
      return newTile;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {!import("../proj/Projection.js").default} projection Projection.
     * @return {!ImageTile} Tile.
     * @protected
     */
    getTileInternal(z, x, y, pixelRatio, projection) {
      let tile = null;
      const tileCoordKey = getKeyZXY(z, x, y);
      const key = this.getKey();
      if (!this.tileCache.containsKey(tileCoordKey)) {
        tile = this.createTile_(z, x, y, pixelRatio, projection, key);
        this.tileCache.set(tileCoordKey, tile);
      } else {
        tile = this.tileCache.get(tileCoordKey);
        if (tile.key != key) {
          // The source's params changed. If the tile has an interim tile and if we
          // can use it then we use it. Otherwise we create a new tile.  In both
          // cases we attempt to assign an interim tile to the new tile.
          const interimTile = tile;
          tile = this.createTile_(z, x, y, pixelRatio, projection, key);

          //make the new tile the head of the list,
          if (interimTile.getState() == TileState.IDLE) {
            //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
            tile.interimTile = interimTile.interimTile;
          } else {
            tile.interimTile = interimTile;
          }
          tile.refreshInterimChain();
          this.tileCache.replace(tileCoordKey, tile);
        }
      }
      return tile;
    }

    /**
     * Sets whether to render reprojection edges or not (usually for debugging).
     * @param {boolean} render Render the edges.
     * @api
     */
    setRenderReprojectionEdges(render) {
      if (this.renderReprojectionEdges_ == render) {
        return;
      }
      this.renderReprojectionEdges_ = render;
      for (const id in this.tileCacheForProjection) {
        this.tileCacheForProjection[id].clear();
      }
      this.changed();
    }

    /**
     * Sets the tile grid to use when reprojecting the tiles to the given
     * projection instead of the default tile grid for the projection.
     *
     * This can be useful when the default tile grid cannot be created
     * (e.g. projection has no extent defined) or
     * for optimization reasons (custom tile size, resolutions, ...).
     *
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
     * @api
     */
    setTileGridForProjection(projection, tilegrid) {
      const proj = get$2(projection);
      if (proj) {
        const projKey = getUid(proj);
        if (!(projKey in this.tileGridForProjection)) {
          this.tileGridForProjection[projKey] = tilegrid;
        }
      }
    }

    clear() {
      super.clear();
      for (const id in this.tileCacheForProjection) {
        this.tileCacheForProjection[id].clear();
      }
    }
  }

  /**
   * @param {ImageTile} imageTile Image tile.
   * @param {string} src Source.
   */
  function defaultTileLoadFunction(imageTile, src) {
    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =
      src;
  }

  var TileImage$1 = TileImage;

  /**
   * @module ol/net
   */

  /**
   * Simple JSONP helper. Supports error callbacks and a custom callback param.
   * The error callback will be called when no JSONP is executed after 10 seconds.
   *
   * @param {string} url Request url. A 'callback' query parameter will be
   *     appended.
   * @param {Function} callback Callback on success.
   * @param {Function} [errback] Callback on error.
   * @param {string} [callbackParam] Custom query parameter for the JSONP
   *     callback. Default is 'callback'.
   */
  function jsonp(url, callback, errback, callbackParam) {
    const script = document.createElement('script');
    const key = 'olc_' + getUid(callback);
    function cleanup() {
      delete window[key];
      script.parentNode.removeChild(script);
    }
    script.async = true;
    script.src =
      url +
      (url.includes('?') ? '&' : '?') +
      (callbackParam || 'callback') +
      '=' +
      key;
    const timer = setTimeout(function () {
      cleanup();
      if (errback) {
        errback();
      }
    }, 10000);
    window[key] = function (data) {
      clearTimeout(timer);
      cleanup();
      callback(data);
    };
    document.head.appendChild(script);
  }

  /**
   * @module ol/source/TileJSON
   */

  /**
   * @typedef {Object} Config
   * @property {string} [name] The name.
   * @property {string} [description] The description.
   * @property {string} [version] The version.
   * @property {string} [attribution] The attribution.
   * @property {string} [template] The template.
   * @property {string} [legend] The legend.
   * @property {string} [scheme] The scheme.
   * @property {Array<string>} tiles The tile URL templates.
   * @property {Array<string>} [grids] Optional grids.
   * @property {number} [minzoom] Minimum zoom level.
   * @property {number} [maxzoom] Maximum zoom level.
   * @property {Array<number>} [bounds] Optional bounds.
   * @property {Array<number>} [center] Optional center.
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
   * Useful when the server does not support CORS..
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {Config} [tileJSON] TileJSON configuration for this source.
   * If not provided, `url` must be configured.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.
   * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data in TileJSON format.
   * @api
   */
  class TileJSON extends TileImage$1 {
    /**
     * @param {Options} options TileJSON options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: get$2('EPSG:3857'),
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        state: 'loading',
        tileLoadFunction: options.tileLoadFunction,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @type {Config}
       * @private
       */
      this.tileJSON_ = null;

      /**
       * @type {number|import("../size.js").Size}
       * @private
       */
      this.tileSize_ = options.tileSize;

      if (options.url) {
        if (options.jsonp) {
          jsonp(
            options.url,
            this.handleTileJSONResponse.bind(this),
            this.handleTileJSONError.bind(this)
          );
        } else {
          const client = new XMLHttpRequest();
          client.addEventListener('load', this.onXHRLoad_.bind(this));
          client.addEventListener('error', this.onXHRError_.bind(this));
          client.open('GET', options.url);
          client.send();
        }
      } else if (options.tileJSON) {
        this.handleTileJSONResponse(options.tileJSON);
      } else {
        assert(false, 51); // Either `url` or `tileJSON` options must be provided
      }
    }

    /**
     * @private
     * @param {Event} event The load event.
     */
    onXHRLoad_(event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || (client.status >= 200 && client.status < 300)) {
        let response;
        try {
          response = /** @type {Config} */ (JSON.parse(client.responseText));
        } catch (err) {
          this.handleTileJSONError();
          return;
        }
        this.handleTileJSONResponse(response);
      } else {
        this.handleTileJSONError();
      }
    }

    /**
     * @private
     * @param {Event} event The error event.
     */
    onXHRError_(event) {
      this.handleTileJSONError();
    }

    /**
     * @return {Config} The tilejson object.
     * @api
     */
    getTileJSON() {
      return this.tileJSON_;
    }

    /**
     * @protected
     * @param {Config} tileJSON Tile JSON.
     */
    handleTileJSONResponse(tileJSON) {
      const epsg4326Projection = get$2('EPSG:4326');

      const sourceProjection = this.getProjection();
      let extent;
      if (tileJSON['bounds'] !== undefined) {
        const transform = getTransformFromProjections(
          epsg4326Projection,
          sourceProjection
        );
        extent = applyTransform(tileJSON['bounds'], transform);
      }

      const gridExtent = extentFromProjection(sourceProjection);
      const minZoom = tileJSON['minzoom'] || 0;
      const maxZoom = tileJSON['maxzoom'] || 22;
      const tileGrid = createXYZ({
        extent: gridExtent,
        maxZoom: maxZoom,
        minZoom: minZoom,
        tileSize: this.tileSize_,
      });
      this.tileGrid = tileGrid;

      this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);

      if (tileJSON['attribution'] && !this.getAttributions()) {
        const attributionExtent = extent !== undefined ? extent : gridExtent;
        this.setAttributions(function (frameState) {
          if (intersects$2(attributionExtent, frameState.extent)) {
            return [tileJSON['attribution']];
          }
          return null;
        });
      }
      this.tileJSON_ = tileJSON;
      this.setState('ready');
    }

    /**
     * @protected
     */
    handleTileJSONError() {
      this.setState('error');
    }
  }

  var TileJSON$1 = TileJSON;

  var csscolorparser = {};

  var parseCSSColor_1;
  // (c) Dean McNamee <dean@gmail.com>, 2012.
  //
  // https://github.com/deanm/css-color-parser-js
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  // IN THE SOFTWARE.
  // http://www.w3.org/TR/css3-color/
  var kCSSColorTable = {
      'transparent': [
          0,
          0,
          0,
          0
      ],
      'aliceblue': [
          240,
          248,
          255,
          1
      ],
      'antiquewhite': [
          250,
          235,
          215,
          1
      ],
      'aqua': [
          0,
          255,
          255,
          1
      ],
      'aquamarine': [
          127,
          255,
          212,
          1
      ],
      'azure': [
          240,
          255,
          255,
          1
      ],
      'beige': [
          245,
          245,
          220,
          1
      ],
      'bisque': [
          255,
          228,
          196,
          1
      ],
      'black': [
          0,
          0,
          0,
          1
      ],
      'blanchedalmond': [
          255,
          235,
          205,
          1
      ],
      'blue': [
          0,
          0,
          255,
          1
      ],
      'blueviolet': [
          138,
          43,
          226,
          1
      ],
      'brown': [
          165,
          42,
          42,
          1
      ],
      'burlywood': [
          222,
          184,
          135,
          1
      ],
      'cadetblue': [
          95,
          158,
          160,
          1
      ],
      'chartreuse': [
          127,
          255,
          0,
          1
      ],
      'chocolate': [
          210,
          105,
          30,
          1
      ],
      'coral': [
          255,
          127,
          80,
          1
      ],
      'cornflowerblue': [
          100,
          149,
          237,
          1
      ],
      'cornsilk': [
          255,
          248,
          220,
          1
      ],
      'crimson': [
          220,
          20,
          60,
          1
      ],
      'cyan': [
          0,
          255,
          255,
          1
      ],
      'darkblue': [
          0,
          0,
          139,
          1
      ],
      'darkcyan': [
          0,
          139,
          139,
          1
      ],
      'darkgoldenrod': [
          184,
          134,
          11,
          1
      ],
      'darkgray': [
          169,
          169,
          169,
          1
      ],
      'darkgreen': [
          0,
          100,
          0,
          1
      ],
      'darkgrey': [
          169,
          169,
          169,
          1
      ],
      'darkkhaki': [
          189,
          183,
          107,
          1
      ],
      'darkmagenta': [
          139,
          0,
          139,
          1
      ],
      'darkolivegreen': [
          85,
          107,
          47,
          1
      ],
      'darkorange': [
          255,
          140,
          0,
          1
      ],
      'darkorchid': [
          153,
          50,
          204,
          1
      ],
      'darkred': [
          139,
          0,
          0,
          1
      ],
      'darksalmon': [
          233,
          150,
          122,
          1
      ],
      'darkseagreen': [
          143,
          188,
          143,
          1
      ],
      'darkslateblue': [
          72,
          61,
          139,
          1
      ],
      'darkslategray': [
          47,
          79,
          79,
          1
      ],
      'darkslategrey': [
          47,
          79,
          79,
          1
      ],
      'darkturquoise': [
          0,
          206,
          209,
          1
      ],
      'darkviolet': [
          148,
          0,
          211,
          1
      ],
      'deeppink': [
          255,
          20,
          147,
          1
      ],
      'deepskyblue': [
          0,
          191,
          255,
          1
      ],
      'dimgray': [
          105,
          105,
          105,
          1
      ],
      'dimgrey': [
          105,
          105,
          105,
          1
      ],
      'dodgerblue': [
          30,
          144,
          255,
          1
      ],
      'firebrick': [
          178,
          34,
          34,
          1
      ],
      'floralwhite': [
          255,
          250,
          240,
          1
      ],
      'forestgreen': [
          34,
          139,
          34,
          1
      ],
      'fuchsia': [
          255,
          0,
          255,
          1
      ],
      'gainsboro': [
          220,
          220,
          220,
          1
      ],
      'ghostwhite': [
          248,
          248,
          255,
          1
      ],
      'gold': [
          255,
          215,
          0,
          1
      ],
      'goldenrod': [
          218,
          165,
          32,
          1
      ],
      'gray': [
          128,
          128,
          128,
          1
      ],
      'green': [
          0,
          128,
          0,
          1
      ],
      'greenyellow': [
          173,
          255,
          47,
          1
      ],
      'grey': [
          128,
          128,
          128,
          1
      ],
      'honeydew': [
          240,
          255,
          240,
          1
      ],
      'hotpink': [
          255,
          105,
          180,
          1
      ],
      'indianred': [
          205,
          92,
          92,
          1
      ],
      'indigo': [
          75,
          0,
          130,
          1
      ],
      'ivory': [
          255,
          255,
          240,
          1
      ],
      'khaki': [
          240,
          230,
          140,
          1
      ],
      'lavender': [
          230,
          230,
          250,
          1
      ],
      'lavenderblush': [
          255,
          240,
          245,
          1
      ],
      'lawngreen': [
          124,
          252,
          0,
          1
      ],
      'lemonchiffon': [
          255,
          250,
          205,
          1
      ],
      'lightblue': [
          173,
          216,
          230,
          1
      ],
      'lightcoral': [
          240,
          128,
          128,
          1
      ],
      'lightcyan': [
          224,
          255,
          255,
          1
      ],
      'lightgoldenrodyellow': [
          250,
          250,
          210,
          1
      ],
      'lightgray': [
          211,
          211,
          211,
          1
      ],
      'lightgreen': [
          144,
          238,
          144,
          1
      ],
      'lightgrey': [
          211,
          211,
          211,
          1
      ],
      'lightpink': [
          255,
          182,
          193,
          1
      ],
      'lightsalmon': [
          255,
          160,
          122,
          1
      ],
      'lightseagreen': [
          32,
          178,
          170,
          1
      ],
      'lightskyblue': [
          135,
          206,
          250,
          1
      ],
      'lightslategray': [
          119,
          136,
          153,
          1
      ],
      'lightslategrey': [
          119,
          136,
          153,
          1
      ],
      'lightsteelblue': [
          176,
          196,
          222,
          1
      ],
      'lightyellow': [
          255,
          255,
          224,
          1
      ],
      'lime': [
          0,
          255,
          0,
          1
      ],
      'limegreen': [
          50,
          205,
          50,
          1
      ],
      'linen': [
          250,
          240,
          230,
          1
      ],
      'magenta': [
          255,
          0,
          255,
          1
      ],
      'maroon': [
          128,
          0,
          0,
          1
      ],
      'mediumaquamarine': [
          102,
          205,
          170,
          1
      ],
      'mediumblue': [
          0,
          0,
          205,
          1
      ],
      'mediumorchid': [
          186,
          85,
          211,
          1
      ],
      'mediumpurple': [
          147,
          112,
          219,
          1
      ],
      'mediumseagreen': [
          60,
          179,
          113,
          1
      ],
      'mediumslateblue': [
          123,
          104,
          238,
          1
      ],
      'mediumspringgreen': [
          0,
          250,
          154,
          1
      ],
      'mediumturquoise': [
          72,
          209,
          204,
          1
      ],
      'mediumvioletred': [
          199,
          21,
          133,
          1
      ],
      'midnightblue': [
          25,
          25,
          112,
          1
      ],
      'mintcream': [
          245,
          255,
          250,
          1
      ],
      'mistyrose': [
          255,
          228,
          225,
          1
      ],
      'moccasin': [
          255,
          228,
          181,
          1
      ],
      'navajowhite': [
          255,
          222,
          173,
          1
      ],
      'navy': [
          0,
          0,
          128,
          1
      ],
      'oldlace': [
          253,
          245,
          230,
          1
      ],
      'olive': [
          128,
          128,
          0,
          1
      ],
      'olivedrab': [
          107,
          142,
          35,
          1
      ],
      'orange': [
          255,
          165,
          0,
          1
      ],
      'orangered': [
          255,
          69,
          0,
          1
      ],
      'orchid': [
          218,
          112,
          214,
          1
      ],
      'palegoldenrod': [
          238,
          232,
          170,
          1
      ],
      'palegreen': [
          152,
          251,
          152,
          1
      ],
      'paleturquoise': [
          175,
          238,
          238,
          1
      ],
      'palevioletred': [
          219,
          112,
          147,
          1
      ],
      'papayawhip': [
          255,
          239,
          213,
          1
      ],
      'peachpuff': [
          255,
          218,
          185,
          1
      ],
      'peru': [
          205,
          133,
          63,
          1
      ],
      'pink': [
          255,
          192,
          203,
          1
      ],
      'plum': [
          221,
          160,
          221,
          1
      ],
      'powderblue': [
          176,
          224,
          230,
          1
      ],
      'purple': [
          128,
          0,
          128,
          1
      ],
      'rebeccapurple': [
          102,
          51,
          153,
          1
      ],
      'red': [
          255,
          0,
          0,
          1
      ],
      'rosybrown': [
          188,
          143,
          143,
          1
      ],
      'royalblue': [
          65,
          105,
          225,
          1
      ],
      'saddlebrown': [
          139,
          69,
          19,
          1
      ],
      'salmon': [
          250,
          128,
          114,
          1
      ],
      'sandybrown': [
          244,
          164,
          96,
          1
      ],
      'seagreen': [
          46,
          139,
          87,
          1
      ],
      'seashell': [
          255,
          245,
          238,
          1
      ],
      'sienna': [
          160,
          82,
          45,
          1
      ],
      'silver': [
          192,
          192,
          192,
          1
      ],
      'skyblue': [
          135,
          206,
          235,
          1
      ],
      'slateblue': [
          106,
          90,
          205,
          1
      ],
      'slategray': [
          112,
          128,
          144,
          1
      ],
      'slategrey': [
          112,
          128,
          144,
          1
      ],
      'snow': [
          255,
          250,
          250,
          1
      ],
      'springgreen': [
          0,
          255,
          127,
          1
      ],
      'steelblue': [
          70,
          130,
          180,
          1
      ],
      'tan': [
          210,
          180,
          140,
          1
      ],
      'teal': [
          0,
          128,
          128,
          1
      ],
      'thistle': [
          216,
          191,
          216,
          1
      ],
      'tomato': [
          255,
          99,
          71,
          1
      ],
      'turquoise': [
          64,
          224,
          208,
          1
      ],
      'violet': [
          238,
          130,
          238,
          1
      ],
      'wheat': [
          245,
          222,
          179,
          1
      ],
      'white': [
          255,
          255,
          255,
          1
      ],
      'whitesmoke': [
          245,
          245,
          245,
          1
      ],
      'yellow': [
          255,
          255,
          0,
          1
      ],
      'yellowgreen': [
          154,
          205,
          50,
          1
      ]
  };
  function clamp_css_byte(i) {
      // Clamp to integer 0 .. 255.
      i = Math.round(i);
      // Seems to be what Chrome does (vs truncation).
      return i < 0 ? 0 : i > 255 ? 255 : i;
  }
  function clamp_css_float(f) {
      // Clamp to float 0.0 .. 1.0.
      return f < 0 ? 0 : f > 1 ? 1 : f;
  }
  function parse_css_int(str) {
      // int or percentage.
      if (str[str.length - 1] === '%')
          { return clamp_css_byte(parseFloat(str) / 100 * 255); }
      return clamp_css_byte(parseInt(str));
  }
  function parse_css_float(str) {
      // float or percentage.
      if (str[str.length - 1] === '%')
          { return clamp_css_float(parseFloat(str) / 100); }
      return clamp_css_float(parseFloat(str));
  }
  function css_hue_to_rgb(m1, m2, h) {
      if (h < 0)
          { h += 1; }
      else if (h > 1)
          { h -= 1; }
      if (h * 6 < 1)
          { return m1 + (m2 - m1) * h * 6; }
      if (h * 2 < 1)
          { return m2; }
      if (h * 3 < 2)
          { return m1 + (m2 - m1) * (2 / 3 - h) * 6; }
      return m1;
  }
  function parseCSSColor(css_str) {
      // Remove all whitespace, not compliant, but should just be more accepting.
      var str = css_str.replace(/ /g, '').toLowerCase();
      // Color keywords (and transparent) lookup.
      if (str in kCSSColorTable)
          { return kCSSColorTable[str].slice(); }
      // dup.
      // #abc and #abc123 syntax.
      if (str[0] === '#') {
          if (str.length === 4) {
              var iv = parseInt(str.substr(1), 16);
              // TODO(deanm): Stricter parsing.
              if (!(iv >= 0 && iv <= 4095))
                  { return null; }
              // Covers NaN.
              return [
                  (iv & 3840) >> 4 | (iv & 3840) >> 8,
                  iv & 240 | (iv & 240) >> 4,
                  iv & 15 | (iv & 15) << 4,
                  1
              ];
          } else if (str.length === 7) {
              var iv = parseInt(str.substr(1), 16);
              // TODO(deanm): Stricter parsing.
              if (!(iv >= 0 && iv <= 16777215))
                  { return null; }
              // Covers NaN.
              return [
                  (iv & 16711680) >> 16,
                  (iv & 65280) >> 8,
                  iv & 255,
                  1
              ];
          }
          return null;
      }
      var op = str.indexOf('('), ep = str.indexOf(')');
      if (op !== -1 && ep + 1 === str.length) {
          var fname = str.substr(0, op);
          var params = str.substr(op + 1, ep - (op + 1)).split(',');
          var alpha = 1;
          // To allow case fallthrough.
          switch (fname) {
          case 'rgba':
              if (params.length !== 4)
                  { return null; }
              alpha = parse_css_float(params.pop());
          // Fall through.
          case 'rgb':
              if (params.length !== 3)
                  { return null; }
              return [
                  parse_css_int(params[0]),
                  parse_css_int(params[1]),
                  parse_css_int(params[2]),
                  alpha
              ];
          case 'hsla':
              if (params.length !== 4)
                  { return null; }
              alpha = parse_css_float(params.pop());
          // Fall through.
          case 'hsl':
              if (params.length !== 3)
                  { return null; }
              var h = (parseFloat(params[0]) % 360 + 360) % 360 / 360;
              // 0 .. 1
              // NOTE(deanm): According to the CSS spec s/l should only be
              // percentages, but we don't bother and let float or percentage.
              var s = parse_css_float(params[1]);
              var l = parse_css_float(params[2]);
              var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
              var m1 = l * 2 - m2;
              return [
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h + 1 / 3) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h - 1 / 3) * 255),
                  alpha
              ];
          default:
              return null;
          }
      }
      return null;
  }
  try {
      parseCSSColor_1 = csscolorparser.parseCSSColor = parseCSSColor;
  } catch (e) {
  }

  //      
  /**
   * An RGBA color value. Create instances from color strings using the static
   * method `Color.parse`. The constructor accepts RGB channel values in the range
   * `[0, 1]`, premultiplied by A.
   *
   * @param {number} r The red channel.
   * @param {number} g The green channel.
   * @param {number} b The blue channel.
   * @param {number} a The alpha channel.
   * @private
   */
  var Color = function Color(r, g, b, a) {
      if ( a === void 0 ) a = 1;

      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
  };
  /**
   * Parses valid CSS color strings and returns a `Color` instance.
   * @returns A `Color` instance, or `undefined` if the input is not a valid color string.
   */
  Color.parse = function parse (input) {
      if (!input) {
          return undefined;
      }
      if (input instanceof Color) {
          return input;
      }
      if (typeof input !== 'string') {
          return undefined;
      }
      var rgba = parseCSSColor_1(input);
      if (!rgba) {
          return undefined;
      }
      return new Color(rgba[0] / 255 * rgba[3], rgba[1] / 255 * rgba[3], rgba[2] / 255 * rgba[3], rgba[3]);
  };
  /**
   * Returns an RGBA string representing the color value.
   *
   * @returns An RGBA string.
   * @example
   * var purple = new Color.parse('purple');
   * purple.toString; // = "rgba(128,0,128,1)"
   * var translucentGreen = new Color.parse('rgba(26, 207, 26, .73)');
   * translucentGreen.toString(); // = "rgba(26,207,26,0.73)"
   */
  Color.prototype.toString = function toString () {
      var ref = this.toArray();
          var r = ref[0];
          var g = ref[1];
          var b = ref[2];
          var a = ref[3];
      return ("rgba(" + (Math.round(r)) + "," + (Math.round(g)) + "," + (Math.round(b)) + "," + a + ")");
  };
  /**
   * Returns an RGBA array of values representing the color, unpremultiplied by A.
   *
   * @returns An array of RGBA color values in the range [0, 255].
   */
  Color.prototype.toArray = function toArray () {
      var ref = this;
          var r = ref.r;
          var g = ref.g;
          var b = ref.b;
          var a = ref.a;
      return a === 0 ? [
          0,
          0,
          0,
          0
      ] : [
          r * 255 / a,
          g * 255 / a,
          b * 255 / a,
          a
      ];
  };
  /**
   * Returns a RGBA array of float values representing the color, unpremultiplied by A.
   *
   * @returns An array of RGBA color values in the range [0, 1].
   */
  Color.prototype.toArray01 = function toArray01 () {
      var ref = this;
          var r = ref.r;
          var g = ref.g;
          var b = ref.b;
          var a = ref.a;
      return a === 0 ? [
          0,
          0,
          0,
          0
      ] : [
          r / a,
          g / a,
          b / a,
          a
      ];
  };
  /**
   * Returns an RGBA array of values representing the color, premultiplied by A.
   *
   * @returns An array of RGBA color values in the range [0, 1].
   */
  Color.prototype.toArray01PremultipliedAlpha = function toArray01PremultipliedAlpha () {
      var ref = this;
          var r = ref.r;
          var g = ref.g;
          var b = ref.b;
          var a = ref.a;
      return [
          r,
          g,
          b,
          a
      ];
  };
  Color.black = new Color(0, 0, 0, 1);
  Color.white = new Color(1, 1, 1, 1);
  Color.transparent = new Color(0, 0, 0, 0);
  Color.red = new Color(1, 0, 0, 1);
  Color.blue = new Color(0, 0, 1, 1);
  var Color$1 = Color;

  function convertLiteral(value) {
      return typeof value === 'object' ? [
          'literal',
          value
      ] : value;
  }
  function convertFunction(parameters, propertySpec) {
      var stops = parameters.stops;
      if (!stops) {
          // identity function
          return convertIdentityFunction(parameters, propertySpec);
      }
      var zoomAndFeatureDependent = stops && typeof stops[0][0] === 'object';
      var featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;
      var zoomDependent = zoomAndFeatureDependent || !featureDependent;
      stops = stops.map(function (stop) {
          if (!featureDependent && propertySpec.tokens && typeof stop[1] === 'string') {
              return [
                  stop[0],
                  convertTokenString(stop[1])
              ];
          }
          return [
              stop[0],
              convertLiteral(stop[1])
          ];
      });
      if (zoomAndFeatureDependent) {
          return convertZoomAndPropertyFunction(parameters, propertySpec, stops);
      } else if (zoomDependent) {
          return convertZoomFunction(parameters, propertySpec, stops);
      } else {
          return convertPropertyFunction(parameters, propertySpec, stops);
      }
  }
  function convertIdentityFunction(parameters, propertySpec) {
      var get = [
          'get',
          parameters.property
      ];
      if (parameters.default === undefined) {
          // By default, expressions for string-valued properties get coerced. To preserve
          // legacy function semantics, insert an explicit assertion instead.
          return propertySpec.type === 'string' ? [
              'string',
              get
          ] : get;
      } else if (propertySpec.type === 'enum') {
          return [
              'match',
              get,
              Object.keys(propertySpec.values),
              get,
              parameters.default
          ];
      } else {
          var expression = [
              propertySpec.type === 'color' ? 'to-color' : propertySpec.type,
              get,
              convertLiteral(parameters.default)
          ];
          if (propertySpec.type === 'array') {
              expression.splice(1, 0, propertySpec.value, propertySpec.length || null);
          }
          return expression;
      }
  }
  function getInterpolateOperator(parameters) {
      switch (parameters.colorSpace) {
      case 'hcl':
          return 'interpolate-hcl';
      case 'lab':
          return 'interpolate-lab';
      default:
          return 'interpolate';
      }
  }
  function convertZoomAndPropertyFunction(parameters, propertySpec, stops) {
      var featureFunctionParameters = {};
      var featureFunctionStops = {};
      var zoomStops = [];
      for (var s = 0; s < stops.length; s++) {
          var stop = stops[s];
          var zoom = stop[0].zoom;
          if (featureFunctionParameters[zoom] === undefined) {
              featureFunctionParameters[zoom] = {
                  zoom: zoom,
                  type: parameters.type,
                  property: parameters.property,
                  default: parameters.default
              };
              featureFunctionStops[zoom] = [];
              zoomStops.push(zoom);
          }
          featureFunctionStops[zoom].push([
              stop[0].value,
              stop[1]
          ]);
      }
      // the interpolation type for the zoom dimension of a zoom-and-property
      // function is determined directly from the style property specification
      // for which it's being used: linear for interpolatable properties, step
      // otherwise.
      var functionType = getFunctionType({}, propertySpec);
      if (functionType === 'exponential') {
          var expression = [
              getInterpolateOperator(parameters),
              ['linear'],
              ['zoom']
          ];
          for (var i = 0, list = zoomStops; i < list.length; i += 1) {
              var z = list[i];

              var output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);
              appendStopPair(expression, z, output, false);
          }
          return expression;
      } else {
          var expression$1 = [
              'step',
              ['zoom']
          ];
          for (var i$1 = 0, list$1 = zoomStops; i$1 < list$1.length; i$1 += 1) {
              var z$1 = list$1[i$1];

              var output$1 = convertPropertyFunction(featureFunctionParameters[z$1], propertySpec, featureFunctionStops[z$1]);
              appendStopPair(expression$1, z$1, output$1, true);
          }
          fixupDegenerateStepCurve(expression$1);
          return expression$1;
      }
  }
  function coalesce(a, b) {
      if (a !== undefined)
          { return a; }
      if (b !== undefined)
          { return b; }
  }
  function getFallback(parameters, propertySpec) {
      var defaultValue = convertLiteral(coalesce(parameters.default, propertySpec.default));
      /*
       * Some fields with type: resolvedImage have an undefined default.
       * Because undefined is an invalid value for resolvedImage, set fallback to
       * an empty string instead of undefined to ensure output
       * passes validation.
       */
      if (defaultValue === undefined && propertySpec.type === 'resolvedImage') {
          return '';
      }
      return defaultValue;
  }
  function convertPropertyFunction(parameters, propertySpec, stops) {
      var type = getFunctionType(parameters, propertySpec);
      var get = [
          'get',
          parameters.property
      ];
      if (type === 'categorical' && typeof stops[0][0] === 'boolean') {
          var expression = ['case'];
          for (var i = 0, list = stops; i < list.length; i += 1) {
              var stop = list[i];

              expression.push([
                  '==',
                  get,
                  stop[0]
              ], stop[1]);
          }
          expression.push(getFallback(parameters, propertySpec));
          return expression;
      } else if (type === 'categorical') {
          var expression$1 = [
              'match',
              get
          ];
          for (var i$1 = 0, list$1 = stops; i$1 < list$1.length; i$1 += 1) {
              var stop$1 = list$1[i$1];

              appendStopPair(expression$1, stop$1[0], stop$1[1], false);
          }
          expression$1.push(getFallback(parameters, propertySpec));
          return expression$1;
      } else if (type === 'interval') {
          var expression$2 = [
              'step',
              [
                  'number',
                  get
              ]
          ];
          for (var i$2 = 0, list$2 = stops; i$2 < list$2.length; i$2 += 1) {
              var stop$2 = list$2[i$2];

              appendStopPair(expression$2, stop$2[0], stop$2[1], true);
          }
          fixupDegenerateStepCurve(expression$2);
          return parameters.default === undefined ? expression$2 : [
              'case',
              [
                  '==',
                  [
                      'typeof',
                      get
                  ],
                  'number'
              ],
              expression$2,
              convertLiteral(parameters.default)
          ];
      } else if (type === 'exponential') {
          var base = parameters.base !== undefined ? parameters.base : 1;
          var expression$3 = [
              getInterpolateOperator(parameters),
              base === 1 ? ['linear'] : [
                  'exponential',
                  base
              ],
              [
                  'number',
                  get
              ]
          ];
          for (var i$3 = 0, list$3 = stops; i$3 < list$3.length; i$3 += 1) {
              var stop$3 = list$3[i$3];

              appendStopPair(expression$3, stop$3[0], stop$3[1], false);
          }
          return parameters.default === undefined ? expression$3 : [
              'case',
              [
                  '==',
                  [
                      'typeof',
                      get
                  ],
                  'number'
              ],
              expression$3,
              convertLiteral(parameters.default)
          ];
      } else {
          throw new Error(("Unknown property function type " + type));
      }
  }
  function convertZoomFunction(parameters, propertySpec, stops, input) {
      if ( input === void 0 ) input = ['zoom'];

      var type = getFunctionType(parameters, propertySpec);
      var expression;
      var isStep = false;
      if (type === 'interval') {
          expression = [
              'step',
              input
          ];
          isStep = true;
      } else if (type === 'exponential') {
          var base = parameters.base !== undefined ? parameters.base : 1;
          expression = [
              getInterpolateOperator(parameters),
              base === 1 ? ['linear'] : [
                  'exponential',
                  base
              ],
              input
          ];
      } else {
          throw new Error(("Unknown zoom function type \"" + type + "\""));
      }
      for (var i = 0, list = stops; i < list.length; i += 1) {
          var stop = list[i];

          appendStopPair(expression, stop[0], stop[1], isStep);
      }
      fixupDegenerateStepCurve(expression);
      return expression;
  }
  function fixupDegenerateStepCurve(expression) {
      // degenerate step curve (i.e. a constant function): add a noop stop
      if (expression[0] === 'step' && expression.length === 3) {
          expression.push(0);
          expression.push(expression[3]);
      }
  }
  function appendStopPair(curve, input, output, isStep) {
      // Skip duplicate stop values. They were not validated for functions, but they are for expressions.
      // https://github.com/mapbox/mapbox-gl-js/issues/4107
      if (curve.length > 3 && input === curve[curve.length - 2]) {
          return;
      }
      // step curves don't get the first input value, as it is redundant.
      if (!(isStep && curve.length === 2)) {
          curve.push(input);
      }
      curve.push(output);
  }
  function getFunctionType(parameters, propertySpec) {
      if (parameters.type) {
          return parameters.type;
      } else {
          return propertySpec.expression.interpolated ? 'exponential' : 'interval';
      }
  }
  // "String with {name} token" => ["concat", "String with ", ["get", "name"], " token"]
  function convertTokenString(s) {
      var result = ['concat'];
      var re = /{([^{}]+)}/g;
      var pos = 0;
      for (var match = re.exec(s); match !== null; match = re.exec(s)) {
          var literal = s.slice(pos, re.lastIndex - match[0].length);
          pos = re.lastIndex;
          if (literal.length > 0)
              { result.push(literal); }
          result.push([
              'get',
              match[1]
          ]);
      }
      if (result.length === 1) {
          return s;
      }
      if (pos < s.length) {
          result.push(s.slice(pos));
      } else if (result.length === 2) {
          return [
              'to-string',
              result[1]
          ];
      }
      return result;
  }

  //      
  var ParsingError = /*@__PURE__*/(function (Error) {
      function ParsingError(key, message) {
          Error.call(this, message);
          this.message = message;
          this.key = key;
      }

      if ( Error ) ParsingError.__proto__ = Error;
      ParsingError.prototype = Object.create( Error && Error.prototype );
      ParsingError.prototype.constructor = ParsingError;

      return ParsingError;
  }(Error));
  var ParsingError$1 = ParsingError;

  //      
  /**
   * Tracks `let` bindings during expression parsing.
   * @private
   */
  var Scope = function Scope(parent, bindings) {
      if ( bindings === void 0 ) bindings = [];

      this.parent = parent;
      this.bindings = {};
      for (var i = 0, list = bindings; i < list.length; i += 1) {
          var ref = list[i];
          var name = ref[0];
          var expression = ref[1];

          this.bindings[name] = expression;
      }
  };
  Scope.prototype.concat = function concat (bindings) {
      return new Scope(this, bindings);
  };
  Scope.prototype.get = function get (name) {
      if (this.bindings[name]) {
          return this.bindings[name];
      }
      if (this.parent) {
          return this.parent.get(name);
      }
      throw new Error((name + " not found in scope."));
  };
  Scope.prototype.has = function has (name) {
      if (this.bindings[name])
          { return true; }
      return this.parent ? this.parent.has(name) : false;
  };
  var Scope$1 = Scope;

  //      
  var NullType = { kind: 'null' };
  var NumberType = { kind: 'number' };
  var StringType = { kind: 'string' };
  var BooleanType = { kind: 'boolean' };
  var ColorType = { kind: 'color' };
  var ObjectType = { kind: 'object' };
  var ValueType = { kind: 'value' };
  var ErrorType = { kind: 'error' };
  var CollatorType = { kind: 'collator' };
  var FormattedType = { kind: 'formatted' };
  var ResolvedImageType = { kind: 'resolvedImage' };
  function array$1(itemType, N) {
      return {
          kind: 'array',
          itemType: itemType,
          N: N
      };
  }
  function toString$1$1(type) {
      if (type.kind === 'array') {
          var itemType = toString$1$1(type.itemType);
          return typeof type.N === 'number' ? ("array<" + itemType + ", " + (type.N) + ">") : type.itemType.kind === 'value' ? 'array' : ("array<" + itemType + ">");
      } else {
          return type.kind;
      }
  }
  var valueMemberTypes = [
      NullType,
      NumberType,
      StringType,
      BooleanType,
      ColorType,
      FormattedType,
      ObjectType,
      array$1(ValueType),
      ResolvedImageType
  ];
  /**
   * Returns null if `t` is a subtype of `expected`; otherwise returns an
   * error message.
   * @private
   */
  function checkSubtype(expected, t) {
      if (t.kind === 'error') {
          // Error is a subtype of every type
          return null;
      } else if (expected.kind === 'array') {
          if (t.kind === 'array' && (t.N === 0 && t.itemType.kind === 'value' || !checkSubtype(expected.itemType, t.itemType)) && (typeof expected.N !== 'number' || expected.N === t.N)) {
              return null;
          }
      } else if (expected.kind === t.kind) {
          return null;
      } else if (expected.kind === 'value') {
          for (var i = 0, list = valueMemberTypes; i < list.length; i += 1) {
              var memberType = list[i];

              if (!checkSubtype(memberType, t)) {
                  return null;
              }
          }
      }
      return ("Expected " + (toString$1$1(expected)) + " but found " + (toString$1$1(t)) + " instead.");
  }
  function isValidType(provided, allowedTypes) {
      return allowedTypes.some(function (t) { return t.kind === provided.kind; });
  }
  function isValidNativeType(provided, allowedTypes) {
      return allowedTypes.some(function (t) {
          if (t === 'null') {
              return provided === null;
          } else if (t === 'array') {
              return Array.isArray(provided);
          } else if (t === 'object') {
              return provided && !Array.isArray(provided) && typeof provided === 'object';
          } else {
              return t === typeof provided;
          }
      });
  }

  //      
  // Flow type declarations for Intl cribbed from
  // https://github.com/facebook/flow/issues/1270
  var Collator = function Collator(caseSensitive, diacriticSensitive, locale) {
      if (caseSensitive)
          { this.sensitivity = diacriticSensitive ? 'variant' : 'case'; }
      else
          { this.sensitivity = diacriticSensitive ? 'accent' : 'base'; }
      this.locale = locale;
      this.collator = new Intl.Collator(this.locale ? this.locale : [], {
          sensitivity: this.sensitivity,
          usage: 'search'
      });
  };
  Collator.prototype.compare = function compare (lhs, rhs) {
      return this.collator.compare(lhs, rhs);
  };
  Collator.prototype.resolvedLocale = function resolvedLocale () {
      // We create a Collator without "usage: search" because we don't want
      // the search options encoded in our result (e.g. "en-u-co-search")
      return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;
  };

  var Collator$1 = Collator;

  //      
  var FormattedSection = function FormattedSection(text, image, scale, fontStack, textColor) {
      // combine characters so that diacritic marks are not separate code points
      this.text = text.normalize ? text.normalize() : text;
      this.image = image;
      this.scale = scale;
      this.fontStack = fontStack;
      this.textColor = textColor;
  };
  var Formatted = function Formatted(sections) {
      this.sections = sections;
  };
  Formatted.fromString = function fromString (unformatted) {
      return new Formatted([new FormattedSection(unformatted, null, null, null, null)]);
  };
  Formatted.prototype.isEmpty = function isEmpty () {
      if (this.sections.length === 0)
          { return true; }
      return !this.sections.some(function (section) { return section.text.length !== 0 || section.image && section.image.name.length !== 0; });
  };
  Formatted.factory = function factory (text) {
      if (text instanceof Formatted) {
          return text;
      } else {
          return Formatted.fromString(text);
      }
  };
  Formatted.prototype.toString = function toString () {
      if (this.sections.length === 0)
          { return ''; }
      return this.sections.map(function (section) { return section.text; }).join('');
  };
  Formatted.prototype.serialize = function serialize () {
      var serialized = ['format'];
      for (var i = 0, list = this.sections; i < list.length; i += 1) {
          var section = list[i];

              if (section.image) {
              serialized.push([
                  'image',
                  section.image.name
              ]);
              continue;
          }
          serialized.push(section.text);
          var options = {};
          if (section.fontStack) {
              options['text-font'] = [
                  'literal',
                  section.fontStack.split(',')
              ];
          }
          if (section.scale) {
              options['font-scale'] = section.scale;
          }
          if (section.textColor) {
              options['text-color'] = ['rgba'].concat(section.textColor.toArray());
          }
          serialized.push(options);
      }
      return serialized;
  };

  var Formatted$1 = Formatted;

  //      
  var ResolvedImage = function ResolvedImage(options) {
      this.name = options.name;
      this.available = options.available;
  };
  ResolvedImage.prototype.toString = function toString () {
      return this.name;
  };
  ResolvedImage.fromString = function fromString (name) {
      if (!name)
          { return null; }
      // treat empty values as no image
      return new ResolvedImage({
          name: name,
          available: false
      });
  };
  ResolvedImage.prototype.serialize = function serialize () {
      return [
          'image',
          this.name
      ];
  };

  var ResolvedImage$1 = ResolvedImage;

  function validateRGBA(r, g, b, a) {
      if (!(typeof r === 'number' && r >= 0 && r <= 255 && typeof g === 'number' && g >= 0 && g <= 255 && typeof b === 'number' && b >= 0 && b <= 255)) {
          var value = typeof a === 'number' ? [
              r,
              g,
              b,
              a
          ] : [
              r,
              g,
              b
          ];
          return ("Invalid rgba value [" + (value.join(', ')) + "]: 'r', 'g', and 'b' must be between 0 and 255.");
      }
      if (!(typeof a === 'undefined' || typeof a === 'number' && a >= 0 && a <= 1)) {
          return ("Invalid rgba value [" + ([
              r,
              g,
              b,
              a
          ].join(', ')) + "]: 'a' must be between 0 and 1.");
      }
      return null;
  }
  function isValue(mixed) {
      if (mixed === null) {
          return true;
      } else if (typeof mixed === 'string') {
          return true;
      } else if (typeof mixed === 'boolean') {
          return true;
      } else if (typeof mixed === 'number') {
          return true;
      } else if (mixed instanceof Color$1) {
          return true;
      } else if (mixed instanceof Collator$1) {
          return true;
      } else if (mixed instanceof Formatted$1) {
          return true;
      } else if (mixed instanceof ResolvedImage$1) {
          return true;
      } else if (Array.isArray(mixed)) {
          for (var i = 0, list = mixed; i < list.length; i += 1) {
              var item = list[i];

              if (!isValue(item)) {
                  return false;
              }
          }
          return true;
      } else if (typeof mixed === 'object') {
          for (var key in mixed) {
              if (!isValue(mixed[key])) {
                  return false;
              }
          }
          return true;
      } else {
          return false;
      }
  }
  function typeOf(value) {
      if (value === null) {
          return NullType;
      } else if (typeof value === 'string') {
          return StringType;
      } else if (typeof value === 'boolean') {
          return BooleanType;
      } else if (typeof value === 'number') {
          return NumberType;
      } else if (value instanceof Color$1) {
          return ColorType;
      } else if (value instanceof Collator$1) {
          return CollatorType;
      } else if (value instanceof Formatted$1) {
          return FormattedType;
      } else if (value instanceof ResolvedImage$1) {
          return ResolvedImageType;
      } else if (Array.isArray(value)) {
          var length = value.length;
          var itemType;
          for (var i = 0, list = value; i < list.length; i += 1) {
              var item = list[i];

              var t = typeOf(item);
              if (!itemType) {
                  itemType = t;
              } else if (itemType === t) {
                  continue;
              } else {
                  itemType = ValueType;
                  break;
              }
          }
          return array$1(itemType || ValueType, length);
      } else {
          return ObjectType;
      }
  }
  function toString$2(value) {
      var type = typeof value;
      if (value === null) {
          return '';
      } else if (type === 'string' || type === 'number' || type === 'boolean') {
          return String(value);
      } else if (value instanceof Color$1 || value instanceof Formatted$1 || value instanceof ResolvedImage$1) {
          return value.toString();
      } else {
          return JSON.stringify(value);
      }
  }

  var Literal = function Literal(type, value) {
      this.type = type;
      this.value = value;
  };
  Literal.parse = function parse (args, context) {
      if (args.length !== 2)
          { return context.error(("'literal' expression requires exactly one argument, but found " + (args.length - 1) + " instead.")); }
      if (!isValue(args[1]))
          { return context.error("invalid value"); }
      var value = args[1];
      var type = typeOf(value);
      // special case: infer the item type if possible for zero-length arrays
      var expected = context.expectedType;
      if (type.kind === 'array' && type.N === 0 && expected && expected.kind === 'array' && (typeof expected.N !== 'number' || expected.N === 0)) {
          type = expected;
      }
      return new Literal(type, value);
  };
  Literal.prototype.evaluate = function evaluate () {
      return this.value;
  };
  Literal.prototype.eachChild = function eachChild () {
  };
  Literal.prototype.outputDefined = function outputDefined () {
      return true;
  };
  Literal.prototype.serialize = function serialize () {
      if (this.type.kind === 'array' || this.type.kind === 'object') {
          return [
              'literal',
              this.value
          ];
      } else if (this.value instanceof Color$1) {
          // Constant-folding can generate Literal expressions that you
          // couldn't actually generate with a "literal" expression,
          // so we have to implement an equivalent serialization here
          return ['rgba'].concat(this.value.toArray());
      } else if (this.value instanceof Formatted$1) {
          // Same as Color
          return this.value.serialize();
      } else {
          return this.value;
      }
  };
  var Literal$1 = Literal;

  //      
  var RuntimeError = function RuntimeError(message) {
      this.name = 'ExpressionEvaluationError';
      this.message = message;
  };
  RuntimeError.prototype.toJSON = function toJSON () {
      return this.message;
  };
  var RuntimeError$1 = RuntimeError;

  var types$2 = {
      string: StringType,
      number: NumberType,
      boolean: BooleanType,
      object: ObjectType
  };
  var Assertion = function Assertion(type, args) {
      this.type = type;
      this.args = args;
  };
  Assertion.parse = function parse (args, context) {
      if (args.length < 2)
          { return context.error("Expected at least one argument."); }
      var i = 1;
      var type;
      var name = args[0];
      if (name === 'array') {
          var itemType;
          if (args.length > 2) {
              var type$1 = args[1];
              if (typeof type$1 !== 'string' || !(type$1 in types$2) || type$1 === 'object')
                  { return context.error('The item type argument of "array" must be one of string, number, boolean', 1); }
              itemType = types$2[type$1];
              i++;
          } else {
              itemType = ValueType;
          }
          var N;
          if (args.length > 3) {
              if (args[2] !== null && (typeof args[2] !== 'number' || args[2] < 0 || args[2] !== Math.floor(args[2]))) {
                  return context.error('The length argument to "array" must be a positive integer literal', 2);
              }
              N = args[2];
              i++;
          }
          type = array$1(itemType, N);
      } else {
          type = types$2[name];
      }
      var parsed = [];
      for (; i < args.length; i++) {
          var input = context.parse(args[i], i, ValueType);
          if (!input)
              { return null; }
          parsed.push(input);
      }
      return new Assertion(type, parsed);
  };
  Assertion.prototype.evaluate = function evaluate (ctx) {
      for (var i = 0; i < this.args.length; i++) {
          var value = this.args[i].evaluate(ctx);
          var error = checkSubtype(this.type, typeOf(value));
          if (!error) {
              return value;
          } else if (i === this.args.length - 1) {
              throw new RuntimeError$1(("Expected value to be of type " + (toString$1$1(this.type)) + ", but found " + (toString$1$1(typeOf(value))) + " instead."));
          }
      }
      return null;
  };
  Assertion.prototype.eachChild = function eachChild (fn) {
      this.args.forEach(fn);
  };
  Assertion.prototype.outputDefined = function outputDefined () {
      return this.args.every(function (arg) { return arg.outputDefined(); });
  };
  Assertion.prototype.serialize = function serialize () {
      var type = this.type;
      var serialized = [type.kind];
      if (type.kind === 'array') {
          var itemType = type.itemType;
          if (itemType.kind === 'string' || itemType.kind === 'number' || itemType.kind === 'boolean') {
              serialized.push(itemType.kind);
              var N = type.N;
              if (typeof N === 'number' || this.args.length > 1) {
                  serialized.push(N);
              }
          }
      }
      return serialized.concat(this.args.map(function (arg) { return arg.serialize(); }));
  };
  var Assertion$1 = Assertion;

  //      
  var FormatExpression = function FormatExpression(sections) {
      this.type = FormattedType;
      this.sections = sections;
  };
  FormatExpression.parse = function parse (args, context) {
      if (args.length < 2) {
          return context.error("Expected at least one argument.");
      }
      var firstArg = args[1];
      if (!Array.isArray(firstArg) && typeof firstArg === 'object') {
          return context.error("First argument must be an image or text section.");
      }
      var sections = [];
      var nextTokenMayBeObject = false;
      for (var i = 1; i <= args.length - 1; ++i) {
          var arg = args[i];
          if (nextTokenMayBeObject && typeof arg === 'object' && !Array.isArray(arg)) {
              nextTokenMayBeObject = false;
              var scale = null;
              if (arg['font-scale']) {
                  scale = context.parse(arg['font-scale'], 1, NumberType);
                  if (!scale)
                      { return null; }
              }
              var font = null;
              if (arg['text-font']) {
                  font = context.parse(arg['text-font'], 1, array$1(StringType));
                  if (!font)
                      { return null; }
              }
              var textColor = null;
              if (arg['text-color']) {
                  textColor = context.parse(arg['text-color'], 1, ColorType);
                  if (!textColor)
                      { return null; }
              }
              var lastExpression = sections[sections.length - 1];
              lastExpression.scale = scale;
              lastExpression.font = font;
              lastExpression.textColor = textColor;
          } else {
              var content = context.parse(args[i], 1, ValueType);
              if (!content)
                  { return null; }
              var kind = content.type.kind;
              if (kind !== 'string' && kind !== 'value' && kind !== 'null' && kind !== 'resolvedImage')
                  { return context.error("Formatted text type must be 'string', 'value', 'image' or 'null'."); }
              nextTokenMayBeObject = true;
              sections.push({
                  content: content,
                  scale: null,
                  font: null,
                  textColor: null
              });
          }
      }
      return new FormatExpression(sections);
  };
  FormatExpression.prototype.evaluate = function evaluate (ctx) {
      var evaluateSection = function (section) {
          var evaluatedContent = section.content.evaluate(ctx);
          if (typeOf(evaluatedContent) === ResolvedImageType) {
              return new FormattedSection('', evaluatedContent, null, null, null);
          }
          return new FormattedSection(toString$2(evaluatedContent), null, section.scale ? section.scale.evaluate(ctx) : null, section.font ? section.font.evaluate(ctx).join(',') : null, section.textColor ? section.textColor.evaluate(ctx) : null);
      };
      return new Formatted$1(this.sections.map(evaluateSection));
  };
  FormatExpression.prototype.eachChild = function eachChild (fn) {
      for (var i = 0, list = this.sections; i < list.length; i += 1) {
          var section = list[i];

              fn(section.content);
          if (section.scale) {
              fn(section.scale);
          }
          if (section.font) {
              fn(section.font);
          }
          if (section.textColor) {
              fn(section.textColor);
          }
      }
  };
  FormatExpression.prototype.outputDefined = function outputDefined () {
      // Technically the combinatoric set of all children
      // Usually, this.text will be undefined anyway
      return false;
  };
  FormatExpression.prototype.serialize = function serialize () {
      var serialized = ['format'];
      for (var i = 0, list = this.sections; i < list.length; i += 1) {
          var section = list[i];

              serialized.push(section.content.serialize());
          var options = {};
          if (section.scale) {
              options['font-scale'] = section.scale.serialize();
          }
          if (section.font) {
              options['text-font'] = section.font.serialize();
          }
          if (section.textColor) {
              options['text-color'] = section.textColor.serialize();
          }
          serialized.push(options);
      }
      return serialized;
  };

  var FormatExpression$1 = FormatExpression;

  //      
  var ImageExpression = function ImageExpression(input) {
      this.type = ResolvedImageType;
      this.input = input;
  };
  ImageExpression.parse = function parse (args, context) {
      if (args.length !== 2) {
          return context.error("Expected two arguments.");
      }
      var name = context.parse(args[1], 1, StringType);
      if (!name)
          { return context.error("No image name provided."); }
      return new ImageExpression(name);
  };
  ImageExpression.prototype.evaluate = function evaluate (ctx) {
      var evaluatedImageName = this.input.evaluate(ctx);
      var value = ResolvedImage$1.fromString(evaluatedImageName);
      if (value && ctx.availableImages)
          { value.available = ctx.availableImages.indexOf(evaluatedImageName) > -1; }
      return value;
  };
  ImageExpression.prototype.eachChild = function eachChild (fn) {
      fn(this.input);
  };
  ImageExpression.prototype.outputDefined = function outputDefined () {
      // The output of image is determined by the list of available images in the evaluation context
      return false;
  };
  ImageExpression.prototype.serialize = function serialize () {
      return [
          'image',
          this.input.serialize()
      ];
  };

  var ImageExpression$1 = ImageExpression;

  var types$1 = {
      'to-boolean': BooleanType,
      'to-color': ColorType,
      'to-number': NumberType,
      'to-string': StringType
  };
  /**
   * Special form for error-coalescing coercion expressions "to-number",
   * "to-color".  Since these coercions can fail at runtime, they accept multiple
   * arguments, only evaluating one at a time until one succeeds.
   *
   * @private
   */
  var Coercion = function Coercion(type, args) {
      this.type = type;
      this.args = args;
  };
  Coercion.parse = function parse (args, context) {
      if (args.length < 2)
          { return context.error("Expected at least one argument."); }
      var name = args[0];
      if ((name === 'to-boolean' || name === 'to-string') && args.length !== 2)
          { return context.error("Expected one argument."); }
      var type = types$1[name];
      var parsed = [];
      for (var i = 1; i < args.length; i++) {
          var input = context.parse(args[i], i, ValueType);
          if (!input)
              { return null; }
          parsed.push(input);
      }
      return new Coercion(type, parsed);
  };
  Coercion.prototype.evaluate = function evaluate (ctx) {
      if (this.type.kind === 'boolean') {
          return Boolean(this.args[0].evaluate(ctx));
      } else if (this.type.kind === 'color') {
          var input;
          var error;
          for (var i = 0, list = this.args; i < list.length; i += 1) {
              var arg = list[i];

                  input = arg.evaluate(ctx);
              error = null;
              if (input instanceof Color$1) {
                  return input;
              } else if (typeof input === 'string') {
                  var c = ctx.parseColor(input);
                  if (c)
                      { return c; }
              } else if (Array.isArray(input)) {
                  if (input.length < 3 || input.length > 4) {
                      error = "Invalid rbga value " + (JSON.stringify(input)) + ": expected an array containing either three or four numeric values.";
                  } else {
                      error = validateRGBA(input[0], input[1], input[2], input[3]);
                  }
                  if (!error) {
                      return new Color$1(input[0] / 255, input[1] / 255, input[2] / 255, input[3]);
                  }
              }
          }
          throw new RuntimeError$1(error || ("Could not parse color from value '" + (typeof input === 'string' ? input : String(JSON.stringify(input))) + "'"));
      } else if (this.type.kind === 'number') {
          var value = null;
          for (var i$1 = 0, list$1 = this.args; i$1 < list$1.length; i$1 += 1) {
              var arg$1 = list$1[i$1];

                  value = arg$1.evaluate(ctx);
              if (value === null)
                  { return 0; }
              var num = Number(value);
              if (isNaN(num))
                  { continue; }
              return num;
          }
          throw new RuntimeError$1(("Could not convert " + (JSON.stringify(value)) + " to number."));
      } else if (this.type.kind === 'formatted') {
          // There is no explicit 'to-formatted' but this coercion can be implicitly
          // created by properties that expect the 'formatted' type.
          return Formatted$1.fromString(toString$2(this.args[0].evaluate(ctx)));
      } else if (this.type.kind === 'resolvedImage') {
          return ResolvedImage$1.fromString(toString$2(this.args[0].evaluate(ctx)));
      } else {
          return toString$2(this.args[0].evaluate(ctx));
      }
  };
  Coercion.prototype.eachChild = function eachChild (fn) {
      this.args.forEach(fn);
  };
  Coercion.prototype.outputDefined = function outputDefined () {
      return this.args.every(function (arg) { return arg.outputDefined(); });
  };
  Coercion.prototype.serialize = function serialize () {
      if (this.type.kind === 'formatted') {
          return new FormatExpression$1([{
                  content: this.args[0],
                  scale: null,
                  font: null,
                  textColor: null
              }]).serialize();
      }
      if (this.type.kind === 'resolvedImage') {
          return new ImageExpression$1(this.args[0]).serialize();
      }
      var serialized = [("to-" + (this.type.kind))];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };
  var Coercion$1 = Coercion;

  //      
  var geometryTypes = [
      'Unknown',
      'Point',
      'LineString',
      'Polygon'
  ];
  var EvaluationContext = function EvaluationContext() {
      this.globals = null;
      this.feature = null;
      this.featureState = null;
      this.formattedSection = null;
      this._parseColorCache = {};
      this.availableImages = null;
      this.canonical = null;
      this.featureTileCoord = null;
      this.featureDistanceData = null;
  };
  EvaluationContext.prototype.id = function id () {
      return this.feature && this.feature.id !== undefined ? this.feature.id : null;
  };
  EvaluationContext.prototype.geometryType = function geometryType () {
      return this.feature ? typeof this.feature.type === 'number' ? geometryTypes[this.feature.type] : this.feature.type : null;
  };
  EvaluationContext.prototype.geometry = function geometry () {
      return this.feature && 'geometry' in this.feature ? this.feature.geometry : null;
  };
  EvaluationContext.prototype.canonicalID = function canonicalID () {
      return this.canonical;
  };
  EvaluationContext.prototype.properties = function properties () {
      return this.feature && this.feature.properties || {};
  };
  EvaluationContext.prototype.distanceFromCenter = function distanceFromCenter () {
      if (this.featureTileCoord && this.featureDistanceData) {
          var c = this.featureDistanceData.center;
          var scale = this.featureDistanceData.scale;
          var ref = this.featureTileCoord;
              var x = ref.x;
              var y = ref.y;
          // Calculate the distance vector `d` (left handed)
          var dX = x * scale - c[0];
          var dY = y * scale - c[1];
          // The bearing vector `b` (left handed)
          var bX = this.featureDistanceData.bearing[0];
          var bY = this.featureDistanceData.bearing[1];
          // Distance is calculated as `dot(d, v)`
          var dist = bX * dX + bY * dY;
          return dist;
      }
      return 0;
  };
  EvaluationContext.prototype.parseColor = function parseColor (input) {
      var cached = this._parseColorCache[input];
      if (!cached) {
          cached = this._parseColorCache[input] = Color$1.parse(input);
      }
      return cached;
  };
  var EvaluationContext$1 = EvaluationContext;

  //      
  var CompoundExpression = function CompoundExpression(name, type, evaluate, args) {
      this.name = name;
      this.type = type;
      this._evaluate = evaluate;
      this.args = args;
  };
  CompoundExpression.prototype.evaluate = function evaluate (ctx) {
      return this._evaluate(ctx, this.args);
  };
  CompoundExpression.prototype.eachChild = function eachChild (fn) {
      this.args.forEach(fn);
  };
  CompoundExpression.prototype.outputDefined = function outputDefined () {
      return false;
  };
  CompoundExpression.prototype.serialize = function serialize () {
      return [this.name].concat(this.args.map(function (arg) { return arg.serialize(); }));
  };
  CompoundExpression.parse = function parse (args, context) {
          var ref$1;

      var op = args[0];
      var definition = CompoundExpression.definitions[op];
      if (!definition) {
          return context.error(("Unknown expression \"" + op + "\". If you wanted a literal array, use [\"literal\", [...]]."), 0);
      }
      // Now check argument types against each signature
      var type = Array.isArray(definition) ? definition[0] : definition.type;
      var availableOverloads = Array.isArray(definition) ? [[
              definition[1],
              definition[2]
          ]] : definition.overloads;
      var overloads = availableOverloads.filter(function (ref) {
              var signature = ref[0];

              return !Array.isArray(signature) || // varags
      signature.length === args.length - 1;
          }// correct param count
  );
      var signatureContext = null;
      for (var i$3 = 0, list = overloads; i$3 < list.length; i$3 += 1) {
          // Use a fresh context for each attempted signature so that, if
          // we eventually succeed, we haven't polluted `context.errors`.
          var ref = list[i$3];
              var params = ref[0];
              var evaluate = ref[1];

              signatureContext = new ParsingContext$1(context.registry, context.path, null, context.scope);
          // First parse all the args, potentially coercing to the
          // types expected by this overload.
          var parsedArgs = [];
          var argParseFailed = false;
          for (var i = 1; i < args.length; i++) {
              var arg = args[i];
              var expectedType = Array.isArray(params) ? params[i - 1] : params.type;
              var parsed = signatureContext.parse(arg, 1 + parsedArgs.length, expectedType);
              if (!parsed) {
                  argParseFailed = true;
                  break;
              }
              parsedArgs.push(parsed);
          }
          if (argParseFailed) {
              // Couldn't coerce args of this overload to expected type, move
              // on to next one.
              continue;
          }
          if (Array.isArray(params)) {
              if (params.length !== parsedArgs.length) {
                  signatureContext.error(("Expected " + (params.length) + " arguments, but found " + (parsedArgs.length) + " instead."));
                  continue;
              }
          }
          for (var i$1 = 0; i$1 < parsedArgs.length; i$1++) {
              var expected = Array.isArray(params) ? params[i$1] : params.type;
              var arg$1 = parsedArgs[i$1];
              signatureContext.concat(i$1 + 1).checkSubtype(expected, arg$1.type);
          }
          if (signatureContext.errors.length === 0) {
              return new CompoundExpression(op, type, evaluate, parsedArgs);
          }
      }
      if (overloads.length === 1) {
          (ref$1 = context.errors).push.apply(ref$1, signatureContext.errors);
      } else {
          var expected$1 = overloads.length ? overloads : availableOverloads;
          var signatures = expected$1.map(function (ref) {
                  var params = ref[0];

                  return stringifySignature(params);
              }).join(' | ');
          var actualTypes = [];
          // For error message, re-parse arguments without trying to
          // apply any coercions
          for (var i$2 = 1; i$2 < args.length; i$2++) {
              var parsed$1 = context.parse(args[i$2], 1 + actualTypes.length);
              if (!parsed$1)
                  { return null; }
              actualTypes.push(toString$1$1(parsed$1.type));
          }
          context.error(("Expected arguments of type " + signatures + ", but found (" + (actualTypes.join(', ')) + ") instead."));
      }
      return null;
  };
  CompoundExpression.register = function register (registry, definitions) {
      CompoundExpression.definitions = definitions;
      for (var name in definitions) {
          registry[name] = CompoundExpression;
      }
  };
  function stringifySignature(signature) {
      if (Array.isArray(signature)) {
          return ("(" + (signature.map(toString$1$1).join(', ')) + ")");
      } else {
          return ("(" + (toString$1$1(signature.type)) + "...)");
      }
  }
  var CompoundExpression$1 = CompoundExpression;

  //      
  var CollatorExpression = function CollatorExpression(caseSensitive, diacriticSensitive, locale) {
      this.type = CollatorType;
      this.locale = locale;
      this.caseSensitive = caseSensitive;
      this.diacriticSensitive = diacriticSensitive;
  };
  CollatorExpression.parse = function parse (args, context) {
      if (args.length !== 2)
          { return context.error("Expected one argument."); }
      var options = args[1];
      if (typeof options !== 'object' || Array.isArray(options))
          { return context.error("Collator options argument must be an object."); }
      var caseSensitive = context.parse(options['case-sensitive'] === undefined ? false : options['case-sensitive'], 1, BooleanType);
      if (!caseSensitive)
          { return null; }
      var diacriticSensitive = context.parse(options['diacritic-sensitive'] === undefined ? false : options['diacritic-sensitive'], 1, BooleanType);
      if (!diacriticSensitive)
          { return null; }
      var locale = null;
      if (options['locale']) {
          locale = context.parse(options['locale'], 1, StringType);
          if (!locale)
              { return null; }
      }
      return new CollatorExpression(caseSensitive, diacriticSensitive, locale);
  };
  CollatorExpression.prototype.evaluate = function evaluate (ctx) {
      return new Collator$1(this.caseSensitive.evaluate(ctx), this.diacriticSensitive.evaluate(ctx), this.locale ? this.locale.evaluate(ctx) : null);
  };
  CollatorExpression.prototype.eachChild = function eachChild (fn) {
      fn(this.caseSensitive);
      fn(this.diacriticSensitive);
      if (this.locale) {
          fn(this.locale);
      }
  };
  CollatorExpression.prototype.outputDefined = function outputDefined () {
      // Technically the set of possible outputs is the combinatoric set of Collators produced
      // by all possible outputs of locale/caseSensitive/diacriticSensitive
      // But for the primary use of Collators in comparison operators, we ignore the Collator's
      // possible outputs anyway, so we can get away with leaving this false for now.
      return false;
  };
  CollatorExpression.prototype.serialize = function serialize () {
      var options = {};
      options['case-sensitive'] = this.caseSensitive.serialize();
      options['diacritic-sensitive'] = this.diacriticSensitive.serialize();
      if (this.locale) {
          options['locale'] = this.locale.serialize();
      }
      return [
          'collator',
          options
      ];
  };

  var CollatorExpression$1 = CollatorExpression;

  //      
  // minX, minY, maxX, maxY
  var EXTENT = 8192;
  function updateBBox(bbox, coord) {
      bbox[0] = Math.min(bbox[0], coord[0]);
      bbox[1] = Math.min(bbox[1], coord[1]);
      bbox[2] = Math.max(bbox[2], coord[0]);
      bbox[3] = Math.max(bbox[3], coord[1]);
  }
  function mercatorXfromLng(lng) {
      return (180 + lng) / 360;
  }
  function mercatorYfromLat(lat) {
      return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;
  }
  function boxWithinBox(bbox1, bbox2) {
      if (bbox1[0] <= bbox2[0])
          { return false; }
      if (bbox1[2] >= bbox2[2])
          { return false; }
      if (bbox1[1] <= bbox2[1])
          { return false; }
      if (bbox1[3] >= bbox2[3])
          { return false; }
      return true;
  }
  function getTileCoordinates(p, canonical) {
      var x = mercatorXfromLng(p[0]);
      var y = mercatorYfromLat(p[1]);
      var tilesAtZoom = Math.pow(2, canonical.z);
      return [
          Math.round(x * tilesAtZoom * EXTENT),
          Math.round(y * tilesAtZoom * EXTENT)
      ];
  }
  function onBoundary(p, p1, p2) {
      var x1 = p[0] - p1[0];
      var y1 = p[1] - p1[1];
      var x2 = p[0] - p2[0];
      var y2 = p[1] - p2[1];
      return x1 * y2 - x2 * y1 === 0 && x1 * x2 <= 0 && y1 * y2 <= 0;
  }
  function rayIntersect(p, p1, p2) {
      return p1[1] > p[1] !== p2[1] > p[1] && p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0];
  }
  // ray casting algorithm for detecting if point is in polygon
  function pointWithinPolygon(point, rings) {
      var inside = false;
      for (var i = 0, len = rings.length; i < len; i++) {
          var ring = rings[i];
          for (var j = 0, len2 = ring.length; j < len2 - 1; j++) {
              if (onBoundary(point, ring[j], ring[j + 1]))
                  { return false; }
              if (rayIntersect(point, ring[j], ring[j + 1]))
                  { inside = !inside; }
          }
      }
      return inside;
  }
  function pointWithinPolygons(point, polygons) {
      for (var i = 0; i < polygons.length; i++) {
          if (pointWithinPolygon(point, polygons[i]))
              { return true; }
      }
      return false;
  }
  function perp(v1, v2) {
      return v1[0] * v2[1] - v1[1] * v2[0];
  }
  // check if p1 and p2 are in different sides of line segment q1->q2
  function twoSided(p1, p2, q1, q2) {
      // q1->p1 (x1, y1), q1->p2 (x2, y2), q1->q2 (x3, y3)
      var x1 = p1[0] - q1[0];
      var y1 = p1[1] - q1[1];
      var x2 = p2[0] - q1[0];
      var y2 = p2[1] - q1[1];
      var x3 = q2[0] - q1[0];
      var y3 = q2[1] - q1[1];
      var det1 = x1 * y3 - x3 * y1;
      var det2 = x2 * y3 - x3 * y2;
      if (det1 > 0 && det2 < 0 || det1 < 0 && det2 > 0)
          { return true; }
      return false;
  }
  // a, b are end points for line segment1, c and d are end points for line segment2
  function lineIntersectLine(a, b, c, d) {
      // check if two segments are parallel or not
      // precondition is end point a, b is inside polygon, if line a->b is
      // parallel to polygon edge c->d, then a->b won't intersect with c->d
      var vectorP = [
          b[0] - a[0],
          b[1] - a[1]
      ];
      var vectorQ = [
          d[0] - c[0],
          d[1] - c[1]
      ];
      if (perp(vectorQ, vectorP) === 0)
          { return false; }
      // If lines are intersecting with each other, the relative location should be:
      // a and b lie in different sides of segment c->d
      // c and d lie in different sides of segment a->b
      if (twoSided(a, b, c, d) && twoSided(c, d, a, b))
          { return true; }
      return false;
  }
  function lineIntersectPolygon(p1, p2, polygon) {
      for (var i = 0, list = polygon; i < list.length; i += 1) {
          // loop through every edge of the ring
          var ring = list[i];

          for (var j = 0; j < ring.length - 1; ++j) {
              if (lineIntersectLine(p1, p2, ring[j], ring[j + 1])) {
                  return true;
              }
          }
      }
      return false;
  }
  function lineStringWithinPolygon(line, polygon) {
      // First, check if geometry points of line segments are all inside polygon
      for (var i = 0; i < line.length; ++i) {
          if (!pointWithinPolygon(line[i], polygon)) {
              return false;
          }
      }
      // Second, check if there is line segment intersecting polygon edge
      for (var i$1 = 0; i$1 < line.length - 1; ++i$1) {
          if (lineIntersectPolygon(line[i$1], line[i$1 + 1], polygon)) {
              return false;
          }
      }
      return true;
  }
  function lineStringWithinPolygons(line, polygons) {
      for (var i = 0; i < polygons.length; i++) {
          if (lineStringWithinPolygon(line, polygons[i]))
              { return true; }
      }
      return false;
  }
  function getTilePolygon(coordinates, bbox, canonical) {
      var polygon = [];
      for (var i = 0; i < coordinates.length; i++) {
          var ring = [];
          for (var j = 0; j < coordinates[i].length; j++) {
              var coord = getTileCoordinates(coordinates[i][j], canonical);
              updateBBox(bbox, coord);
              ring.push(coord);
          }
          polygon.push(ring);
      }
      return polygon;
  }
  function getTilePolygons(coordinates, bbox, canonical) {
      var polygons = [];
      for (var i = 0; i < coordinates.length; i++) {
          var polygon = getTilePolygon(coordinates[i], bbox, canonical);
          polygons.push(polygon);
      }
      return polygons;
  }
  function updatePoint(p, bbox, polyBBox, worldSize) {
      if (p[0] < polyBBox[0] || p[0] > polyBBox[2]) {
          var halfWorldSize = worldSize * 0.5;
          var shift = p[0] - polyBBox[0] > halfWorldSize ? -worldSize : polyBBox[0] - p[0] > halfWorldSize ? worldSize : 0;
          if (shift === 0) {
              shift = p[0] - polyBBox[2] > halfWorldSize ? -worldSize : polyBBox[2] - p[0] > halfWorldSize ? worldSize : 0;
          }
          p[0] += shift;
      }
      updateBBox(bbox, p);
  }
  function resetBBox(bbox) {
      bbox[0] = bbox[1] = Infinity;
      bbox[2] = bbox[3] = -Infinity;
  }
  function getTilePoints(geometry, pointBBox, polyBBox, canonical) {
      var worldSize = Math.pow(2, canonical.z) * EXTENT;
      var shifts = [
          canonical.x * EXTENT,
          canonical.y * EXTENT
      ];
      var tilePoints = [];
      if (!geometry)
          { return tilePoints; }
      for (var i$1 = 0, list$1 = geometry; i$1 < list$1.length; i$1 += 1) {
          var points = list$1[i$1];

          for (var i = 0, list = points; i < list.length; i += 1) {
              var point = list[i];

              var p = [
                  point.x + shifts[0],
                  point.y + shifts[1]
              ];
              updatePoint(p, pointBBox, polyBBox, worldSize);
              tilePoints.push(p);
          }
      }
      return tilePoints;
  }
  function getTileLines(geometry, lineBBox, polyBBox, canonical) {
      var worldSize = Math.pow(2, canonical.z) * EXTENT;
      var shifts = [
          canonical.x * EXTENT,
          canonical.y * EXTENT
      ];
      var tileLines = [];
      if (!geometry)
          { return tileLines; }
      for (var i$1 = 0, list$1 = geometry; i$1 < list$1.length; i$1 += 1) {
          var line = list$1[i$1];

          var tileLine = [];
          for (var i = 0, list = line; i < list.length; i += 1) {
              var point = list[i];

              var p = [
                  point.x + shifts[0],
                  point.y + shifts[1]
              ];
              updateBBox(lineBBox, p);
              tileLine.push(p);
          }
          tileLines.push(tileLine);
      }
      if (lineBBox[2] - lineBBox[0] <= worldSize / 2) {
          resetBBox(lineBBox);
          for (var i$3 = 0, list$3 = tileLines; i$3 < list$3.length; i$3 += 1) {
              var line$1 = list$3[i$3];

              for (var i$2 = 0, list$2 = line$1; i$2 < list$2.length; i$2 += 1) {
                  var p$1 = list$2[i$2];

                  updatePoint(p$1, lineBBox, polyBBox, worldSize);
              }
          }
      }
      return tileLines;
  }
  function pointsWithinPolygons(ctx, polygonGeometry) {
      var pointBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var polyBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var canonical = ctx.canonicalID();
      if (!canonical) {
          return false;
      }
      if (polygonGeometry.type === 'Polygon') {
          var tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);
          var tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);
          if (!boxWithinBox(pointBBox, polyBBox))
              { return false; }
          for (var i = 0, list = tilePoints; i < list.length; i += 1) {
              var point = list[i];

              if (!pointWithinPolygon(point, tilePolygon))
                  { return false; }
          }
      }
      if (polygonGeometry.type === 'MultiPolygon') {
          var tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);
          var tilePoints$1 = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);
          if (!boxWithinBox(pointBBox, polyBBox))
              { return false; }
          for (var i$1 = 0, list$1 = tilePoints$1; i$1 < list$1.length; i$1 += 1) {
              var point$1 = list$1[i$1];

              if (!pointWithinPolygons(point$1, tilePolygons))
                  { return false; }
          }
      }
      return true;
  }
  function linesWithinPolygons(ctx, polygonGeometry) {
      var lineBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var polyBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var canonical = ctx.canonicalID();
      if (!canonical) {
          return false;
      }
      if (polygonGeometry.type === 'Polygon') {
          var tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);
          var tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);
          if (!boxWithinBox(lineBBox, polyBBox))
              { return false; }
          for (var i = 0, list = tileLines; i < list.length; i += 1) {
              var line = list[i];

              if (!lineStringWithinPolygon(line, tilePolygon))
                  { return false; }
          }
      }
      if (polygonGeometry.type === 'MultiPolygon') {
          var tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);
          var tileLines$1 = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);
          if (!boxWithinBox(lineBBox, polyBBox))
              { return false; }
          for (var i$1 = 0, list$1 = tileLines$1; i$1 < list$1.length; i$1 += 1) {
              var line$1 = list$1[i$1];

              if (!lineStringWithinPolygons(line$1, tilePolygons))
                  { return false; }
          }
      }
      return true;
  }
  var Within = function Within(geojson, geometries) {
      this.type = BooleanType;
      this.geojson = geojson;
      this.geometries = geometries;
  };
  Within.parse = function parse (args, context) {
      if (args.length !== 2)
          { return context.error(("'within' expression requires exactly one argument, but found " + (args.length - 1) + " instead.")); }
      if (isValue(args[1])) {
          var geojson = args[1];
          if (geojson.type === 'FeatureCollection') {
              for (var i = 0; i < geojson.features.length; ++i) {
                  var type = geojson.features[i].geometry.type;
                  if (type === 'Polygon' || type === 'MultiPolygon') {
                      return new Within(geojson, geojson.features[i].geometry);
                  }
              }
          } else if (geojson.type === 'Feature') {
              var type$1 = geojson.geometry.type;
              if (type$1 === 'Polygon' || type$1 === 'MultiPolygon') {
                  return new Within(geojson, geojson.geometry);
              }
          } else if (geojson.type === 'Polygon' || geojson.type === 'MultiPolygon') {
              return new Within(geojson, geojson);
          }
      }
      return context.error("'within' expression requires valid geojson object that contains polygon geometry type.");
  };
  Within.prototype.evaluate = function evaluate (ctx) {
      if (ctx.geometry() != null && ctx.canonicalID() != null) {
          if (ctx.geometryType() === 'Point') {
              return pointsWithinPolygons(ctx, this.geometries);
          } else if (ctx.geometryType() === 'LineString') {
              return linesWithinPolygons(ctx, this.geometries);
          }
      }
      return false;
  };
  Within.prototype.eachChild = function eachChild () {
  };
  Within.prototype.outputDefined = function outputDefined () {
      return true;
  };
  Within.prototype.serialize = function serialize () {
      return [
          'within',
          this.geojson
      ];
  };
  var Within$1 = Within;

  //      
  function isFeatureConstant(e) {
      if (e instanceof CompoundExpression$1) {
          if (e.name === 'get' && e.args.length === 1) {
              return false;
          } else if (e.name === 'feature-state') {
              return false;
          } else if (e.name === 'has' && e.args.length === 1) {
              return false;
          } else if (e.name === 'properties' || e.name === 'geometry-type' || e.name === 'id') {
              return false;
          } else if (/^filter-/.test(e.name)) {
              return false;
          }
      }
      if (e instanceof Within$1) {
          return false;
      }
      var result = true;
      e.eachChild(function (arg) {
          if (result && !isFeatureConstant(arg)) {
              result = false;
          }
      });
      return result;
  }
  function isStateConstant(e) {
      if (e instanceof CompoundExpression$1) {
          if (e.name === 'feature-state') {
              return false;
          }
      }
      var result = true;
      e.eachChild(function (arg) {
          if (result && !isStateConstant(arg)) {
              result = false;
          }
      });
      return result;
  }
  function isGlobalPropertyConstant(e, properties) {
      if (e instanceof CompoundExpression$1 && properties.indexOf(e.name) >= 0) {
          return false;
      }
      var result = true;
      e.eachChild(function (arg) {
          if (result && !isGlobalPropertyConstant(arg, properties)) {
              result = false;
          }
      });
      return result;
  }

  //      
  var Var = function Var(name, boundExpression) {
      this.type = boundExpression.type;
      this.name = name;
      this.boundExpression = boundExpression;
  };
  Var.parse = function parse (args, context) {
      if (args.length !== 2 || typeof args[1] !== 'string')
          { return context.error("'var' expression requires exactly one string literal argument."); }
      var name = args[1];
      if (!context.scope.has(name)) {
          return context.error(("Unknown variable \"" + name + "\". Make sure \"" + name + "\" has been bound in an enclosing \"let\" expression before using it."), 1);
      }
      return new Var(name, context.scope.get(name));
  };
  Var.prototype.evaluate = function evaluate (ctx) {
      return this.boundExpression.evaluate(ctx);
  };
  Var.prototype.eachChild = function eachChild () {
  };
  Var.prototype.outputDefined = function outputDefined () {
      return false;
  };
  Var.prototype.serialize = function serialize () {
      return [
          'var',
          this.name
      ];
  };
  var Var$1 = Var;

  //      
  /**
   * State associated parsing at a given point in an expression tree.
   * @private
   */
  var ParsingContext = function ParsingContext(registry, path, expectedType, scope, errors) {
      if ( path === void 0 ) path = [];
      if ( scope === void 0 ) scope = new Scope$1();
      if ( errors === void 0 ) errors = [];

      this.registry = registry;
      this.path = path;
      this.key = path.map(function (part) { return ("[" + part + "]"); }).join('');
      this.scope = scope;
      this.errors = errors;
      this.expectedType = expectedType;
  };
  /**
   * @param expr the JSON expression to parse
   * @param index the optional argument index if this expression is an argument of a parent expression that's being parsed
   * @param options
   * @param options.omitTypeAnnotations set true to omit inferred type annotations.  Caller beware: with this option set, the parsed expression's type will NOT satisfy `expectedType` if it would normally be wrapped in an inferred annotation.
   * @private
   */
  ParsingContext.prototype.parse = function parse (expr, index, expectedType, bindings, options) {
          if ( options === void 0 ) options = {};

      if (index) {
          return this.concat(index, expectedType, bindings)._parse(expr, options);
      }
      return this._parse(expr, options);
  };
  ParsingContext.prototype._parse = function _parse (expr, options) {
      if (expr === null || typeof expr === 'string' || typeof expr === 'boolean' || typeof expr === 'number') {
          expr = [
              'literal',
              expr
          ];
      }
      function annotate(parsed, type, typeAnnotation) {
          if (typeAnnotation === 'assert') {
              return new Assertion$1(type, [parsed]);
          } else if (typeAnnotation === 'coerce') {
              return new Coercion$1(type, [parsed]);
          } else {
              return parsed;
          }
      }
      if (Array.isArray(expr)) {
          if (expr.length === 0) {
              return this.error("Expected an array with at least one element. If you wanted a literal array, use [\"literal\", []].");
          }
          var op = expr[0];
          if (typeof op !== 'string') {
              this.error(("Expression name must be a string, but found " + (typeof op) + " instead. If you wanted a literal array, use [\"literal\", [...]]."), 0);
              return null;
          }
          var Expr = this.registry[op];
          if (Expr) {
              var parsed = Expr.parse(expr, this);
              if (!parsed)
                  { return null; }
              if (this.expectedType) {
                  var expected = this.expectedType;
                  var actual = parsed.type;
                  // When we expect a number, string, boolean, or array but have a value, wrap it in an assertion.
                  // When we expect a color or formatted string, but have a string or value, wrap it in a coercion.
                  // Otherwise, we do static type-checking.
                  //
                  // These behaviors are overridable for:
                  //   * The "coalesce" operator, which needs to omit type annotations.
                  //   * String-valued properties (e.g. `text-field`), where coercion is more convenient than assertion.
                  //
                  if ((expected.kind === 'string' || expected.kind === 'number' || expected.kind === 'boolean' || expected.kind === 'object' || expected.kind === 'array') && actual.kind === 'value') {
                      parsed = annotate(parsed, expected, options.typeAnnotation || 'assert');
                  } else if ((expected.kind === 'color' || expected.kind === 'formatted' || expected.kind === 'resolvedImage') && (actual.kind === 'value' || actual.kind === 'string')) {
                      parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');
                  } else if (this.checkSubtype(expected, actual)) {
                      return null;
                  }
              }
              // If an expression's arguments are all literals, we can evaluate
              // it immediately and replace it with a literal value in the
              // parsed/compiled result. Expressions that expect an image should
              // not be resolved here so we can later get the available images.
              if (!(parsed instanceof Literal$1) && parsed.type.kind !== 'resolvedImage' && isConstant(parsed)) {
                  var ec = new EvaluationContext$1();
                  try {
                      parsed = new Literal$1(parsed.type, parsed.evaluate(ec));
                  } catch (e) {
                      this.error(e.message);
                      return null;
                  }
              }
              return parsed;
          }
          return this.error(("Unknown expression \"" + op + "\". If you wanted a literal array, use [\"literal\", [...]]."), 0);
      } else if (typeof expr === 'undefined') {
          return this.error("'undefined' value invalid. Use null instead.");
      } else if (typeof expr === 'object') {
          return this.error("Bare objects invalid. Use [\"literal\", {...}] instead.");
      } else {
          return this.error(("Expected an array, but found " + (typeof expr) + " instead."));
      }
  };
  /**
   * Returns a copy of this context suitable for parsing the subexpression at
   * index `index`, optionally appending to 'let' binding map.
   *
   * Note that `errors` property, intended for collecting errors while
   * parsing, is copied by reference rather than cloned.
   * @private
   */
  ParsingContext.prototype.concat = function concat (index, expectedType, bindings) {
      var path = typeof index === 'number' ? this.path.concat(index) : this.path;
      var scope = bindings ? this.scope.concat(bindings) : this.scope;
      return new ParsingContext(this.registry, path, expectedType || null, scope, this.errors);
  };
  /**
   * Push a parsing (or type checking) error into the `this.errors`
   * @param error The message
   * @param keys Optionally specify the source of the error at a child
   * of the current expression at `this.key`.
   * @private
   */
  ParsingContext.prototype.error = function error (error$1) {
          var keys = [], len = arguments.length - 1;
          while ( len-- > 0 ) keys[ len ] = arguments[ len + 1 ];

      var key = "" + (this.key) + (keys.map(function (k) { return ("[" + k + "]"); }).join(''));
      this.errors.push(new ParsingError$1(key, error$1));
  };
  /**
   * Returns null if `t` is a subtype of `expected`; otherwise returns an
   * error message and also pushes it to `this.errors`.
   */
  ParsingContext.prototype.checkSubtype = function checkSubtype$1 (expected, t) {
      var error = checkSubtype(expected, t);
      if (error)
          { this.error(error); }
      return error;
  };
  var ParsingContext$1 = ParsingContext;
  function isConstant(expression) {
      if (expression instanceof Var$1) {
          return isConstant(expression.boundExpression);
      } else if (expression instanceof CompoundExpression$1 && expression.name === 'error') {
          return false;
      } else if (expression instanceof CollatorExpression$1) {
          // Although the results of a Collator expression with fixed arguments
          // generally shouldn't change between executions, we can't serialize them
          // as constant expressions because results change based on environment.
          return false;
      } else if (expression instanceof Within$1) {
          return false;
      }
      var isTypeAnnotation = expression instanceof Coercion$1 || expression instanceof Assertion$1;
      var childrenConstant = true;
      expression.eachChild(function (child) {
          // We can _almost_ assume that if `expressions` children are constant,
          // they would already have been evaluated to Literal values when they
          // were parsed.  Type annotations are the exception, because they might
          // have been inferred and added after a child was parsed.
          // So we recurse into isConstant() for the children of type annotations,
          // but otherwise simply check whether they are Literals.
          if (isTypeAnnotation) {
              childrenConstant = childrenConstant && isConstant(child);
          } else {
              childrenConstant = childrenConstant && child instanceof Literal$1;
          }
      });
      if (!childrenConstant) {
          return false;
      }
      return isFeatureConstant(expression) && isGlobalPropertyConstant(expression, [
          'zoom',
          'heatmap-density',
          'line-progress',
          'sky-radial-progress',
          'accumulated',
          'is-supported-script',
          'pitch',
          'distance-from-center'
      ]);
  }

  //      
  /**
   * Returns the index of the last stop <= input, or 0 if it doesn't exist.
   * @private
   */
  function findStopLessThanOrEqualTo(stops, input) {
      var lastIndex = stops.length - 1;
      var lowerIndex = 0;
      var upperIndex = lastIndex;
      var currentIndex = 0;
      var currentValue, nextValue;
      while (lowerIndex <= upperIndex) {
          currentIndex = Math.floor((lowerIndex + upperIndex) / 2);
          currentValue = stops[currentIndex];
          nextValue = stops[currentIndex + 1];
          if (currentValue <= input) {
              if (currentIndex === lastIndex || input < nextValue) {
                  // Search complete
                  return currentIndex;
              }
              lowerIndex = currentIndex + 1;
          } else if (currentValue > input) {
              upperIndex = currentIndex - 1;
          } else {
              throw new RuntimeError$1('Input is not a number.');
          }
      }
      return 0;
  }

  //      
  var Step = function Step(type, input, stops) {
      this.type = type;
      this.input = input;
      this.labels = [];
      this.outputs = [];
      for (var i = 0, list = stops; i < list.length; i += 1) {
          var ref = list[i];
          var label = ref[0];
          var expression = ref[1];

          this.labels.push(label);
          this.outputs.push(expression);
      }
  };
  Step.parse = function parse (args, context) {
      if (args.length - 1 < 4) {
          return context.error(("Expected at least 4 arguments, but found only " + (args.length - 1) + "."));
      }
      if ((args.length - 1) % 2 !== 0) {
          return context.error("Expected an even number of arguments.");
      }
      var input = context.parse(args[1], 1, NumberType);
      if (!input)
          { return null; }
      var stops = [];
      var outputType = null;
      if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      for (var i = 1; i < args.length; i += 2) {
          var label = i === 1 ? -Infinity : args[i];
          var value = args[i + 1];
          var labelKey = i;
          var valueKey = i + 1;
          if (typeof label !== 'number') {
              return context.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);
          }
          if (stops.length && stops[stops.length - 1][0] >= label) {
              return context.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.', labelKey);
          }
          var parsed = context.parse(value, valueKey, outputType);
          if (!parsed)
              { return null; }
          outputType = outputType || parsed.type;
          stops.push([
              label,
              parsed
          ]);
      }
      return new Step(outputType, input, stops);
  };
  Step.prototype.evaluate = function evaluate (ctx) {
      var labels = this.labels;
      var outputs = this.outputs;
      if (labels.length === 1) {
          return outputs[0].evaluate(ctx);
      }
      var value = this.input.evaluate(ctx);
      if (value <= labels[0]) {
          return outputs[0].evaluate(ctx);
      }
      var stopCount = labels.length;
      if (value >= labels[stopCount - 1]) {
          return outputs[stopCount - 1].evaluate(ctx);
      }
      var index = findStopLessThanOrEqualTo(labels, value);
      return outputs[index].evaluate(ctx);
  };
  Step.prototype.eachChild = function eachChild (fn) {
      fn(this.input);
      for (var i = 0, list = this.outputs; i < list.length; i += 1) {
          var expression = list[i];

              fn(expression);
      }
  };
  Step.prototype.outputDefined = function outputDefined () {
      return this.outputs.every(function (out) { return out.outputDefined(); });
  };
  Step.prototype.serialize = function serialize () {
      var serialized = [
          'step',
          this.input.serialize()
      ];
      for (var i = 0; i < this.labels.length; i++) {
          if (i > 0) {
              serialized.push(this.labels[i]);
          }
          serialized.push(this.outputs[i].serialize());
      }
      return serialized;
  };
  var Step$1 = Step;

  /*
   * Copyright (C) 2008 Apple Inc. All Rights Reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
   * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
   * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * Ported from Webkit
   * http://svn.webkit.org/repository/webkit/trunk/Source/WebCore/platform/graphics/UnitBezier.h
   */

  var unitbezier = UnitBezier;
  function UnitBezier(p1x, p1y, p2x, p2y) {
      // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).
      this.cx = 3 * p1x;
      this.bx = 3 * (p2x - p1x) - this.cx;
      this.ax = 1 - this.cx - this.bx;
      this.cy = 3 * p1y;
      this.by = 3 * (p2y - p1y) - this.cy;
      this.ay = 1 - this.cy - this.by;
      this.p1x = p1x;
      this.p1y = p2y;
      this.p2x = p2x;
      this.p2y = p2y;
  }
  UnitBezier.prototype.sampleCurveX = function (t) {
      // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.
      return ((this.ax * t + this.bx) * t + this.cx) * t;
  };
  UnitBezier.prototype.sampleCurveY = function (t) {
      return ((this.ay * t + this.by) * t + this.cy) * t;
  };
  UnitBezier.prototype.sampleCurveDerivativeX = function (t) {
      return (3 * this.ax * t + 2 * this.bx) * t + this.cx;
  };
  UnitBezier.prototype.solveCurveX = function (x, epsilon) {
      if (typeof epsilon === 'undefined')
          { epsilon = 0.000001; }
      var t0, t1, t2, x2, i;
      // First try a few iterations of Newton's method -- normally very fast.
      for (t2 = x, i = 0; i < 8; i++) {
          x2 = this.sampleCurveX(t2) - x;
          if (Math.abs(x2) < epsilon)
              { return t2; }
          var d2 = this.sampleCurveDerivativeX(t2);
          if (Math.abs(d2) < 0.000001)
              { break; }
          t2 = t2 - x2 / d2;
      }
      // Fall back to the bisection method for reliability.
      t0 = 0;
      t1 = 1;
      t2 = x;
      if (t2 < t0)
          { return t0; }
      if (t2 > t1)
          { return t1; }
      while (t0 < t1) {
          x2 = this.sampleCurveX(t2);
          if (Math.abs(x2 - x) < epsilon)
              { return t2; }
          if (x > x2) {
              t0 = t2;
          } else {
              t1 = t2;
          }
          t2 = (t1 - t0) * 0.5 + t0;
      }
      // Failure.
      return t2;
  };
  UnitBezier.prototype.solve = function (x, epsilon) {
      return this.sampleCurveY(this.solveCurveX(x, epsilon));
  };

  //      
  function number(a, b, t) {
      return a * (1 - t) + b * t;
  }
  function color(from, to, t) {
      return new Color$1(number(from.r, to.r, t), number(from.g, to.g, t), number(from.b, to.b, t), number(from.a, to.a, t));
  }
  function array(from, to, t) {
      return from.map(function (d, i) {
          return number(d, to[i], t);
      });
  }

  var interpolate = /*#__PURE__*/Object.freeze({
    __proto__: null,
    number: number,
    color: color,
    array: array
  });

  //      
  // Constants
  var Xn$1 = 0.95047,
      // D65 standard referent
      Yn$1 = 1, Zn$1 = 1.08883, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1, deg2rad$1 = Math.PI / 180, rad2deg = 180 / Math.PI;
  // Utilities
  function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  }
  function lab2xyz(t) {
      return t > t1 ? t * t * t : t2 * (t - t0);
  }
  function xyz2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  }
  function rgb2xyz(x) {
      x /= 255;
      return x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  }
  // LAB
  function rgbToLab(rgbColor) {
      var b = rgb2xyz(rgbColor.r), a = rgb2xyz(rgbColor.g), l = rgb2xyz(rgbColor.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn$1), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn$1), z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn$1);
      return {
          l: 116 * y - 16,
          a: 500 * (x - y),
          b: 200 * (y - z),
          alpha: rgbColor.a
      };
  }
  function labToRgb(labColor) {
      var y = (labColor.l + 16) / 116, x = isNaN(labColor.a) ? y : y + labColor.a / 500, z = isNaN(labColor.b) ? y : y - labColor.b / 200;
      y = Yn$1 * lab2xyz(y);
      x = Xn$1 * lab2xyz(x);
      z = Zn$1 * lab2xyz(z);
      return new Color$1(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
      xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), labColor.alpha);
  }
  function interpolateLab(from, to, t) {
      return {
          l: number(from.l, to.l, t),
          a: number(from.a, to.a, t),
          b: number(from.b, to.b, t),
          alpha: number(from.alpha, to.alpha, t)
      };
  }
  // HCL
  function rgbToHcl(rgbColor) {
      var ref = rgbToLab(rgbColor);
      var l = ref.l;
      var a = ref.a;
      var b = ref.b;
      var h = Math.atan2(b, a) * rad2deg;
      return {
          h: h < 0 ? h + 360 : h,
          c: Math.sqrt(a * a + b * b),
          l: l,
          alpha: rgbColor.a
      };
  }
  function hclToRgb(hclColor) {
      var h = hclColor.h * deg2rad$1, c = hclColor.c, l = hclColor.l;
      return labToRgb({
          l: l,
          a: Math.cos(h) * c,
          b: Math.sin(h) * c,
          alpha: hclColor.alpha
      });
  }
  function interpolateHue(a, b, t) {
      var d = b - a;
      return a + t * (d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d);
  }
  function interpolateHcl(from, to, t) {
      return {
          h: interpolateHue(from.h, to.h, t),
          c: number(from.c, to.c, t),
          l: number(from.l, to.l, t),
          alpha: number(from.alpha, to.alpha, t)
      };
  }
  var lab = {
      forward: rgbToLab,
      reverse: labToRgb,
      interpolate: interpolateLab
  };
  var hcl = {
      forward: rgbToHcl,
      reverse: hclToRgb,
      interpolate: interpolateHcl
  };

  //      
  var Interpolate = function Interpolate(type, operator, interpolation, input, stops) {
      this.type = type;
      this.operator = operator;
      this.interpolation = interpolation;
      this.input = input;
      this.labels = [];
      this.outputs = [];
      for (var i = 0, list = stops; i < list.length; i += 1) {
          var ref = list[i];
          var label = ref[0];
          var expression = ref[1];

          this.labels.push(label);
          this.outputs.push(expression);
      }
  };
  Interpolate.interpolationFactor = function interpolationFactor (interpolation, input, lower, upper) {
      var t = 0;
      if (interpolation.name === 'exponential') {
          t = exponentialInterpolation(input, interpolation.base, lower, upper);
      } else if (interpolation.name === 'linear') {
          t = exponentialInterpolation(input, 1, lower, upper);
      } else if (interpolation.name === 'cubic-bezier') {
          var c = interpolation.controlPoints;
          var ub = new unitbezier(c[0], c[1], c[2], c[3]);
          t = ub.solve(exponentialInterpolation(input, 1, lower, upper));
      }
      return t;
  };
  Interpolate.parse = function parse (args, context) {
      var operator = args[0];
          var interpolation = args[1];
          var input = args[2];
          var rest = args.slice(3);
      if (!Array.isArray(interpolation) || interpolation.length === 0) {
          return context.error("Expected an interpolation type expression.", 1);
      }
      if (interpolation[0] === 'linear') {
          interpolation = { name: 'linear' };
      } else if (interpolation[0] === 'exponential') {
          var base = interpolation[1];
          if (typeof base !== 'number')
              { return context.error("Exponential interpolation requires a numeric base.", 1, 1); }
          interpolation = {
              name: 'exponential',
              base: base
          };
      } else if (interpolation[0] === 'cubic-bezier') {
          var controlPoints = interpolation.slice(1);
          if (controlPoints.length !== 4 || controlPoints.some(function (t) { return typeof t !== 'number' || t < 0 || t > 1; })) {
              return context.error('Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.', 1);
          }
          interpolation = {
              name: 'cubic-bezier',
              controlPoints: controlPoints
          };
      } else {
          return context.error(("Unknown interpolation type " + (String(interpolation[0]))), 1, 0);
      }
      if (args.length - 1 < 4) {
          return context.error(("Expected at least 4 arguments, but found only " + (args.length - 1) + "."));
      }
      if ((args.length - 1) % 2 !== 0) {
          return context.error("Expected an even number of arguments.");
      }
      input = context.parse(input, 2, NumberType);
      if (!input)
          { return null; }
      var stops = [];
      var outputType = null;
      if (operator === 'interpolate-hcl' || operator === 'interpolate-lab') {
          outputType = ColorType;
      } else if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      for (var i = 0; i < rest.length; i += 2) {
          var label = rest[i];
          var value = rest[i + 1];
          var labelKey = i + 3;
          var valueKey = i + 4;
          if (typeof label !== 'number') {
              return context.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);
          }
          if (stops.length && stops[stops.length - 1][0] >= label) {
              return context.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.', labelKey);
          }
          var parsed = context.parse(value, valueKey, outputType);
          if (!parsed)
              { return null; }
          outputType = outputType || parsed.type;
          stops.push([
              label,
              parsed
          ]);
      }
      if (outputType.kind !== 'number' && outputType.kind !== 'color' && !(outputType.kind === 'array' && outputType.itemType.kind === 'number' && typeof outputType.N === 'number')) {
          return context.error(("Type " + (toString$1$1(outputType)) + " is not interpolatable."));
      }
      return new Interpolate(outputType, operator, interpolation, input, stops);
  };
  Interpolate.prototype.evaluate = function evaluate (ctx) {
      var labels = this.labels;
      var outputs = this.outputs;
      if (labels.length === 1) {
          return outputs[0].evaluate(ctx);
      }
      var value = this.input.evaluate(ctx);
      if (value <= labels[0]) {
          return outputs[0].evaluate(ctx);
      }
      var stopCount = labels.length;
      if (value >= labels[stopCount - 1]) {
          return outputs[stopCount - 1].evaluate(ctx);
      }
      var index = findStopLessThanOrEqualTo(labels, value);
      var lower = labels[index];
      var upper = labels[index + 1];
      var t = Interpolate.interpolationFactor(this.interpolation, value, lower, upper);
      var outputLower = outputs[index].evaluate(ctx);
      var outputUpper = outputs[index + 1].evaluate(ctx);
      if (this.operator === 'interpolate') {
          return interpolate[this.type.kind.toLowerCase()](outputLower, outputUpper, t);// eslint-disable-line import/namespace
      } else if (this.operator === 'interpolate-hcl') {
          return hcl.reverse(hcl.interpolate(hcl.forward(outputLower), hcl.forward(outputUpper), t));
      } else {
          return lab.reverse(lab.interpolate(lab.forward(outputLower), lab.forward(outputUpper), t));
      }
  };
  Interpolate.prototype.eachChild = function eachChild (fn) {
      fn(this.input);
      for (var i = 0, list = this.outputs; i < list.length; i += 1) {
          var expression = list[i];

              fn(expression);
      }
  };
  Interpolate.prototype.outputDefined = function outputDefined () {
      return this.outputs.every(function (out) { return out.outputDefined(); });
  };
  Interpolate.prototype.serialize = function serialize () {
      var interpolation;
      if (this.interpolation.name === 'linear') {
          interpolation = ['linear'];
      } else if (this.interpolation.name === 'exponential') {
          if (this.interpolation.base === 1) {
              interpolation = ['linear'];
          } else {
              interpolation = [
                  'exponential',
                  this.interpolation.base
              ];
          }
      } else {
          interpolation = ['cubic-bezier'].concat(this.interpolation.controlPoints);
      }
      var serialized = [
          this.operator,
          interpolation,
          this.input.serialize()
      ];
      for (var i = 0; i < this.labels.length; i++) {
          serialized.push(this.labels[i], this.outputs[i].serialize());
      }
      return serialized;
  };
  /**
   * Returns a ratio that can be used to interpolate between exponential function
   * stops.
   * How it works: Two consecutive stop values define a (scaled and shifted) exponential function `f(x) = a * base^x + b`, where `base` is the user-specified base,
   * and `a` and `b` are constants affording sufficient degrees of freedom to fit
   * the function to the given stops.
   *
   * Here's a bit of algebra that lets us compute `f(x)` directly from the stop
   * values without explicitly solving for `a` and `b`:
   *
   * First stop value: `f(x0) = y0 = a * base^x0 + b`
   * Second stop value: `f(x1) = y1 = a * base^x1 + b`
   * => `y1 - y0 = a(base^x1 - base^x0)`
   * => `a = (y1 - y0)/(base^x1 - base^x0)`
   *
   * Desired value: `f(x) = y = a * base^x + b`
   * => `f(x) = y0 + a * (base^x - base^x0)`
   *
   * From the above, we can replace the `a` in `a * (base^x - base^x0)` and do a
   * little algebra:
   * ```
   * a * (base^x - base^x0) = (y1 - y0)/(base^x1 - base^x0) * (base^x - base^x0)
   *                     = (y1 - y0) * (base^x - base^x0) / (base^x1 - base^x0)
   * ```
   *
   * If we let `(base^x - base^x0) / (base^x1 base^x0)`, then we have
   * `f(x) = y0 + (y1 - y0) * ratio`.  In other words, `ratio` may be treated as
   * an interpolation factor between the two stops' output values.
   *
   * (Note: a slightly different form for `ratio`,
   * `(base^(x-x0) - 1) / (base^(x1-x0) - 1) `, is equivalent, but requires fewer
   * expensive `Math.pow()` operations.)
   *
   * @private
  */
  function exponentialInterpolation(input, base, lowerValue, upperValue) {
      var difference = upperValue - lowerValue;
      var progress = input - lowerValue;
      if (difference === 0) {
          return 0;
      } else if (base === 1) {
          return progress / difference;
      } else {
          return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);
      }
  }
  var Interpolate$1 = Interpolate;

  var Coalesce = function Coalesce(type, args) {
      this.type = type;
      this.args = args;
  };
  Coalesce.parse = function parse (args, context) {
      if (args.length < 2) {
          return context.error('Expectected at least one argument.');
      }
      var outputType = null;
      var expectedType = context.expectedType;
      if (expectedType && expectedType.kind !== 'value') {
          outputType = expectedType;
      }
      var parsedArgs = [];
      for (var i = 0, list = args.slice(1); i < list.length; i += 1) {
          var arg = list[i];

              var parsed = context.parse(arg, 1 + parsedArgs.length, outputType, undefined, { typeAnnotation: 'omit' });
          if (!parsed)
              { return null; }
          outputType = outputType || parsed.type;
          parsedArgs.push(parsed);
      }
      // Above, we parse arguments without inferred type annotation so that
      // they don't produce a runtime error for `null` input, which would
      // preempt the desired null-coalescing behavior.
      // Thus, if any of our arguments would have needed an annotation, we
      // need to wrap the enclosing coalesce expression with it instead.
      var needsAnnotation = expectedType && parsedArgs.some(function (arg) { return checkSubtype(expectedType, arg.type); });
      return needsAnnotation ? new Coalesce(ValueType, parsedArgs) : new Coalesce(outputType, parsedArgs);
  };
  Coalesce.prototype.evaluate = function evaluate (ctx) {
      var result = null;
      var argCount = 0;
      var firstImage;
      for (var i = 0, list = this.args; i < list.length; i += 1) {
          var arg = list[i];

              argCount++;
          result = arg.evaluate(ctx);
          // we need to keep track of the first requested image in a coalesce statement
          // if coalesce can't find a valid image, we return the first image so styleimagemissing can fire
          if (result && result instanceof ResolvedImage$1 && !result.available) {
              // set to first image
              if (!firstImage) {
                  firstImage = result;
              }
              result = null;
              // if we reach the end, return the first image
              if (argCount === this.args.length) {
                  return firstImage;
              }
          }
          if (result !== null)
              { break; }
      }
      return result;
  };
  Coalesce.prototype.eachChild = function eachChild (fn) {
      this.args.forEach(fn);
  };
  Coalesce.prototype.outputDefined = function outputDefined () {
      return this.args.every(function (arg) { return arg.outputDefined(); });
  };
  Coalesce.prototype.serialize = function serialize () {
      var serialized = ['coalesce'];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };
  var Coalesce$1 = Coalesce;

  //      
  var Let = function Let(bindings, result) {
      this.type = result.type;
      this.bindings = [].concat(bindings);
      this.result = result;
  };
  Let.prototype.evaluate = function evaluate (ctx) {
      return this.result.evaluate(ctx);
  };
  Let.prototype.eachChild = function eachChild (fn) {
      for (var i = 0, list = this.bindings; i < list.length; i += 1) {
          var binding = list[i];

              fn(binding[1]);
      }
      fn(this.result);
  };
  Let.parse = function parse (args, context) {
      if (args.length < 4)
          { return context.error(("Expected at least 3 arguments, but found " + (args.length - 1) + " instead.")); }
      var bindings = [];
      for (var i = 1; i < args.length - 1; i += 2) {
          var name = args[i];
          if (typeof name !== 'string') {
              return context.error(("Expected string, but found " + (typeof name) + " instead."), i);
          }
          if (/[^a-zA-Z0-9_]/.test(name)) {
              return context.error("Variable names must contain only alphanumeric characters or '_'.", i);
          }
          var value = context.parse(args[i + 1], i + 1);
          if (!value)
              { return null; }
          bindings.push([
              name,
              value
          ]);
      }
      var result = context.parse(args[args.length - 1], args.length - 1, context.expectedType, bindings);
      if (!result)
          { return null; }
      return new Let(bindings, result);
  };
  Let.prototype.outputDefined = function outputDefined () {
      return this.result.outputDefined();
  };
  Let.prototype.serialize = function serialize () {
      var serialized = ['let'];
      for (var i = 0, list = this.bindings; i < list.length; i += 1) {
          var ref = list[i];
              var name = ref[0];
              var expr = ref[1];

              serialized.push(name, expr.serialize());
      }
      serialized.push(this.result.serialize());
      return serialized;
  };
  var Let$1 = Let;

  //      
  var At = function At(type, index, input) {
      this.type = type;
      this.index = index;
      this.input = input;
  };
  At.parse = function parse (args, context) {
      if (args.length !== 3)
          { return context.error(("Expected 2 arguments, but found " + (args.length - 1) + " instead.")); }
      var index = context.parse(args[1], 1, NumberType);
      var input = context.parse(args[2], 2, array$1(context.expectedType || ValueType));
      if (!index || !input)
          { return null; }
      var t = input.type;
      return new At(t.itemType, index, input);
  };
  At.prototype.evaluate = function evaluate (ctx) {
      var index = this.index.evaluate(ctx);
      var array = this.input.evaluate(ctx);
      if (index < 0) {
          throw new RuntimeError$1(("Array index out of bounds: " + index + " < 0."));
      }
      if (index >= array.length) {
          throw new RuntimeError$1(("Array index out of bounds: " + index + " > " + (array.length - 1) + "."));
      }
      if (index !== Math.floor(index)) {
          throw new RuntimeError$1(("Array index must be an integer, but found " + index + " instead."));
      }
      return array[index];
  };
  At.prototype.eachChild = function eachChild (fn) {
      fn(this.index);
      fn(this.input);
  };
  At.prototype.outputDefined = function outputDefined () {
      return false;
  };
  At.prototype.serialize = function serialize () {
      return [
          'at',
          this.index.serialize(),
          this.input.serialize()
      ];
  };
  var At$1 = At;

  //      
  var In = function In(needle, haystack) {
      this.type = BooleanType;
      this.needle = needle;
      this.haystack = haystack;
  };
  In.parse = function parse (args, context) {
      if (args.length !== 3) {
          return context.error(("Expected 2 arguments, but found " + (args.length - 1) + " instead."));
      }
      var needle = context.parse(args[1], 1, ValueType);
      var haystack = context.parse(args[2], 2, ValueType);
      if (!needle || !haystack)
          { return null; }
      if (!isValidType(needle.type, [
              BooleanType,
              StringType,
              NumberType,
              NullType,
              ValueType
          ])) {
          return context.error(("Expected first argument to be of type boolean, string, number or null, but found " + (toString$1$1(needle.type)) + " instead"));
      }
      return new In(needle, haystack);
  };
  In.prototype.evaluate = function evaluate (ctx) {
      var needle = this.needle.evaluate(ctx);
      var haystack = this.haystack.evaluate(ctx);
      if (haystack == null)
          { return false; }
      if (!isValidNativeType(needle, [
              'boolean',
              'string',
              'number',
              'null'
          ])) {
          throw new RuntimeError$1(("Expected first argument to be of type boolean, string, number or null, but found " + (toString$1$1(typeOf(needle))) + " instead."));
      }
      if (!isValidNativeType(haystack, [
              'string',
              'array'
          ])) {
          throw new RuntimeError$1(("Expected second argument to be of type array or string, but found " + (toString$1$1(typeOf(haystack))) + " instead."));
      }
      return haystack.indexOf(needle) >= 0;
  };
  In.prototype.eachChild = function eachChild (fn) {
      fn(this.needle);
      fn(this.haystack);
  };
  In.prototype.outputDefined = function outputDefined () {
      return true;
  };
  In.prototype.serialize = function serialize () {
      return [
          'in',
          this.needle.serialize(),
          this.haystack.serialize()
      ];
  };
  var In$1 = In;

  //      
  var IndexOf = function IndexOf(needle, haystack, fromIndex) {
      this.type = NumberType;
      this.needle = needle;
      this.haystack = haystack;
      this.fromIndex = fromIndex;
  };
  IndexOf.parse = function parse (args, context) {
      if (args.length <= 2 || args.length >= 5) {
          return context.error(("Expected 3 or 4 arguments, but found " + (args.length - 1) + " instead."));
      }
      var needle = context.parse(args[1], 1, ValueType);
      var haystack = context.parse(args[2], 2, ValueType);
      if (!needle || !haystack)
          { return null; }
      if (!isValidType(needle.type, [
              BooleanType,
              StringType,
              NumberType,
              NullType,
              ValueType
          ])) {
          return context.error(("Expected first argument to be of type boolean, string, number or null, but found " + (toString$1$1(needle.type)) + " instead"));
      }
      if (args.length === 4) {
          var fromIndex = context.parse(args[3], 3, NumberType);
          if (!fromIndex)
              { return null; }
          return new IndexOf(needle, haystack, fromIndex);
      } else {
          return new IndexOf(needle, haystack);
      }
  };
  IndexOf.prototype.evaluate = function evaluate (ctx) {
      var needle = this.needle.evaluate(ctx);
      var haystack = this.haystack.evaluate(ctx);
      if (!isValidNativeType(needle, [
              'boolean',
              'string',
              'number',
              'null'
          ])) {
          throw new RuntimeError$1(("Expected first argument to be of type boolean, string, number or null, but found " + (toString$1$1(typeOf(needle))) + " instead."));
      }
      if (!isValidNativeType(haystack, [
              'string',
              'array'
          ])) {
          throw new RuntimeError$1(("Expected second argument to be of type array or string, but found " + (toString$1$1(typeOf(haystack))) + " instead."));
      }
      if (this.fromIndex) {
          var fromIndex = this.fromIndex.evaluate(ctx);
          return haystack.indexOf(needle, fromIndex);
      }
      return haystack.indexOf(needle);
  };
  IndexOf.prototype.eachChild = function eachChild (fn) {
      fn(this.needle);
      fn(this.haystack);
      if (this.fromIndex) {
          fn(this.fromIndex);
      }
  };
  IndexOf.prototype.outputDefined = function outputDefined () {
      return false;
  };
  IndexOf.prototype.serialize = function serialize () {
      if (this.fromIndex != null && this.fromIndex !== undefined) {
          var fromIndex = this.fromIndex.serialize();
          return [
              'index-of',
              this.needle.serialize(),
              this.haystack.serialize(),
              fromIndex
          ];
      }
      return [
          'index-of',
          this.needle.serialize(),
          this.haystack.serialize()
      ];
  };
  var IndexOf$1 = IndexOf;

  // Map input label values to output expression index
  var Match = function Match(inputType, outputType, input, cases, outputs, otherwise) {
      this.inputType = inputType;
      this.type = outputType;
      this.input = input;
      this.cases = cases;
      this.outputs = outputs;
      this.otherwise = otherwise;
  };
  Match.parse = function parse (args, context) {
      if (args.length < 5)
          { return context.error(("Expected at least 4 arguments, but found only " + (args.length - 1) + ".")); }
      if (args.length % 2 !== 1)
          { return context.error("Expected an even number of arguments."); }
      var inputType;
      var outputType;
      if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      var cases = {};
      var outputs = [];
      for (var i = 2; i < args.length - 1; i += 2) {
          var labels = args[i];
          var value = args[i + 1];
          if (!Array.isArray(labels)) {
              labels = [labels];
          }
          var labelContext = context.concat(i);
          if (labels.length === 0) {
              return labelContext.error('Expected at least one branch label.');
          }
          for (var i$1 = 0, list = labels; i$1 < list.length; i$1 += 1) {
              var label = list[i$1];

                  if (typeof label !== 'number' && typeof label !== 'string') {
                  return labelContext.error("Branch labels must be numbers or strings.");
              } else if (typeof label === 'number' && Math.abs(label) > Number.MAX_SAFE_INTEGER) {
                  return labelContext.error(("Branch labels must be integers no larger than " + (Number.MAX_SAFE_INTEGER) + "."));
              } else if (typeof label === 'number' && Math.floor(label) !== label) {
                  return labelContext.error("Numeric branch labels must be integer values.");
              } else if (!inputType) {
                  inputType = typeOf(label);
              } else if (labelContext.checkSubtype(inputType, typeOf(label))) {
                  return null;
              }
              if (typeof cases[String(label)] !== 'undefined') {
                  return labelContext.error('Branch labels must be unique.');
              }
              cases[String(label)] = outputs.length;
          }
          var result = context.parse(value, i, outputType);
          if (!result)
              { return null; }
          outputType = outputType || result.type;
          outputs.push(result);
      }
      var input = context.parse(args[1], 1, ValueType);
      if (!input)
          { return null; }
      var otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);
      if (!otherwise)
          { return null; }
      if (input.type.kind !== 'value' && context.concat(1).checkSubtype(inputType, input.type)) {
          return null;
      }
      return new Match(inputType, outputType, input, cases, outputs, otherwise);
  };
  Match.prototype.evaluate = function evaluate (ctx) {
      var input = this.input.evaluate(ctx);
      var output = typeOf(input) === this.inputType && this.outputs[this.cases[input]] || this.otherwise;
      return output.evaluate(ctx);
  };
  Match.prototype.eachChild = function eachChild (fn) {
      fn(this.input);
      this.outputs.forEach(fn);
      fn(this.otherwise);
  };
  Match.prototype.outputDefined = function outputDefined () {
      return this.outputs.every(function (out) { return out.outputDefined(); }) && this.otherwise.outputDefined();
  };
  Match.prototype.serialize = function serialize () {
          var this$1$1 = this;

      var serialized = [
          'match',
          this.input.serialize()
      ];
      // Sort so serialization has an arbitrary defined order, even though
      // branch order doesn't affect evaluation
      var sortedLabels = Object.keys(this.cases).sort();
      // Group branches by unique match expression to support condensed
      // serializations of the form [case1, case2, ...] -> matchExpression
      var groupedByOutput = [];
      var outputLookup = {};
      // lookup index into groupedByOutput for a given output expression
      for (var i = 0, list = sortedLabels; i < list.length; i += 1) {
          var label = list[i];

              var outputIndex = outputLookup[this.cases[label]];
          if (outputIndex === undefined) {
              // First time seeing this output, add it to the end of the grouped list
              outputLookup[this.cases[label]] = groupedByOutput.length;
              groupedByOutput.push([
                  this.cases[label],
                  [label]
              ]);
          } else {
              // We've seen this expression before, add the label to that output's group
              groupedByOutput[outputIndex][1].push(label);
          }
      }
      var coerceLabel = function (label) { return this$1$1.inputType.kind === 'number' ? Number(label) : label; };
      for (var i$1 = 0, list$1 = groupedByOutput; i$1 < list$1.length; i$1 += 1) {
          var ref = list$1[i$1];
              var outputIndex = ref[0];
              var labels = ref[1];

              if (labels.length === 1) {
              // Only a single label matches this output expression
              serialized.push(coerceLabel(labels[0]));
          } else {
              // Array of literal labels pointing to this output expression
              serialized.push(labels.map(coerceLabel));
          }
          serialized.push(this.outputs[outputIndex$1].serialize());
      }
      serialized.push(this.otherwise.serialize());
      return serialized;
  };
  var Match$1 = Match;

  var Case = function Case(type, branches, otherwise) {
      this.type = type;
      this.branches = branches;
      this.otherwise = otherwise;
  };
  Case.parse = function parse (args, context) {
      if (args.length < 4)
          { return context.error(("Expected at least 3 arguments, but found only " + (args.length - 1) + ".")); }
      if (args.length % 2 !== 0)
          { return context.error("Expected an odd number of arguments."); }
      var outputType;
      if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      var branches = [];
      for (var i = 1; i < args.length - 1; i += 2) {
          var test = context.parse(args[i], i, BooleanType);
          if (!test)
              { return null; }
          var result = context.parse(args[i + 1], i + 1, outputType);
          if (!result)
              { return null; }
          branches.push([
              test,
              result
          ]);
          outputType = outputType || result.type;
      }
      var otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);
      if (!otherwise)
          { return null; }
      return new Case(outputType, branches, otherwise);
  };
  Case.prototype.evaluate = function evaluate (ctx) {
      for (var i = 0, list = this.branches; i < list.length; i += 1) {
          var ref = list[i];
              var test = ref[0];
              var expression = ref[1];

              if (test.evaluate(ctx)) {
              return expression.evaluate(ctx);
          }
      }
      return this.otherwise.evaluate(ctx);
  };
  Case.prototype.eachChild = function eachChild (fn) {
      for (var i = 0, list = this.branches; i < list.length; i += 1) {
          var ref = list[i];
              var test = ref[0];
              var expression = ref[1];

              fn(test);
          fn(expression);
      }
      fn(this.otherwise);
  };
  Case.prototype.outputDefined = function outputDefined () {
      return this.branches.every(function (ref) {
              ref[0];
              var out = ref[1];

              return out.outputDefined();
          }) && this.otherwise.outputDefined();
  };
  Case.prototype.serialize = function serialize () {
      var serialized = ['case'];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };
  var Case$1 = Case;

  //      
  var Slice = function Slice(type, input, beginIndex, endIndex) {
      this.type = type;
      this.input = input;
      this.beginIndex = beginIndex;
      this.endIndex = endIndex;
  };
  Slice.parse = function parse (args, context) {
      if (args.length <= 2 || args.length >= 5) {
          return context.error(("Expected 3 or 4 arguments, but found " + (args.length - 1) + " instead."));
      }
      var input = context.parse(args[1], 1, ValueType);
      var beginIndex = context.parse(args[2], 2, NumberType);
      if (!input || !beginIndex)
          { return null; }
      if (!isValidType(input.type, [
              array$1(ValueType),
              StringType,
              ValueType
          ])) {
          return context.error(("Expected first argument to be of type array or string, but found " + (toString$1$1(input.type)) + " instead"));
      }
      if (args.length === 4) {
          var endIndex = context.parse(args[3], 3, NumberType);
          if (!endIndex)
              { return null; }
          return new Slice(input.type, input, beginIndex, endIndex);
      } else {
          return new Slice(input.type, input, beginIndex);
      }
  };
  Slice.prototype.evaluate = function evaluate (ctx) {
      var input = this.input.evaluate(ctx);
      var beginIndex = this.beginIndex.evaluate(ctx);
      if (!isValidNativeType(input, [
              'string',
              'array'
          ])) {
          throw new RuntimeError$1(("Expected first argument to be of type array or string, but found " + (toString$1$1(typeOf(input))) + " instead."));
      }
      if (this.endIndex) {
          var endIndex = this.endIndex.evaluate(ctx);
          return input.slice(beginIndex, endIndex);
      }
      return input.slice(beginIndex);
  };
  Slice.prototype.eachChild = function eachChild (fn) {
      fn(this.input);
      fn(this.beginIndex);
      if (this.endIndex) {
          fn(this.endIndex);
      }
  };
  Slice.prototype.outputDefined = function outputDefined () {
      return false;
  };
  Slice.prototype.serialize = function serialize () {
      if (this.endIndex != null && this.endIndex !== undefined) {
          var endIndex = this.endIndex.serialize();
          return [
              'slice',
              this.input.serialize(),
              this.beginIndex.serialize(),
              endIndex
          ];
      }
      return [
          'slice',
          this.input.serialize(),
          this.beginIndex.serialize()
      ];
  };
  var Slice$1 = Slice;

  //      
  function isComparableType(op, type) {
      if (op === '==' || op === '!=') {
          // equality operator
          return type.kind === 'boolean' || type.kind === 'string' || type.kind === 'number' || type.kind === 'null' || type.kind === 'value';
      } else {
          // ordering operator
          return type.kind === 'string' || type.kind === 'number' || type.kind === 'value';
      }
  }
  function eq(ctx, a, b) {
      return a === b;
  }
  function neq(ctx, a, b) {
      return a !== b;
  }
  function lt(ctx, a, b) {
      return a < b;
  }
  function gt(ctx, a, b) {
      return a > b;
  }
  function lteq(ctx, a, b) {
      return a <= b;
  }
  function gteq(ctx, a, b) {
      return a >= b;
  }
  function eqCollate(ctx, a, b, c) {
      return c.compare(a, b) === 0;
  }
  function neqCollate(ctx, a, b, c) {
      return !eqCollate(ctx, a, b, c);
  }
  function ltCollate(ctx, a, b, c) {
      return c.compare(a, b) < 0;
  }
  function gtCollate(ctx, a, b, c) {
      return c.compare(a, b) > 0;
  }
  function lteqCollate(ctx, a, b, c) {
      return c.compare(a, b) <= 0;
  }
  function gteqCollate(ctx, a, b, c) {
      return c.compare(a, b) >= 0;
  }
  /**
   * Special form for comparison operators, implementing the signatures:
   * - (T, T, ?Collator) => boolean
   * - (T, value, ?Collator) => boolean
   * - (value, T, ?Collator) => boolean
   *
   * For inequalities, T must be either value, string, or number. For ==/!=, it
   * can also be boolean or null.
   *
   * Equality semantics are equivalent to Javascript's strict equality (===/!==)
   * -- i.e., when the arguments' types don't match, == evaluates to false, != to
   * true.
   *
   * When types don't match in an ordering comparison, a runtime error is thrown.
   *
   * @private
   */
  function makeComparison(op, compareBasic, compareWithCollator) {
      var isOrderComparison = op !== '==' && op !== '!=';
      return /*@__PURE__*/(function () {
          function Comparison(lhs, rhs, collator) {
              this.type = BooleanType;
              this.lhs = lhs;
              this.rhs = rhs;
              this.collator = collator;
              this.hasUntypedArgument = lhs.type.kind === 'value' || rhs.type.kind === 'value';
          }
          Comparison.parse = function parse (args, context) {
              if (args.length !== 3 && args.length !== 4)
                  { return context.error("Expected two or three arguments."); }
              var op = args[0];
              var lhs = context.parse(args[1], 1, ValueType);
              if (!lhs)
                  { return null; }
              if (!isComparableType(op, lhs.type)) {
                  return context.concat(1).error(("\"" + op + "\" comparisons are not supported for type '" + (toString$1$1(lhs.type)) + "'."));
              }
              var rhs = context.parse(args[2], 2, ValueType);
              if (!rhs)
                  { return null; }
              if (!isComparableType(op, rhs.type)) {
                  return context.concat(2).error(("\"" + op + "\" comparisons are not supported for type '" + (toString$1$1(rhs.type)) + "'."));
              }
              if (lhs.type.kind !== rhs.type.kind && lhs.type.kind !== 'value' && rhs.type.kind !== 'value') {
                  return context.error(("Cannot compare types '" + (toString$1$1(lhs.type)) + "' and '" + (toString$1$1(rhs.type)) + "'."));
              }
              if (isOrderComparison) {
                  // typing rules specific to less/greater than operators
                  if (lhs.type.kind === 'value' && rhs.type.kind !== 'value') {
                      // (value, T)
                      lhs = new Assertion$1(rhs.type, [lhs]);
                  } else if (lhs.type.kind !== 'value' && rhs.type.kind === 'value') {
                      // (T, value)
                      rhs = new Assertion$1(lhs.type, [rhs]);
                  }
              }
              var collator = null;
              if (args.length === 4) {
                  if (lhs.type.kind !== 'string' && rhs.type.kind !== 'string' && lhs.type.kind !== 'value' && rhs.type.kind !== 'value') {
                      return context.error("Cannot use collator to compare non-string types.");
                  }
                  collator = context.parse(args[3], 3, CollatorType);
                  if (!collator)
                      { return null; }
              }
              return new Comparison(lhs, rhs, collator);
          };
          Comparison.prototype.evaluate = function evaluate (ctx) {
              var lhs = this.lhs.evaluate(ctx);
              var rhs = this.rhs.evaluate(ctx);
              if (isOrderComparison && this.hasUntypedArgument) {
                  var lt = typeOf(lhs);
                  var rt = typeOf(rhs);
                  // check that type is string or number, and equal
                  if (lt.kind !== rt.kind || !(lt.kind === 'string' || lt.kind === 'number')) {
                      throw new RuntimeError$1(("Expected arguments for \"" + op + "\" to be (string, string) or (number, number), but found (" + (lt.kind) + ", " + (rt.kind) + ") instead."));
                  }
              }
              if (this.collator && !isOrderComparison && this.hasUntypedArgument) {
                  var lt$1 = typeOf(lhs);
                  var rt$1 = typeOf(rhs);
                  if (lt$1.kind !== 'string' || rt$1.kind !== 'string') {
                      return compareBasic(ctx, lhs, rhs);
                  }
              }
              return this.collator ? compareWithCollator(ctx, lhs, rhs, this.collator.evaluate(ctx)) : compareBasic(ctx, lhs, rhs);
          };
          Comparison.prototype.eachChild = function eachChild (fn) {
              fn(this.lhs);
              fn(this.rhs);
              if (this.collator) {
                  fn(this.collator);
              }
          };
          Comparison.prototype.outputDefined = function outputDefined () {
              return true;
          };
          Comparison.prototype.serialize = function serialize () {
              var serialized = [op];
              this.eachChild(function (child) {
                  serialized.push(child.serialize());
              });
              return serialized;
          };

          return Comparison;
      }());
  }
  var Equals = makeComparison('==', eq, eqCollate);
  var NotEquals = makeComparison('!=', neq, neqCollate);
  var LessThan = makeComparison('<', lt, ltCollate);
  var GreaterThan = makeComparison('>', gt, gtCollate);
  var LessThanOrEqual = makeComparison('<=', lteq, lteqCollate);
  var GreaterThanOrEqual = makeComparison('>=', gteq, gteqCollate);

  //      
  var NumberFormat = function NumberFormat(number, locale, currency, unit, minFractionDigits, maxFractionDigits) {
      this.type = StringType;
      this.number = number;
      this.locale = locale;
      this.currency = currency;
      this.unit = unit;
      this.minFractionDigits = minFractionDigits;
      this.maxFractionDigits = maxFractionDigits;
  };
  NumberFormat.parse = function parse (args, context) {
      if (args.length !== 3)
          { return context.error("Expected two arguments."); }
      var number = context.parse(args[1], 1, NumberType);
      if (!number)
          { return null; }
      var options = args[2];
      if (typeof options !== 'object' || Array.isArray(options))
          { return context.error("NumberFormat options argument must be an object."); }
      var locale = null;
      if (options['locale']) {
          locale = context.parse(options['locale'], 1, StringType);
          if (!locale)
              { return null; }
      }
      var currency = null;
      if (options['currency']) {
          currency = context.parse(options['currency'], 1, StringType);
          if (!currency)
              { return null; }
      }
      var unit = null;
      if (options['unit']) {
          unit = context.parse(options['unit'], 1, StringType);
          if (!unit)
              { return null; }
      }
      var minFractionDigits = null;
      if (options['min-fraction-digits']) {
          minFractionDigits = context.parse(options['min-fraction-digits'], 1, NumberType);
          if (!minFractionDigits)
              { return null; }
      }
      var maxFractionDigits = null;
      if (options['max-fraction-digits']) {
          maxFractionDigits = context.parse(options['max-fraction-digits'], 1, NumberType);
          if (!maxFractionDigits)
              { return null; }
      }
      return new NumberFormat(number, locale, currency, unit, minFractionDigits, maxFractionDigits);
  };
  NumberFormat.prototype.evaluate = function evaluate (ctx) {
      return new Intl.NumberFormat(this.locale ? this.locale.evaluate(ctx) : [], {
          style: this.currency && 'currency' || this.unit && 'unit' || 'decimal',
          currency: this.currency ? this.currency.evaluate(ctx) : undefined,
          unit: this.unit ? this.unit.evaluate(ctx) : undefined,
          minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(ctx) : undefined,
          maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(ctx) : undefined
      }).format(this.number.evaluate(ctx));
  };
  NumberFormat.prototype.eachChild = function eachChild (fn) {
      fn(this.number);
      if (this.locale) {
          fn(this.locale);
      }
      if (this.currency) {
          fn(this.currency);
      }
      if (this.unit) {
          fn(this.unit);
      }
      if (this.minFractionDigits) {
          fn(this.minFractionDigits);
      }
      if (this.maxFractionDigits) {
          fn(this.maxFractionDigits);
      }
  };
  NumberFormat.prototype.outputDefined = function outputDefined () {
      return false;
  };
  NumberFormat.prototype.serialize = function serialize () {
      var options = {};
      if (this.locale) {
          options['locale'] = this.locale.serialize();
      }
      if (this.currency) {
          options['currency'] = this.currency.serialize();
      }
      if (this.unit) {
          options['unit'] = this.unit.serialize();
      }
      if (this.minFractionDigits) {
          options['min-fraction-digits'] = this.minFractionDigits.serialize();
      }
      if (this.maxFractionDigits) {
          options['max-fraction-digits'] = this.maxFractionDigits.serialize();
      }
      return [
          'number-format',
          this.number.serialize(),
          options
      ];
  };

  var NumberFormat$1 = NumberFormat;

  //      
  var Length = function Length(input) {
      this.type = NumberType;
      this.input = input;
  };
  Length.parse = function parse (args, context) {
      if (args.length !== 2)
          { return context.error(("Expected 1 argument, but found " + (args.length - 1) + " instead.")); }
      var input = context.parse(args[1], 1);
      if (!input)
          { return null; }
      if (input.type.kind !== 'array' && input.type.kind !== 'string' && input.type.kind !== 'value')
          { return context.error(("Expected argument of type string or array, but found " + (toString$1$1(input.type)) + " instead.")); }
      return new Length(input);
  };
  Length.prototype.evaluate = function evaluate (ctx) {
      var input = this.input.evaluate(ctx);
      if (typeof input === 'string') {
          return input.length;
      } else if (Array.isArray(input)) {
          return input.length;
      } else {
          throw new RuntimeError$1(("Expected value to be of type string or array, but found " + (toString$1$1(typeOf(input))) + " instead."));
      }
  };
  Length.prototype.eachChild = function eachChild (fn) {
      fn(this.input);
  };
  Length.prototype.outputDefined = function outputDefined () {
      return false;
  };
  Length.prototype.serialize = function serialize () {
      var serialized = ['length'];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };
  var Length$1 = Length;

  //      
  var expressions = {
      // special forms
      '==': Equals,
      '!=': NotEquals,
      '>': GreaterThan,
      '<': LessThan,
      '>=': GreaterThanOrEqual,
      '<=': LessThanOrEqual,
      'array': Assertion$1,
      'at': At$1,
      'boolean': Assertion$1,
      'case': Case$1,
      'coalesce': Coalesce$1,
      'collator': CollatorExpression$1,
      'format': FormatExpression$1,
      'image': ImageExpression$1,
      'in': In$1,
      'index-of': IndexOf$1,
      'interpolate': Interpolate$1,
      'interpolate-hcl': Interpolate$1,
      'interpolate-lab': Interpolate$1,
      'length': Length$1,
      'let': Let$1,
      'literal': Literal$1,
      'match': Match$1,
      'number': Assertion$1,
      'number-format': NumberFormat$1,
      'object': Assertion$1,
      'slice': Slice$1,
      'step': Step$1,
      'string': Assertion$1,
      'to-boolean': Coercion$1,
      'to-color': Coercion$1,
      'to-number': Coercion$1,
      'to-string': Coercion$1,
      'var': Var$1,
      'within': Within$1
  };
  function rgba(ctx, ref) {
      var r = ref[0];
      var g = ref[1];
      var b = ref[2];
      var a = ref[3];

      r = r.evaluate(ctx);
      g = g.evaluate(ctx);
      b = b.evaluate(ctx);
      var alpha = a ? a.evaluate(ctx) : 1;
      var error = validateRGBA(r, g, b, alpha);
      if (error)
          { throw new RuntimeError$1(error); }
      return new Color$1(r / 255 * alpha, g / 255 * alpha, b / 255 * alpha, alpha);
  }
  function has(key, obj) {
      return key in obj;
  }
  function get(key, obj) {
      var v = obj[key];
      return typeof v === 'undefined' ? null : v;
  }
  function binarySearch(v, a, i, j) {
      while (i <= j) {
          var m = i + j >> 1;
          if (a[m] === v)
              { return true; }
          if (a[m] > v)
              { j = m - 1; }
          else
              { i = m + 1; }
      }
      return false;
  }
  function varargs(type) {
      return { type: type };
  }
  CompoundExpression$1.register(expressions, {
      'error': [
          ErrorType,
          [StringType],
          function (ctx, ref) {
              var v = ref[0];

              throw new RuntimeError$1(v.evaluate(ctx));
          }
      ],
      'typeof': [
          StringType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];

              return toString$1$1(typeOf(v.evaluate(ctx)));
  }
      ],
      'to-rgba': [
          array$1(NumberType, 4),
          [ColorType],
          function (ctx, ref) {
              var v = ref[0];

              return v.evaluate(ctx).toArray();
          }
      ],
      'rgb': [
          ColorType,
          [
              NumberType,
              NumberType,
              NumberType
          ],
          rgba
      ],
      'rgba': [
          ColorType,
          [
              NumberType,
              NumberType,
              NumberType,
              NumberType
          ],
          rgba
      ],
      'has': {
          type: BooleanType,
          overloads: [
              [
                  [StringType],
                  function (ctx, ref) {
                      var key = ref[0];

                      return has(key.evaluate(ctx), ctx.properties());
  }
              ],
              [
                  [
                      StringType,
                      ObjectType
                  ],
                  function (ctx, ref) {
                      var key = ref[0];
                      var obj = ref[1];

                      return has(key.evaluate(ctx), obj.evaluate(ctx));
  }
              ]
          ]
      },
      'get': {
          type: ValueType,
          overloads: [
              [
                  [StringType],
                  function (ctx, ref) {
                      var key = ref[0];

                      return get(key.evaluate(ctx), ctx.properties());
  }
              ],
              [
                  [
                      StringType,
                      ObjectType
                  ],
                  function (ctx, ref) {
                      var key = ref[0];
                      var obj = ref[1];

                      return get(key.evaluate(ctx), obj.evaluate(ctx));
  }
              ]
          ]
      },
      'feature-state': [
          ValueType,
          [StringType],
          function (ctx, ref) {
              var key = ref[0];

              return get(key.evaluate(ctx), ctx.featureState || {});
  }
      ],
      'properties': [
          ObjectType,
          [],
          function (ctx) { return ctx.properties(); }
      ],
      'geometry-type': [
          StringType,
          [],
          function (ctx) { return ctx.geometryType(); }
      ],
      'id': [
          ValueType,
          [],
          function (ctx) { return ctx.id(); }
      ],
      'zoom': [
          NumberType,
          [],
          function (ctx) { return ctx.globals.zoom; }
      ],
      'pitch': [
          NumberType,
          [],
          function (ctx) { return ctx.globals.pitch || 0; }
      ],
      'distance-from-center': [
          NumberType,
          [],
          function (ctx) { return ctx.distanceFromCenter(); }
      ],
      'heatmap-density': [
          NumberType,
          [],
          function (ctx) { return ctx.globals.heatmapDensity || 0; }
      ],
      'line-progress': [
          NumberType,
          [],
          function (ctx) { return ctx.globals.lineProgress || 0; }
      ],
      'sky-radial-progress': [
          NumberType,
          [],
          function (ctx) { return ctx.globals.skyRadialProgress || 0; }
      ],
      'accumulated': [
          ValueType,
          [],
          function (ctx) { return ctx.globals.accumulated === undefined ? null : ctx.globals.accumulated; }
      ],
      '+': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) {
              var result = 0;
              for (var i = 0, list = args; i < list.length; i += 1) {
                  var arg = list[i];

                  result += arg.evaluate(ctx);
              }
              return result;
          }
      ],
      '*': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) {
              var result = 1;
              for (var i = 0, list = args; i < list.length; i += 1) {
                  var arg = list[i];

                  result *= arg.evaluate(ctx);
              }
              return result;
          }
      ],
      '-': {
          type: NumberType,
          overloads: [
              [
                  [
                      NumberType,
                      NumberType
                  ],
                  function (ctx, ref) {
                      var a = ref[0];
                      var b = ref[1];

                      return a.evaluate(ctx) - b.evaluate(ctx);
  }
              ],
              [
                  [NumberType],
                  function (ctx, ref) {
                      var a = ref[0];

                      return -a.evaluate(ctx);
  }
              ]
          ]
      },
      '/': [
          NumberType,
          [
              NumberType,
              NumberType
          ],
          function (ctx, ref) {
              var a = ref[0];
              var b = ref[1];

              return a.evaluate(ctx) / b.evaluate(ctx);
  }
      ],
      '%': [
          NumberType,
          [
              NumberType,
              NumberType
          ],
          function (ctx, ref) {
              var a = ref[0];
              var b = ref[1];

              return a.evaluate(ctx) % b.evaluate(ctx);
  }
      ],
      'ln2': [
          NumberType,
          [],
          function () { return Math.LN2; }
      ],
      'pi': [
          NumberType,
          [],
          function () { return Math.PI; }
      ],
      'e': [
          NumberType,
          [],
          function () { return Math.E; }
      ],
      '^': [
          NumberType,
          [
              NumberType,
              NumberType
          ],
          function (ctx, ref) {
              var b = ref[0];
              var e = ref[1];

              return Math.pow(b.evaluate(ctx), e.evaluate(ctx));
  }
      ],
      'sqrt': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var x = ref[0];

              return Math.sqrt(x.evaluate(ctx));
  }
      ],
      'log10': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.log(n.evaluate(ctx)) / Math.LN10;
  }
      ],
      'ln': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.log(n.evaluate(ctx));
  }
      ],
      'log2': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.log(n.evaluate(ctx)) / Math.LN2;
  }
      ],
      'sin': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.sin(n.evaluate(ctx));
  }
      ],
      'cos': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.cos(n.evaluate(ctx));
  }
      ],
      'tan': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.tan(n.evaluate(ctx));
  }
      ],
      'asin': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.asin(n.evaluate(ctx));
  }
      ],
      'acos': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.acos(n.evaluate(ctx));
  }
      ],
      'atan': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.atan(n.evaluate(ctx));
  }
      ],
      'min': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) { return Math.min.apply(Math, args.map(function (arg) { return arg.evaluate(ctx); })); }
      ],
      'max': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) { return Math.max.apply(Math, args.map(function (arg) { return arg.evaluate(ctx); })); }
      ],
      'abs': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.abs(n.evaluate(ctx));
  }
      ],
      'round': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              var v = n.evaluate(ctx);
              // Javascript's Math.round() rounds towards +Infinity for halfway
              // values, even when they're negative. It's more common to round
              // away from 0 (e.g., this is what python and C++ do)
              return v < 0 ? -Math.round(-v) : Math.round(v);
          }
      ],
      'floor': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.floor(n.evaluate(ctx));
  }
      ],
      'ceil': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];

              return Math.ceil(n.evaluate(ctx));
  }
      ],
      'filter-==': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              return ctx.properties()[k.value] === v.value;
  }
      ],
      'filter-id-==': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];

              return ctx.id() === v.value;
  }
      ],
      'filter-type-==': [
          BooleanType,
          [StringType],
          function (ctx, ref) {
              var v = ref[0];

              return ctx.geometryType() === v.value;
  }
      ],
      'filter-<': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a < b;
          }
      ],
      'filter-id-<': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];

              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a < b;
          }
      ],
      'filter->': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a > b;
          }
      ],
      'filter-id->': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];

              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a > b;
          }
      ],
      'filter-<=': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a <= b;
          }
      ],
      'filter-id-<=': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];

              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a <= b;
          }
      ],
      'filter->=': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a >= b;
          }
      ],
      'filter-id->=': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];

              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a >= b;
          }
      ],
      'filter-has': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var k = ref[0];

              return k.value in ctx.properties();
  }
      ],
      'filter-has-id': [
          BooleanType,
          [],
          function (ctx) { return ctx.id() !== null && ctx.id() !== undefined; }
      ],
      'filter-type-in': [
          BooleanType,
          [array$1(StringType)],
          function (ctx, ref) {
              var v = ref[0];

              return v.value.indexOf(ctx.geometryType()) >= 0;
  }
      ],
      'filter-id-in': [
          BooleanType,
          [array$1(ValueType)],
          function (ctx, ref) {
              var v = ref[0];

              return v.value.indexOf(ctx.id()) >= 0;
  }
      ],
      'filter-in-small': [
          BooleanType,
          [
              StringType,
              array$1(ValueType)
          ],
          // assumes v is an array literal
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              return v.value.indexOf(ctx.properties()[k.value]) >= 0;
  }
      ],
      'filter-in-large': [
          BooleanType,
          [
              StringType,
              array$1(ValueType)
          ],
          // assumes v is a array literal with values sorted in ascending order and of a single type
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];

              return binarySearch(ctx.properties()[k.value], v.value, 0, v.value.length - 1);
  }
      ],
      'all': {
          type: BooleanType,
          overloads: [
              [
                  [
                      BooleanType,
                      BooleanType
                  ],
                  function (ctx, ref) {
                      var a = ref[0];
                      var b = ref[1];

                      return a.evaluate(ctx) && b.evaluate(ctx);
  }
              ],
              [
                  varargs(BooleanType),
                  function (ctx, args) {
                      for (var i = 0, list = args; i < list.length; i += 1) {
                          var arg = list[i];

                          if (!arg.evaluate(ctx))
                              { return false; }
                      }
                      return true;
                  }
              ]
          ]
      },
      'any': {
          type: BooleanType,
          overloads: [
              [
                  [
                      BooleanType,
                      BooleanType
                  ],
                  function (ctx, ref) {
                      var a = ref[0];
                      var b = ref[1];

                      return a.evaluate(ctx) || b.evaluate(ctx);
  }
              ],
              [
                  varargs(BooleanType),
                  function (ctx, args) {
                      for (var i = 0, list = args; i < list.length; i += 1) {
                          var arg = list[i];

                          if (arg.evaluate(ctx))
                              { return true; }
                      }
                      return false;
                  }
              ]
          ]
      },
      '!': [
          BooleanType,
          [BooleanType],
          function (ctx, ref) {
              var b = ref[0];

              return !b.evaluate(ctx);
  }
      ],
      'is-supported-script': [
          BooleanType,
          [StringType],
          // At parse time this will always return true, so we need to exclude this expression with isGlobalPropertyConstant
          function (ctx, ref) {
              var s = ref[0];

              var isSupportedScript = ctx.globals && ctx.globals.isSupportedScript;
              if (isSupportedScript) {
                  return isSupportedScript(s.evaluate(ctx));
              }
              return true;
          }
      ],
      'upcase': [
          StringType,
          [StringType],
          function (ctx, ref) {
              var s = ref[0];

              return s.evaluate(ctx).toUpperCase();
  }
      ],
      'downcase': [
          StringType,
          [StringType],
          function (ctx, ref) {
              var s = ref[0];

              return s.evaluate(ctx).toLowerCase();
  }
      ],
      'concat': [
          StringType,
          varargs(ValueType),
          function (ctx, args) { return args.map(function (arg) { return toString$2(arg.evaluate(ctx)); }).join(''); }
      ],
      'resolved-locale': [
          StringType,
          [CollatorType],
          function (ctx, ref) {
              var collator = ref[0];

              return collator.evaluate(ctx).resolvedLocale();
  }
      ]
  });
  var definitions = expressions;

  //      
  /**
   * A type used for returning and propagating errors. The first element of the union
   * represents success and contains a value, and the second represents an error and
   * contains an error value.
   * @private
   */
  function success(value) {
      return {
          result: 'success',
          value: value
      };
  }
  function error(value) {
      return {
          result: 'error',
          value: value
      };
  }

  //      
  function supportsPropertyExpression(spec) {
      return spec['property-type'] === 'data-driven' || spec['property-type'] === 'cross-faded-data-driven';
  }
  function supportsZoomExpression(spec) {
      return !!spec.expression && spec.expression.parameters.indexOf('zoom') > -1;
  }
  function supportsInterpolation(spec) {
      return !!spec.expression && spec.expression.interpolated;
  }

  function isFunction(value) {
      return typeof value === 'object' && value !== null && !Array.isArray(value);
  }

  var StyleExpression = function StyleExpression(expression, propertySpec) {
      this.expression = expression;
      this._warningHistory = {};
      this._evaluator = new EvaluationContext$1();
      this._defaultValue = propertySpec ? getDefaultValue(propertySpec) : null;
      this._enumValues = propertySpec && propertySpec.type === 'enum' ? propertySpec.values : null;
  };
  StyleExpression.prototype.evaluateWithoutErrorHandling = function evaluateWithoutErrorHandling (globals, feature, featureState, canonical, availableImages, formattedSection, featureTileCoord, featureDistanceData) {
      this._evaluator.globals = globals;
      this._evaluator.feature = feature;
      this._evaluator.featureState = featureState;
      this._evaluator.canonical = canonical || null;
      this._evaluator.availableImages = availableImages || null;
      this._evaluator.formattedSection = formattedSection;
      this._evaluator.featureTileCoord = featureTileCoord || null;
      this._evaluator.featureDistanceData = featureDistanceData || null;
      return this.expression.evaluate(this._evaluator);
  };
  StyleExpression.prototype.evaluate = function evaluate (globals, feature, featureState, canonical, availableImages, formattedSection, featureTileCoord, featureDistanceData) {
      this._evaluator.globals = globals;
      this._evaluator.feature = feature || null;
      this._evaluator.featureState = featureState || null;
      this._evaluator.canonical = canonical || null;
      this._evaluator.availableImages = availableImages || null;
      this._evaluator.formattedSection = formattedSection || null;
      this._evaluator.featureTileCoord = featureTileCoord || null;
      this._evaluator.featureDistanceData = featureDistanceData || null;
      try {
          var val = this.expression.evaluate(this._evaluator);
          // eslint-disable-next-line no-self-compare
          if (val === null || val === undefined || typeof val === 'number' && val !== val) {
              return this._defaultValue;
          }
          if (this._enumValues && !(val in this._enumValues)) {
              throw new RuntimeError$1(("Expected value to be one of " + (Object.keys(this._enumValues).map(function (v) { return JSON.stringify(v); }).join(', ')) + ", but found " + (JSON.stringify(val)) + " instead."));
          }
          return val;
      } catch (e) {
          if (!this._warningHistory[e.message]) {
              this._warningHistory[e.message] = true;
              if (typeof console !== 'undefined') {
                  console.warn(e.message);
              }
          }
          return this._defaultValue;
      }
  };
  function isExpression(expression) {
      return Array.isArray(expression) && expression.length > 0 && typeof expression[0] === 'string' && expression[0] in definitions;
  }
  /**
   * Parse and typecheck the given style spec JSON expression.  If
   * options.defaultValue is provided, then the resulting StyleExpression's
   * `evaluate()` method will handle errors by logging a warning (once per
   * message) and returning the default value.  Otherwise, it will throw
   * evaluation errors.
   *
   * @private
   */
  function createExpression(expression, propertySpec) {
      var parser = new ParsingContext$1(definitions, [], propertySpec ? getExpectedType(propertySpec) : undefined);
      // For string-valued properties, coerce to string at the top level rather than asserting.
      var parsed = parser.parse(expression, undefined, undefined, undefined, propertySpec && propertySpec.type === 'string' ? { typeAnnotation: 'coerce' } : undefined);
      if (!parsed) {
          return error(parser.errors);
      }
      return success(new StyleExpression(parsed, propertySpec));
  }
  var ZoomConstantExpression = function ZoomConstantExpression(kind, expression) {
      this.kind = kind;
      this._styleExpression = expression;
      this.isStateDependent = kind !== 'constant' && !isStateConstant(expression.expression);
  };
  ZoomConstantExpression.prototype.evaluateWithoutErrorHandling = function evaluateWithoutErrorHandling (globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  ZoomConstantExpression.prototype.evaluate = function evaluate (globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  var ZoomDependentExpression = function ZoomDependentExpression(kind, expression, zoomStops, interpolationType) {
      this.kind = kind;
      this.zoomStops = zoomStops;
      this._styleExpression = expression;
      this.isStateDependent = kind !== 'camera' && !isStateConstant(expression.expression);
      this.interpolationType = interpolationType;
  };
  ZoomDependentExpression.prototype.evaluateWithoutErrorHandling = function evaluateWithoutErrorHandling (globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  ZoomDependentExpression.prototype.evaluate = function evaluate (globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  ZoomDependentExpression.prototype.interpolationFactor = function interpolationFactor (input, lower, upper) {
      if (this.interpolationType) {
          return Interpolate$1.interpolationFactor(this.interpolationType, input, lower, upper);
      } else {
          return 0;
      }
  };
  function createPropertyExpression(expression, propertySpec) {
      expression = createExpression(expression, propertySpec);
      if (expression.result === 'error') {
          return expression;
      }
      var parsed = expression.value.expression;
      var isFeatureConstant$1 = isFeatureConstant(parsed);
      if (!isFeatureConstant$1 && !supportsPropertyExpression(propertySpec)) {
          return error([new ParsingError$1('', 'data expressions not supported')]);
      }
      var isZoomConstant = isGlobalPropertyConstant(parsed, [
          'zoom',
          'pitch',
          'distance-from-center'
      ]);
      if (!isZoomConstant && !supportsZoomExpression(propertySpec)) {
          return error([new ParsingError$1('', 'zoom expressions not supported')]);
      }
      var zoomCurve = findZoomCurve(parsed);
      if (!zoomCurve && !isZoomConstant) {
          return error([new ParsingError$1('', '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);
      } else if (zoomCurve instanceof ParsingError$1) {
          return error([zoomCurve]);
      } else if (zoomCurve instanceof Interpolate$1 && !supportsInterpolation(propertySpec)) {
          return error([new ParsingError$1('', '"interpolate" expressions cannot be used with this property')]);
      }
      if (!zoomCurve) {
          return success(isFeatureConstant$1 ? new ZoomConstantExpression('constant', expression.value) : new ZoomConstantExpression('source', expression.value));
      }
      var interpolationType = zoomCurve instanceof Interpolate$1 ? zoomCurve.interpolation : undefined;
      return success(isFeatureConstant$1 ? new ZoomDependentExpression('camera', expression.value, zoomCurve.labels, interpolationType) : new ZoomDependentExpression('composite', expression.value, zoomCurve.labels, interpolationType));
  }
  // Zoom-dependent expressions may only use ["zoom"] as the input to a top-level "step" or "interpolate"
  // expression (collectively referred to as a "curve"). The curve may be wrapped in one or more "let" or
  // "coalesce" expressions.
  function findZoomCurve(expression) {
      var result = null;
      if (expression instanceof Let$1) {
          result = findZoomCurve(expression.result);
      } else if (expression instanceof Coalesce$1) {
          for (var i = 0, list = expression.args; i < list.length; i += 1) {
              var arg = list[i];

              result = findZoomCurve(arg);
              if (result) {
                  break;
              }
          }
      } else if ((expression instanceof Step$1 || expression instanceof Interpolate$1) && expression.input instanceof CompoundExpression$1 && expression.input.name === 'zoom') {
          result = expression;
      }
      if (result instanceof ParsingError$1) {
          return result;
      }
      expression.eachChild(function (child) {
          var childResult = findZoomCurve(child);
          if (childResult instanceof ParsingError$1) {
              result = childResult;
          } else if (!result && childResult) {
              result = new ParsingError$1('', '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.');
          } else if (result && childResult && result !== childResult) {
              result = new ParsingError$1('', 'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.');
          }
      });
      return result;
  }
  function getExpectedType(spec) {
      var types = {
          color: ColorType,
          string: StringType,
          number: NumberType,
          enum: StringType,
          boolean: BooleanType,
          formatted: FormattedType,
          resolvedImage: ResolvedImageType
      };
      if (spec.type === 'array') {
          return array$1(types[spec.value] || ValueType, spec.length);
      }
      return types[spec.type];
  }
  function getDefaultValue(spec) {
      if (spec.type === 'color' && (isFunction(spec.default) || Array.isArray(spec.default))) {
          // Special case for heatmap-color: it uses the 'default:' to define a
          // default color ramp, but createExpression expects a simple value to fall
          // back to in case of runtime errors
          return new Color$1(0, 0, 0, 0);
      } else if (spec.type === 'color') {
          return Color$1.parse(spec.default) || null;
      } else if (spec.default === undefined) {
          return null;
      } else {
          return spec.default;
      }
  }

  //      
  // Turn jsonlint-lines-primitives objects into primitive objects
  function unbundle(value) {
      if (value instanceof Number || value instanceof String || value instanceof Boolean) {
          return value.valueOf();
      } else {
          return value;
      }
  }
  function deepUnbundle(value) {
      if (Array.isArray(value)) {
          return value.map(deepUnbundle);
      } else if (value instanceof Object && !(value instanceof Number || value instanceof String || value instanceof Boolean)) {
          var unbundledValue = {};
          for (var key in value) {
              unbundledValue[key] = deepUnbundle(value[key]);
          }
          return unbundledValue;
      }
      return unbundle(value);
  }

  var spec = {"$version":8,"$root":{"version":{"required":true,"type":"enum","values":[8]},"name":{"type":"string"},"metadata":{"type":"*"},"center":{"type":"array","value":"number"},"zoom":{"type":"number"},"bearing":{"type":"number","default":0,"period":360,"units":"degrees"},"pitch":{"type":"number","default":0,"units":"degrees"},"light":{"type":"light"},"terrain":{"type":"terrain"},"fog":{"type":"fog"},"sources":{"required":true,"type":"sources"},"sprite":{"type":"string"},"glyphs":{"type":"string"},"transition":{"type":"transition"},"projection":{"type":"projection"},"layers":{"required":true,"type":"array","value":"layer"}},"sources":{"*":{"type":"source"}},"source":["source_vector","source_raster","source_raster_dem","source_geojson","source_video","source_image"],"source_vector":{"type":{"required":true,"type":"enum","values":{"vector":{}}},"url":{"type":"string"},"tiles":{"type":"array","value":"string"},"bounds":{"type":"array","value":"number","length":4,"default":[-180,-85.051129,180,85.051129]},"scheme":{"type":"enum","values":{"xyz":{},"tms":{}},"default":"xyz"},"minzoom":{"type":"number","default":0},"maxzoom":{"type":"number","default":22},"attribution":{"type":"string"},"promoteId":{"type":"promoteId"},"volatile":{"type":"boolean","default":false},"*":{"type":"*"}},"source_raster":{"type":{"required":true,"type":"enum","values":{"raster":{}}},"url":{"type":"string"},"tiles":{"type":"array","value":"string"},"bounds":{"type":"array","value":"number","length":4,"default":[-180,-85.051129,180,85.051129]},"minzoom":{"type":"number","default":0},"maxzoom":{"type":"number","default":22},"tileSize":{"type":"number","default":512,"units":"pixels"},"scheme":{"type":"enum","values":{"xyz":{},"tms":{}},"default":"xyz"},"attribution":{"type":"string"},"volatile":{"type":"boolean","default":false},"*":{"type":"*"}},"source_raster_dem":{"type":{"required":true,"type":"enum","values":{"raster-dem":{}}},"url":{"type":"string"},"tiles":{"type":"array","value":"string"},"bounds":{"type":"array","value":"number","length":4,"default":[-180,-85.051129,180,85.051129]},"minzoom":{"type":"number","default":0},"maxzoom":{"type":"number","default":22},"tileSize":{"type":"number","default":512,"units":"pixels"},"attribution":{"type":"string"},"encoding":{"type":"enum","values":{"terrarium":{},"mapbox":{}},"default":"mapbox"},"volatile":{"type":"boolean","default":false},"*":{"type":"*"}},"source_geojson":{"type":{"required":true,"type":"enum","values":{"geojson":{}}},"data":{"type":"*"},"maxzoom":{"type":"number","default":18},"attribution":{"type":"string"},"buffer":{"type":"number","default":128,"maximum":512,"minimum":0},"filter":{"type":"*"},"tolerance":{"type":"number","default":0.375},"cluster":{"type":"boolean","default":false},"clusterRadius":{"type":"number","default":50,"minimum":0},"clusterMaxZoom":{"type":"number"},"clusterMinPoints":{"type":"number"},"clusterProperties":{"type":"*"},"lineMetrics":{"type":"boolean","default":false},"generateId":{"type":"boolean","default":false},"promoteId":{"type":"promoteId"}},"source_video":{"type":{"required":true,"type":"enum","values":{"video":{}}},"urls":{"required":true,"type":"array","value":"string"},"coordinates":{"required":true,"type":"array","length":4,"value":{"type":"array","length":2,"value":"number"}}},"source_image":{"type":{"required":true,"type":"enum","values":{"image":{}}},"url":{"required":true,"type":"string"},"coordinates":{"required":true,"type":"array","length":4,"value":{"type":"array","length":2,"value":"number"}}},"layer":{"id":{"type":"string","required":true},"type":{"type":"enum","values":{"fill":{},"line":{},"symbol":{},"circle":{},"heatmap":{},"fill-extrusion":{},"raster":{},"hillshade":{},"background":{},"sky":{}},"required":true},"metadata":{"type":"*"},"source":{"type":"string"},"source-layer":{"type":"string"},"minzoom":{"type":"number","minimum":0,"maximum":24},"maxzoom":{"type":"number","minimum":0,"maximum":24},"filter":{"type":"filter"},"layout":{"type":"layout"},"paint":{"type":"paint"}},"layout":["layout_fill","layout_line","layout_circle","layout_heatmap","layout_fill-extrusion","layout_symbol","layout_raster","layout_hillshade","layout_background","layout_sky"],"layout_background":{"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_sky":{"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_fill":{"fill-sort-key":{"type":"number","expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_circle":{"circle-sort-key":{"type":"number","expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_heatmap":{"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_fill-extrusion":{"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"},"fill-extrusion-edge-radius":{"type":"number","private":true,"default":0,"minimum":0,"maximum":1,"property-type":"constant"}},"layout_line":{"line-cap":{"type":"enum","values":{"butt":{},"round":{},"square":{}},"default":"butt","expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"line-join":{"type":"enum","values":{"bevel":{},"round":{},"miter":{}},"default":"miter","expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"line-miter-limit":{"type":"number","default":2,"requires":[{"line-join":"miter"}],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"line-round-limit":{"type":"number","default":1.05,"requires":[{"line-join":"round"}],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"line-sort-key":{"type":"number","expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_symbol":{"symbol-placement":{"type":"enum","values":{"point":{},"line":{},"line-center":{}},"default":"point","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"symbol-spacing":{"type":"number","default":250,"minimum":1,"units":"pixels","requires":[{"symbol-placement":"line"}],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"symbol-avoid-edges":{"type":"boolean","default":false,"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"symbol-sort-key":{"type":"number","expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"symbol-z-order":{"type":"enum","values":{"auto":{},"viewport-y":{},"source":{}},"default":"auto","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-allow-overlap":{"type":"boolean","default":false,"requires":["icon-image"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-ignore-placement":{"type":"boolean","default":false,"requires":["icon-image"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-optional":{"type":"boolean","default":false,"requires":["icon-image","text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-rotation-alignment":{"type":"enum","values":{"map":{},"viewport":{},"auto":{}},"default":"auto","requires":["icon-image"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-size":{"type":"number","default":1,"minimum":0,"units":"factor of the original icon size","requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"icon-text-fit":{"type":"enum","values":{"none":{},"width":{},"height":{},"both":{}},"default":"none","requires":["icon-image","text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-text-fit-padding":{"type":"array","value":"number","length":4,"default":[0,0,0,0],"units":"pixels","requires":["icon-image","text-field",{"icon-text-fit":["both","width","height"]}],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"icon-image":{"type":"resolvedImage","tokens":true,"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"icon-rotate":{"type":"number","default":0,"period":360,"units":"degrees","requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"icon-padding":{"type":"number","default":2,"minimum":0,"units":"pixels","requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"icon-keep-upright":{"type":"boolean","default":false,"requires":["icon-image",{"icon-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"icon-offset":{"type":"array","value":"number","length":2,"default":[0,0],"requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"icon-anchor":{"type":"enum","values":{"center":{},"left":{},"right":{},"top":{},"bottom":{},"top-left":{},"top-right":{},"bottom-left":{},"bottom-right":{}},"default":"center","requires":["icon-image"],"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"icon-pitch-alignment":{"type":"enum","values":{"map":{},"viewport":{},"auto":{}},"default":"auto","requires":["icon-image"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-pitch-alignment":{"type":"enum","values":{"map":{},"viewport":{},"auto":{}},"default":"auto","requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-rotation-alignment":{"type":"enum","values":{"map":{},"viewport":{},"auto":{}},"default":"auto","requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-field":{"type":"formatted","default":"","tokens":true,"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-font":{"type":"array","value":"string","default":["Open Sans Regular","Arial Unicode MS Regular"],"requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-size":{"type":"number","default":16,"minimum":0,"units":"pixels","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-max-width":{"type":"number","default":10,"minimum":0,"units":"ems","requires":["text-field",{"symbol-placement":["point"]}],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-line-height":{"type":"number","default":1.2,"units":"ems","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-letter-spacing":{"type":"number","default":0,"units":"ems","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-justify":{"type":"enum","values":{"auto":{},"left":{},"center":{},"right":{}},"default":"center","requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-radial-offset":{"type":"number","units":"ems","default":0,"requires":["text-field"],"property-type":"data-driven","expression":{"interpolated":true,"parameters":["zoom","feature"]}},"text-variable-anchor":{"type":"array","value":"enum","values":{"center":{},"left":{},"right":{},"top":{},"bottom":{},"top-left":{},"top-right":{},"bottom-left":{},"bottom-right":{}},"requires":["text-field",{"symbol-placement":["point"]}],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-anchor":{"type":"enum","values":{"center":{},"left":{},"right":{},"top":{},"bottom":{},"top-left":{},"top-right":{},"bottom-left":{},"bottom-right":{}},"default":"center","requires":["text-field",{"!":"text-variable-anchor"}],"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-max-angle":{"type":"number","default":45,"units":"degrees","requires":["text-field",{"symbol-placement":["line","line-center"]}],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"text-writing-mode":{"type":"array","value":"enum","values":{"horizontal":{},"vertical":{}},"requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-rotate":{"type":"number","default":0,"period":360,"units":"degrees","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-padding":{"type":"number","default":2,"minimum":0,"units":"pixels","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"text-keep-upright":{"type":"boolean","default":true,"requires":["text-field",{"text-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-transform":{"type":"enum","values":{"none":{},"uppercase":{},"lowercase":{}},"default":"none","requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-offset":{"type":"array","value":"number","units":"ems","length":2,"default":[0,0],"requires":["text-field",{"!":"text-radial-offset"}],"expression":{"interpolated":true,"parameters":["zoom","feature"]},"property-type":"data-driven"},"text-allow-overlap":{"type":"boolean","default":false,"requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-ignore-placement":{"type":"boolean","default":false,"requires":["text-field"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-optional":{"type":"boolean","default":false,"requires":["text-field","icon-image"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_raster":{"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"layout_hillshade":{"visibility":{"type":"enum","values":{"visible":{},"none":{}},"default":"visible","property-type":"constant"}},"filter":{"type":"array","value":"*"},"filter_symbol":{"type":"boolean","default":false,"transition":false,"property-type":"data-driven","expression":{"interpolated":false,"parameters":["zoom","feature","pitch","distance-from-center"]}},"filter_fill":{"type":"boolean","default":false,"transition":false,"property-type":"data-driven","expression":{"interpolated":false,"parameters":["zoom","feature"]}},"filter_line":{"type":"boolean","default":false,"transition":false,"property-type":"data-driven","expression":{"interpolated":false,"parameters":["zoom","feature"]}},"filter_circle":{"type":"boolean","default":false,"transition":false,"property-type":"data-driven","expression":{"interpolated":false,"parameters":["zoom","feature"]}},"filter_fill-extrusion":{"type":"boolean","default":false,"transition":false,"property-type":"data-driven","expression":{"interpolated":false,"parameters":["zoom","feature"]}},"filter_heatmap":{"type":"boolean","default":false,"transition":false,"property-type":"data-driven","expression":{"interpolated":false,"parameters":["zoom","feature"]}},"filter_operator":{"type":"enum","values":{"==":{},"!=":{},">":{},">=":{},"<":{},"<=":{},"in":{},"!in":{},"all":{},"any":{},"none":{},"has":{},"!has":{},"within":{}}},"geometry_type":{"type":"enum","values":{"Point":{},"LineString":{},"Polygon":{}}},"function":{"expression":{"type":"expression"},"stops":{"type":"array","value":"function_stop"},"base":{"type":"number","default":1,"minimum":0},"property":{"type":"string","default":"$zoom"},"type":{"type":"enum","values":{"identity":{},"exponential":{},"interval":{},"categorical":{}},"default":"exponential"},"colorSpace":{"type":"enum","values":{"rgb":{},"lab":{},"hcl":{}},"default":"rgb"},"default":{"type":"*","required":false}},"function_stop":{"type":"array","minimum":0,"maximum":24,"value":["number","color"],"length":2},"expression":{"type":"array","value":"*","minimum":1},"expression_name":{"type":"enum","values":{"let":{"group":"Variable binding"},"var":{"group":"Variable binding"},"literal":{"group":"Types"},"array":{"group":"Types"},"at":{"group":"Lookup"},"in":{"group":"Lookup"},"index-of":{"group":"Lookup"},"slice":{"group":"Lookup"},"case":{"group":"Decision"},"match":{"group":"Decision"},"coalesce":{"group":"Decision"},"step":{"group":"Ramps, scales, curves"},"interpolate":{"group":"Ramps, scales, curves"},"interpolate-hcl":{"group":"Ramps, scales, curves"},"interpolate-lab":{"group":"Ramps, scales, curves"},"ln2":{"group":"Math"},"pi":{"group":"Math"},"e":{"group":"Math"},"typeof":{"group":"Types"},"string":{"group":"Types"},"number":{"group":"Types"},"boolean":{"group":"Types"},"object":{"group":"Types"},"collator":{"group":"Types"},"format":{"group":"Types"},"image":{"group":"Types"},"number-format":{"group":"Types"},"to-string":{"group":"Types"},"to-number":{"group":"Types"},"to-boolean":{"group":"Types"},"to-rgba":{"group":"Color"},"to-color":{"group":"Types"},"rgb":{"group":"Color"},"rgba":{"group":"Color"},"get":{"group":"Lookup"},"has":{"group":"Lookup"},"length":{"group":"Lookup"},"properties":{"group":"Feature data"},"feature-state":{"group":"Feature data"},"geometry-type":{"group":"Feature data"},"id":{"group":"Feature data"},"zoom":{"group":"Camera"},"pitch":{"group":"Camera"},"distance-from-center":{"group":"Camera"},"heatmap-density":{"group":"Heatmap"},"line-progress":{"group":"Feature data"},"sky-radial-progress":{"group":"sky"},"accumulated":{"group":"Feature data"},"+":{"group":"Math"},"*":{"group":"Math"},"-":{"group":"Math"},"/":{"group":"Math"},"%":{"group":"Math"},"^":{"group":"Math"},"sqrt":{"group":"Math"},"log10":{"group":"Math"},"ln":{"group":"Math"},"log2":{"group":"Math"},"sin":{"group":"Math"},"cos":{"group":"Math"},"tan":{"group":"Math"},"asin":{"group":"Math"},"acos":{"group":"Math"},"atan":{"group":"Math"},"min":{"group":"Math"},"max":{"group":"Math"},"round":{"group":"Math"},"abs":{"group":"Math"},"ceil":{"group":"Math"},"floor":{"group":"Math"},"distance":{"group":"Math"},"==":{"group":"Decision"},"!=":{"group":"Decision"},">":{"group":"Decision"},"<":{"group":"Decision"},">=":{"group":"Decision"},"<=":{"group":"Decision"},"all":{"group":"Decision"},"any":{"group":"Decision"},"!":{"group":"Decision"},"within":{"group":"Decision"},"is-supported-script":{"group":"String"},"upcase":{"group":"String"},"downcase":{"group":"String"},"concat":{"group":"String"},"resolved-locale":{"group":"String"}}},"fog":{"range":{"type":"array","default":[0.5,10],"minimum":-20,"maximum":20,"length":2,"value":"number","property-type":"data-constant","transition":true,"expression":{"interpolated":true,"parameters":["zoom"]}},"color":{"type":"color","property-type":"data-constant","default":"#ffffff","expression":{"interpolated":true,"parameters":["zoom"]},"transition":true},"high-color":{"type":"color","property-type":"data-constant","default":"#245cdf","expression":{"interpolated":true,"parameters":["zoom"]},"transition":true},"space-color":{"type":"color","property-type":"data-constant","default":["interpolate",["linear"],["zoom"],4,"#010b19",7,"#367ab9"],"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true},"horizon-blend":{"type":"number","property-type":"data-constant","default":["interpolate",["linear"],["zoom"],4,0.2,7,0.1],"minimum":0,"maximum":1,"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true},"star-intensity":{"type":"number","property-type":"data-constant","default":["interpolate",["linear"],["zoom"],5,0.35,6,0],"minimum":0,"maximum":1,"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true}},"light":{"anchor":{"type":"enum","default":"viewport","values":{"map":{},"viewport":{}},"property-type":"data-constant","transition":false,"expression":{"interpolated":false,"parameters":["zoom"]}},"position":{"type":"array","default":[1.15,210,30],"length":3,"value":"number","property-type":"data-constant","transition":true,"expression":{"interpolated":true,"parameters":["zoom"]}},"color":{"type":"color","property-type":"data-constant","default":"#ffffff","expression":{"interpolated":true,"parameters":["zoom"]},"transition":true},"intensity":{"type":"number","property-type":"data-constant","default":0.5,"minimum":0,"maximum":1,"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true}},"projection":{"name":{"type":"enum","values":{"albers":{},"equalEarth":{},"equirectangular":{},"lambertConformalConic":{},"mercator":{},"naturalEarth":{},"winkelTripel":{},"globe":{}},"default":"mercator","required":true},"center":{"type":"array","length":2,"value":"number","property-type":"data-constant","minimum":[-180,-90],"maximum":[180,90],"transition":false,"requires":[{"name":["albers","lambertConformalConic"]}]},"parallels":{"type":"array","length":2,"value":"number","property-type":"data-constant","minimum":[-90,-90],"maximum":[90,90],"transition":false,"requires":[{"name":["albers","lambertConformalConic"]}]}},"terrain":{"source":{"type":"string","required":true},"exaggeration":{"type":"number","property-type":"data-constant","default":1,"minimum":0,"maximum":1000,"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true,"requires":["source"]}},"paint":["paint_fill","paint_line","paint_circle","paint_heatmap","paint_fill-extrusion","paint_symbol","paint_raster","paint_hillshade","paint_background","paint_sky"],"paint_fill":{"fill-antialias":{"type":"boolean","default":true,"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"fill-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-color":{"type":"color","default":"#000000","transition":true,"requires":[{"!":"fill-pattern"}],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-outline-color":{"type":"color","transition":true,"requires":[{"!":"fill-pattern"},{"fill-antialias":true}],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-translate":{"type":"array","value":"number","length":2,"default":[0,0],"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"fill-translate-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","requires":["fill-translate"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"fill-pattern":{"type":"resolvedImage","transition":true,"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"cross-faded-data-driven"}},"paint_fill-extrusion":{"fill-extrusion-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"fill-extrusion-color":{"type":"color","default":"#000000","transition":true,"requires":[{"!":"fill-extrusion-pattern"}],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-translate":{"type":"array","value":"number","length":2,"default":[0,0],"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"fill-extrusion-translate-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","requires":["fill-extrusion-translate"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"fill-extrusion-pattern":{"type":"resolvedImage","transition":true,"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"cross-faded-data-driven"},"fill-extrusion-height":{"type":"number","default":0,"minimum":0,"units":"meters","transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-base":{"type":"number","default":0,"minimum":0,"units":"meters","transition":true,"requires":["fill-extrusion-height"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-vertical-gradient":{"type":"boolean","default":true,"transition":false,"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"fill-extrusion-ambient-occlusion-intensity":{"property-type":"data-constant","type":"number","private":true,"default":0,"minimum":0,"maximum":1,"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true},"fill-extrusion-ambient-occlusion-radius":{"property-type":"data-constant","type":"number","private":true,"default":3,"minimum":0,"expression":{"interpolated":true,"parameters":["zoom"]},"transition":true}},"paint_line":{"line-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-color":{"type":"color","default":"#000000","transition":true,"requires":[{"!":"line-pattern"}],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-translate":{"type":"array","value":"number","length":2,"default":[0,0],"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"line-translate-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","requires":["line-translate"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"line-width":{"type":"number","default":1,"minimum":0,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-gap-width":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-offset":{"type":"number","default":0,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-blur":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-dasharray":{"type":"array","value":"number","minimum":0,"transition":true,"units":"line widths","requires":[{"!":"line-pattern"}],"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"cross-faded-data-driven"},"line-pattern":{"type":"resolvedImage","transition":true,"expression":{"interpolated":false,"parameters":["zoom","feature"]},"property-type":"cross-faded-data-driven"},"line-gradient":{"type":"color","transition":false,"requires":[{"!":"line-pattern"},{"source":"geojson","has":{"lineMetrics":true}}],"expression":{"interpolated":true,"parameters":["line-progress"]},"property-type":"color-ramp"},"line-trim-offset":{"type":"array","value":"number","length":2,"default":[0,0],"minimum":[0,0],"maximum":[1,1],"transition":false,"requires":[{"source":"geojson","has":{"lineMetrics":true}}],"property-type":"constant"}},"paint_circle":{"circle-radius":{"type":"number","default":5,"minimum":0,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-color":{"type":"color","default":"#000000","transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-blur":{"type":"number","default":0,"transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-translate":{"type":"array","value":"number","length":2,"default":[0,0],"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"circle-translate-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","requires":["circle-translate"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"circle-pitch-scale":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"circle-pitch-alignment":{"type":"enum","values":{"map":{},"viewport":{}},"default":"viewport","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"circle-stroke-width":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-color":{"type":"color","default":"#000000","transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"}},"paint_heatmap":{"heatmap-radius":{"type":"number","default":30,"minimum":1,"transition":true,"units":"pixels","expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-weight":{"type":"number","default":1,"minimum":0,"transition":false,"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-intensity":{"type":"number","default":1,"minimum":0,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"heatmap-color":{"type":"color","default":["interpolate",["linear"],["heatmap-density"],0,"rgba(0, 0, 255, 0)",0.1,"royalblue",0.3,"cyan",0.5,"lime",0.7,"yellow",1,"red"],"transition":false,"expression":{"interpolated":true,"parameters":["heatmap-density"]},"property-type":"color-ramp"},"heatmap-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"}},"paint_symbol":{"icon-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-color":{"type":"color","default":"#000000","transition":true,"requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-color":{"type":"color","default":"rgba(0, 0, 0, 0)","transition":true,"requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-width":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-blur":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-translate":{"type":"array","value":"number","length":2,"default":[0,0],"transition":true,"units":"pixels","requires":["icon-image"],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"icon-translate-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","requires":["icon-image","icon-translate"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"text-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-color":{"type":"color","default":"#000000","transition":true,"overridable":true,"requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-color":{"type":"color","default":"rgba(0, 0, 0, 0)","transition":true,"requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-width":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-blur":{"type":"number","default":0,"minimum":0,"transition":true,"units":"pixels","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-translate":{"type":"array","value":"number","length":2,"default":[0,0],"transition":true,"units":"pixels","requires":["text-field"],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"text-translate-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"map","requires":["text-field","text-translate"],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"}},"paint_raster":{"raster-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"raster-hue-rotate":{"type":"number","default":0,"period":360,"transition":true,"units":"degrees","expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"raster-brightness-min":{"type":"number","default":0,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"raster-brightness-max":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"raster-saturation":{"type":"number","default":0,"minimum":-1,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"raster-contrast":{"type":"number","default":0,"minimum":-1,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"raster-resampling":{"type":"enum","values":{"linear":{},"nearest":{}},"default":"linear","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"raster-fade-duration":{"type":"number","default":300,"minimum":0,"transition":false,"units":"milliseconds","expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"}},"paint_hillshade":{"hillshade-illumination-direction":{"type":"number","default":335,"minimum":0,"maximum":359,"transition":false,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"hillshade-illumination-anchor":{"type":"enum","values":{"map":{},"viewport":{}},"default":"viewport","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"hillshade-exaggeration":{"type":"number","default":0.5,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"hillshade-shadow-color":{"type":"color","default":"#000000","transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"hillshade-highlight-color":{"type":"color","default":"#FFFFFF","transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"hillshade-accent-color":{"type":"color","default":"#000000","transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"}},"paint_background":{"background-color":{"type":"color","default":"#000000","transition":true,"requires":[{"!":"background-pattern"}],"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"},"background-pattern":{"type":"resolvedImage","transition":true,"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"cross-faded"},"background-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"}},"paint_sky":{"sky-type":{"type":"enum","values":{"gradient":{},"atmosphere":{}},"default":"atmosphere","expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun":{"type":"array","value":"number","length":2,"units":"degrees","minimum":[0,0],"maximum":[360,180],"transition":false,"requires":[{"sky-type":"atmosphere"}],"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun-intensity":{"type":"number","requires":[{"sky-type":"atmosphere"}],"default":10,"minimum":0,"maximum":100,"transition":false,"property-type":"data-constant"},"sky-gradient-center":{"type":"array","requires":[{"sky-type":"gradient"}],"value":"number","default":[0,0],"length":2,"units":"degrees","minimum":[0,0],"maximum":[360,180],"transition":false,"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"sky-gradient-radius":{"type":"number","requires":[{"sky-type":"gradient"}],"default":90,"minimum":0,"maximum":180,"transition":false,"expression":{"interpolated":false,"parameters":["zoom"]},"property-type":"data-constant"},"sky-gradient":{"type":"color","default":["interpolate",["linear"],["sky-radial-progress"],0.8,"#87ceeb",1,"white"],"transition":false,"requires":[{"sky-type":"gradient"}],"expression":{"interpolated":true,"parameters":["sky-radial-progress"]},"property-type":"color-ramp"},"sky-atmosphere-halo-color":{"type":"color","default":"white","transition":false,"requires":[{"sky-type":"atmosphere"}],"property-type":"data-constant"},"sky-atmosphere-color":{"type":"color","default":"white","transition":false,"requires":[{"sky-type":"atmosphere"}],"property-type":"data-constant"},"sky-opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"transition":true,"expression":{"interpolated":true,"parameters":["zoom"]},"property-type":"data-constant"}},"transition":{"duration":{"type":"number","default":300,"minimum":0,"units":"milliseconds"},"delay":{"type":"number","default":0,"minimum":0,"units":"milliseconds"}},"property-type":{"data-driven":{"type":"property-type"},"cross-faded":{"type":"property-type"},"cross-faded-data-driven":{"type":"property-type"},"color-ramp":{"type":"property-type"},"data-constant":{"type":"property-type"},"constant":{"type":"property-type"}},"promoteId":{"*":{"type":"string"}}};

  //      
  function isExpressionFilter(filter) {
      if (filter === true || filter === false) {
          return true;
      }
      if (!Array.isArray(filter) || filter.length === 0) {
          return false;
      }
      switch (filter[0]) {
      case 'has':
          return filter.length >= 2 && filter[1] !== '$id' && filter[1] !== '$type';
      case 'in':
          return filter.length >= 3 && (typeof filter[1] !== 'string' || Array.isArray(filter[2]));
      case '!in':
      case '!has':
      case 'none':
          return false;
      case '==':
      case '!=':
      case '>':
      case '>=':
      case '<':
      case '<=':
          return filter.length !== 3 || (Array.isArray(filter[1]) || Array.isArray(filter[2]));
      case 'any':
      case 'all':
          for (var i = 0, list = filter.slice(1); i < list.length; i += 1) {
              var f = list[i];

          if (!isExpressionFilter(f) && typeof f !== 'boolean') {
                  return false;
              }
          }
          return true;
      default:
          return true;
      }
  }
  /**
   * Given a filter expressed as nested arrays, return a new function
   * that evaluates whether a given feature (with a .properties or .tags property)
   * passes its test.
   *
   * @private
   * @param {Array} filter mapbox gl filter
   * @param {string} layerType the type of the layer this filter will be applied to.
   * @returns {Function} filter-evaluating function
   */
  function createFilter(filter, layerType) {
      if ( layerType === void 0 ) layerType = 'fill';

      if (filter === null || filter === undefined) {
          return {
              filter: function () { return true; },
              needGeometry: false,
              needFeature: false
          };
      }
      if (!isExpressionFilter(filter)) {
          filter = convertFilter(filter);
      }
      var filterExp = filter;
      var staticFilter = true;
      try {
          staticFilter = extractStaticFilter(filterExp);
      } catch (e) {
          console.warn(("Failed to extract static filter. Filter will continue working, but at higher memory usage and slower framerate.\nThis is most likely a bug, please report this via https://github.com/mapbox/mapbox-gl-js/issues/new?assignees=&labels=&template=Bug_report.md\nand paste the contents of this message in the report.\nThank you!\nFilter Expression:\n" + (JSON.stringify(filterExp, null, 2)) + "\n        "));
      }
      // Compile the static component of the filter
      var filterSpec = spec[("filter_" + layerType)];
      var compiledStaticFilter = createExpression(staticFilter, filterSpec);
      var filterFunc = null;
      if (compiledStaticFilter.result === 'error') {
          throw new Error(compiledStaticFilter.value.map(function (err) { return ((err.key) + ": " + (err.message)); }).join(', '));
      } else {
          filterFunc = function (globalProperties, feature, canonical) { return compiledStaticFilter.value.evaluate(globalProperties, feature, {}, canonical); };
      }
      // If the static component is not equal to the entire filter then we have a dynamic component
      // Compile the dynamic component separately
      var dynamicFilterFunc = null;
      var needFeature = null;
      if (staticFilter !== filterExp) {
          var compiledDynamicFilter = createExpression(filterExp, filterSpec);
          if (compiledDynamicFilter.result === 'error') {
              throw new Error(compiledDynamicFilter.value.map(function (err) { return ((err.key) + ": " + (err.message)); }).join(', '));
          } else {
              dynamicFilterFunc = function (globalProperties, feature, canonical, featureTileCoord, featureDistanceData) { return compiledDynamicFilter.value.evaluate(globalProperties, feature, {}, canonical, undefined, undefined, featureTileCoord, featureDistanceData); };
              needFeature = !isFeatureConstant(compiledDynamicFilter.value.expression);
          }
      }
      filterFunc = filterFunc;
      var needGeometry = geometryNeeded(staticFilter);
      return {
          filter: filterFunc,
          dynamicFilter: dynamicFilterFunc ? dynamicFilterFunc : undefined,
          needGeometry: needGeometry,
          needFeature: !!needFeature
      };
  }
  function extractStaticFilter(filter) {
      if (!isDynamicFilter(filter)) {
          return filter;
      }
      // Shallow copy so we can replace expressions in-place
      var result = deepUnbundle(filter);
      // 1. Union branches
      unionDynamicBranches(result);
      // 2. Collapse dynamic conditions to  `true`
      result = collapseDynamicBooleanExpressions(result);
      return result;
  }
  function collapseDynamicBooleanExpressions(expression) {
      if (!Array.isArray(expression)) {
          return expression;
      }
      var collapsed = collapsedExpression(expression);
      if (collapsed === true) {
          return collapsed;
      } else {
          return collapsed.map(function (subExpression) { return collapseDynamicBooleanExpressions(subExpression); });
      }
  }
  /**
   * Traverses the expression and replaces all instances of branching on a
   * `dynamic` conditional (such as `['pitch']` or `['distance-from-center']`)
   * into an `any` expression.
   * This ensures that all possible outcomes of a `dynamic` branch are considered
   * when evaluating the expression upfront during filtering.
   *
   * @param {Array<any>} filter the filter expression mutated in-place.
   */
  function unionDynamicBranches(filter) {
      var isBranchingDynamically = false;
      var branches = [];
      if (filter[0] === 'case') {
          for (var i = 1; i < filter.length - 1; i += 2) {
              isBranchingDynamically = isBranchingDynamically || isDynamicFilter(filter[i]);
              branches.push(filter[i + 1]);
          }
          branches.push(filter[filter.length - 1]);
      } else if (filter[0] === 'match') {
          isBranchingDynamically = isBranchingDynamically || isDynamicFilter(filter[1]);
          for (var i$1 = 2; i$1 < filter.length - 1; i$1 += 2) {
              branches.push(filter[i$1 + 1]);
          }
          branches.push(filter[filter.length - 1]);
      } else if (filter[0] === 'step') {
          isBranchingDynamically = isBranchingDynamically || isDynamicFilter(filter[1]);
          for (var i$2 = 1; i$2 < filter.length - 1; i$2 += 2) {
              branches.push(filter[i$2 + 1]);
          }
      }
      if (isBranchingDynamically) {
          filter.length = 0;
          filter.push.apply(filter, [ 'any' ].concat( branches ));
      }
      // traverse and recurse into children
      for (var i$3 = 1; i$3 < filter.length; i$3++) {
          unionDynamicBranches(filter[i$3]);
      }
  }
  function isDynamicFilter(filter) {
      // Base Cases
      if (!Array.isArray(filter)) {
          return false;
      }
      if (isRootExpressionDynamic(filter[0])) {
          return true;
      }
      for (var i = 1; i < filter.length; i++) {
          var child = filter[i];
          if (isDynamicFilter(child)) {
              return true;
          }
      }
      return false;
  }
  function isRootExpressionDynamic(expression) {
      return expression === 'pitch' || expression === 'distance-from-center';
  }
  var dynamicConditionExpressions = new Set([
      'in',
      '==',
      '!=',
      '>',
      '>=',
      '<',
      '<=',
      'to-boolean'
  ]);
  function collapsedExpression(expression) {
      if (dynamicConditionExpressions.has(expression[0])) {
          for (var i = 1; i < expression.length; i++) {
              var param = expression[i];
              if (isDynamicFilter(param)) {
                  return true;
              }
          }
      }
      return expression;
  }
  // Comparison function to sort numbers and strings
  function compare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }
  function geometryNeeded(filter) {
      if (!Array.isArray(filter))
          { return false; }
      if (filter[0] === 'within')
          { return true; }
      for (var index = 1; index < filter.length; index++) {
          if (geometryNeeded(filter[index]))
              { return true; }
      }
      return false;
  }
  function convertFilter(filter) {
      if (!filter)
          { return true; }
      var op = filter[0];
      if (filter.length <= 1)
          { return op !== 'any'; }
      var converted = op === '==' ? convertComparisonOp(filter[1], filter[2], '==') : op === '!=' ? convertNegation(convertComparisonOp(filter[1], filter[2], '==')) : op === '<' || op === '>' || op === '<=' || op === '>=' ? convertComparisonOp(filter[1], filter[2], op) : op === 'any' ? convertDisjunctionOp(filter.slice(1)) : op === 'all' ? ['all'].concat(filter.slice(1).map(convertFilter)) : op === 'none' ? ['all'].concat(filter.slice(1).map(convertFilter).map(convertNegation)) : op === 'in' ? convertInOp(filter[1], filter.slice(2)) : op === '!in' ? convertNegation(convertInOp(filter[1], filter.slice(2))) : op === 'has' ? convertHasOp(filter[1]) : op === '!has' ? convertNegation(convertHasOp(filter[1])) : op === 'within' ? filter : true;
      return converted;
  }
  function convertComparisonOp(property, value, op) {
      switch (property) {
      case '$type':
          return [
              ("filter-type-" + op),
              value
          ];
      case '$id':
          return [
              ("filter-id-" + op),
              value
          ];
      default:
          return [
              ("filter-" + op),
              property,
              value
          ];
      }
  }
  function convertDisjunctionOp(filters) {
      return ['any'].concat(filters.map(convertFilter));
  }
  function convertInOp(property, values) {
      if (values.length === 0) {
          return false;
      }
      switch (property) {
      case '$type':
          return [
              "filter-type-in",
              [
                  'literal',
                  values
              ]
          ];
      case '$id':
          return [
              "filter-id-in",
              [
                  'literal',
                  values
              ]
          ];
      default:
          if (values.length > 200 && !values.some(function (v) { return typeof v !== typeof values[0]; })) {
              return [
                  'filter-in-large',
                  property,
                  [
                      'literal',
                      values.sort(compare)
                  ]
              ];
          } else {
              return [
                  'filter-in-small',
                  property,
                  [
                      'literal',
                      values
                  ]
              ];
          }
      }
  }
  function convertHasOp(property) {
      switch (property) {
      case '$type':
          return true;
      case '$id':
          return ["filter-has-id"];
      default:
          return [
              "filter-has",
              property
          ];
      }
  }
  function convertNegation(filter) {
      return [
          '!',
          filter
      ];
  }

  //      
  var refProperties = [
      'type',
      'source',
      'source-layer',
      'minzoom',
      'maxzoom',
      'filter',
      'layout'
  ];

  //      
  function deref(layer, parent) {
      var result = {};
      for (var k in layer) {
          if (k !== 'ref') {
              result[k] = layer[k];
          }
      }
      refProperties.forEach(function (k) {
          if (k in parent) {
              result[k] = parent[k];
          }
      });
      return result;
  }
  /**
   * Given an array of layers, some of which may contain `ref` properties
   * whose value is the `id` of another property, return a new array where
   * such layers have been augmented with the 'type', 'source', etc. properties
   * from the parent layer, and the `ref` property has been removed.
   *
   * The input is not modified. The output may contain references to portions
   * of the input.
   *
   * @private
   * @param {Array<Layer>} layers
   * @returns {Array<Layer>}
   */
  function derefLayers(layers) {
      layers = layers.slice();
      var map = Object.create(null);
      for (var i = 0; i < layers.length; i++) {
          map[layers[i].id] = layers[i];
      }
      for (var i$1 = 0; i$1 < layers.length; i$1++) {
          if ('ref' in layers[i$1]) {
              layers[i$1] = deref(layers[i$1], map[layers[i$1].ref]);
          }
      }
      return layers;
  }

  var fontWeights = {
      thin: 100,
      hairline: 100,
      'ultra-light': 100,
      'extra-light': 100,
      light: 200,
      book: 300,
      regular: 400,
      normal: 400,
      plain: 400,
      roman: 400,
      standard: 400,
      medium: 500,
      'semi-bold': 600,
      'demi-bold': 600,
      bold: 700,
      heavy: 800,
      black: 800,
      'extra-bold': 800,
      'ultra-black': 900,
      'extra-black': 900,
      'ultra-bold': 900,
      'heavy-black': 900,
      fat: 900,
      poster: 900
  };
  var sp = ' ';
  var italicRE = /(italic|oblique)$/i;
  var fontCache = {};
  var mapboxToCssFont = function (fonts, size, lineHeight) {
      var cssData = fontCache[fonts];
      if (!cssData) {
          if (!Array.isArray(fonts)) {
              fonts = [fonts];
          }
          var weight = 400;
          var style = 'normal';
          var fontFamilies = [];
          var haveWeight, haveStyle;
          for (var i = 0, ii = fonts.length; i < ii; ++i) {
              var font = fonts[i];
              var parts = font.split(' ');
              var maybeWeight = parts[parts.length - 1].toLowerCase();
              if (maybeWeight == 'normal' || maybeWeight == 'italic' || maybeWeight == 'oblique') {
                  style = haveStyle ? style : maybeWeight;
                  parts.pop();
                  maybeWeight = parts[parts.length - 1].toLowerCase();
              } else if (italicRE.test(maybeWeight)) {
                  maybeWeight = maybeWeight.replace(italicRE, '');
                  style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, '');
              }
              for (var w in fontWeights) {
                  var previousPart = parts.length > 1 ? parts[parts.length - 2].toLowerCase() : '';
                  if (maybeWeight == w || maybeWeight == w.replace('-', '') || previousPart + '-' + maybeWeight == w) {
                      weight = haveWeight ? weight : fontWeights[w];
                      parts.pop();
                      if (previousPart && w.startsWith(previousPart)) {
                          parts.pop();
                      }
                      break;
                  }
              }
              if (!haveWeight && typeof maybeWeight == 'number') {
                  weight = maybeWeight;
              }
              var fontFamily = parts.join(sp).replace('Klokantech Noto Sans', 'Noto Sans');
              if (fontFamily.indexOf(sp) !== -1) {
                  fontFamily = '"' + fontFamily + '"';
              }
              fontFamilies.push(fontFamily);
          }
          // CSS font property: font-style font-weight font-size/line-height font-family
          cssData = fontCache[fonts] = [
              style,
              weight,
              fontFamilies
          ];
      }
      return cssData[0] + sp + cssData[1] + sp + size + 'px' + (lineHeight ? '/' + lineHeight : '') + sp + cssData[2];
  };

  var mapboxBaseUrl = 'https://api.mapbox.com';
  /**
   * Gets the path from a mapbox:// URL.
   * @param {string} url The Mapbox URL.
   * @return {string} The path.
   * @private
   */
  function getMapboxPath(url) {
      var startsWith = 'mapbox://';
      if (url.indexOf(startsWith) !== 0) {
          return '';
      }
      return url.slice(startsWith.length);
  }
  /**
   * Turns mapbox:// sprite URLs into resolvable URLs.
   * @param {string} url The sprite URL.
   * @param {string} token The access token.
   * @param {string} styleUrl The style URL.
   * @return {string} A resolvable URL.
   * @private
   */
  function normalizeSpriteUrl(url, token, styleUrl) {
      var mapboxPath = getMapboxPath(url);
      if (!mapboxPath) {
          return decodeURI(new URL(url, styleUrl).href);
      }
      var startsWith = 'sprites/';
      if (mapboxPath.indexOf(startsWith) !== 0) {
          throw new Error(("unexpected sprites url: " + url));
      }
      var sprite = mapboxPath.slice(startsWith.length);
      return (mapboxBaseUrl + "/styles/v1/" + sprite + "/sprite?access_token=" + token);
  }
  /**
   * Turns mapbox:// style URLs into resolvable URLs.
   * @param {string} url The style URL.
   * @param {string} token The access token.
   * @return {string} A resolvable URL.
   * @private
   */
  function normalizeStyleUrl(url, token) {
      var mapboxPath = getMapboxPath(url);
      if (!mapboxPath) {
          return decodeURI(new URL(url, location.href).href);
      }
      var startsWith = 'styles/';
      if (mapboxPath.indexOf(startsWith) !== 0) {
          throw new Error(("unexpected style url: " + url));
      }
      var style = mapboxPath.slice(startsWith.length);
      return (mapboxBaseUrl + "/styles/v1/" + style + "?&access_token=" + token);
  }
  /**
   * Turns mapbox:// source URLs into vector tile URL templates.
   * @param {string} url The source URL.
   * @param {string} token The access token.
   * @param {string} tokenParam The access token key.
   * @param {string} styleUrl The style URL.
   * @return {string} A vector tile template.
   * @private
   */
  function normalizeSourceUrl(url, token, tokenParam, styleUrl) {
      var urlObject = new URL(url, styleUrl);
      var mapboxPath = getMapboxPath(url);
      if (!mapboxPath) {
          if (!token) {
              return decodeURI(urlObject.href);
          }
          urlObject.searchParams.set(tokenParam, token);
          return decodeURI(urlObject.href);
      }
      if (mapboxPath === 'mapbox.satellite') {
          var sizeFactor = window.devicePixelRatio >= 1.5 ? '@2x' : '';
          return ("https://api.mapbox.com/v4/" + mapboxPath + "/{z}/{x}/{y}" + sizeFactor + ".webp?access_token=" + token);
      }
      return ("https://{a-d}.tiles.mapbox.com/v4/" + mapboxPath + "/{z}/{x}/{y}.vector.pbf?access_token=" + token);
  }

  function deg2rad(degrees) {
      return degrees * Math.PI / 180;
  }
  var defaultResolutions = function () {
      var resolutions = [];
      for (var res = 78271.51696402048; resolutions.length <= 24; res /= 2) {
          resolutions.push(res);
      }
      return resolutions;
  }();
  /**
   * @param {number} width Width of the canvas.
   * @param {number} height Height of the canvas.
   * @return {HTMLCanvasElement} Canvas.
   */
  function createCanvas(width, height) {
      if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && typeof OffscreenCanvas !== 'undefined') {
          // eslint-disable-line
          return new OffscreenCanvas(width, height);
      }
      var canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      return canvas;
  }
  function getZoomForResolution(resolution, resolutions) {
      var i = 0;
      var ii = resolutions.length;
      for (; i < ii; ++i) {
          var candidate = resolutions[i];
          if (candidate < resolution && i + 1 < ii) {
              var zoomFactor = resolutions[i] / resolutions[i + 1];
              return i + Math.log(resolutions[i] / resolution) / Math.log(zoomFactor);
          }
      }
      return ii - 1;
  }
  var pendingRequests = {};
  /**
   * @param {ResourceType} resourceType Type of resource to load.
   * @param {string} url Url of the resource.
   * @param {Options} [options={}] Options.
   * @param {{request?: Request}} [metadata] Object to be filled with the request.
   * @return {Promise<Object|Response>} Promise that resolves with the loaded resource
   * or rejects with the Response object.
   * @private
   */
  function fetchResource(resourceType, url, options, metadata) {
      if ( options === void 0 ) options = {};

      if (url in pendingRequests) {
          if (metadata) {
              metadata.request = pendingRequests[url][0];
          }
          return pendingRequests[url][1];
      }
      var request = options.transformRequest ? options.transformRequest(url, resourceType) || new Request(url) : new Request(url);
      if (!request.headers.get('Accept')) {
          request.headers.set('Accept', 'application/json');
      }
      if (metadata) {
          metadata.request = request;
      }
      var pendingRequest = fetch(request).then(function (response) {
          delete pendingRequests[url];
          return response.ok ? response.json() : Promise.reject(new Error('Error fetching source ' + url));
      }).catch(function (error) {
          delete pendingRequests[url];
          return Promise.reject(new Error('Error fetching source ' + url));
      });
      pendingRequests[url] = [
          request,
          pendingRequest
      ];
      return pendingRequest;
  }
  function getGlStyle(glStyleOrUrl, options) {
      if (typeof glStyleOrUrl === 'string') {
          if (glStyleOrUrl.trim().startsWith('{')) {
              try {
                  var glStyle = JSON.parse(glStyleOrUrl);
                  return Promise.resolve(glStyle);
              } catch (error) {
                  return Promise.reject(error);
              }
          } else {
              glStyleOrUrl = normalizeStyleUrl(glStyleOrUrl, options.accessToken);
              return fetchResource('Style', glStyleOrUrl, options);
          }
      } else {
          return Promise.resolve(glStyleOrUrl);
      }
  }
  function getTransformedTilesUrl(tilesUrl, options) {
      if (options.transformRequest) {
          var transformedRequest = options.transformRequest(tilesUrl, 'Tiles');
          if (transformedRequest instanceof Request) {
              return decodeURI(transformedRequest.url);
          }
      }
      return tilesUrl;
  }
  var tilejsonCache = {};
  /**
   * @param {Object} glSource glStyle source object.
   * @param {string} styleUrl Style URL.
   * @param {Options} options Options.
   * @return {Object} TileJson
   */
  function getTileJson(glSource, styleUrl, options) {
      if ( options === void 0 ) options = {};

      var cacheKey = [
          styleUrl,
          JSON.stringify(glSource)
      ].toString();
      var promise = tilejsonCache[cacheKey];
      if (!promise || options.transformRequest) {
          var url = glSource.url;
          if (url && !glSource.tiles) {
              var normalizedSourceUrl = normalizeSourceUrl(url, options.accessToken, options.accessTokenParam || 'access_token', styleUrl || location.href);
              if (url.startsWith('mapbox://')) {
                  promise = Promise.resolve(Object.assign({}, glSource, {
                      url: undefined,
                      tiles: expandUrl(normalizedSourceUrl)
                  }));
              } else {
                  var metadata = {};
                  promise = fetchResource('Source', normalizedSourceUrl, options, metadata).then(function (tileJson) {
                      tileJson.tiles = tileJson.tiles.map(function (tileUrl) {
                          return getTransformedTilesUrl(normalizeSourceUrl(tileUrl, options.accessToken, options.accessTokenParam || 'access_token', metadata.request.url), options);
                      });
                      return Promise.resolve(tileJson);
                  });
              }
          } else {
              glSource = Object.assign({}, glSource, {
                  tiles: glSource.tiles.map(function (tileUrl) {
                      return getTransformedTilesUrl(normalizeSourceUrl(tileUrl, options.accessToken, options.accessTokenParam || 'access_token', styleUrl || location.href), options);
                  })
              });
              promise = Promise.resolve(Object.assign({}, glSource));
          }
          tilejsonCache[cacheKey] = promise;
      }
      return promise;
  }    /**
   * @typedef {import("./apply.js").Options} Options
   * @typedef {import('./apply.js').ResourceType} ResourceType
   * @private
   */

  var hairSpacePool = Array(256).join('\u200A');
  function applyLetterSpacing(text, letterSpacing) {
      if (letterSpacing >= 0.05) {
          var textWithLetterSpacing = '';
          var lines = text.split('\n');
          var joinSpaceString = hairSpacePool.slice(0, Math.round(letterSpacing / 0.1));
          for (var l = 0, ll = lines.length; l < ll; ++l) {
              if (l > 0) {
                  textWithLetterSpacing += '\n';
              }
              textWithLetterSpacing += lines[l].split('').join(joinSpaceString);
          }
          return textWithLetterSpacing;
      }
      return text;
  }
  var measureContext;
  function getMeasureContext() {
      if (!measureContext) {
          measureContext = createCanvas(1, 1).getContext('2d');
      }
      return measureContext;
  }
  function measureText(text, letterSpacing) {
      return getMeasureContext().measureText(text).width + (text.length - 1) * letterSpacing;
  }
  var measureCache = {};
  function wrapText(text, font, em, letterSpacing) {
      if (text.indexOf('\n') !== -1) {
          var hardLines = text.split('\n');
          var lines = [];
          for (var i = 0, ii = hardLines.length; i < ii; ++i) {
              lines.push(wrapText(hardLines[i], font, em, letterSpacing));
          }
          return lines.join('\n');
      }
      var key = em + ',' + font + ',' + text + ',' + letterSpacing;
      var wrappedText = measureCache[key];
      if (!wrappedText) {
          var words = text.split(' ');
          if (words.length > 1) {
              var ctx = getMeasureContext();
              ctx.font = font;
              var oneEm = ctx.measureText('M').width;
              var maxWidth = oneEm * em;
              var line = '';
              var lines$1 = [];
              // Pass 1 - wrap lines to not exceed maxWidth
              for (var i$1 = 0, ii$1 = words.length; i$1 < ii$1; ++i$1) {
                  var word = words[i$1];
                  var testLine = line + (line ? ' ' : '') + word;
                  if (measureText(testLine, letterSpacing) <= maxWidth) {
                      line = testLine;
                  } else {
                      if (line) {
                          lines$1.push(line);
                      }
                      line = word;
                  }
              }
              if (line) {
                  lines$1.push(line);
              }
              // Pass 2 - add lines with a width of less than 30% of maxWidth to the previous or next line
              for (var i$2 = 0, ii$2 = lines$1.length; i$2 < ii$2 && ii$2 > 1; ++i$2) {
                  var line$1 = lines$1[i$2];
                  if (measureText(line$1, letterSpacing) < maxWidth * 0.35) {
                      var prevWidth = i$2 > 0 ? measureText(lines$1[i$2 - 1], letterSpacing) : Infinity;
                      var nextWidth = i$2 < ii$2 - 1 ? measureText(lines$1[i$2 + 1], letterSpacing) : Infinity;
                      lines$1.splice(i$2, 1);
                      ii$2 -= 1;
                      if (prevWidth < nextWidth) {
                          lines$1[i$2 - 1] += ' ' + line$1;
                          i$2 -= 1;
                      } else {
                          lines$1[i$2] = line$1 + ' ' + lines$1[i$2];
                      }
                  }
              }
              // Pass 3 - try to fill 80% of maxWidth for each line
              for (var i$3 = 0, ii$3 = lines$1.length - 1; i$3 < ii$3; ++i$3) {
                  var line$2 = lines$1[i$3];
                  var next = lines$1[i$3 + 1];
                  if (measureText(line$2, letterSpacing) > maxWidth * 0.7 && measureText(next, letterSpacing) < maxWidth * 0.6) {
                      var lineWords = line$2.split(' ');
                      var lastWord = lineWords.pop();
                      if (measureText(lastWord, letterSpacing) < maxWidth * 0.2) {
                          lines$1[i$3] = lineWords.join(' ');
                          lines$1[i$3 + 1] = lastWord + ' ' + next;
                      }
                      ii$3 -= 1;
                  }
              }
              wrappedText = lines$1.join('\n');
          } else {
              wrappedText = text;
          }
          wrappedText = applyLetterSpacing(wrappedText, letterSpacing);
          measureCache[key] = wrappedText;
      }
      return wrappedText;
  }
  var fontFamilyRegEx = /font-family: ?([^;]*);/;
  var stripQuotesRegEx = /("|')/g;
  var loadedFontFamilies;
  function hasFontFamily(family) {
      if (!loadedFontFamilies) {
          loadedFontFamilies = {};
          var styleSheets = document.styleSheets;
          for (var i = 0, ii = styleSheets.length; i < ii; ++i) {
              var styleSheet = styleSheets[i];
              try {
                  var cssRules = styleSheet.rules || styleSheet.cssRules;
                  if (cssRules) {
                      for (var j = 0, jj = cssRules.length; j < jj; ++j) {
                          var cssRule = cssRules[j];
                          if (cssRule.type == 5) {
                              var match = cssRule.cssText.match(fontFamilyRegEx);
                              loadedFontFamilies[match[1].replace(stripQuotesRegEx, '')] = true;
                          }
                      }
                  }
              } catch (e) {
              }
          }
      }
      return family in loadedFontFamilies;
  }
  var processedFontFamilies = {};
  /**
   * @param {Array} fonts Fonts.
   * @return {Array} Processed fonts.
   * @private
   */
  function getFonts(fonts) {
      var fontsKey = fonts.toString();
      if (fontsKey in processedFontFamilies) {
          return processedFontFamilies[fontsKey];
      }
      var googleFontDescriptions = [];
      for (var i = 0, ii = fonts.length; i < ii; ++i) {
          fonts[i] = fonts[i].replace('Arial Unicode MS', 'Arial');
          var font = fonts[i];
          var cssFont = mapboxToCssFont(font, 1);
          registerFont(cssFont);
          var parts = cssFont.split(' ');
          googleFontDescriptions.push([
              parts.slice(3).join(' ').replace(/"/g, ''),
              parts[1],
              parts[0]
          ]);
      }
      for (var i$1 = 0, ii$1 = googleFontDescriptions.length; i$1 < ii$1; ++i$1) {
          var googleFontDescription = googleFontDescriptions[i$1];
          var family = googleFontDescription[0];
          if (!hasFontFamily(family)) {
              if (checkedFonts.get(((googleFontDescription[2]) + "\n" + (googleFontDescription[1]) + " \n" + family)) !== 100) {
                  var fontUrl = 'https://fonts.googleapis.com/css?family=' + family.replace(/ /g, '+') + ':' + googleFontDescription[1] + googleFontDescription[2];
                  if (!document.querySelector('link[href="' + fontUrl + '"]')) {
                      var markup = document.createElement('link');
                      markup.href = fontUrl;
                      markup.rel = 'stylesheet';
                      document.head.appendChild(markup);
                  }
              }
          }
      }
      processedFontFamilies[fontsKey] = fonts;
      return fonts;
  }

  /*
  ol-mapbox-style - Use Mapbox Style objects with OpenLayers
  Copyright 2016-present ol-mapbox-style contributors
  License: https://raw.githubusercontent.com/openlayers/ol-mapbox-style/master/LICENSE
  */
  /**
   * @typedef {import("ol/layer/Vector").default} VectorLayer
   * @typedef {import("ol/layer/VectorTile").default} VectorTileLayer
   * @typedef {import("ol/style/Style").StyleFunction} StyleFunction
   */
  var types = {
      'Point': 1,
      'MultiPoint': 1,
      'LineString': 2,
      'MultiLineString': 2,
      'Polygon': 3,
      'MultiPolygon': 3
  };
  var anchor = {
      'center': [
          0.5,
          0.5
      ],
      'left': [
          0,
          0.5
      ],
      'right': [
          1,
          0.5
      ],
      'top': [
          0.5,
          0
      ],
      'bottom': [
          0.5,
          1
      ],
      'top-left': [
          0,
          0
      ],
      'top-right': [
          1,
          0
      ],
      'bottom-left': [
          0,
          1
      ],
      'bottom-right': [
          1,
          1
      ]
  };
  var expressionData = function (rawExpression, propertySpec) {
      var compiledExpression = createPropertyExpression(rawExpression, propertySpec);
      if (compiledExpression.result === 'error') {
          throw new Error(compiledExpression.value.map(function (err) { return ((err.key) + ": " + (err.message)); }).join(', '));
      }
      return compiledExpression.value;
  };
  var emptyObj$1 = {};
  var zoomObj = { zoom: 0 };
  var renderFeatureCoordinates, renderFeature;
  /**
   * @private
   * @param {Object} layer Gl object layer.
   * @param {string} layoutOrPaint 'layout' or 'paint'.
   * @param {string} property Feature property.
   * @param {number} zoom Zoom.
   * @param {Object} feature Gl feature.
   * @param {Object} [functionCache] Function cache.
   * @param {Object} [featureState] Feature state.
   * @return {?} Value.
   */
  function getValue(layer, layoutOrPaint, property, zoom, feature, functionCache, featureState) {
      var layerId = layer.id;
      if (!functionCache) {
          functionCache = {};
          console.warn('No functionCache provided to getValue()');    //eslint-disable-line no-console
      }
      if (!functionCache[layerId]) {
          functionCache[layerId] = {};
      }
      var functions = functionCache[layerId];
      if (!functions[property]) {
          var value = (layer[layoutOrPaint] || emptyObj$1)[property];
          var propertySpec = spec[(layoutOrPaint + "_" + (layer.type))][property];
          if (value === undefined) {
              value = propertySpec.default;
          }
          var isExpr = isExpression(value);
          if (!isExpr && isFunction(value)) {
              value = convertFunction(value, propertySpec);
              isExpr = true;
          }
          if (isExpr) {
              var compiledExpression = expressionData(value, propertySpec);
              functions[property] = compiledExpression.evaluate.bind(compiledExpression);
          } else {
              if (propertySpec.type == 'color') {
                  value = Color$1.parse(value);
              }
              functions[property] = function () {
                  return value;
              };
          }
      }
      zoomObj.zoom = zoom;
      return functions[property](zoomObj, feature, featureState);
  }
  /**
   * @private
   * @param {Object} layer Gl object layer.
   * @param {number} zoom Zoom.
   * @param {Object} feature Gl feature.
   * @param {Object} [functionCache] Function cache.
   * @return {"declutter"|"obstacle"|"none"} Value.
   */
  function getIconDeclutterMode(layer, zoom, feature, functionCache) {
      var allowOverlap = getValue(layer, 'layout', 'icon-allow-overlap', zoom, feature, functionCache);
      if (!allowOverlap) {
          return 'declutter';
      }
      var ignorePlacement = getValue(layer, 'layout', 'icon-ignore-placement', zoom, feature, functionCache);
      if (!ignorePlacement) {
          return 'obstacle';
      }
      return 'none';
  }
  /**
   * @private
   * @param {string} layerId Layer id.
   * @param {?} filter Filter.
   * @param {Object} feature Feature.
   * @param {number} zoom Zoom.
   * @param {Object} [filterCache] Filter cache.
   * @return {boolean} Filter result.
   */
  function evaluateFilter(layerId, filter, feature, zoom, filterCache) {
      if (!filterCache) {
          console.warn('No filterCache provided to evaluateFilter()');    //eslint-disable-line no-console
      }
      if (!(layerId in filterCache)) {
          filterCache[layerId] = createFilter(filter).filter;
      }
      zoomObj.zoom = zoom;
      return filterCache[layerId](zoomObj, feature);
  }
  /**
   * @private
   * @param {?} color Color.
   * @param {number} [opacity] Opacity.
   * @return {string} Color.
   */
  function colorWithOpacity(color, opacity) {
      if (color) {
          if ((color.a === 0 || opacity === 0)) {
              return undefined;
          }
          var a = color.a;
          opacity = opacity === undefined ? 1 : opacity;
          return a === 0 ? 'transparent' : 'rgba(' + Math.round(color.r * 255 / a) + ',' + Math.round(color.g * 255 / a) + ',' + Math.round(color.b * 255 / a) + ',' + a * opacity + ')';
      }
      return color;
  }
  var templateRegEx = /\{[^{}}]*\}/g;
  /**
   * @private
   * @param {string} text Text.
   * @param {Object} properties Properties.
   * @return {string} Text.
   */
  function fromTemplate(text, properties) {
      return text.replace(templateRegEx, function (match) {
          return properties[match.slice(1, -1)] || '';
      });
  }
  /**
   * Creates a style function from the `glStyle` object for all layers that use
   * the specified `source`, which needs to be a `"type": "vector"` or
   * `"type": "geojson"` source and applies it to the specified OpenLayers layer.
   *
   * Two additional properties will be set on the provided layer:
   *
   *  * `mapbox-source`: The `id` of the Mapbox Style document's source that the
   *    OpenLayers layer was created from. Usually `apply()` creates one
   *    OpenLayers layer per Mapbox Style source, unless the layer stack has
   *    layers from different sources in between.
   *  * `mapbox-layers`: The `id`s of the Mapbox Style document's layers that are
   *    included in the OpenLayers layer.
   *
   * This function also works in a web worker. In worker mode, the main thread needs
   * to listen to messages from the worker and respond with another message to make
   * sure that sprite image loading works:
   *
   * ```js
   *  worker.addEventListener('message', event => {
   *   if (event.data.action === 'loadImage') {
   *     const image = new Image();
   *     image.crossOrigin = 'anonymous';
   *     image.addEventListener('load', function() {
   *       createImageBitmap(image, 0, 0, image.width, image.height).then(imageBitmap => {
   *         worker.postMessage({
   *           action: 'imageLoaded',
   *           image: imageBitmap,
   *           src: event.data.src
   *         }, [imageBitmap]);
   *       });
   *     });
   *     image.src = event.data.src;
   *   }
   * });
   * ```
   *
   * @param {VectorLayer|VectorTileLayer} olLayer OpenLayers layer to
   * apply the style to. In addition to the style, the layer will get two
   * properties: `mapbox-source` will be the `id` of the `glStyle`'s source used
   * for the layer, and `mapbox-layers` will be an array of the `id`s of the
   * `glStyle`'s layers.
   * @param {string|Object} glStyle Mapbox Style object.
   * @param {string|Array<string>} sourceOrLayers `source` key or an array of layer `id`s
   * from the Mapbox Style object. When a `source` key is provided, all layers for
   * the specified source will be included in the style function. When layer `id`s
   * are provided, they must be from layers that use the same source.
   * @param {Array<number>} resolutions
   * Resolutions for mapping resolution to zoom level.
   * @param {Object} spriteData Sprite data from the url specified in
   * the Mapbox Style object's `sprite` property. Only required if a `sprite`
   * property is specified in the Mapbox Style object.
   * @param {string} spriteImageUrl Sprite image url for the sprite
   * specified in the Mapbox Style object's `sprite` property. Only required if a
   * `sprite` property is specified in the Mapbox Style object.
   * @param {function(Array<string>):Array<string>} getFonts Function that
   * receives a font stack as arguments, and returns a (modified) font stack that
   * is available. Font names are the names used in the Mapbox Style object. If
   * not provided, the font stack will be used as-is. This function can also be
   * used for loading web fonts.
   * @param {function(VectorLayer|VectorTileLayer, string):HTMLImageElement|HTMLCanvasElement|string|undefined} [getImage=undefined]
   * Function that returns an image or a URL for an image name. If the result is an HTMLImageElement, it must already be
   * loaded. The layer can be used to call layer.changed() when the loading and processing of the image has finished.
   * This function can be used for icons not in the sprite or to override sprite icons.
   * @return {StyleFunction} Style function for use in
   * `ol.layer.Vector` or `ol.layer.VectorTile`.
   */
  function stylefunction(olLayer, glStyle, sourceOrLayers, resolutions, spriteData, spriteImageUrl, getFonts, getImage) {
      if ( resolutions === void 0 ) resolutions = defaultResolutions;
      if ( spriteData === void 0 ) spriteData = undefined;
      if ( spriteImageUrl === void 0 ) spriteImageUrl = undefined;
      if ( getFonts === void 0 ) getFonts = undefined;
      if ( getImage === void 0 ) getImage = undefined;

      if (typeof glStyle == 'string') {
          glStyle = JSON.parse(glStyle);
      }
      if (glStyle.version != 8) {
          throw new Error('glStyle version 8 required.');
      }
      var spriteImage, spriteImageSize;
      if (spriteImageUrl) {
          if (typeof Image !== 'undefined') {
              var img = new Image();
              img.crossOrigin = 'anonymous';
              img.onload = function () {
                  spriteImage = img;
                  spriteImageSize = [
                      img.width,
                      img.height
                  ];
                  olLayer.changed();
                  img.onload = null;
              };
              img.src = spriteImageUrl;
          } else if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
              //eslint-disable-line
              var worker = self;
              // Main thread needs to handle 'loadImage' and dispatch 'imageLoaded'
              worker.postMessage({
                  action: 'loadImage',
                  src: spriteImageUrl
              });
              worker.addEventListener('message', function handler(event) {
                  if (event.data.action === 'imageLoaded' && event.data.src === spriteImageUrl) {
                      spriteImage = event.data.image;
                      spriteImageSize = [
                          spriteImage.width,
                          spriteImage.height
                      ];
                  }
              });
          }
      }
      var allLayers = derefLayers(glStyle.layers);
      var layersBySourceLayer = {};
      var mapboxLayers = [];
      var iconImageCache = {};
      var patternCache = {};
      var functionCache = {};
      var filterCache = {};
      var mapboxSource;
      for (var i = 0, ii = allLayers.length; i < ii; ++i) {
          var layer = allLayers[i];
          var layerId = layer.id;
          if (typeof sourceOrLayers == 'string' && layer.source == sourceOrLayers || sourceOrLayers.indexOf(layerId) !== -1) {
              var sourceLayer = layer['source-layer'];
              if (!mapboxSource) {
                  mapboxSource = layer.source;
                  var source = glStyle.sources[mapboxSource];
                  if (!source) {
                      throw new Error(("Source \"" + mapboxSource + "\" is not defined"));
                  }
                  var type = source.type;
                  if (type !== 'vector' && type !== 'geojson') {
                      throw new Error(("Source \"" + mapboxSource + "\" is not of type \"vector\" or \"geojson\", but \"" + type + "\""));
                  }
              } else if (layer.source !== mapboxSource) {
                  throw new Error(("Layer \"" + layerId + "\" does not use source \"" + mapboxSource));
              }
              var layers = layersBySourceLayer[sourceLayer];
              if (!layers) {
                  layers = [];
                  layersBySourceLayer[sourceLayer] = layers;
              }
              layers.push({
                  layer: layer,
                  index: i
              });
              mapboxLayers.push(layerId);
          }
      }
      var textHalo = new Stroke$1();
      var textColor = new Fill$1();
      var styles = [];
      var styleFunction = function (feature, resolution) {
          var properties = feature.getProperties();
          var layers = layersBySourceLayer[properties.layer];
          if (!layers) {
              return;
          }
          var zoom = resolutions.indexOf(resolution);
          if (zoom == -1) {
              zoom = getZoomForResolution(resolution, resolutions);
          }
          var type = types[feature.getGeometry().getType()];
          var f = {
              properties: properties,
              type: type
          };
          var featureState = olLayer.get('mapbox-featurestate')[feature.getId()];
          var stylesLength = -1;
          for (var i = 0, ii = layers.length; i < ii; ++i) {
              var layerData = layers[i];
              var layer = layerData.layer;
              var layerId = layer.id;
              var layout = layer.layout || emptyObj$1;
              var paint = layer.paint || emptyObj$1;
              if (layout.visibility === 'none' || 'minzoom' in layer && zoom < layer.minzoom || 'maxzoom' in layer && zoom >= layer.maxzoom) {
                  continue;
              }
              var filter = layer.filter;
              if (!filter || evaluateFilter(layerId, filter, f, zoom, filterCache)) {
                  var color = (void 0), opacity = (void 0), fill = (void 0), stroke = (void 0), strokeColor = (void 0), style = (void 0);
                  var index = layerData.index;
                  if (type == 3 && (layer.type == 'fill' || layer.type == 'fill-extrusion')) {
                      opacity = getValue(layer, 'paint', layer.type + '-opacity', zoom, f, functionCache, featureState);
                      if (layer.type + '-pattern' in paint) {
                          var fillIcon = getValue(layer, 'paint', layer.type + '-pattern', zoom, f, functionCache, featureState);
                          if (fillIcon) {
                              var icon = typeof fillIcon === 'string' ? fromTemplate(fillIcon, properties) : fillIcon.toString();
                              if (spriteImage && spriteData && spriteData[icon]) {
                                  ++stylesLength;
                                  style = styles[stylesLength];
                                  if (!style || !style.getFill() || style.getStroke() || style.getText()) {
                                      style = new Style$1({ fill: new Fill$1() });
                                      styles[stylesLength] = style;
                                  }
                                  fill = style.getFill();
                                  style.setZIndex(index);
                                  var icon_cache_key = icon + '.' + opacity;
                                  var pattern = patternCache[icon_cache_key];
                                  if (!pattern) {
                                      var spriteImageData = spriteData[icon];
                                      var canvas = createCanvas(spriteImageData.width, spriteImageData.height);
                                      var ctx = canvas.getContext('2d');
                                      ctx.globalAlpha = opacity;
                                      ctx.drawImage(spriteImage, spriteImageData.x, spriteImageData.y, spriteImageData.width, spriteImageData.height, 0, 0, spriteImageData.width, spriteImageData.height);
                                      pattern = ctx.createPattern(canvas, 'repeat');
                                      patternCache[icon_cache_key] = pattern;
                                  }
                                  fill.setColor(pattern);
                              }
                          }
                      } else {
                          color = colorWithOpacity(getValue(layer, 'paint', layer.type + '-color', zoom, f, functionCache, featureState), opacity);
                          if (layer.type + '-outline-color' in paint) {
                              strokeColor = colorWithOpacity(getValue(layer, 'paint', layer.type + '-outline-color', zoom, f, functionCache, featureState), opacity);
                          }
                          if (!strokeColor) {
                              strokeColor = color;
                          }
                          if (color || strokeColor) {
                              ++stylesLength;
                              style = styles[stylesLength];
                              if (!style || color && !style.getFill() || !color && style.getFill() || strokeColor && !style.getStroke() || !strokeColor && style.getStroke() || style.getText()) {
                                  style = new Style$1({
                                      fill: color ? new Fill$1() : undefined,
                                      stroke: strokeColor ? new Stroke$1() : undefined
                                  });
                                  styles[stylesLength] = style;
                              }
                              if (color) {
                                  fill = style.getFill();
                                  fill.setColor(color);
                              }
                              if (strokeColor) {
                                  stroke = style.getStroke();
                                  stroke.setColor(strokeColor);
                                  stroke.setWidth(0.5);
                              }
                              style.setZIndex(index);
                          }
                      }
                  }
                  if (type != 1 && layer.type == 'line') {
                      color = !('line-pattern' in paint) && 'line-color' in paint ? colorWithOpacity(getValue(layer, 'paint', 'line-color', zoom, f, functionCache, featureState), getValue(layer, 'paint', 'line-opacity', zoom, f, functionCache, featureState)) : undefined;
                      var width = getValue(layer, 'paint', 'line-width', zoom, f, functionCache, featureState);
                      if (color && width > 0) {
                          ++stylesLength;
                          style = styles[stylesLength];
                          if (!style || !style.getStroke() || style.getFill() || style.getText()) {
                              style = new Style$1({ stroke: new Stroke$1() });
                              styles[stylesLength] = style;
                          }
                          stroke = style.getStroke();
                          stroke.setLineCap(getValue(layer, 'layout', 'line-cap', zoom, f, functionCache, featureState));
                          stroke.setLineJoin(getValue(layer, 'layout', 'line-join', zoom, f, functionCache, featureState));
                          stroke.setMiterLimit(getValue(layer, 'layout', 'line-miter-limit', zoom, f, functionCache, featureState));
                          stroke.setColor(color);
                          stroke.setWidth(width);
                          stroke.setLineDash(paint['line-dasharray'] ? getValue(layer, 'paint', 'line-dasharray', zoom, f, functionCache, featureState).map(function (x) {
                              return x * width;
                          }) : null);
                          style.setZIndex(index);
                      }
                  }
                  var hasImage = false;
                  var text = null;
                  var placementAngle = 0;
                  var icon$1 = (void 0), iconImg = (void 0), skipLabel = (void 0);
                  if ((type == 1 || type == 2) && 'icon-image' in layout) {
                      var iconImage = getValue(layer, 'layout', 'icon-image', zoom, f, functionCache, featureState);
                      if (iconImage) {
                          icon$1 = typeof iconImage === 'string' ? fromTemplate(iconImage, properties) : iconImage.toString();
                          var styleGeom = undefined;
                          var imageElement = getImage ? getImage(olLayer, icon$1) : undefined;
                          if (spriteImage && spriteData && spriteData[icon$1] || imageElement) {
                              var iconRotationAlignment = getValue(layer, 'layout', 'icon-rotation-alignment', zoom, f, functionCache, featureState);
                              if (type == 2) {
                                  var geom = feature.getGeometry();
                                  // ol package and ol-debug.js only
                                  if (geom.getFlatMidpoint || geom.getFlatMidpoints) {
                                      var extent = geom.getExtent();
                                      var size = Math.sqrt(Math.max(Math.pow((extent[2] - extent[0]) / resolution, 2), Math.pow((extent[3] - extent[1]) / resolution, 2)));
                                      if (size > 150) {
                                          //FIXME Do not hard-code a size of 150
                                          var midpoint = geom.getType() === 'MultiLineString' ? geom.getFlatMidpoints() : geom.getFlatMidpoint();
                                          if (!renderFeature) {
                                              renderFeatureCoordinates = [
                                                  NaN,
                                                  NaN
                                              ];
                                              renderFeature = new RenderFeature$1('Point', renderFeatureCoordinates, [], {}, null);
                                          }
                                          styleGeom = renderFeature;
                                          renderFeatureCoordinates[0] = midpoint[0];
                                          renderFeatureCoordinates[1] = midpoint[1];
                                          var placement = getValue(layer, 'layout', 'symbol-placement', zoom, f, functionCache, featureState);
                                          if (placement === 'line' && iconRotationAlignment === 'map') {
                                              var stride = geom.getStride();
                                              var coordinates = geom.getFlatCoordinates();
                                              for (var i$1 = 0, ii$1 = coordinates.length - stride; i$1 < ii$1; i$1 += stride) {
                                                  var x1 = coordinates[i$1];
                                                  var y1 = coordinates[i$1 + 1];
                                                  var x2 = coordinates[i$1 + stride];
                                                  var y2 = coordinates[i$1 + stride + 1];
                                                  var minX = Math.min(x1, x2);
                                                  var minY = Math.min(y1, y2);
                                                  var maxX = Math.max(x1, x2);
                                                  var maxY = Math.max(y1, y2);
                                                  if (midpoint[0] >= minX && midpoint[0] <= maxX && midpoint[1] >= minY && midpoint[1] <= maxY) {
                                                      placementAngle = Math.atan2(y1 - y2, x2 - x1);
                                                      break;
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                              if (type !== 2 || styleGeom) {
                                  var iconSize = getValue(layer, 'layout', 'icon-size', zoom, f, functionCache, featureState);
                                  var iconColor = paint['icon-color'] !== undefined ? getValue(layer, 'paint', 'icon-color', zoom, f, functionCache, featureState) : null;
                                  if (!iconColor || iconColor.a !== 0) {
                                      var icon_cache_key$1 = icon$1 + '.' + iconSize;
                                      if (iconColor !== null) {
                                          icon_cache_key$1 += '.' + iconColor;
                                      }
                                      iconImg = iconImageCache[icon_cache_key$1];
                                      if (!iconImg) {
                                          var declutterMode = getIconDeclutterMode(layer, zoom, f, functionCache);
                                          var displacement = (void 0);
                                          if ('icon-offset' in layout) {
                                              displacement = getValue(layer, 'layout', 'icon-offset', zoom, f, functionCache, featureState);
                                              displacement[1] *= -1;
                                          }
                                          var color$1 = iconColor ? [
                                              iconColor.r * 255,
                                              iconColor.g * 255,
                                              iconColor.b * 255,
                                              iconColor.a
                                          ] : undefined;
                                          if (imageElement) {
                                              if (typeof imageElement === 'string') {
                                                  // it is a src URL
                                                  iconImg = new Icon$1({
                                                      color: color$1,
                                                      src: imageElement,
                                                      rotateWithView: iconRotationAlignment === 'map',
                                                      displacement: displacement,
                                                      declutterMode: declutterMode
                                                  });
                                              } else {
                                                  iconImg = new Icon$1({
                                                      color: color$1,
                                                      img: imageElement,
                                                      imgSize: [
                                                          imageElement.width,
                                                          imageElement.height
                                                      ],
                                                      rotateWithView: iconRotationAlignment === 'map',
                                                      displacement: displacement,
                                                      declutterMode: declutterMode
                                                  });
                                              }
                                          } else {
                                              var spriteImageData$1 = spriteData[icon$1];
                                              iconImg = new Icon$1({
                                                  color: color$1,
                                                  img: spriteImage,
                                                  imgSize: spriteImageSize,
                                                  size: [
                                                      spriteImageData$1.width,
                                                      spriteImageData$1.height
                                                  ],
                                                  offset: [
                                                      spriteImageData$1.x,
                                                      spriteImageData$1.y
                                                  ],
                                                  rotateWithView: iconRotationAlignment === 'map',
                                                  scale: iconSize / spriteImageData$1.pixelRatio,
                                                  displacement: displacement,
                                                  declutterMode: declutterMode
                                              });
                                          }
                                          iconImageCache[icon_cache_key$1] = iconImg;
                                      }
                                  }
                                  if (iconImg) {
                                      ++stylesLength;
                                      style = styles[stylesLength];
                                      if (!style || !style.getImage() || style.getFill() || style.getStroke()) {
                                          style = new Style$1();
                                          styles[stylesLength] = style;
                                      }
                                      style.setGeometry(styleGeom);
                                      iconImg.setRotation(placementAngle + deg2rad(getValue(layer, 'layout', 'icon-rotate', zoom, f, functionCache, featureState)));
                                      iconImg.setOpacity(getValue(layer, 'paint', 'icon-opacity', zoom, f, functionCache, featureState));
                                      iconImg.setAnchor(anchor[getValue(layer, 'layout', 'icon-anchor', zoom, f, functionCache, featureState)]);
                                      style.setImage(iconImg);
                                      text = style.getText();
                                      style.setText(undefined);
                                      style.setZIndex(index);
                                      hasImage = true;
                                      skipLabel = false;
                                  }
                              } else {
                                  skipLabel = true;
                              }
                          }
                      }
                  }
                  if (type == 1 && layer.type === 'circle') {
                      ++stylesLength;
                      style = styles[stylesLength];
                      if (!style || !style.getImage() || style.getFill() || style.getStroke()) {
                          style = new Style$1();
                          styles[stylesLength] = style;
                      }
                      var circleRadius = 'circle-radius' in paint ? getValue(layer, 'paint', 'circle-radius', zoom, f, functionCache, featureState) : 5;
                      var circleStrokeColor = colorWithOpacity(getValue(layer, 'paint', 'circle-stroke-color', zoom, f, functionCache, featureState), getValue(layer, 'paint', 'circle-stroke-opacity', zoom, f, functionCache, featureState));
                      var circleColor = colorWithOpacity(getValue(layer, 'paint', 'circle-color', zoom, f, functionCache, featureState), getValue(layer, 'paint', 'circle-opacity', zoom, f, functionCache, featureState));
                      var circleStrokeWidth = getValue(layer, 'paint', 'circle-stroke-width', zoom, f, functionCache, featureState);
                      var cache_key = circleRadius + '.' + circleStrokeColor + '.' + circleColor + '.' + circleStrokeWidth;
                      iconImg = iconImageCache[cache_key];
                      if (!iconImg) {
                          iconImg = new Circle$2({
                              radius: circleRadius,
                              stroke: circleStrokeColor && circleStrokeWidth > 0 ? new Stroke$1({
                                  width: circleStrokeWidth,
                                  color: circleStrokeColor
                              }) : undefined,
                              fill: circleColor ? new Fill$1({ color: circleColor }) : undefined,
                              declutterMode: 'none'
                          });
                          iconImageCache[cache_key] = iconImg;
                      }
                      style.setImage(iconImg);
                      text = style.getText();
                      style.setText(undefined);
                      style.setGeometry(undefined);
                      style.setZIndex(index);
                      hasImage = true;
                  }
                  var label = (void 0), font = (void 0), textLineHeight = (void 0), textSize = (void 0), letterSpacing = (void 0), maxTextWidth = (void 0);
                  if ('text-field' in layout) {
                      textSize = Math.round(getValue(layer, 'layout', 'text-size', zoom, f, functionCache, featureState));
                      var fontArray = getValue(layer, 'layout', 'text-font', zoom, f, functionCache, featureState);
                      textLineHeight = getValue(layer, 'layout', 'text-line-height', zoom, f, functionCache, featureState);
                      font = mapboxToCssFont(getFonts ? getFonts(fontArray) : fontArray, textSize, textLineHeight);
                      if (!font.includes('sans-serif')) {
                          font += ',sans-serif';
                      }
                      letterSpacing = getValue(layer, 'layout', 'text-letter-spacing', zoom, f, functionCache, featureState);
                      maxTextWidth = getValue(layer, 'layout', 'text-max-width', zoom, f, functionCache, featureState);
                      var textField = getValue(layer, 'layout', 'text-field', zoom, f, functionCache, featureState);
                      if (typeof textField === 'object' && textField.sections) {
                          if (textField.sections.length === 1) {
                              label = textField.toString();
                          } else {
                              label = textField.sections.reduce(function (acc, chunk, i) {
                                  var fonts = chunk.fontStack ? chunk.fontStack.split(',') : fontArray;
                                  var chunkFont = mapboxToCssFont(getFonts ? getFonts(fonts) : fonts, textSize * (chunk.scale || 1), textLineHeight);
                                  var text = chunk.text;
                                  if (text === '\n') {
                                      acc.push('\n', '');
                                      return acc;
                                  }
                                  if (type == 2) {
                                      acc.push(applyLetterSpacing(text, letterSpacing), chunkFont);
                                      return;
                                  }
                                  text = wrapText(text, chunkFont, maxTextWidth, letterSpacing).split('\n');
                                  for (var i$1 = 0, ii = text.length; i$1 < ii; ++i$1) {
                                      if (i$1 > 0) {
                                          acc.push('\n', '');
                                      }
                                      acc.push(text[i$1], chunkFont);
                                  }
                                  return acc;
                              }, []);
                          }
                      } else {
                          label = fromTemplate(textField, properties).trim();
                      }
                      opacity = getValue(layer, 'paint', 'text-opacity', zoom, f, functionCache, featureState);
                  }
                  if (label && opacity && !skipLabel) {
                      if (!hasImage) {
                          ++stylesLength;
                          style = styles[stylesLength];
                          if (!style || !style.getText() || style.getFill() || style.getStroke()) {
                              style = new Style$1();
                              styles[stylesLength] = style;
                          }
                          style.setImage(undefined);
                          style.setGeometry(undefined);
                      }
                      if (!style.getText()) {
                          style.setText(text || new Text$1({
                              padding: [
                                  2,
                                  2,
                                  2,
                                  2
                              ]
                          }));
                      }
                      text = style.getText();
                      var textTransform = layout['text-transform'];
                      if (textTransform == 'uppercase') {
                          label = Array.isArray(label) ? label.map(function (t, i) { return i % 2 ? t : t.toUpperCase(); }) : label.toUpperCase();
                      } else if (textTransform == 'lowercase') {
                          label = Array.isArray(label) ? label.map(function (t, i) { return i % 2 ? t : t.toLowerCase(); }) : label.toLowerCase();
                      }
                      var wrappedLabel = Array.isArray(label) ? label : type == 2 ? applyLetterSpacing(label, letterSpacing) : wrapText(label, font, maxTextWidth, letterSpacing);
                      text.setText(wrappedLabel);
                      text.setFont(font);
                      text.setRotation(deg2rad(getValue(layer, 'layout', 'text-rotate', zoom, f, functionCache, featureState)));
                      var textAnchor = getValue(layer, 'layout', 'text-anchor', zoom, f, functionCache, featureState);
                      var placement$1 = hasImage || type == 1 ? 'point' : getValue(layer, 'layout', 'symbol-placement', zoom, f, functionCache, featureState);
                      text.setPlacement(placement$1);
                      if (typeof text.setRepeat === 'function') {
                          var symbolSpacing = getValue(layer, 'layout', 'symbol-spacing', zoom, f, functionCache, featureState);
                          text.setRepeat(symbolSpacing * 2);
                      }
                      text.setOverflow(placement$1 === 'point');
                      var textHaloWidth = getValue(layer, 'paint', 'text-halo-width', zoom, f, functionCache, featureState);
                      var textOffset = getValue(layer, 'layout', 'text-offset', zoom, f, functionCache, featureState);
                      var textTranslate = getValue(layer, 'paint', 'text-translate', zoom, f, functionCache, featureState);
                      // Text offset has to take halo width and line height into account
                      var vOffset = 0;
                      var hOffset = 0;
                      if (placement$1 == 'point') {
                          var textAlign = 'center';
                          if (textAnchor.indexOf('left') !== -1) {
                              textAlign = 'left';
                              hOffset = textHaloWidth;
                          } else if (textAnchor.indexOf('right') !== -1) {
                              textAlign = 'right';
                              hOffset = -textHaloWidth;
                          }
                          text.setTextAlign(textAlign);
                          var textRotationAlignment = getValue(layer, 'layout', 'text-rotation-alignment', zoom, f, functionCache, featureState);
                          text.setRotateWithView(textRotationAlignment == 'map');
                      } else {
                          text.setMaxAngle(deg2rad(getValue(layer, 'layout', 'text-max-angle', zoom, f, functionCache, featureState)) * label.length / wrappedLabel.length);
                          text.setTextAlign();
                          text.setRotateWithView(false);
                      }
                      var textBaseline = 'middle';
                      if (textAnchor.indexOf('bottom') == 0) {
                          textBaseline = 'bottom';
                          vOffset = -textHaloWidth - 0.5 * (textLineHeight - 1) * textSize;
                      } else if (textAnchor.indexOf('top') == 0) {
                          textBaseline = 'top';
                          vOffset = textHaloWidth + 0.5 * (textLineHeight - 1) * textSize;
                      }
                      text.setTextBaseline(textBaseline);
                      var textJustify = getValue(layer, 'layout', 'text-justify', zoom, f, functionCache, featureState);
                      text.setJustify(textJustify === 'auto' ? undefined : textJustify);
                      text.setOffsetX(textOffset[0] * textSize + hOffset + textTranslate[0]);
                      text.setOffsetY(textOffset[1] * textSize + vOffset + textTranslate[1]);
                      textColor.setColor(colorWithOpacity(getValue(layer, 'paint', 'text-color', zoom, f, functionCache, featureState), opacity));
                      text.setFill(textColor);
                      var haloColor = colorWithOpacity(getValue(layer, 'paint', 'text-halo-color', zoom, f, functionCache, featureState), opacity);
                      if (haloColor) {
                          textHalo.setColor(haloColor);
                          // spec here : https://docs.mapbox.com/mapbox-gl-js/style-spec/#paint-symbol-text-halo-width
                          // Halo width must be doubled because it is applied around the center of the text outline
                          textHaloWidth *= 2;
                          // 1/4 of text size (spec) x 2
                          var halfTextSize = 0.5 * textSize;
                          textHalo.setWidth(textHaloWidth <= halfTextSize ? textHaloWidth : halfTextSize);
                          text.setStroke(textHalo);
                      } else {
                          text.setStroke(undefined);
                      }
                      var textPadding = getValue(layer, 'layout', 'text-padding', zoom, f, functionCache, featureState);
                      var padding = text.getPadding();
                      if (textPadding !== padding[0]) {
                          padding[0] = textPadding;
                          padding[1] = textPadding;
                          padding[2] = textPadding;
                          padding[3] = textPadding;
                      }
                      style.setZIndex(index);
                  }
              }
          }
          if (stylesLength > -1) {
              styles.length = stylesLength + 1;
              return styles;
          }
      };
      olLayer.setStyle(styleFunction);
      olLayer.set('mapbox-source', mapboxSource);
      olLayer.set('mapbox-layers', mapboxLayers);
      olLayer.set('mapbox-featurestate', {});
      return styleFunction;
  }

  /*
  ol-mapbox-style - Use Mapbox Style objects with OpenLayers
  Copyright 2016-present ol-mapbox-style contributors
  License: https://raw.githubusercontent.com/openlayers/ol-mapbox-style/master/LICENSE
  */
  /**
   * @typedef {Object} FeatureIdentifier
   * @property {string|number} id The feature id.
   * @property {string} source The source id.
   */
  /**
   * @typedef {Object} Options
   * @property {string} [accessToken] Access token for 'mapbox://' urls.
   * @property {function(string, ResourceType): (Request|void)} [transformRequest]
   * Function for controlling how `ol-mapbox-style` fetches resources. Can be used for modifying
   * the url, adding headers or setting credentials options. Called with the url and the resource
   * type as arguments, this function is supposed to return a `Request` object. Without a return value,
   * the original request will not be modified. For `Tiles` and `GeoJSON` resources, only the `url` of
   * the returned request will be respected.
   * @property {Array<number>} [resolutions] Resolutions for mapping resolution to zoom level.
   * Only needed when working with non-standard tile grids or projections.
   * @property {string} [styleUrl] URL of the Mapbox GL style. Required for styles that were provided
   * as object, when they contain a relative sprite url, or sources referencing data by relative url.
   * @property {string} [accessTokenParam='access_token'] Access token param. For internal use.
   * @property {function(VectorLayer|VectorTileLayer, string):HTMLImageElement|HTMLCanvasElement|string|undefined} [getImage=undefined]
   * Function that returns an image for an icon name. If the result is an HTMLImageElement, it must already be
   * loaded. The layer can be used to call layer.changed() when the loading and processing of the image has finished.
   * This function be used for icons not in the sprite or to override sprite icons.
   */
  /**
   * @typedef {Object} ApplyStyleOptions
   * @property {string} [source=''] Source. Default is `''`, which causes the first source in the
   * style to be used.
   * @property {Array<string>} [layers] Layers. If no source is provided, the layers with the
   * provided ids will be used from the style's `layers` array. All layers need to use the same source.
   */
  /** @typedef {'Style'|'Source'|'Sprite'|'SpriteImage'|'Tiles'|'GeoJSON'} ResourceType */
  /**
   * @param {string} styleUrl Style URL.
   * @param {Options} options Options.
   * @return {Options} Completed options with accessToken and accessTokenParam.
   */
  function completeOptions(styleUrl, options) {
      if (!options.accessToken) {
          options = Object.assign({}, options);
          var searchParams = new URL(styleUrl).searchParams;
          // The last search parameter is the access token
          searchParams.forEach(function (value, key) {
              options.accessToken = value;
              options.accessTokenParam = key;
          });
      }
      return options;
  }
  /**
   * Applies a style function to an `ol/layer/VectorTile` or `ol/layer/Vector`
   * with an `ol/source/VectorTile` or an `ol/source/Vector`. If the layer does not have a source
   * yet, it will be created and populated from the information in the `glStyle`.
   *
   * **Example:**
   * ```js
   * import {applyStyle} from 'ol-mapbox-style';
   * import {VectorTile} from 'ol/layer.js';
   *
   * const layer = new VectorTile({declutter: true});
   * applyStyle(layer, 'https://api.maptiler.com/maps/basic/style.json?key=YOUR_OPENMAPTILES_TOKEN');
   * ```
   *
   * The style function will render all layers from the `glStyle` object that use the source
   * of the first layer, the specified `source`, or a subset of layers from the same source. The
   * source needs to be a `"type": "vector"` or `"type": "geojson"` source.
   *
   * Two additional properties will be set on the provided layer:
   *
   *  * `mapbox-source`: The `id` of the Mapbox Style document's source that the
   *    OpenLayers layer was created from. Usually `apply()` creates one
   *    OpenLayers layer per Mapbox Style source, unless the layer stack has
   *    layers from different sources in between.
   *  * `mapbox-layers`: The `id`s of the Mapbox Style document's layers that are
   *    included in the OpenLayers layer.
   *
   * @param {VectorTileLayer|VectorLayer} layer OpenLayers layer. When the layer has a source configured,
   * it will be modified to use the configuration from the glStyle's `source`. Options specified on the
   * layer's source will override those from the glStyle's `source`, except for `url`,
   * `tileUrlFunction` and `tileGrid` (exception: when the source projection is not `EPSG:3857`).
   * @param {string|Object} glStyle Mapbox Style object.
   * @param {string|Array<string>|Options&ApplyStyleOptions} [sourceOrLayersOrOptions] Options or
   * `source` key or an array of layer `id`s from the Mapbox Style object. When a `source` key is
   * provided, all layers for the specified source will be included in the style function. When layer
   * `id`s are provided, they must be from layers that use the same source. When not provided or a falsey
   * value, all layers using the first source specified in the glStyle will be rendered.
   * @param {Options|string} [optionsOrPath] **Deprecated**. Options. Alternatively the path of the style file
   * (only required when a relative path is used for the `"sprite"` property of the style).
   * @param {Array<number>} [resolutions] **Deprecated**. Resolutions for mapping resolution to zoom level.
   * Only needed when working with non-standard tile grids or projections, can also be supplied with
   * options.
   * @return {Promise} Promise which will be resolved when the style can be used
   * for rendering.
   */
  function applyStyle(layer, glStyle, sourceOrLayersOrOptions, optionsOrPath, resolutions) {
      if ( sourceOrLayersOrOptions === void 0 ) sourceOrLayersOrOptions = '';
      if ( optionsOrPath === void 0 ) optionsOrPath = {};
      if ( resolutions === void 0 ) resolutions = undefined;

      var styleUrl, sourceId;
      /** @type {Options&ApplyStyleOptions} */
      var options;
      var sourceOrLayers;
      if (typeof sourceOrLayersOrOptions !== 'string' && !Array.isArray(sourceOrLayersOrOptions)) {
          options = sourceOrLayersOrOptions;
          sourceOrLayers = options.source || options.layers;
          optionsOrPath = options;
      } else {
          sourceOrLayers = sourceOrLayersOrOptions;
      }
      if (typeof optionsOrPath === 'string') {
          styleUrl = optionsOrPath;
          options = {};
      } else {
          styleUrl = optionsOrPath.styleUrl;
          options = optionsOrPath;
      }
      if (!resolutions) {
          resolutions = options.resolutions;
      }
      if (!styleUrl && typeof glStyle === 'string' && !glStyle.trim().startsWith('{')) {
          styleUrl = glStyle;
      }
      if (styleUrl) {
          styleUrl = styleUrl.startsWith('data:') ? location.href : normalizeStyleUrl(styleUrl, options.accessToken);
          options = completeOptions(styleUrl, options);
      }
      return new Promise(function (resolve, reject) {
          // TODO: figure out where best place to check source type is
          // Note that the source arg is an array of gl layer ids and each must be
          // dereferenced to get source type to validate
          getGlStyle(glStyle, options).then(function (glStyle) {
              if (glStyle.version != 8) {
                  return reject(new Error('glStyle version 8 required.'));
              }
              if (!(layer instanceof VectorLayer$1 || layer instanceof VectorTileLayer$1)) {
                  return reject(new Error('Can only apply to VectorLayer or VectorTileLayer'));
              }
              var type = layer instanceof VectorTileLayer$1 ? 'vector' : 'geojson';
              if (!sourceOrLayers) {
                  sourceId = Object.keys(glStyle.sources).find(function (key) {
                      return glStyle.sources[key].type === type;
                  });
                  sourceOrLayers = sourceId;
              } else if (Array.isArray(sourceOrLayers)) {
                  sourceId = glStyle.layers.find(function (layer) {
                      return layer.id === sourceOrLayers[0];
                  }).source;
              } else {
                  sourceId = sourceOrLayers;
              }
              if (!sourceId) {
                  return reject(new Error(("No " + type + " source found in the glStyle.")));
              }
              function assignSource() {
                  if (layer instanceof VectorTileLayer$1) {
                      return setupVectorSource(glStyle.sources[sourceId], styleUrl, options).then(function (source) {
                          var targetSource = layer.getSource();
                          if (!targetSource) {
                              layer.setSource(source);
                          } else if (source !== targetSource) {
                              targetSource.setTileUrlFunction(source.getTileUrlFunction());
                              //@ts-ignore
                              if (!targetSource.format_) {
                                  //@ts-ignore
                                  targetSource.format_ = source.format_;
                              }
                              if (!targetSource.getAttributions()) {
                                  targetSource.setAttributions(source.getAttributions());
                              }
                              if (targetSource.getTileLoadFunction() === defaultLoadFunction) {
                                  targetSource.setTileLoadFunction(source.getTileLoadFunction());
                              }
                              if (equivalent(targetSource.getProjection(), source.getProjection())) {
                                  targetSource.tileGrid = source.getTileGrid();
                              }
                          }
                          if (!isFinite(layer.getMaxResolution()) && !isFinite(layer.getMinZoom())) {
                              var tileGrid = layer.getSource().getTileGrid();
                              layer.setMaxResolution(tileGrid.getResolution(tileGrid.getMinZoom()));
                          }
                      });
                  }
                  var glSource = glStyle.sources[sourceId];
                  var source = layer.getSource();
                  if (!source || source.get('mapbox-source') !== glSource) {
                      source = setupGeoJSONSource(glSource, styleUrl, options);
                  }
                  var targetSource = layer.getSource();
                  if (!targetSource) {
                      layer.setSource(source);
                  } else if (source !== targetSource) {
                      if (!targetSource.getAttributions()) {
                          targetSource.setAttributions(source.getAttributions());
                      }
                      //@ts-ignore
                      if (!targetSource.format_) {
                          //@ts-ignore
                          targetSource.format_ = source.getFormat();
                      }
                      //@ts-ignore
                      targetSource.url_ = source.getUrl();
                  }
                  return Promise.resolve();
              }
              var spriteScale, spriteData, spriteImageUrl, style;
              function onChange() {
                  if (!style && (!glStyle.sprite || spriteData)) {
                      style = stylefunction(layer, glStyle, sourceOrLayers, resolutions, spriteData, spriteImageUrl, getFonts, options.getImage);
                      if (!layer.getStyle()) {
                          reject(new Error(("Nothing to show for source [" + sourceId + "]")));
                      } else {
                          assignSource().then(resolve).catch(reject);
                      }
                  } else if (style) {
                      layer.setStyle(style);
                      assignSource().then(resolve).catch(reject);
                  } else {
                      reject(new Error('Something went wrong trying to apply style.'));
                  }
              }
              if (glStyle.sprite) {
                  var sprite = new URL(normalizeSpriteUrl(glStyle.sprite, options.accessToken, styleUrl || location.href));
                  spriteScale = window.devicePixelRatio >= 1.5 ? 0.5 : 1;
                  var sizeFactor = spriteScale == 0.5 ? '@2x' : '';
                  var spriteUrl = sprite.origin + sprite.pathname + sizeFactor + '.json' + sprite.search;
                  new Promise(function (resolve, reject) {
                      fetchResource('Sprite', spriteUrl, options).then(resolve).catch(function (error) {
                          spriteUrl = sprite.origin + sprite.pathname + '.json' + sprite.search;
                          fetchResource('Sprite', spriteUrl, options).then(resolve).catch(reject);
                      });
                  }).then(function (spritesJson) {
                      if (spritesJson === undefined) {
                          reject(new Error('No sprites found.'));
                      }
                      spriteData = spritesJson;
                      spriteImageUrl = sprite.origin + sprite.pathname + sizeFactor + '.png' + sprite.search;
                      if (options.transformRequest) {
                          var transformed = options.transformRequest(spriteImageUrl, 'SpriteImage');
                          if (transformed instanceof Request) {
                              spriteImageUrl = encodeURI(transformed.url);
                          }
                      }
                      onChange();
                  }).catch(function (err) {
                      reject(new Error(("Sprites cannot be loaded: " + spriteUrl + ": " + (err.message))));
                  });
              } else {
                  onChange();
              }
          }).catch(reject);
      });
  }
  var emptyObj = {};
  function setFirstBackground(mapOrLayer, glStyle, options) {
      glStyle.layers.some(function (layer) {
          if (layer.type === 'background') {
              if (mapOrLayer instanceof Layer$1) {
                  mapOrLayer.setBackground(function (resolution) {
                      return getBackgroundColor(layer, resolution, options, {});
                  });
                  return true;
              } else if (mapOrLayer instanceof Map$2 || mapOrLayer instanceof LayerGroup$1) {
                  mapOrLayer.getLayers().push(setupBackgroundLayer(layer, options, {}));
                  return true;
              }
          }
      });
  }
  /**
   * Applies properties of the Mapbox Style's first `background` layer to the
   * provided map or VectorTile layer.
   *
   * **Example:**
   * ```js
   * import {applyBackground} from 'ol-mapbox-style';
   * import {Map} from 'ol';
   *
   * const map = new Map({target: 'map'});
   * applyBackground(map, 'https://api.maptiler.com/maps/basic/style.json?key=YOUR_OPENMAPTILES_TOKEN');
   * ```
   * @param {Map|VectorTileLayer} mapOrLayer OpenLayers Map or VectorTile layer.
   * @param {Object|string} glStyle Mapbox Style object or url.
   * @param {Options} options Options.
   * @return {Promise} Promise that resolves when the background is applied.
   */
  function applyBackground(mapOrLayer, glStyle, options) {
      if ( options === void 0 ) options = {};

      return getGlStyle(glStyle, options).then(function (glStyle) {
          setFirstBackground(mapOrLayer, glStyle, options);
      });
  }
  function extentFromTileJSON(tileJSON) {
      var bounds = tileJSON.bounds;
      if (bounds) {
          var ll = fromLonLat([
              bounds[0],
              bounds[1]
          ]);
          var tr = fromLonLat([
              bounds[2],
              bounds[3]
          ]);
          return [
              ll[0],
              ll[1],
              tr[0],
              tr[1]
          ];
      }
  }
  function getBackgroundColor(glLayer, resolution, options, functionCache) {
      var background = {
          id: glLayer.id,
          type: glLayer.type
      };
      var layout = glLayer.layout || {};
      var paint = glLayer.paint || {};
      background['paint'] = paint;
      var zoom = getZoomForResolution(resolution, options.resolutions || defaultResolutions);
      var bg, opacity;
      if (paint['background-color'] !== undefined) {
          bg = getValue(background, 'paint', 'background-color', zoom, emptyObj, functionCache);
      }
      if (paint['background-opacity'] !== undefined) {
          opacity = getValue(background, 'paint', 'background-opacity', zoom, emptyObj, functionCache);
      }
      return layout.visibility == 'none' ? undefined : colorWithOpacity(bg, opacity);
  }
  /**
   * @param {Object} glLayer Mapbox Style layer object.
   * @param {Options} options Options.
   * @param {Object} functionCache Cache for functions.
   * @return {Layer} OpenLayers layer.
   */
  function setupBackgroundLayer(glLayer, options, functionCache) {
      var div = document.createElement('div');
      div.className = 'ol-mapbox-style-background';
      div.style.position = 'absolute';
      div.style.width = '100%';
      div.style.height = '100%';
      return new Layer$1({
          source: new Source$1({}),
          render: function render(frameState) {
              var color = getBackgroundColor(glLayer, frameState.viewState.resolution, options, functionCache);
              div.style.backgroundColor = color;
              return div;
          }
      });
  }
  /**
   * Creates an OpenLayers VectorTile source for a gl source entry.
   * @param {Object} glSource "source" entry from a Mapbox Style object.
   * @param {string|undefined} styleUrl URL to use for the source. This is expected to be the complete http(s) url,
   * with access key applied.
   * @param {Options} options Options.
   * @return {Promise<import("ol/source/VectorTile").default>} Promise resolving to a VectorTile source.
   * @private
   */
  function setupVectorSource(glSource, styleUrl, options) {
      return new Promise(function (resolve, reject) {
          getTileJson(glSource, styleUrl, options).then(function (tileJSON) {
              var tileJSONSource = new TileJSON$1({ tileJSON: tileJSON });
              var tileJSONDoc = tileJSONSource.getTileJSON();
              var tileGrid = tileJSONSource.getTileGrid();
              var extent = extentFromTileJSON(tileJSONDoc);
              var minZoom = tileJSONDoc.minzoom || 0;
              var maxZoom = tileJSONDoc.maxzoom || 22;
              var sourceOptions = {
                  attributions: tileJSONSource.getAttributions(),
                  format: new MVT$1(),
                  tileGrid: new TileGrid$1({
                      origin: tileGrid.getOrigin(0),
                      extent: extent || tileGrid.getExtent(),
                      minZoom: minZoom,
                      resolutions: defaultResolutions.slice(0, maxZoom + 1),
                      tileSize: 512
                  })
              };
              if (Array.isArray(tileJSONDoc.tiles)) {
                  sourceOptions.urls = tileJSONDoc.tiles;
              } else {
                  sourceOptions.url = tileJSONDoc.tiles;
              }
              if (tileJSON.olSourceOptions) {
                  Object.assign(sourceOptions, tileJSON.olSourceOptions);
              }
              resolve(new VectorTileSource(sourceOptions));
          }).catch(reject);
      });
  }
  var geoJsonFormat = new format_GeoJSON();
  /**
   * @param {Object} glSource glStyle source.
   * @param {string} styleUrl Style URL.
   * @param {Options} options Options.
   * @return {VectorSource} Configured vector source.
   */
  function setupGeoJSONSource(glSource, styleUrl, options) {
      var data = glSource.data;
      var sourceOptions = {};
      if (typeof data == 'string') {
          var geoJsonUrl = normalizeSourceUrl(data, options.accessToken, options.accessTokenParam || 'access_token', styleUrl || location.href);
          if (options.transformRequest) {
              var transformed = options.transformRequest(geoJsonUrl, 'GeoJSON');
              if (transformed instanceof Request) {
                  geoJsonUrl = decodeURI(transformed.url);
              }
          }
          if (geoJsonUrl.indexOf('{bbox-epsg-3857}') != -1) {
              var extentUrl = function (extent) {
                  return geoJsonUrl.replace('{bbox-epsg-3857}', ((extent.join(',')) + ",EPSG:3857"));
              };
              var source$1 = new VectorSource$1({
                  attributions: glSource.attribution,
                  format: geoJsonFormat,
                  url: extentUrl,
                  strategy: bbox$1
              });
              source$1.set('mapbox-source', glSource);
              return source$1;
          }
          return new VectorSource$1({
              attributions: glSource.attribution,
              format: geoJsonFormat,
              url: geoJsonUrl
          });
      }
      sourceOptions.features = geoJsonFormat.readFeatures(data, { featureProjection: getUserProjection() || 'EPSG:3857' });
      var source = new VectorSource$1(Object.assign({
          attributions: glSource.attribution,
          format: geoJsonFormat
      }, sourceOptions));
      source.set('mapbox-source', glSource);
      return source;
  }

  /**
   * @module ol/layer/MapboxVector
   */

  /**
   * @classdesc
   * Event emitted on configuration or loading error.
   */
  class ErrorEvent extends BaseEvent {
    /**
     * @param {Error} error error object.
     */
    constructor(error) {
      super(EventType.ERROR);

      /**
       * @type {Error}
       */
      this.error = error;
    }
  }

  /**
   * @typedef {Object} Options
   * @property {string} styleUrl The URL of the Mapbox style object to use for this layer.  For a
   * style created with Mapbox Studio and hosted on Mapbox, this will look like
   * 'mapbox://styles/you/your-style'.
   * @property {string} [accessToken] The access token for your Mapbox style. This has to be provided
   * for `mapbox://` style urls. For `https://` and other urls, any access key must be the last query
   * parameter of the style url.
   * @property {string} [source] If your style uses more than one source, you need to use either the
   * `source` property or the `layers` property to limit rendering to a single vector source.  The
   * `source` property corresponds to the id of a vector source in your Mapbox style.
   * @property {Array<string>} [layers] Limit rendering to the list of included layers.  All layers
   * must share the same vector source.  If your style uses more than one source, you need to use
   * either the `source` property or the `layers` property to limit rendering to a single vector
   * source.
   * @property {boolean} [declutter=true] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   *
   * As an optimization decluttered features from layers with the same `className` are rendered above
   * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this
   * behavior and place declutterd features with their own layer configure the layer with a `className`
   * other than `ol-layer`.
   * @property {import("./Base.js").BackgroundColor|false} [background] Background color for the layer.
   * If not specified, the background from the Mapbox style object will be used. Set to `false` to prevent
   * the Mapbox style's background from being used.
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible. If neither `maxResolution` nor `minZoom` are defined, the layer's `maxResolution` will
   * match the style source's `minzoom`.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will
   * be visible. If neither `maxResolution` nor `minZoom` are defined, the layer's `minZoom` will match
   * the style source's `minzoom`.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
   * renderer when getting features from the vector tile for the rendering or hit-detection.
   * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
   * the largest possible buffer of the used tiles. It should be at least the size of the largest
   * point symbol or line width.
   * @property {import("./VectorTile.js").VectorTileRenderType} [renderMode='hybrid'] Render mode for vector tiles:
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
   *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
   *    rotated views.
   *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector
   *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of
   *    another layer with the same source).
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
   * recreated during animations. This means that no vectors will be shown clipped, but the setting
   * will have a performance impact for large amounts of vector data. When set to `false`, batches
   * will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
   * recreated during interactions. See also `updateWhileAnimating`.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * A vector tile layer based on a Mapbox style that uses a single vector source.  Configure
   * the layer with the `styleUrl` and `accessToken` shown in Mapbox Studio's share panel.
   * If the style uses more than one source, use the `source` property to choose a single
   * vector source.  If you want to render a subset of the layers in the style, use the `layers`
   * property (all layers must share the same vector source).  See the constructor options for
   * more detail.
   *
   *     const map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1,
   *       }),
   *       layers: [
   *         new MapboxVectorLayer({
   *           styleUrl: 'mapbox://styles/mapbox/bright-v9',
   *           accessToken: 'your-mapbox-access-token-here',
   *         }),
   *       ],
   *       target: 'map',
   *     });
   *
   * On configuration or loading error, the layer will trigger an `'error'` event.  Listeners
   * will receive an object with an `error` property that can be used to diagnose the problem.
   *
   * **Note for users of the full build**: The `MapboxVectorLayer` requires the
   * [ol-mapbox-style](https://github.com/openlayers/ol-mapbox-style) library to be loaded as well.
   *
   * @param {Options} options Options.
   * @extends {VectorTileLayer}
   * @fires module:ol/events/Event~BaseEvent#event:error
   * @api
   */
  class MapboxVectorLayer extends VectorTileLayer$1 {
    /**
     * @param {Options} options Layer options.  At a minimum, `styleUrl` and `accessToken`
     * must be provided.
     */
    constructor(options) {
      const declutter = 'declutter' in options ? options.declutter : true;
      const source = new VectorTileSource({
        state: 'loading',
        format: new MVT$1(),
      });

      super({
        source: source,
        background: options.background,
        declutter: declutter,
        className: options.className,
        opacity: options.opacity,
        visible: options.visible,
        zIndex: options.zIndex,
        minResolution: options.minResolution,
        maxResolution: options.maxResolution,
        minZoom: options.minZoom,
        maxZoom: options.maxZoom,
        renderOrder: options.renderOrder,
        renderBuffer: options.renderBuffer,
        renderMode: options.renderMode,
        map: options.map,
        updateWhileAnimating: options.updateWhileAnimating,
        updateWhileInteracting: options.updateWhileInteracting,
        preload: options.preload,
        useInterimTilesOnError: options.useInterimTilesOnError,
        properties: options.properties,
      });

      if (options.accessToken) {
        this.accessToken = options.accessToken;
      }
      const url = options.styleUrl;
      applyStyle(this, url, options.layers || options.source, {
        accessToken: this.accessToken,
      })
        .then(() => {
          source.setState('ready');
        })
        .catch((error) => {
          this.dispatchEvent(new ErrorEvent(error));
          const source = this.getSource();
          source.setState('error');
        });
      if (this.getBackground() === undefined) {
        applyBackground(this, options.styleUrl, {
          accessToken: this.accessToken,
        });
      }
    }
  }

  var MapboxVectorLayer$1 = MapboxVectorLayer;

  /**
   * @module ol/renderer/canvas/VectorImageLayer
   */

  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  class CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer$1 {
    /**
     * @param {import("../../layer/VectorImage.js").default} layer Vector image layer.
     */
    constructor(layer) {
      super(layer);

      /**
       * @private
       * @type {import("./VectorLayer.js").default}
       */
      this.vectorRenderer_ = new CanvasVectorLayerRenderer$1(layer);

      /**
       * @private
       * @type {number}
       */
      this.layerImageRatio_ = layer.getImageRatio();

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.coordinateToVectorPixelTransform_ = create$3();

      /**
       * @private
       * @type {import("../../transform.js").Transform}
       */
      this.renderedPixelToCoordinateTransform_ = null;
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      this.vectorRenderer_.dispose();
      super.disposeInternal();
    }

    /**
     * Asynchronous layer level hit detection.
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Promise<Array<import("../../Feature").default>>} Promise that resolves with an array of features.
     */
    getFeatures(pixel) {
      if (!this.vectorRenderer_) {
        return Promise.resolve([]);
      }
      const vectorPixel = apply(
        this.coordinateToVectorPixelTransform_,
        apply(this.renderedPixelToCoordinateTransform_, pixel.slice())
      );
      return this.vectorRenderer_.getFeatures(vectorPixel);
    }

    /**
     * Perform action necessary to get the layer rendered after new fonts have loaded
     */
    handleFontsChanged() {
      this.vectorRenderer_.handleFontsChanged();
    }

    /**
     * Determine whether render should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrame(frameState) {
      const pixelRatio = frameState.pixelRatio;
      const viewState = frameState.viewState;
      const viewResolution = viewState.resolution;

      const hints = frameState.viewHints;
      const vectorRenderer = this.vectorRenderer_;
      let renderedExtent = frameState.extent;
      if (this.layerImageRatio_ !== 1) {
        renderedExtent = renderedExtent.slice(0);
        scaleFromCenter(renderedExtent, this.layerImageRatio_);
      }
      const width = getWidth(renderedExtent) / viewResolution;
      const height = getHeight(renderedExtent) / viewResolution;

      if (
        !hints[ViewHint.ANIMATING] &&
        !hints[ViewHint.INTERACTING] &&
        !isEmpty(renderedExtent)
      ) {
        vectorRenderer.useContainer(null, null);
        const context = vectorRenderer.context;
        const layerState = frameState.layerStatesArray[frameState.layerIndex];
        context.globalAlpha = layerState.opacity;
        const imageLayerState = Object.assign({}, layerState, {opacity: 1});
        const imageFrameState = /** @type {import("../../Map.js").FrameState} */ (
          Object.assign({}, frameState, {
            declutterTree: new RBush$2(9),
            extent: renderedExtent,
            size: [width, height],
            viewState: /** @type {import("../../View.js").State} */ (
              Object.assign({}, frameState.viewState, {
                rotation: 0,
              })
            ),
            layerStatesArray: [imageLayerState],
            layerIndex: 0,
          })
        );
        let emptyImage = true;
        const image = new ImageCanvas$1(
          renderedExtent,
          viewResolution,
          pixelRatio,
          context.canvas,
          function (callback) {
            if (
              vectorRenderer.prepareFrame(imageFrameState) &&
              vectorRenderer.replayGroupChanged
            ) {
              vectorRenderer.clipping = false;
              if (vectorRenderer.renderFrame(imageFrameState, null)) {
                vectorRenderer.renderDeclutter(imageFrameState);
                emptyImage = false;
              }
              callback();
            }
          }
        );

        image.addEventListener(EventType.CHANGE, () => {
          if (image.getState() !== ImageState.LOADED) {
            return;
          }
          this.image_ = emptyImage ? null : image;
          const imageResolution = image.getResolution();
          const imagePixelRatio = image.getPixelRatio();
          const renderedResolution =
            (imageResolution * pixelRatio) / imagePixelRatio;
          this.renderedResolution = renderedResolution;
          this.coordinateToVectorPixelTransform_ = compose(
            this.coordinateToVectorPixelTransform_,
            width / 2,
            height / 2,
            1 / renderedResolution,
            -1 / renderedResolution,
            0,
            -viewState.center[0],
            -viewState.center[1]
          );
        });
        image.load();
      }

      if (this.image_) {
        this.renderedPixelToCoordinateTransform_ =
          frameState.pixelToCoordinateTransform.slice();
      }

      return !!this.image_;
    }

    /**
     */
    preRender() {}

    /**
     */
    postRender() {}

    /**
     */
    renderDeclutter() {}

    /**
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {number} hitTolerance Hit tolerance in pixels.
     * @param {import("../vector.js").FeatureCallback<T>} callback Feature callback.
     * @param {Array<import("../Map.js").HitMatch<T>>} matches The hit detected matches with tolerance.
     * @return {T|undefined} Callback result.
     * @template T
     */
    forEachFeatureAtCoordinate(
      coordinate,
      frameState,
      hitTolerance,
      callback,
      matches
    ) {
      if (this.vectorRenderer_) {
        return this.vectorRenderer_.forEachFeatureAtCoordinate(
          coordinate,
          frameState,
          hitTolerance,
          callback,
          matches
        );
      }
      return super.forEachFeatureAtCoordinate(
        coordinate,
        frameState,
        hitTolerance,
        callback,
        matches
      );
    }
  }

  var CanvasVectorImageLayerRenderer$1 = CanvasVectorImageLayerRenderer;

  /**
   * @module ol/layer/VectorImage
   */

  /**
   * @template {import("../source/Vector.js").default} VectorSourceType
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {VectorSourceType} [source] Source.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use [map.addLayer()]{@link import("../Map.js").default#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text on this layer. The priority is defined
   * by the `zIndex` of the style and the render order of features. Higher z-index means higher priority.
   * Within the same z-index, a feature rendered before another has higher priority.
   * @property {import("../style/Style.js").StyleLike|null} [style] Layer style. When set to `null`, only
   * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style
   * which will be used if this is not set.
   * @property {number} [imageRatio=1] Ratio by which the rendered extent should be larger than the
   * viewport extent. A larger ratio avoids cut images during panning, but will cause a decrease in performance.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Vector data is rendered client-side, to an image. This layer type provides great performance
   * during panning and zooming, but point symbols and texts are always rotated with the view and
   * pixels are scaled during zoom animations. For more accurate rendering of vector data, use
   * {@link module:ol/layer/Vector~VectorLayer} instead.
   *
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default} VectorSourceType
   * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorImageLayerRenderer>}
   * @api
   */
  class VectorImageLayer extends BaseVectorLayer$1 {
    /**
     * @param {Options<VectorSourceType>} [options] Options.
     */
    constructor(options) {
      options = options ? options : {};

      const baseOptions = Object.assign({}, options);
      delete baseOptions.imageRatio;
      super(baseOptions);

      /**
       * @type {number}
       * @private
       */
      this.imageRatio_ =
        options.imageRatio !== undefined ? options.imageRatio : 1;
    }

    /**
     * @return {number} Ratio between rendered extent size and viewport extent size.
     */
    getImageRatio() {
      return this.imageRatio_;
    }

    createRenderer() {
      return new CanvasVectorImageLayerRenderer$1(this);
    }
  }

  var VectorImageLayer$1 = VectorImageLayer;

  /**
   * @module ol/webgl/PaletteTexture
   */

  class PaletteTexture {
    /**
     * @param {string} name The name of the texture.
     * @param {Uint8Array} data The texture data.
     */
    constructor(name, data) {
      this.name = name;
      this.data = data;

      /**
       * @type {WebGLTexture}
       * @private
       */
      this.texture_ = null;
    }

    /**
     * @param {WebGLRenderingContext} gl Rendering context.
     * @return {WebGLTexture} The texture.
     */
    getTexture(gl) {
      if (!this.texture_) {
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          gl.RGBA,
          this.data.length / 4,
          1,
          0,
          gl.RGBA,
          gl.UNSIGNED_BYTE,
          this.data
        );
        this.texture_ = texture;
      }
      return this.texture_;
    }
  }

  var PaletteTexture$1 = PaletteTexture;

  /**
   * @module ol/DataTile
   */

  /**
   * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} ImageLike
   */

  /**
   * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike
   */

  /**
   * Data that can be used with a DataTile.
   * @typedef {ArrayLike|ImageLike} Data
   */

  /**
   * @param {Data} data Tile data.
   * @return {ImageLike|null} The image-like data.
   */
  function asImageLike(data) {
    return data instanceof Image ||
      data instanceof HTMLCanvasElement ||
      data instanceof HTMLVideoElement
      ? data
      : null;
  }

  /**
   * @param {Data} data Tile data.
   * @return {ArrayLike|null} The array-like data.
   */
  function asArrayLike(data) {
    return data instanceof Uint8Array ||
      data instanceof Uint8ClampedArray ||
      data instanceof Float32Array ||
      data instanceof DataView
      ? data
      : null;
  }

  /**
   * @type {CanvasRenderingContext2D|null}
   */
  let sharedContext = null;

  /**
   * @param {ImageLike} image The image.
   * @return {Uint8ClampedArray} The data.
   */
  function toArray(image) {
    if (!sharedContext) {
      sharedContext = createCanvasContext2D(
        image.width,
        image.height,
        undefined,
        {willReadFrequently: true}
      );
    }
    const canvas = sharedContext.canvas;
    const width = image.width;
    if (canvas.width !== width) {
      canvas.width = width;
    }
    const height = image.height;
    if (canvas.height !== height) {
      canvas.height = height;
    }
    sharedContext.drawImage(image, width, height);
    return sharedContext.getImageData(0, 0, width, height).data;
  }

  /**
   * @type {import('./size.js').Size}
   */
  const defaultSize = [256, 256];

  /**
   * @typedef {Object} Options
   * @property {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,
   * the promise should not resolve until the image is loaded.
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   * @property {import('./size.js').Size} [size=[256, 256]] Tile size.
   * @api
   */

  class DataTile$1 extends Tile$1 {
    /**
     * @param {Options} options Tile options.
     */
    constructor(options) {
      const state = TileState.IDLE;

      super(options.tileCoord, state, {
        transition: options.transition,
        interpolate: options.interpolate,
      });

      /**
       * @type {function(): Promise<Data>}
       * @private
       */
      this.loader_ = options.loader;

      /**
       * @type {Data}
       * @private
       */
      this.data_ = null;

      /**
       * @type {Error}
       * @private
       */
      this.error_ = null;

      /**
       * @type {import('./size.js').Size|null}
       * @private
       */
      this.size_ = options.size || null;
    }

    /**
     * Get the tile size.
     * @return {import('./size.js').Size} Tile size.
     */
    getSize() {
      if (this.size_) {
        return this.size_;
      }
      const imageData = asImageLike(this.data_);
      if (imageData) {
        return [imageData.width, imageData.height];
      }
      return defaultSize;
    }

    /**
     * Get the data for the tile.
     * @return {Data} Tile data.
     * @api
     */
    getData() {
      return this.data_;
    }

    /**
     * Get any loading error.
     * @return {Error} Loading error.
     * @api
     */
    getError() {
      return this.error_;
    }

    /**
     * Load not yet loaded URI.
     * @api
     */
    load() {
      if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {
        return;
      }
      this.state = TileState.LOADING;
      this.changed();

      const self = this;
      this.loader_()
        .then(function (data) {
          self.data_ = data;
          self.state = TileState.LOADED;
          self.changed();
        })
        .catch(function (error) {
          self.error_ = error;
          self.state = TileState.ERROR;
          self.changed();
        });
    }
  }

  var DataTile$2 = DataTile$1;

  /**
   * @module ol/reproj/DataTile
   */

  /**
   * @typedef {function(number, number, number, number) : import("../DataTile.js").default} TileGetter
   */

  /**
   * @typedef {Object} Options
   * @property {import("../proj/Projection.js").default} sourceProj Source projection.
   * @property {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
   * @property {import("../proj/Projection.js").default} targetProj Target projection.
   * @property {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
   * @property {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
   * @property {import("../tilecoord.js").TileCoord} [wrappedTileCoord] Coordinate of the tile wrapped in X.
   * @property {number} pixelRatio Pixel ratio.
   * @property {number} gutter Gutter of the source tiles.
   * @property {TileGetter} getTileFunction Function returning source tiles (z, x, y, pixelRatio).
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   * @property {number} [errorThreshold] Acceptable reprojection error (in px).
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   */

  /**
   * @classdesc
   * Class encapsulating single reprojected data tile.
   * See {@link module:ol/source/DataTile~DataTileSource}.
   *
   */
  class ReprojDataTile extends DataTile$2 {
    /**
     * @param {Options} options Tile options.
     */
    constructor(options) {
      super({
        tileCoord: options.tileCoord,
        loader: () => Promise.resolve(new Uint8Array(4)),
        interpolate: options.interpolate,
        transition: options.transition,
      });

      /**
       * @private
       * @type {number}
       */
      this.pixelRatio_ = options.pixelRatio;

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter;

      /**
       * @type {import("../DataTile.js").Data}
       * @private
       */
      this.reprojData_ = null;

      /**
       * @type {Error}
       * @private
       */
      this.reprojError_ = null;

      /**
       * @type {import('../size.js').Size}
       * @private
       */
      this.reprojSize_ = undefined;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.sourceTileGrid_ = options.sourceTileGrid;

      /**
       * @private
       * @type {import("../tilegrid/TileGrid.js").default}
       */
      this.targetTileGrid_ = options.targetTileGrid;

      /**
       * @private
       * @type {import("../tilecoord.js").TileCoord}
       */
      this.wrappedTileCoord_ = options.wrappedTileCoord || options.tileCoord;

      /**
       * @private
       * @type {!Array<DataTile>}
       */
      this.sourceTiles_ = [];

      /**
       * @private
       * @type {?Array<import("../events.js").EventsKey>}
       */
      this.sourcesListenerKeys_ = null;

      /**
       * @private
       * @type {number}
       */
      this.sourceZ_ = 0;

      const targetExtent = this.targetTileGrid_.getTileCoordExtent(
        this.wrappedTileCoord_
      );
      const maxTargetExtent = this.targetTileGrid_.getExtent();
      let maxSourceExtent = this.sourceTileGrid_.getExtent();

      const limitedTargetExtent = maxTargetExtent
        ? getIntersection(targetExtent, maxTargetExtent)
        : targetExtent;

      if (getArea$1(limitedTargetExtent) === 0) {
        // Tile is completely outside range -> EMPTY
        // TODO: is it actually correct that the source even creates the tile ?
        this.state = TileState.EMPTY;
        return;
      }

      const sourceProj = options.sourceProj;
      const sourceProjExtent = sourceProj.getExtent();
      if (sourceProjExtent) {
        if (!maxSourceExtent) {
          maxSourceExtent = sourceProjExtent;
        } else {
          maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
        }
      }

      const targetResolution = this.targetTileGrid_.getResolution(
        this.wrappedTileCoord_[0]
      );

      const targetProj = options.targetProj;
      const sourceResolution = calculateSourceExtentResolution(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        targetResolution
      );

      if (!isFinite(sourceResolution) || sourceResolution <= 0) {
        // invalid sourceResolution -> EMPTY
        // probably edges of the projections when no extent is defined
        this.state = TileState.EMPTY;
        return;
      }

      const errorThresholdInPixels =
        options.errorThreshold !== undefined
          ? options.errorThreshold
          : ERROR_THRESHOLD;

      /**
       * @private
       * @type {!import("./Triangulation.js").default}
       */
      this.triangulation_ = new Triangulation$1(
        sourceProj,
        targetProj,
        limitedTargetExtent,
        maxSourceExtent,
        sourceResolution * errorThresholdInPixels,
        targetResolution
      );

      if (this.triangulation_.getTriangles().length === 0) {
        // no valid triangles -> EMPTY
        this.state = TileState.EMPTY;
        return;
      }

      this.sourceZ_ = this.sourceTileGrid_.getZForResolution(sourceResolution);
      let sourceExtent = this.triangulation_.calculateSourceExtent();

      if (maxSourceExtent) {
        if (sourceProj.canWrapX()) {
          sourceExtent[1] = clamp(
            sourceExtent[1],
            maxSourceExtent[1],
            maxSourceExtent[3]
          );
          sourceExtent[3] = clamp(
            sourceExtent[3],
            maxSourceExtent[1],
            maxSourceExtent[3]
          );
        } else {
          sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
        }
      }

      if (!getArea$1(sourceExtent)) {
        this.state = TileState.EMPTY;
      } else {
        const sourceRange = this.sourceTileGrid_.getTileRangeForExtentAndZ(
          sourceExtent,
          this.sourceZ_
        );
        const getTile = options.getTileFunction;
        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
            const tile = getTile(this.sourceZ_, srcX, srcY, this.pixelRatio_);
            if (tile) {
              this.sourceTiles_.push(tile);
            }
          }
        }

        if (this.sourceTiles_.length === 0) {
          this.state = TileState.EMPTY;
        }
      }
    }

    /**
     * Get the tile size.
     * @return {import('../size.js').Size} Tile size.
     */
    getSize() {
      return this.reprojSize_;
    }

    /**
     * Get the data for the tile.
     * @return {import("../DataTile.js").Data} Tile data.
     */
    getData() {
      return this.reprojData_;
    }

    /**
     * Get any loading error.
     * @return {Error} Loading error.
     */
    getError() {
      return this.reprojError_;
    }

    /**
     * @private
     */
    reproject_() {
      const dataSources = [];
      this.sourceTiles_.forEach((tile) => {
        if (!tile || tile.getState() !== TileState.LOADED) {
          return;
        }
        const size = tile.getSize();
        const gutter = this.gutter_;
        /**
         * @type {import("../DataTile.js").ArrayLike}
         */
        let tileData;
        const arrayData = asArrayLike(tile.getData());
        if (arrayData) {
          tileData = arrayData;
        } else {
          tileData = toArray(asImageLike(tile.getData()));
        }
        const pixelSize = [size[0] + 2 * gutter, size[1] + 2 * gutter];
        const isFloat = tileData instanceof Float32Array;
        const pixelCount = pixelSize[0] * pixelSize[1];
        const DataType = isFloat ? Float32Array : Uint8Array;
        const tileDataR = new DataType(tileData.buffer);
        const bytesPerElement = DataType.BYTES_PER_ELEMENT;
        const bytesPerPixel = (bytesPerElement * tileDataR.length) / pixelCount;
        const bytesPerRow = tileDataR.byteLength / pixelSize[1];
        const bandCount = Math.floor(
          bytesPerRow / bytesPerElement / pixelSize[0]
        );
        const packedLength = pixelCount * bandCount;
        let packedData = tileDataR;
        if (tileDataR.length !== packedLength) {
          packedData = new DataType(packedLength);
          let dataIndex = 0;
          let rowOffset = 0;
          const colCount = pixelSize[0] * bandCount;
          for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {
            for (let colIndex = 0; colIndex < colCount; ++colIndex) {
              packedData[dataIndex++] = tileDataR[rowOffset + colIndex];
            }
            rowOffset += bytesPerRow / bytesPerElement;
          }
        }
        dataSources.push({
          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
          data: new Uint8Array(packedData.buffer),
          dataType: DataType,
          bytesPerPixel: bytesPerPixel,
          pixelSize: pixelSize,
        });
      });
      this.sourceTiles_.length = 0;

      if (dataSources.length === 0) {
        this.state = TileState.ERROR;
      } else {
        const z = this.wrappedTileCoord_[0];
        const size = this.targetTileGrid_.getTileSize(z);
        const targetWidth = typeof size === 'number' ? size : size[0];
        const targetHeight = typeof size === 'number' ? size : size[1];
        const targetResolution = this.targetTileGrid_.getResolution(z);
        const sourceResolution = this.sourceTileGrid_.getResolution(
          this.sourceZ_
        );

        const targetExtent = this.targetTileGrid_.getTileCoordExtent(
          this.wrappedTileCoord_
        );

        let dataR, dataU;

        const bytesPerPixel = dataSources[0].bytesPerPixel;

        const reprojs = Math.ceil(bytesPerPixel / 3);
        for (let reproj = reprojs - 1; reproj >= 0; --reproj) {
          const sources = [];
          for (let i = 0, len = dataSources.length; i < len; ++i) {
            const dataSource = dataSources[i];
            const buffer = dataSource.data;
            const pixelSize = dataSource.pixelSize;
            const width = pixelSize[0];
            const height = pixelSize[1];
            const context = createCanvasContext2D(width, height, canvasPool);
            const imageData = context.createImageData(width, height);
            const data = imageData.data;
            let offset = reproj * 3;
            for (let j = 0, len = data.length; j < len; j += 4) {
              data[j] = buffer[offset];
              data[j + 1] = buffer[offset + 1];
              data[j + 2] = buffer[offset + 2];
              data[j + 3] = 255;
              offset += bytesPerPixel;
            }
            context.putImageData(imageData, 0, 0);
            sources.push({
              extent: dataSource.extent,
              image: context.canvas,
            });
          }

          const canvas = render(
            targetWidth,
            targetHeight,
            this.pixelRatio_,
            sourceResolution,
            this.sourceTileGrid_.getExtent(),
            targetResolution,
            targetExtent,
            this.triangulation_,
            sources,
            this.gutter_,
            false,
            false
          );

          for (let i = 0, len = sources.length; i < len; ++i) {
            const canvas = sources[i].image;
            const context = canvas.getContext('2d');
            releaseCanvas$1(context);
            canvasPool.push(context.canvas);
          }

          const context = canvas.getContext('2d');
          const imageData = context.getImageData(
            0,
            0,
            canvas.width,
            canvas.height
          );

          releaseCanvas$1(context);
          canvasPool.push(canvas);

          if (!dataR) {
            dataU = new Uint8Array(
              bytesPerPixel * imageData.width * imageData.height
            );
            dataR = new dataSources[0].dataType(dataU.buffer);
          }

          const data = imageData.data;
          let offset = reproj * 3;
          for (let i = 0, len = data.length; i < len; i += 4) {
            if (data[i + 3] === 255) {
              dataU[offset] = data[i];
              dataU[offset + 1] = data[i + 1];
              dataU[offset + 2] = data[i + 2];
            } else {
              dataU[offset] = 0;
              dataU[offset + 1] = 0;
              dataU[offset + 2] = 0;
            }
            offset += bytesPerPixel;
          }
        }

        this.reprojData_ = dataR;
        this.reprojSize_ = [
          Math.round(targetWidth * this.pixelRatio_),
          Math.round(targetHeight * this.pixelRatio_),
        ];
        this.state = TileState.LOADED;
      }
      this.changed();
    }

    /**
     * Load not yet loaded URI.
     */
    load() {
      if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {
        return;
      }
      this.state = TileState.LOADING;
      this.changed();

      let leftToLoad = 0;

      this.sourcesListenerKeys_ = [];
      this.sourceTiles_.forEach((tile) => {
        const state = tile.getState();
        if (state !== TileState.IDLE && state !== TileState.LOADING) {
          return;
        }
        leftToLoad++;

        const sourceListenKey = listen(
          tile,
          EventType.CHANGE,
          function () {
            const state = tile.getState();
            if (
              state == TileState.LOADED ||
              state == TileState.ERROR ||
              state == TileState.EMPTY
            ) {
              unlistenByKey(sourceListenKey);
              leftToLoad--;
              if (leftToLoad === 0) {
                this.unlistenSources_();
                this.reproject_();
              }
            }
          },
          this
        );
        this.sourcesListenerKeys_.push(sourceListenKey);
      });

      if (leftToLoad === 0) {
        setTimeout(this.reproject_.bind(this), 0);
      } else {
        this.sourceTiles_.forEach(function (tile) {
          const state = tile.getState();
          if (state == TileState.IDLE) {
            tile.load();
          }
        });
      }
    }

    /**
     * @private
     */
    unlistenSources_() {
      this.sourcesListenerKeys_.forEach(unlistenByKey);
      this.sourcesListenerKeys_ = null;
    }
  }

  var ReprojDataTile$1 = ReprojDataTile;

  /**
   * @module ol/webgl/TileTexture
   */

  /**
   * @param {WebGLRenderingContext} gl The WebGL context.
   * @param {WebGLTexture} texture The texture.
   * @param {boolean} interpolate Interpolate when resampling.
   */
  function bindAndConfigure(gl, texture, interpolate) {
    const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);
  }

  /**
   * @param {WebGLRenderingContext} gl The WebGL context.
   * @param {WebGLTexture} texture The texture.
   * @param {import("../DataTile.js").ImageLike} image The image.
   * @param {boolean} interpolate Interpolate when resampling.
   */
  function uploadImageTexture(gl, texture, image, interpolate) {
    bindAndConfigure(gl, texture, interpolate);

    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
  }

  /**
   * @param {import("./Helper.js").default} helper The WebGL helper.
   * @param {WebGLTexture} texture The texture.
   * @param {import("../DataTile.js").ArrayLike} data The pixel data.
   * @param {import("../size.js").Size} size The pixel size.
   * @param {number} bandCount The band count.
   * @param {boolean} interpolate Interpolate when resampling.
   */
  function uploadDataTexture(
    helper,
    texture,
    data,
    size,
    bandCount,
    interpolate
  ) {
    const gl = helper.getGL();
    let textureType;
    let canInterpolate;
    if (data instanceof Float32Array) {
      textureType = gl.FLOAT;
      helper.getExtension('OES_texture_float');
      const extension = helper.getExtension('OES_texture_float_linear');
      canInterpolate = extension !== null;
    } else {
      textureType = gl.UNSIGNED_BYTE;
      canInterpolate = true;
    }
    bindAndConfigure(gl, texture, interpolate && canInterpolate);

    const bytesPerRow = data.byteLength / size[1];
    let unpackAlignment = 1;
    if (bytesPerRow % 8 === 0) {
      unpackAlignment = 8;
    } else if (bytesPerRow % 4 === 0) {
      unpackAlignment = 4;
    } else if (bytesPerRow % 2 === 0) {
      unpackAlignment = 2;
    }

    let format;
    switch (bandCount) {
      case 1: {
        format = gl.LUMINANCE;
        break;
      }
      case 2: {
        format = gl.LUMINANCE_ALPHA;
        break;
      }
      case 3: {
        format = gl.RGB;
        break;
      }
      case 4: {
        format = gl.RGBA;
        break;
      }
      default: {
        throw new Error(`Unsupported number of bands: ${bandCount}`);
      }
    }

    const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);
    gl.texImage2D(
      gl.TEXTURE_2D,
      0,
      format,
      size[0],
      size[1],
      0,
      format,
      textureType,
      data
    );
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);
  }

  /**
   * @type {CanvasRenderingContext2D}
   */
  let pixelContext = null;

  function createPixelContext() {
    pixelContext = createCanvasContext2D(1, 1, undefined, {
      willReadFrequently: true,
    });
  }

  /**
   * @typedef {import("../DataTile.js").default|ImageTile|ReprojTile} TileType
   */

  /**
   * @typedef {Object} Options
   * @property {TileType} tile The tile.
   * @property {import("../tilegrid/TileGrid.js").default} grid Tile grid.
   * @property {import("../webgl/Helper.js").default} helper WebGL helper.
   * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.
   */

  class TileTexture extends EventTarget {
    /**
     * @param {Options} options The tile texture options.
     */
    constructor(options) {
      super();

      /**
       * @type {TileType}
       */
      this.tile;

      /**
       * @type {Array<WebGLTexture>}
       */
      this.textures = [];
      this.handleTileChange_ = this.handleTileChange_.bind(this);

      /**
       * @type {import("../size.js").Size}
       * @private
       */
      this.renderSize_ = toSize(
        options.grid.getTileSize(options.tile.tileCoord[0])
      );

      /**
       * @type {number}
       * @private
       */
      this.gutter_ = options.gutter || 0;

      /**
       * @type {number}
       */
      this.bandCount = NaN;

      /**
       * @type {import("../webgl/Helper.js").default}
       * @private
       */
      this.helper_ = options.helper;

      const coords = new WebGLArrayBuffer$1(ARRAY_BUFFER, STATIC_DRAW);
      coords.fromArray([
        0, // P0
        1,
        1, // P1
        1,
        1, // P2
        0,
        0, // P3
        0,
      ]);
      this.helper_.flushBufferData(coords);

      /**
       * @type {WebGLArrayBuffer}
       */
      this.coords = coords;

      this.setTile(options.tile);
    }

    /**
     * @param {TileType} tile Tile.
     */
    setTile(tile) {
      if (tile !== this.tile) {
        if (this.tile) {
          this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);
        }
        this.tile = tile;
        this.textures.length = 0;
        this.loaded = tile.getState() === TileState.LOADED;
        if (this.loaded) {
          this.uploadTile_();
        } else {
          if (tile instanceof ImageTile$1) {
            const image = tile.getImage();
            if (image instanceof Image && !image.crossOrigin) {
              image.crossOrigin = 'anonymous';
            }
          }
          tile.addEventListener(EventType.CHANGE, this.handleTileChange_);
        }
      }
    }

    uploadTile_() {
      const helper = this.helper_;
      const gl = helper.getGL();
      const tile = this.tile;

      /**
       * @type {import("../DataTile.js").Data}
       */
      let data;

      if (tile instanceof ImageTile$1 || tile instanceof ReprojTile$1) {
        data = tile.getImage();
      } else {
        data = tile.getData();
      }

      const image = asImageLike(data);
      if (image) {
        const texture = gl.createTexture();
        this.textures.push(texture);
        this.bandCount = 4;
        uploadImageTexture(gl, texture, image, tile.interpolate);
        return;
      }

      data = asArrayLike(data);

      const sourceTileSize = /** @type {DataTile} */ (tile).getSize();
      const pixelSize = [
        sourceTileSize[0] + 2 * this.gutter_,
        sourceTileSize[1] + 2 * this.gutter_,
      ];
      const isFloat = data instanceof Float32Array;
      const pixelCount = pixelSize[0] * pixelSize[1];
      const DataType = isFloat ? Float32Array : Uint8Array;
      const bytesPerElement = DataType.BYTES_PER_ELEMENT;
      const bytesPerRow = data.byteLength / pixelSize[1];

      this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);
      const textureCount = Math.ceil(this.bandCount / 4);

      if (textureCount === 1) {
        const texture = gl.createTexture();
        this.textures.push(texture);
        uploadDataTexture(
          helper,
          texture,
          data,
          pixelSize,
          this.bandCount,
          tile.interpolate
        );
        return;
      }

      const textureDataArrays = new Array(textureCount);
      for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {
        const texture = gl.createTexture();
        this.textures.push(texture);

        const bandCount =
          textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;
        textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);
      }

      let dataIndex = 0;
      let rowOffset = 0;
      const colCount = pixelSize[0] * this.bandCount;
      for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {
        for (let colIndex = 0; colIndex < colCount; ++colIndex) {
          const dataValue = data[rowOffset + colIndex];

          const pixelIndex = Math.floor(dataIndex / this.bandCount);
          const bandIndex = colIndex % this.bandCount;
          const textureIndex = Math.floor(bandIndex / 4);
          const textureData = textureDataArrays[textureIndex];
          const bandCount = textureData.length / pixelCount;
          const textureBandIndex = bandIndex % 4;
          textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;

          ++dataIndex;
        }
        rowOffset += bytesPerRow / bytesPerElement;
      }

      for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {
        const texture = this.textures[textureIndex];
        const textureData = textureDataArrays[textureIndex];
        const bandCount = textureData.length / pixelCount;
        uploadDataTexture(
          helper,
          texture,
          textureData,
          pixelSize,
          bandCount,
          tile.interpolate
        );
      }
    }

    handleTileChange_() {
      if (this.tile.getState() === TileState.LOADED) {
        this.loaded = true;
        this.uploadTile_();
        this.dispatchEvent(EventType.CHANGE);
      }
    }

    disposeInternal() {
      const gl = this.helper_.getGL();
      this.helper_.deleteBuffer(this.coords);
      for (let i = 0; i < this.textures.length; ++i) {
        gl.deleteTexture(this.textures[i]);
      }
      this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);
    }

    /**
     * @param {import("../DataTile.js").ImageLike} image The image.
     * @param {number} renderCol The column index (in rendered tile space).
     * @param {number} renderRow The row index (in rendered tile space).
     * @return {Uint8ClampedArray|null} The data.
     * @private
     */
    getImagePixelData_(image, renderCol, renderRow) {
      const gutter = this.gutter_;
      const renderWidth = this.renderSize_[0];
      const renderHeight = this.renderSize_[1];

      if (!pixelContext) {
        createPixelContext();
      }
      pixelContext.clearRect(0, 0, 1, 1);

      const sourceWidth = image.width;
      const sourceHeight = image.height;

      const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;
      const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;

      const sourceCol =
        gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));

      const sourceRow =
        gutter +
        Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));

      let data;
      try {
        pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);
        data = pixelContext.getImageData(0, 0, 1, 1).data;
      } catch (err) {
        pixelContext = null;
        return null;
      }
      return data;
    }

    /**
     * @param {import("../DataTile.js").ArrayLike} data The data.
     * @param {import("../size.js").Size} sourceSize The size.
     * @param {number} renderCol The column index (in rendered tile space).
     * @param {number} renderRow The row index (in rendered tile space).
     * @return {import("../DataTile.js").ArrayLike|null} The data.
     * @private
     */
    getArrayPixelData_(data, sourceSize, renderCol, renderRow) {
      const gutter = this.gutter_;
      const renderWidth = this.renderSize_[0];
      const renderHeight = this.renderSize_[1];

      const sourceWidthWithoutGutter = sourceSize[0];
      const sourceHeightWithoutGutter = sourceSize[1];
      const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;
      const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;

      const sourceCol =
        gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));

      const sourceRow =
        gutter +
        Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));

      if (data instanceof DataView) {
        const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);
        const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);
        const buffer = data.buffer.slice(offset, offset + bytesPerPixel);
        return new DataView(buffer);
      }

      const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);
      return data.slice(offset, offset + this.bandCount);
    }

    /**
     * Get data for a pixel.  If the tile is not loaded, null is returned.
     * @param {number} renderCol The column index (in rendered tile space).
     * @param {number} renderRow The row index (in rendered tile space).
     * @return {import("../DataTile.js").ArrayLike|null} The data.
     */
    getPixelData(renderCol, renderRow) {
      if (!this.loaded) {
        return null;
      }

      if (this.tile instanceof DataTile$2) {
        const data = this.tile.getData();
        const arrayData = asArrayLike(data);
        if (arrayData) {
          const sourceSize = this.tile.getSize();
          return this.getArrayPixelData_(
            arrayData,
            sourceSize,
            renderCol,
            renderRow
          );
        }
        return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);
      }

      return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);
    }
  }

  var TileTexture$1 = TileTexture;

  /**
   * @module ol/renderer/webgl/TileLayer
   */

  const Uniforms = {
    TILE_TEXTURE_ARRAY: 'u_tileTextures',
    TILE_TRANSFORM: 'u_tileTransform',
    TRANSITION_ALPHA: 'u_transitionAlpha',
    DEPTH: 'u_depth',
    TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',
    TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',
    TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel
    TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture
    TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture
    RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent
    RESOLUTION: 'u_resolution',
    ZOOM: 'u_zoom',
  };

  const Attributes = {
    TEXTURE_COORD: 'a_textureCoord',
  };

  /**
   * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}
   */
  const attributeDescriptions = [
    {
      name: Attributes.TEXTURE_COORD,
      size: 2,
      type: AttributeType.FLOAT,
    },
  ];

  /**
   * @type {Object<string, boolean>}
   */
  const empty = {};

  /**
   * Transform a zoom level into a depth value ranging from -1 to 1.
   * @param {number} z A zoom level.
   * @return {number} A depth value.
   */
  function depthForZ(z) {
    return 2 * (1 - 1 / (z + 1)) - 1;
  }

  /**
   * Add a tile texture to the lookup.
   * @param {Object<number, Array<import("../../webgl/TileTexture.js").default>>} tileTexturesByZ Lookup of
   * tile textures by zoom level.
   * @param {import("../../webgl/TileTexture.js").default} tileTexture A tile texture.
   * @param {number} z The zoom level.
   */
  function addTileTextureToLookup(tileTexturesByZ, tileTexture, z) {
    if (!(z in tileTexturesByZ)) {
      tileTexturesByZ[z] = [];
    }
    tileTexturesByZ[z].push(tileTexture);
  }

  /**
   * @param {import("../../Map.js").FrameState} frameState Frame state.
   * @param {import("../../extent.js").Extent} extent The frame extent.
   * @return {import("../../extent.js").Extent} Frame extent intersected with layer extents.
   */
  function getRenderExtent(frameState, extent) {
    const layerState = frameState.layerStatesArray[frameState.layerIndex];
    if (layerState.extent) {
      extent = getIntersection(
        extent,
        fromUserExtent(layerState.extent, frameState.viewState.projection)
      );
    }
    const source = /** @type {import("../../source/Tile.js").default} */ (
      layerState.layer.getRenderSource()
    );
    if (!source.getWrapX()) {
      const gridExtent = source
        .getTileGridForProjection(frameState.viewState.projection)
        .getExtent();
      if (gridExtent) {
        extent = getIntersection(extent, gridExtent);
      }
    }
    return extent;
  }

  function getCacheKey(source, tileCoord) {
    return `${source.getKey()},${getKey(tileCoord)}`;
  }

  /**
   * @typedef {Object} Options
   * @property {string} vertexShader Vertex shader source.
   * @property {string} fragmentShader Fragment shader source.
   * @property {Object<string, import("../../webgl/Helper").UniformValue>} [uniforms] Additional uniforms
   * made available to shaders.
   * @property {Array<import("../../webgl/PaletteTexture.js").default>} [paletteTextures] Palette textures.
   * @property {number} [cacheSize=512] The texture cache size.
   */

  /**
   * @typedef {import("../../layer/WebGLTile.js").default} LayerType
   */

  /**
   * @classdesc
   * WebGL renderer for tile layers.
   * @extends {WebGLLayerRenderer<LayerType>}
   * @api
   */
  class WebGLTileLayerRenderer extends WebGLLayerRenderer$1 {
    /**
     * @param {LayerType} tileLayer Tile layer.
     * @param {Options} options Options.
     */
    constructor(tileLayer, options) {
      super(tileLayer, {
        uniforms: options.uniforms,
      });

      /**
       * The last call to `renderFrame` was completed with all tiles loaded
       * @type {boolean}
       */
      this.renderComplete = false;

      /**
       * This transform converts texture coordinates to screen coordinates.
       * @type {import("../../transform.js").Transform}
       * @private
       */
      this.tileTransform_ = create$3();

      /**
       * @type {Array<number>}
       * @private
       */
      this.tempMat4_ = create$2();

      /**
       * @type {import("../../TileRange.js").default}
       * @private
       */
      this.tempTileRange_ = new TileRange$1(0, 0, 0, 0);

      /**
       * @type {import("../../tilecoord.js").TileCoord}
       * @private
       */
      this.tempTileCoord_ = createOrUpdate$1(0, 0, 0);

      /**
       * @type {import("../../size.js").Size}
       * @private
       */
      this.tempSize_ = [0, 0];

      /**
       * @type {WebGLProgram}
       * @private
       */
      this.program_;

      /**
       * @private
       */
      this.vertexShader_ = options.vertexShader;

      /**
       * @private
       */
      this.fragmentShader_ = options.fragmentShader;

      /**
       * Tiles are rendered as a quad with the following structure:
       *
       *  [P3]---------[P2]
       *   |`           |
       *   |  `     B   |
       *   |    `       |
       *   |      `     |
       *   |   A    `   |
       *   |          ` |
       *  [P0]---------[P1]
       *
       * Triangle A: P0, P1, P3
       * Triangle B: P1, P2, P3
       *
       * @private
       */
      this.indices_ = new WebGLArrayBuffer$1(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);
      this.indices_.fromArray([0, 1, 3, 1, 2, 3]);

      const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;

      /**
       * @type {import("../../structs/LRUCache.js").default<import("../../webgl/TileTexture.js").default>}
       * @private
       */
      this.tileTextureCache_ = new LRUCache$1(cacheSize);

      /**
       * @type {Array<import("../../webgl/PaletteTexture.js").default>}
       * @private
       */
      this.paletteTextures_ = options.paletteTextures || [];

      /**
       * @private
       * @type {import("../../Map.js").FrameState|null}
       */
      this.frameState_ = null;

      /**
       * @private
       * @type {import("../../proj/Projection.js").default}
       */
      this.projection_ = undefined;
    }

    /**
     * @param {Options} options Options.
     */
    reset(options) {
      super.reset({
        uniforms: options.uniforms,
      });
      this.vertexShader_ = options.vertexShader;
      this.fragmentShader_ = options.fragmentShader;
      this.paletteTextures_ = options.paletteTextures || [];

      if (this.helper) {
        this.program_ = this.helper.getProgram(
          this.fragmentShader_,
          this.vertexShader_
        );
      }
    }

    afterHelperCreated() {
      this.program_ = this.helper.getProgram(
        this.fragmentShader_,
        this.vertexShader_
      );

      this.helper.flushBufferData(this.indices_);
    }

    /**
     * @param {import("../../webgl/TileTexture").TileType} tile Tile.
     * @return {boolean} Tile is drawable.
     * @private
     */
    isDrawableTile_(tile) {
      const tileLayer = this.getLayer();
      const tileState = tile.getState();
      const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
      return (
        tileState == TileState.LOADED ||
        tileState == TileState.EMPTY ||
        (tileState == TileState.ERROR && !useInterimTilesOnError)
      );
    }

    /**
     * Determine whether renderFrame should be called.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {boolean} Layer is ready to be rendered.
     */
    prepareFrameInternal(frameState) {
      if (!this.projection_) {
        this.projection_ = frameState.viewState.projection;
      } else if (frameState.viewState.projection !== this.projection_) {
        this.clearCache();
        this.projection_ = frameState.viewState.projection;
      }

      const layer = this.getLayer();
      const source = layer.getRenderSource();
      if (!source) {
        return false;
      }

      if (isEmpty(getRenderExtent(frameState, frameState.extent))) {
        return false;
      }
      return source.getState() === 'ready';
    }

    /**
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @param {import("../../extent.js").Extent} extent The extent to be rendered.
     * @param {number} initialZ The zoom level.
     * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.
     * @param {number} preload Number of additional levels to load.
     */
    enqueueTiles(frameState, extent, initialZ, tileTexturesByZ, preload) {
      const viewState = frameState.viewState;
      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getRenderSource();
      const tileGrid = tileSource.getTileGridForProjection(viewState.projection);
      const gutter = tileSource.getGutterForProjection(viewState.projection);

      const tileSourceKey = getUid(tileSource);
      if (!(tileSourceKey in frameState.wantedTiles)) {
        frameState.wantedTiles[tileSourceKey] = {};
      }

      const wantedTiles = frameState.wantedTiles[tileSourceKey];
      const tileTextureCache = this.tileTextureCache_;

      const map = tileLayer.getMapInternal();
      const minZ = Math.max(
        initialZ - preload,
        tileGrid.getMinZoom(),
        tileGrid.getZForResolution(
          Math.min(
            tileLayer.getMaxResolution(),
            map
              ? map
                  .getView()
                  .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))
              : tileGrid.getResolution(0)
          ),
          tileSource.zDirection
        )
      );
      for (let z = initialZ; z >= minZ; --z) {
        const tileRange = tileGrid.getTileRangeForExtentAndZ(
          extent,
          z,
          this.tempTileRange_
        );

        const tileResolution = tileGrid.getResolution(z);

        for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
          for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
            const tileCoord = createOrUpdate$1(z, x, y, this.tempTileCoord_);
            const cacheKey = getCacheKey(tileSource, tileCoord);

            /** @type {TileTexture} */
            let tileTexture;

            /** @type {import("../../webgl/TileTexture").TileType} */
            let tile;

            if (tileTextureCache.containsKey(cacheKey)) {
              tileTexture = tileTextureCache.get(cacheKey);
              tile = tileTexture.tile;
            }
            if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {
              tile = tileSource.getTile(
                z,
                x,
                y,
                frameState.pixelRatio,
                viewState.projection
              );
              if (!tileTexture) {
                tileTexture = new TileTexture$1({
                  tile: tile,
                  grid: tileGrid,
                  helper: this.helper,
                  gutter: gutter,
                });
                tileTextureCache.set(cacheKey, tileTexture);
              } else {
                if (this.isDrawableTile_(tile)) {
                  tileTexture.setTile(tile);
                } else {
                  const interimTile =
                    /** @type {import("../../webgl/TileTexture").TileType} */ (
                      tile.getInterimTile()
                    );
                  tileTexture.setTile(interimTile);
                }
              }
            }

            addTileTextureToLookup(tileTexturesByZ, tileTexture, z);

            const tileQueueKey = tile.getKey();
            wantedTiles[tileQueueKey] = true;

            if (tile.getState() === TileState.IDLE) {
              if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {
                frameState.tileQueue.enqueue([
                  tile,
                  tileSourceKey,
                  tileGrid.getTileCoordCenter(tileCoord),
                  tileResolution,
                ]);
              }
            }
          }
        }
      }
    }

    /**
     * Render the layer.
     * @param {import("../../Map.js").FrameState} frameState Frame state.
     * @return {HTMLElement} The rendered element.
     */
    renderFrame(frameState) {
      this.frameState_ = frameState;
      this.renderComplete = true;
      const gl = this.helper.getGL();
      this.preRender(gl, frameState);

      const viewState = frameState.viewState;
      const tileLayer = this.getLayer();
      const tileSource = tileLayer.getRenderSource();
      const tileGrid = tileSource.getTileGridForProjection(viewState.projection);
      const gutter = tileSource.getGutterForProjection(viewState.projection);
      const extent = getRenderExtent(frameState, frameState.extent);
      const z = tileGrid.getZForResolution(
        viewState.resolution,
        tileSource.zDirection
      );

      /**
       * @type {Object<number, Array<import("../../webgl/TileTexture.js").default>>}
       */
      const tileTexturesByZ = {};

      const preload = tileLayer.getPreload();
      if (frameState.nextExtent) {
        const targetZ = tileGrid.getZForResolution(
          viewState.nextResolution,
          tileSource.zDirection
        );
        const nextExtent = getRenderExtent(frameState, frameState.nextExtent);
        this.enqueueTiles(
          frameState,
          nextExtent,
          targetZ,
          tileTexturesByZ,
          preload
        );
      }

      this.enqueueTiles(frameState, extent, z, tileTexturesByZ, 0);
      if (preload > 0) {
        setTimeout(() => {
          this.enqueueTiles(
            frameState,
            extent,
            z - 1,
            tileTexturesByZ,
            preload - 1
          );
        }, 0);
      }

      /**
       * A lookup of alpha values for tiles at the target rendering resolution
       * for tiles that are in transition.  If a tile coord key is absent from
       * this lookup, the tile should be rendered at alpha 1.
       * @type {Object<string, number>}
       */
      const alphaLookup = {};

      const uid = getUid(this);
      const time = frameState.time;
      let blend = false;

      // look for cached tiles to use if a target tile is not ready
      const tileTextures = tileTexturesByZ[z];
      for (let i = 0, ii = tileTextures.length; i < ii; ++i) {
        const tileTexture = tileTextures[i];
        const tile = tileTexture.tile;
        if (
          (tile instanceof ReprojTile$1 || tile instanceof ReprojDataTile$1) &&
          tile.getState() === TileState.EMPTY
        ) {
          continue;
        }
        const tileCoord = tile.tileCoord;

        if (tileTexture.loaded) {
          const alpha = tile.getAlpha(uid, time);
          if (alpha === 1) {
            // no need to look for alt tiles
            tile.endTransition(uid);
            continue;
          }
          blend = true;
          const tileCoordKey = getKey(tileCoord);
          alphaLookup[tileCoordKey] = alpha;
        }
        this.renderComplete = false;

        // first look for child tiles (at z + 1)
        const coveredByChildren = this.findAltTiles_(
          tileGrid,
          tileCoord,
          z + 1,
          tileTexturesByZ
        );

        if (coveredByChildren) {
          continue;
        }

        // next look for parent tiles
        const minZoom = tileGrid.getMinZoom();
        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {
          const coveredByParent = this.findAltTiles_(
            tileGrid,
            tileCoord,
            parentZ,
            tileTexturesByZ
          );

          if (coveredByParent) {
            break;
          }
        }
      }

      this.helper.useProgram(this.program_, frameState);
      this.helper.prepareDraw(frameState, !blend);

      const zs = Object.keys(tileTexturesByZ).map(Number).sort(ascending);

      const centerX = viewState.center[0];
      const centerY = viewState.center[1];

      for (let j = 0, jj = zs.length; j < jj; ++j) {
        const tileZ = zs[j];
        const tileResolution = tileGrid.getResolution(tileZ);
        const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);
        const tileOrigin = tileGrid.getOrigin(tileZ);

        const tileWidthWithGutter = tileSize[0] + 2 * gutter;
        const tileHeightWithGutter = tileSize[1] + 2 * gutter;
        const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;

        const centerI =
          (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);
        const centerJ =
          (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);

        const tileScale = viewState.resolution / tileResolution;

        const depth = depthForZ(tileZ);
        const tileTextures = tileTexturesByZ[tileZ];
        for (let i = 0, ii = tileTextures.length; i < ii; ++i) {
          const tileTexture = tileTextures[i];
          if (!tileTexture.loaded) {
            continue;
          }
          const tile = tileTexture.tile;
          const tileCoord = tile.tileCoord;
          const tileCoordKey = getKey(tileCoord);

          const tileCenterI = tileCoord[1];
          const tileCenterJ = tileCoord[2];

          reset(this.tileTransform_);
          scale$3(
            this.tileTransform_,
            2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),
            -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter)
          );
          rotate$2(this.tileTransform_, viewState.rotation);
          scale$3(this.tileTransform_, 1, 1 / aspectRatio);
          translate$1(
            this.tileTransform_,
            (tileSize[0] * (tileCenterI - centerI) - gutter) /
              tileWidthWithGutter,
            (tileSize[1] * (tileCenterJ - centerJ) - gutter) /
              tileHeightWithGutter
          );

          this.helper.setUniformMatrixValue(
            Uniforms.TILE_TRANSFORM,
            fromTransform(this.tempMat4_, this.tileTransform_)
          );

          this.helper.bindBuffer(tileTexture.coords);
          this.helper.bindBuffer(this.indices_);
          this.helper.enableAttributes(attributeDescriptions);

          let textureSlot = 0;
          while (textureSlot < tileTexture.textures.length) {
            const textureProperty = 'TEXTURE' + textureSlot;
            const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;
            gl.activeTexture(gl[textureProperty]);
            gl.bindTexture(gl.TEXTURE_2D, tileTexture.textures[textureSlot]);
            gl.uniform1i(
              this.helper.getUniformLocation(uniformName),
              textureSlot
            );
            ++textureSlot;
          }

          for (
            let paletteIndex = 0;
            paletteIndex < this.paletteTextures_.length;
            ++paletteIndex
          ) {
            const paletteTexture = this.paletteTextures_[paletteIndex];
            gl.activeTexture(gl['TEXTURE' + textureSlot]);
            const texture = paletteTexture.getTexture(gl);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.uniform1i(
              this.helper.getUniformLocation(paletteTexture.name),
              textureSlot
            );
            ++textureSlot;
          }

          const alpha =
            tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;

          if (alpha < 1) {
            frameState.animate = true;
          }

          this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);
          this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);
          this.helper.setUniformFloatValue(
            Uniforms.TEXTURE_PIXEL_WIDTH,
            tileWidthWithGutter
          );
          this.helper.setUniformFloatValue(
            Uniforms.TEXTURE_PIXEL_HEIGHT,
            tileHeightWithGutter
          );
          this.helper.setUniformFloatValue(
            Uniforms.TEXTURE_RESOLUTION,
            tileResolution
          );
          this.helper.setUniformFloatValue(
            Uniforms.TEXTURE_ORIGIN_X,
            tileOrigin[0] +
              tileCenterI * tileSize[0] * tileResolution -
              gutter * tileResolution
          );
          this.helper.setUniformFloatValue(
            Uniforms.TEXTURE_ORIGIN_Y,
            tileOrigin[1] -
              tileCenterJ * tileSize[1] * tileResolution +
              gutter * tileResolution
          );
          let gutterExtent = extent;
          if (gutter > 0) {
            gutterExtent = tileGrid.getTileCoordExtent(tileCoord);
            getIntersection(gutterExtent, extent, gutterExtent);
          }
          this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);
          this.helper.setUniformFloatValue(
            Uniforms.RESOLUTION,
            viewState.resolution
          );
          this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);

          this.helper.drawElements(0, this.indices_.getSize());
        }
      }

      this.helper.finalizeDraw(
        frameState,
        this.dispatchPreComposeEvent,
        this.dispatchPostComposeEvent
      );

      const canvas = this.helper.getCanvas();

      const tileTextureCache = this.tileTextureCache_;
      while (tileTextureCache.canExpireCache()) {
        const tileTexture = tileTextureCache.pop();
        tileTexture.dispose();
      }

      // TODO: let the renderers manage their own cache instead of managing the source cache
      /**
       * Here we unconditionally expire the source cache since the renderer maintains
       * its own cache.
       * @param {import("../../Map.js").default} map Map.
       * @param {import("../../Map.js").FrameState} frameState Frame state.
       */
      const postRenderFunction = function (map, frameState) {
        tileSource.updateCacheSize(0.1, frameState.viewState.projection);
        tileSource.expireCache(frameState.viewState.projection, empty);
      };

      frameState.postRenderFunctions.push(postRenderFunction);

      this.postRender(gl, frameState);
      return canvas;
    }

    /**
     * @param {import("../../pixel.js").Pixel} pixel Pixel.
     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.
     */
    getData(pixel) {
      const gl = this.helper.getGL();
      if (!gl) {
        return null;
      }

      const frameState = this.frameState_;
      if (!frameState) {
        return null;
      }

      const layer = this.getLayer();
      const coordinate = apply(
        frameState.pixelToCoordinateTransform,
        pixel.slice()
      );

      const viewState = frameState.viewState;
      const layerExtent = layer.getExtent();
      if (layerExtent) {
        if (
          !containsCoordinate(
            fromUserExtent(layerExtent, viewState.projection),
            coordinate
          )
        ) {
          return null;
        }
      }

      // determine last source suitable for rendering at coordinate
      const sources = layer.getSources(
        boundingExtent([coordinate]),
        viewState.resolution
      );
      let i, source, tileGrid;
      for (i = sources.length - 1; i >= 0; --i) {
        source = sources[i];
        if (source.getState() === 'ready') {
          tileGrid = source.getTileGridForProjection(viewState.projection);
          if (source.getWrapX()) {
            break;
          }
          const gridExtent = tileGrid.getExtent();
          if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {
            break;
          }
        }
      }
      if (i < 0) {
        return null;
      }

      const tileTextureCache = this.tileTextureCache_;
      for (
        let z = tileGrid.getZForResolution(viewState.resolution);
        z >= tileGrid.getMinZoom();
        --z
      ) {
        const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
        const cacheKey = getCacheKey(source, tileCoord);
        if (!tileTextureCache.containsKey(cacheKey)) {
          continue;
        }
        const tileTexture = tileTextureCache.get(cacheKey);
        const tile = tileTexture.tile;
        if (
          (tile instanceof ReprojTile$1 || tile instanceof ReprojDataTile$1) &&
          tile.getState() === TileState.EMPTY
        ) {
          return null;
        }
        if (!tileTexture.loaded) {
          continue;
        }
        const tileOrigin = tileGrid.getOrigin(z);
        const tileSize = toSize(tileGrid.getTileSize(z));
        const tileResolution = tileGrid.getResolution(z);

        const col =
          (coordinate[0] - tileOrigin[0]) / tileResolution -
          tileCoord[1] * tileSize[0];

        const row =
          (tileOrigin[1] - coordinate[1]) / tileResolution -
          tileCoord[2] * tileSize[1];

        return tileTexture.getPixelData(col, row);
      }
      return null;
    }

    /**
     * Look for tiles covering the provided tile coordinate at an alternate
     * zoom level.  Loaded tiles will be added to the provided tile texture lookup.
     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid The tile grid.
     * @param {import("../../tilecoord.js").TileCoord} tileCoord The target tile coordinate.
     * @param {number} altZ The alternate zoom level.
     * @param {Object<number, Array<import("../../webgl/TileTexture.js").default>>} tileTexturesByZ Lookup of
     * tile textures by zoom level.
     * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.
     * @private
     */
    findAltTiles_(tileGrid, tileCoord, altZ, tileTexturesByZ) {
      const tileRange = tileGrid.getTileRangeForTileCoordAndZ(
        tileCoord,
        altZ,
        this.tempTileRange_
      );

      if (!tileRange) {
        return false;
      }

      let covered = true;
      const tileTextureCache = this.tileTextureCache_;
      const source = this.getLayer().getRenderSource();
      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
          const cacheKey = getCacheKey(source, [altZ, x, y]);
          let loaded = false;
          if (tileTextureCache.containsKey(cacheKey)) {
            const tileTexture = tileTextureCache.get(cacheKey);
            if (tileTexture.loaded) {
              addTileTextureToLookup(tileTexturesByZ, tileTexture, altZ);
              loaded = true;
            }
          }
          if (!loaded) {
            covered = false;
          }
        }
      }
      return covered;
    }

    clearCache() {
      const tileTextureCache = this.tileTextureCache_;
      tileTextureCache.forEach((tileTexture) => tileTexture.dispose());
      tileTextureCache.clear();
    }

    removeHelper() {
      if (this.helper) {
        this.clearCache();
      }

      super.removeHelper();
    }

    /**
     * Clean up.
     */
    disposeInternal() {
      const helper = this.helper;
      if (helper) {
        const gl = helper.getGL();
        gl.deleteProgram(this.program_);
        delete this.program_;

        helper.deleteBuffer(this.indices_);
      }

      super.disposeInternal();

      delete this.indices_;
      delete this.tileTextureCache_;
      delete this.frameState_;
    }
  }

  var WebGLTileLayerRenderer$1 = WebGLTileLayerRenderer;

  /**
   * Operators and utilities used for style expressions
   * @module ol/style/expressions
   */

  /**
   * Base type used for literal style parameters; can be a number literal or the output of an operator,
   * which in turns takes {@link import("./expressions.js").ExpressionValue} arguments.
   *
   * The following operators can be used:
   *
   * * Reading operators:
   *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band
   *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values
   *     are in the 0..1 range. {@link import("../source/TileImage.js").default} sources have 4 bands: red,
   *     green, blue and alpha. {@link import("../source/DataTile.js").default} sources can have any number
   *     of bands, depending on the underlying data source and
   *     {@link import("../source/GeoTIFF.js").Options configuration}. `xOffset` and `yOffset` are optional
   *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels.
   *   * `['get', 'attributeName']` fetches a feature attribute (it will be prefixed by `a_` in the shader)
   *     Note: those will be taken from the attributes provided to the renderer
   *   * `['resolution']` returns the current resolution
   *   * `['time']` returns the time in seconds since the creation of the layer
   *   * `['var', 'varName']` fetches a value from the style variables, or 0 if undefined
   *   * `['zoom']` returns the current zoom level
   *
   * * Math operators:
   *   * `['*', value1, value2]` multiplies `value1` by `value2`
   *   * `['/', value1, value2]` divides `value1` by `value2`
   *   * `['+', value1, value2]` adds `value1` and `value2`
   *   * `['-', value1, value2]` subtracts `value2` from `value1`
   *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`
   *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)
   *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power
   *   * `['abs', value1]` returns the absolute value of `value1`
   *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`
   *   * `['round', value1]` returns the nearest integer to `value1`
   *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`
   *   * `['sin', value1]` returns the sine of `value1`
   *   * `['cos', value1]` returns the cosine of `value1`
   *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`
   *
   * * Transform operators:
   *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding
   *     condition evaluates to `true`. If no match is found, returns the `fallback` value.
   *     All conditions should be `boolean`, output and fallback can be any kind.
   *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all
   *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,
   *     returns the `fallback` value.
   *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and
   *     `fallback` values must be of the same type, and can be of any kind.
   *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between
   *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is
   *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value
   *     of 1 is equivalent to `['linear']`.
   *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.
   *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised
   *     between `output1` and `outputN`.
   *
   * * Logical operators:
   *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.
   *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.
   *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.
   *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.
   *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.
   *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.
   *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.
   *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.
   *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.
   *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`
   *     (inclusively), or `false` otherwise.
   *
   * * Conversion operators:
   *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of
   *     values can currently only be 2, 3 or 4.
   *   * `['color', red, green, blue, alpha]` creates a `color` value from `number` values; the `alpha` parameter is
   *     optional; if not specified, it will be set to 1.
   *     Note: `red`, `green` and `blue` components must be values between 0 and 255; `alpha` between 0 and 1.
   *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`
   *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors
   *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),
   *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b
   *     in the 0-255 range and a in the 0-1 range).
   *
   * Values can either be literals or another operator, as they will be evaluated recursively.
   * Literal values can be of the following types:
   * * `boolean`
   * * `number`
   * * `string`
   * * {@link module:ol/color~Color}
   *
   * @typedef {Array<*>|import("../color.js").Color|string|number|boolean} ExpressionValue
   * @api
   */

  /**
   * Possible inferred types from a given value or expression.
   * Note: these are binary flags.
   * @enum {number}
   */
  const ValueTypes = {
    NUMBER: 0b00001,
    STRING: 0b00010,
    COLOR: 0b00100,
    BOOLEAN: 0b01000,
    NUMBER_ARRAY: 0b10000,
    ANY: 0b11111,
    NONE: 0,
  };

  /**
   * An operator declaration must contain two methods: `getReturnType` which returns a type based on
   * the operator arguments, and `toGlsl` which returns a GLSL-compatible string.
   * Note: both methods can process arguments recursively.
   * @typedef {Object} Operator
   * @property {function(Array<ExpressionValue>): ValueTypes|number} getReturnType Returns one or several types
   * @property {function(ParsingContext, Array<ExpressionValue>, ValueTypes=): string} toGlsl Returns a GLSL-compatible string
   * Note: takes in an optional type hint as 3rd parameter
   */

  /**
   * Operator declarations
   * @type {Object<string, Operator>}
   */
  const Operators = {};

  /**
   * Returns the possible types for a given value (each type being a binary flag)
   * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`
   * @param {ExpressionValue} value Value
   * @return {ValueTypes|number} Type or types inferred from the value
   */
  function getValueType(value) {
    if (typeof value === 'number') {
      return ValueTypes.NUMBER;
    }
    if (typeof value === 'boolean') {
      return ValueTypes.BOOLEAN;
    }
    if (typeof value === 'string') {
      if (isStringColor(value)) {
        return ValueTypes.COLOR | ValueTypes.STRING;
      }
      return ValueTypes.STRING;
    }
    if (!Array.isArray(value)) {
      throw new Error(`Unhandled value type: ${JSON.stringify(value)}`);
    }
    const valueArr = /** @type {Array<*>} */ (value);
    const onlyNumbers = valueArr.every(function (v) {
      return typeof v === 'number';
    });
    if (onlyNumbers) {
      if (valueArr.length === 3 || valueArr.length === 4) {
        return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;
      }
      return ValueTypes.NUMBER_ARRAY;
    }
    if (typeof valueArr[0] !== 'string') {
      throw new Error(
        `Expected an expression operator but received: ${JSON.stringify(
        valueArr
      )}`
      );
    }
    const operator = Operators[valueArr[0]];
    if (operator === undefined) {
      throw new Error(
        `Unrecognized expression operator: ${JSON.stringify(valueArr)}`
      );
    }
    return operator.getReturnType(valueArr.slice(1));
  }

  /**
   * Checks if only one value type is enabled in the input number.
   * @param {ValueTypes|number} valueType Number containing value type binary flags
   * @return {boolean} True if only one type flag is enabled, false if zero or multiple
   */
  function isTypeUnique(valueType) {
    return Math.log2(valueType) % 1 === 0;
  }

  /**
   * Context available during the parsing of an expression.
   * @typedef {Object} ParsingContext
   * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader
   * @property {Array<string>} variables List of variables used in the expression; contains **unprefixed names**
   * @property {Array<string>} attributes List of attributes used in the expression; contains **unprefixed names**
   * @property {Object<string, number>} stringLiteralsMap This object maps all encountered string values to a number
   * @property {Object<string, string>} functions Lookup of functions used by the style.
   * @property {number} [bandCount] Number of bands per pixel.
   * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.
   */

  /**
   * Will return the number as a float with a dot separator, which is required by GLSL.
   * @param {number} v Numerical value.
   * @return {string} The value as string.
   */
  function numberToGlsl(v) {
    const s = v.toString();
    return s.includes('.') ? s : s + '.0';
  }

  /**
   * Will return the number array as a float with a dot separator, concatenated with ', '.
   * @param {Array<number>} array Numerical values array.
   * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.
   */
  function arrayToGlsl(array) {
    if (array.length < 2 || array.length > 4) {
      throw new Error(
        '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.'
      );
    }
    return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;
  }

  /**
   * Will normalize and converts to string a `vec4` color array compatible with GLSL.
   * @param {string|import("../color.js").Color} color Color either in string format or [r, g, b, a] array format,
   * with RGB components in the 0..255 range and the alpha component in the 0..1 range.
   * Note that the final array will always have 4 components.
   * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.
   */
  function colorToGlsl(color) {
    const array = asArray(color).slice();
    if (array.length < 4) {
      array.push(1);
    }
    return arrayToGlsl(
      array.map(function (c, i) {
        return i < 3 ? c / 255 : c;
      })
    );
  }

  /**
   * Returns a stable equivalent number for the string literal.
   * @param {ParsingContext} context Parsing context
   * @param {string} string String literal value
   * @return {number} Number equivalent
   */
  function getStringNumberEquivalent(context, string) {
    if (context.stringLiteralsMap[string] === undefined) {
      context.stringLiteralsMap[string] = Object.keys(
        context.stringLiteralsMap
      ).length;
    }
    return context.stringLiteralsMap[string];
  }

  /**
   * Returns a stable equivalent number for the string literal, for use in shaders. This number is then
   * converted to be a GLSL-compatible string.
   * @param {ParsingContext} context Parsing context
   * @param {string} string String literal value
   * @return {string} GLSL-compatible string containing a number
   */
  function stringToGlsl(context, string) {
    return numberToGlsl(getStringNumberEquivalent(context, string));
  }

  /**
   * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that
   * will be read and modified during the parsing operation.
   * @param {ParsingContext} context Parsing context
   * @param {ExpressionValue} value Value
   * @param {ValueTypes|number} [typeHint] Hint for the expected final type (can be several types combined)
   * @return {string} GLSL-compatible output
   */
  function expressionToGlsl(context, value, typeHint) {
    // operator
    if (Array.isArray(value) && typeof value[0] === 'string') {
      const operator = Operators[value[0]];
      if (operator === undefined) {
        throw new Error(
          `Unrecognized expression operator: ${JSON.stringify(value)}`
        );
      }
      return operator.toGlsl(context, value.slice(1), typeHint);
    }

    const valueType = getValueType(value);
    if ((valueType & ValueTypes.NUMBER) > 0) {
      return numberToGlsl(/** @type {number} */ (value));
    }

    if ((valueType & ValueTypes.BOOLEAN) > 0) {
      return value.toString();
    }

    if (
      (valueType & ValueTypes.STRING) > 0 &&
      (typeHint === undefined || typeHint == ValueTypes.STRING)
    ) {
      return stringToGlsl(context, value.toString());
    }

    if (
      (valueType & ValueTypes.COLOR) > 0 &&
      (typeHint === undefined || typeHint == ValueTypes.COLOR)
    ) {
      return colorToGlsl(/** @type {Array<number> | string} */ (value));
    }

    if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {
      return arrayToGlsl(/** @type {Array<number>} */ (value));
    }

    throw new Error(`Unexpected expression ${value} (expected type ${typeHint})`);
  }

  function assertNumber(value) {
    if (!(getValueType(value) & ValueTypes.NUMBER)) {
      throw new Error(
        `A numeric value was expected, got ${JSON.stringify(value)} instead`
      );
    }
  }
  function assertNumbers(values) {
    for (let i = 0; i < values.length; i++) {
      assertNumber(values[i]);
    }
  }
  function assertString(value) {
    if (!(getValueType(value) & ValueTypes.STRING)) {
      throw new Error(
        `A string value was expected, got ${JSON.stringify(value)} instead`
      );
    }
  }
  function assertBoolean(value) {
    if (!(getValueType(value) & ValueTypes.BOOLEAN)) {
      throw new Error(
        `A boolean value was expected, got ${JSON.stringify(value)} instead`
      );
    }
  }
  function assertArgsCount(args, count) {
    if (args.length !== count) {
      throw new Error(
        `Exactly ${count} arguments were expected, got ${args.length} instead`
      );
    }
  }
  function assertArgsMinCount(args, count) {
    if (args.length < count) {
      throw new Error(
        `At least ${count} arguments were expected, got ${args.length} instead`
      );
    }
  }
  function assertArgsMaxCount(args, count) {
    if (args.length > count) {
      throw new Error(
        `At most ${count} arguments were expected, got ${args.length} instead`
      );
    }
  }
  function assertArgsEven(args) {
    if (args.length % 2 !== 0) {
      throw new Error(
        `An even amount of arguments was expected, got ${args} instead`
      );
    }
  }
  function assertArgsOdd(args) {
    if (args.length % 2 === 0) {
      throw new Error(
        `An odd amount of arguments was expected, got ${args} instead`
      );
    }
  }
  function assertUniqueInferredType(args, types) {
    if (!isTypeUnique(types)) {
      throw new Error(
        `Could not infer only one type from the following expression: ${JSON.stringify(
        args
      )}`
      );
    }
  }

  Operators['get'] = {
    getReturnType: function (args) {
      return ValueTypes.ANY;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertString(args[0]);
      const value = args[0].toString();
      if (!context.attributes.includes(value)) {
        context.attributes.push(value);
      }
      const prefix = context.inFragmentShader ? 'v_' : 'a_';
      return prefix + value;
    },
  };

  /**
   * Get the uniform name given a variable name.
   * @param {string} variableName The variable name.
   * @return {string} The uniform name.
   */
  function uniformNameForVariable(variableName) {
    return 'u_var_' + variableName;
  }

  Operators['var'] = {
    getReturnType: function (args) {
      return ValueTypes.ANY;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertString(args[0]);
      const value = args[0].toString();
      if (!context.variables.includes(value)) {
        context.variables.push(value);
      }
      return uniformNameForVariable(value);
    },
  };

  const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';

  // ['palette', index, colors]
  Operators['palette'] = {
    getReturnType: function (args) {
      return ValueTypes.COLOR;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumber(args[0]);
      const index = expressionToGlsl(context, args[0]);
      const colors = args[1];
      if (!Array.isArray(colors)) {
        throw new Error('The second argument of palette must be an array');
      }
      const numColors = colors.length;
      const palette = new Uint8Array(numColors * 4);
      for (let i = 0; i < numColors; i++) {
        const candidate = colors[i];
        /**
         * @type {import('../color.js').Color}
         */
        let color;
        if (typeof candidate === 'string') {
          color = fromString(candidate);
        } else {
          if (!Array.isArray(candidate)) {
            throw new Error(
              'The second argument of palette must be an array of strings or colors'
            );
          }
          const length = candidate.length;
          if (length === 4) {
            color = candidate;
          } else {
            if (length !== 3) {
              throw new Error(
                `Expected palette color to have 3 or 4 values, got ${length}`
              );
            }
            color = [candidate[0], candidate[1], candidate[2], 1];
          }
        }
        const offset = i * 4;
        palette[offset] = color[0];
        palette[offset + 1] = color[1];
        palette[offset + 2] = color[2];
        palette[offset + 3] = color[3] * 255;
      }
      if (!context.paletteTextures) {
        context.paletteTextures = [];
      }
      const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;
      const paletteTexture = new PaletteTexture$1(paletteName, palette);
      context.paletteTextures.push(paletteTexture);
      return `texture2D(${paletteName}, vec2((${index} + 0.5) / ${numColors}.0, 0.5))`;
    },
  };

  const GET_BAND_VALUE_FUNC = 'getBandValue';

  Operators['band'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 1);
      assertArgsMaxCount(args, 3);
      const band = args[0];

      if (!(GET_BAND_VALUE_FUNC in context.functions)) {
        let ifBlocks = '';
        const bandCount = context.bandCount || 1;
        for (let i = 0; i < bandCount; i++) {
          const colorIndex = Math.floor(i / 4);
          let bandIndex = i % 4;
          if (i === bandCount - 1 && bandIndex === 1) {
            // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha
            bandIndex = 3;
          }
          const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;
          ifBlocks += `
          if (band == ${i + 1}.0) {
            return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];
          }
        `;
        }

        context.functions[GET_BAND_VALUE_FUNC] = `
        float getBandValue(float band, float xOffset, float yOffset) {
          float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};
          float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};
          ${ifBlocks}
        }
      `;
      }

      const bandExpression = expressionToGlsl(context, band);
      const xOffsetExpression = expressionToGlsl(context, args[1] || 0);
      const yOffsetExpression = expressionToGlsl(context, args[2] || 0);
      return `${GET_BAND_VALUE_FUNC}(${bandExpression}, ${xOffsetExpression}, ${yOffsetExpression})`;
    },
  };

  Operators['time'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 0);
      return 'u_time';
    },
  };

  Operators['zoom'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 0);
      return 'u_zoom';
    },
  };

  Operators['resolution'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 0);
      return 'u_resolution';
    },
  };

  Operators['*'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 2);
      assertNumbers(args);
      return `(${args.map((arg) => expressionToGlsl(context, arg)).join(' * ')})`;
    },
  };

  Operators['/'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `(${expressionToGlsl(context, args[0])} / ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['+'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 2);
      assertNumbers(args);

      return `(${args.map((arg) => expressionToGlsl(context, arg)).join(' + ')})`;
    },
  };

  Operators['-'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `(${expressionToGlsl(context, args[0])} - ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['clamp'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 3);
      assertNumbers(args);
      const min = expressionToGlsl(context, args[1]);
      const max = expressionToGlsl(context, args[2]);
      return `clamp(${expressionToGlsl(context, args[0])}, ${min}, ${max})`;
    },
  };

  Operators['%'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `mod(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['^'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `pow(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['abs'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertNumbers(args);
      return `abs(${expressionToGlsl(context, args[0])})`;
    },
  };

  Operators['floor'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertNumbers(args);
      return `floor(${expressionToGlsl(context, args[0])})`;
    },
  };

  Operators['round'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertNumbers(args);
      return `floor(${expressionToGlsl(context, args[0])} + 0.5)`;
    },
  };

  Operators['ceil'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertNumbers(args);
      return `ceil(${expressionToGlsl(context, args[0])})`;
    },
  };

  Operators['sin'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertNumbers(args);
      return `sin(${expressionToGlsl(context, args[0])})`;
    },
  };

  Operators['cos'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertNumbers(args);
      return `cos(${expressionToGlsl(context, args[0])})`;
    },
  };

  Operators['atan'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 1);
      assertArgsMaxCount(args, 2);
      assertNumbers(args);
      return args.length === 2
        ? `atan(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(
          context,
          args[1]
        )})`
        : `atan(${expressionToGlsl(context, args[0])})`;
    },
  };

  Operators['>'] = {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `(${expressionToGlsl(context, args[0])} > ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['>='] = {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `(${expressionToGlsl(context, args[0])} >= ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['<'] = {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `(${expressionToGlsl(context, args[0])} < ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  Operators['<='] = {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 2);
      assertNumbers(args);
      return `(${expressionToGlsl(context, args[0])} <= ${expressionToGlsl(
      context,
      args[1]
    )})`;
    },
  };

  function getEqualOperator(operator) {
    return {
      getReturnType: function (args) {
        return ValueTypes.BOOLEAN;
      },
      toGlsl: function (context, args) {
        assertArgsCount(args, 2);

        // find common type
        let type = ValueTypes.ANY;
        for (let i = 0; i < args.length; i++) {
          type &= getValueType(args[i]);
        }
        if (type === ValueTypes.NONE) {
          throw new Error(
            `All arguments should be of compatible type, got ${JSON.stringify(
            args
          )} instead`
          );
        }

        // Since it's not possible to have color types here, we can leave it out
        // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')
        type &= ~ValueTypes.COLOR;

        return `(${expressionToGlsl(
        context,
        args[0],
        type
      )} ${operator} ${expressionToGlsl(context, args[1], type)})`;
      },
    };
  }

  Operators['=='] = getEqualOperator('==');

  Operators['!='] = getEqualOperator('!=');

  Operators['!'] = {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 1);
      assertBoolean(args[0]);
      return `(!${expressionToGlsl(context, args[0])})`;
    },
  };

  function getDecisionOperator(operator) {
    return {
      getReturnType: function (args) {
        return ValueTypes.BOOLEAN;
      },
      toGlsl: function (context, args) {
        assertArgsMinCount(args, 2);
        for (let i = 0; i < args.length; i++) {
          assertBoolean(args[i]);
        }
        let result = '';
        result = args
          .map((arg) => expressionToGlsl(context, arg))
          .join(` ${operator} `);
        result = `(${result})`;
        return result;
      },
    };
  }

  Operators['all'] = getDecisionOperator('&&');

  Operators['any'] = getDecisionOperator('||');

  Operators['between'] = {
    getReturnType: function (args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function (context, args) {
      assertArgsCount(args, 3);
      assertNumbers(args);
      const min = expressionToGlsl(context, args[1]);
      const max = expressionToGlsl(context, args[2]);
      const value = expressionToGlsl(context, args[0]);
      return `(${value} >= ${min} && ${value} <= ${max})`;
    },
  };

  Operators['array'] = {
    getReturnType: function (args) {
      return ValueTypes.NUMBER_ARRAY;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 2);
      assertArgsMaxCount(args, 4);
      assertNumbers(args);
      const parsedArgs = args.map(function (val) {
        return expressionToGlsl(context, val, ValueTypes.NUMBER);
      });
      return `vec${args.length}(${parsedArgs.join(', ')})`;
    },
  };

  Operators['color'] = {
    getReturnType: function (args) {
      return ValueTypes.COLOR;
    },
    toGlsl: function (context, args) {
      assertArgsMinCount(args, 3);
      assertArgsMaxCount(args, 4);
      assertNumbers(args);
      const array = /** @type {Array<number>} */ (args);
      if (args.length === 3) {
        array.push(1);
      }
      const parsedArgs = args.map(function (val, i) {
        return (
          expressionToGlsl(context, val, ValueTypes.NUMBER) +
          (i < 3 ? ' / 255.0' : '')
        );
      });
      return `vec${args.length}(${parsedArgs.join(', ')})`;
    },
  };

  Operators['interpolate'] = {
    getReturnType: function (args) {
      let type = ValueTypes.COLOR | ValueTypes.NUMBER;
      for (let i = 3; i < args.length; i += 2) {
        type = type & getValueType(args[i]);
      }
      return type;
    },
    toGlsl: function (context, args, typeHint) {
      assertArgsEven(args);
      assertArgsMinCount(args, 6);

      // validate interpolation type
      const type = args[0];
      let interpolation;
      switch (type[0]) {
        case 'linear':
          interpolation = 1;
          break;
        case 'exponential':
          interpolation = type[1];
          break;
        default:
          interpolation = null;
      }
      if (!interpolation) {
        throw new Error(
          `Invalid interpolation type for "interpolate" operator, received: ${JSON.stringify(
          type
        )}`
        );
      }

      // compute input/output types
      typeHint = typeHint !== undefined ? typeHint : ValueTypes.ANY;
      const outputType = Operators['interpolate'].getReturnType(args) & typeHint;
      assertUniqueInferredType(args, outputType);

      const input = expressionToGlsl(context, args[1]);
      const exponent = numberToGlsl(interpolation);

      let result = '';
      for (let i = 2; i < args.length - 2; i += 2) {
        const stop1 = expressionToGlsl(context, args[i]);
        const output1 =
          result || expressionToGlsl(context, args[i + 1], outputType);
        const stop2 = expressionToGlsl(context, args[i + 2]);
        const output2 = expressionToGlsl(context, args[i + 3], outputType);
        result = `mix(${output1}, ${output2}, pow(clamp((${input} - ${stop1}) / (${stop2} - ${stop1}), 0.0, 1.0), ${exponent}))`;
      }
      return result;
    },
  };

  Operators['match'] = {
    getReturnType: function (args) {
      let type = ValueTypes.ANY;
      for (let i = 2; i < args.length; i += 2) {
        type = type & getValueType(args[i]);
      }
      type = type & getValueType(args[args.length - 1]);
      return type;
    },
    toGlsl: function (context, args, typeHint) {
      assertArgsEven(args);
      assertArgsMinCount(args, 4);

      typeHint = typeHint !== undefined ? typeHint : ValueTypes.ANY;
      const outputType = Operators['match'].getReturnType(args) & typeHint;
      assertUniqueInferredType(args, outputType);

      const input = expressionToGlsl(context, args[0]);
      const fallback = expressionToGlsl(
        context,
        args[args.length - 1],
        outputType
      );
      let result = null;
      for (let i = args.length - 3; i >= 1; i -= 2) {
        const match = expressionToGlsl(context, args[i]);
        const output = expressionToGlsl(context, args[i + 1], outputType);
        result = `(${input} == ${match} ? ${output} : ${result || fallback})`;
      }
      return result;
    },
  };

  Operators['case'] = {
    getReturnType: function (args) {
      let type = ValueTypes.ANY;
      for (let i = 1; i < args.length; i += 2) {
        type = type & getValueType(args[i]);
      }
      type = type & getValueType(args[args.length - 1]);
      return type;
    },
    toGlsl: function (context, args, typeHint) {
      assertArgsOdd(args);
      assertArgsMinCount(args, 3);

      typeHint = typeHint !== undefined ? typeHint : ValueTypes.ANY;
      const outputType = Operators['case'].getReturnType(args) & typeHint;
      assertUniqueInferredType(args, outputType);
      for (let i = 0; i < args.length - 1; i += 2) {
        assertBoolean(args[i]);
      }

      const fallback = expressionToGlsl(
        context,
        args[args.length - 1],
        outputType
      );
      let result = null;
      for (let i = args.length - 3; i >= 0; i -= 2) {
        const condition = expressionToGlsl(context, args[i]);
        const output = expressionToGlsl(context, args[i + 1], outputType);
        result = `(${condition} ? ${output} : ${result || fallback})`;
      }
      return result;
    },
  };

  var style_expressions = {
    __proto__: null,
    ValueTypes: ValueTypes,
    Operators: Operators,
    getValueType: getValueType,
    isTypeUnique: isTypeUnique,
    numberToGlsl: numberToGlsl,
    arrayToGlsl: arrayToGlsl,
    colorToGlsl: colorToGlsl,
    getStringNumberEquivalent: getStringNumberEquivalent,
    stringToGlsl: stringToGlsl,
    expressionToGlsl: expressionToGlsl,
    uniformNameForVariable: uniformNameForVariable,
    PALETTE_TEXTURE_ARRAY: PALETTE_TEXTURE_ARRAY
  };

  /**
   * Classes and utilities for generating shaders from literal style objects
   * @module ol/webgl/ShaderBuilder
   */

  /**
   * @typedef {Object} VaryingDescription
   * @property {string} name Varying name, as will be declared in the header.
   * @property {string} type Varying type, either `float`, `vec2`, `vec4`...
   * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and
   * passed on to the fragment shader.
   */

  /**
   * @classdesc
   * This class implements a classic builder pattern for generating many different types of shaders.
   * Methods can be chained, e. g.:
   *
   * ```js
   * const shader = new ShaderBuilder()
   *   .addVarying('v_width', 'float', 'a_width')
   *   .addUniform('u_time')
   *   .setColorExpression('...')
   *   .setSizeExpression('...')
   *   .outputSymbolFragmentShader();
   * ```
   */
  class ShaderBuilder {
    constructor() {
      /**
       * Uniforms; these will be declared in the header (should include the type).
       * @type {Array<string>}
       * @private
       */
      this.uniforms = [];

      /**
       * Attributes; these will be declared in the header (should include the type).
       * @type {Array<string>}
       * @private
       */
      this.attributes = [];

      /**
       * Varyings with a name, a type and an expression.
       * @type {Array<VaryingDescription>}
       * @private
       */
      this.varyings = [];

      /**
       * @type {string}
       * @private
       */
      this.sizeExpression = 'vec2(1.0)';

      /**
       * @type {string}
       * @private
       */
      this.rotationExpression = '0.0';

      /**
       * @type {string}
       * @private
       */
      this.offsetExpression = 'vec2(0.0)';

      /**
       * @type {string}
       * @private
       */
      this.colorExpression = 'vec4(1.0)';

      /**
       * @type {string}
       * @private
       */
      this.texCoordExpression = 'vec4(0.0, 0.0, 1.0, 1.0)';

      /**
       * @type {string}
       * @private
       */
      this.discardExpression = 'false';

      /**
       * @type {boolean}
       * @private
       */
      this.rotateWithView = false;
    }

    /**
     * Adds a uniform accessible in both fragment and vertex shaders.
     * The given name should include a type, such as `sampler2D u_texture`.
     * @param {string} name Uniform name
     * @return {ShaderBuilder} the builder object
     */
    addUniform(name) {
      this.uniforms.push(name);
      return this;
    }

    /**
     * Adds an attribute accessible in the vertex shader, read from the geometry buffer.
     * The given name should include a type, such as `vec2 a_position`.
     * @param {string} name Attribute name
     * @return {ShaderBuilder} the builder object
     */
    addAttribute(name) {
      this.attributes.push(name);
      return this;
    }

    /**
     * Adds a varying defined in the vertex shader and accessible from the fragment shader.
     * The type and expression of the varying have to be specified separately.
     * @param {string} name Varying name
     * @param {'float'|'vec2'|'vec3'|'vec4'} type Type
     * @param {string} expression Expression used to assign a value to the varying.
     * @return {ShaderBuilder} the builder object
     */
    addVarying(name, type, expression) {
      this.varyings.push({
        name: name,
        type: type,
        expression: expression,
      });
      return this;
    }

    /**
     * Sets an expression to compute the size of the shape.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `vec2` value.
     * @param {string} expression Size expression
     * @return {ShaderBuilder} the builder object
     */
    setSizeExpression(expression) {
      this.sizeExpression = expression;
      return this;
    }

    /**
     * Sets an expression to compute the rotation of the shape.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `float` value in radians.
     * @param {string} expression Size expression
     * @return {ShaderBuilder} the builder object
     */
    setRotationExpression(expression) {
      this.rotationExpression = expression;
      return this;
    }

    /**
     * Sets an expression to compute the offset of the symbol from the point center.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `vec2` value.
     * Note: will only be used for point geometry shaders.
     * @param {string} expression Offset expression
     * @return {ShaderBuilder} the builder object
     */
    setSymbolOffsetExpression(expression) {
      this.offsetExpression = expression;
      return this;
    }

    /**
     * Sets an expression to compute the color of the shape.
     * This expression can use all the uniforms, varyings and attributes available
     * in the fragment shader, and should evaluate to a `vec4` value.
     * @param {string} expression Color expression
     * @return {ShaderBuilder} the builder object
     */
    setColorExpression(expression) {
      this.colorExpression = expression;
      return this;
    }

    /**
     * Sets an expression to compute the texture coordinates of the vertices.
     * This expression can use all the uniforms and attributes available
     * in the vertex shader, and should evaluate to a `vec4` value.
     * @param {string} expression Texture coordinate expression
     * @return {ShaderBuilder} the builder object
     */
    setTextureCoordinateExpression(expression) {
      this.texCoordExpression = expression;
      return this;
    }

    /**
     * Sets an expression to determine whether a fragment (pixel) should be discarded,
     * i.e. not drawn at all.
     * This expression can use all the uniforms, varyings and attributes available
     * in the fragment shader, and should evaluate to a `bool` value (it will be
     * used in an `if` statement)
     * @param {string} expression Fragment discard expression
     * @return {ShaderBuilder} the builder object
     */
    setFragmentDiscardExpression(expression) {
      this.discardExpression = expression;
      return this;
    }

    /**
     * Sets whether the symbols should rotate with the view or stay aligned with the map.
     * Note: will only be used for point geometry shaders.
     * @param {boolean} rotateWithView Rotate with view
     * @return {ShaderBuilder} the builder object
     */
    setSymbolRotateWithView(rotateWithView) {
      this.rotateWithView = rotateWithView;
      return this;
    }

    /**
     * @return {string} Previously set size expression
     */
    getSizeExpression() {
      return this.sizeExpression;
    }

    /**
     * @return {string} Previously set symbol offset expression
     */
    getOffsetExpression() {
      return this.offsetExpression;
    }

    /**
     * @return {string} Previously set color expression
     */
    getColorExpression() {
      return this.colorExpression;
    }

    /**
     * @return {string} Previously set texture coordinate expression
     */
    getTextureCoordinateExpression() {
      return this.texCoordExpression;
    }

    /**
     * @return {string} Previously set fragment discard expression
     */
    getFragmentDiscardExpression() {
      return this.discardExpression;
    }

    /**
     * Generates a symbol vertex shader from the builder parameters,
     * intended to be used on point geometries.
     *
     * Four uniforms are hardcoded in all shaders: `u_projectionMatrix`, `u_offsetScaleMatrix`,
     * `u_offsetRotateMatrix`, `u_time`.
     *
     * The following attributes are hardcoded and expected to be present in the vertex buffers:
     * `vec2 a_position`, `float a_index` (being the index of the vertex in the quad, 0 to 3).
     *
     * The following varyings are hardcoded and gives the coordinate of the pixel both in the quad and on the texture:
     * `vec2 v_quadCoord`, `vec2 v_texCoord`
     *
     * @param {boolean} [forHitDetection] If true, the shader will be modified to include hit detection variables
     * (namely, hit color with encoded feature id).
     * @return {string} The full shader as a string.
     */
    getSymbolVertexShader(forHitDetection) {
      const offsetMatrix = this.rotateWithView
        ? 'u_offsetScaleMatrix * u_offsetRotateMatrix'
        : 'u_offsetScaleMatrix';

      let attributes = this.attributes;
      let varyings = this.varyings;

      if (forHitDetection) {
        attributes = attributes.concat('vec4 a_hitColor');
        varyings = varyings.concat({
          name: 'v_hitColor',
          type: 'vec4',
          expression: 'a_hitColor',
        });
      }

      return `precision mediump float;
uniform mat4 u_projectionMatrix;
uniform mat4 u_offsetScaleMatrix;
uniform mat4 u_offsetRotateMatrix;
uniform float u_time;
uniform float u_zoom;
uniform float u_resolution;
${this.uniforms
  .map(function (uniform) {
    return 'uniform ' + uniform + ';';
  })
  .join('\n')}
attribute vec2 a_position;
attribute float a_index;
${attributes
  .map(function (attribute) {
    return 'attribute ' + attribute + ';';
  })
  .join('\n')}
varying vec2 v_texCoord;
varying vec2 v_quadCoord;
${varyings
  .map(function (varying) {
    return 'varying ' + varying.type + ' ' + varying.name + ';';
  })
  .join('\n')}
void main(void) {
  mat4 offsetMatrix = ${offsetMatrix};
  vec2 halfSize = ${this.sizeExpression} * 0.5;
  vec2 offset = ${this.offsetExpression};
  float angle = ${this.rotationExpression};
  float offsetX;
  float offsetY;
  if (a_index == 0.0) {
    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);
    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);
  } else if (a_index == 1.0) {
    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);
    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);
  } else if (a_index == 2.0) {
    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);
    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);
  } else {
    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);
    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);
  }
  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);
  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;
  vec4 texCoord = ${this.texCoordExpression};
  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;
  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;
  v_texCoord = vec2(u, v);
  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;
  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;
  v_quadCoord = vec2(u, v);
${varyings
  .map(function (varying) {
    return '  ' + varying.name + ' = ' + varying.expression + ';';
  })
  .join('\n')}
}`;
    }

    /**
     * Generates a symbol fragment shader from the builder parameters,
     * intended to be used on point geometries.
     *
     * Expects the following varyings to be transmitted by the vertex shader:
     * `vec2 v_quadCoord`, `vec2 v_texCoord`
     *
     * @param {boolean} [forHitDetection] If true, the shader will be modified to include hit detection variables
     * (namely, hit color with encoded feature id).
     * @return {string} The full shader as a string.
     */
    getSymbolFragmentShader(forHitDetection) {
      const hitDetectionBypass = forHitDetection
        ? '  if (gl_FragColor.a < 0.1) { discard; } gl_FragColor = v_hitColor;'
        : '';

      let varyings = this.varyings;

      if (forHitDetection) {
        varyings = varyings.concat({
          name: 'v_hitColor',
          type: 'vec4',
          expression: 'a_hitColor',
        });
      }

      return `precision mediump float;
uniform float u_time;
uniform float u_zoom;
uniform float u_resolution;
${this.uniforms
  .map(function (uniform) {
    return 'uniform ' + uniform + ';';
  })
  .join('\n')}
varying vec2 v_texCoord;
varying vec2 v_quadCoord;
${varyings
  .map(function (varying) {
    return 'varying ' + varying.type + ' ' + varying.name + ';';
  })
  .join('\n')}
void main(void) {
  if (${this.discardExpression}) { discard; }
  gl_FragColor = ${this.colorExpression};
  gl_FragColor.rgb *= gl_FragColor.a;
${hitDetectionBypass}
}`;
    }
  }

  /**
   * @typedef {Object} StyleParseResult
   * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style
   * @property {Object<string,import("./Helper").UniformValue>} uniforms Uniform definitions.
   * @property {Array<import("../renderer/webgl/PointsLayer").CustomAttribute>} attributes Attribute descriptions.
   */

  /**
   * Parses a {@link import("../style/literal").LiteralStyle} object and returns a {@link ShaderBuilder}
   * object that has been configured according to the given style, as well as `attributes` and `uniforms`
   * arrays to be fed to the `WebGLPointsRenderer` class.
   *
   * Also returns `uniforms` and `attributes` properties as expected by the
   * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.
   *
   * @param {import("../style/literal").LiteralStyle} style Literal style.
   * @return {StyleParseResult} Result containing shader params, attributes and uniforms.
   */
  function parseLiteralStyle(style) {
    const symbStyle = style.symbol;
    const size = symbStyle.size !== undefined ? symbStyle.size : 1;
    const color = symbStyle.color || 'white';
    const texCoord = symbStyle.textureCoord || [0, 0, 1, 1];
    const offset = symbStyle.offset || [0, 0];
    const opacity = symbStyle.opacity !== undefined ? symbStyle.opacity : 1;
    const rotation = symbStyle.rotation !== undefined ? symbStyle.rotation : 0;

    /**
     * @type {import("../style/expressions.js").ParsingContext}
     */
    const vertContext = {
      inFragmentShader: false,
      variables: [],
      attributes: [],
      stringLiteralsMap: {},
      functions: {},
    };
    const parsedSize = expressionToGlsl(
      vertContext,
      size,
      ValueTypes.NUMBER_ARRAY | ValueTypes.NUMBER
    );
    const parsedOffset = expressionToGlsl(
      vertContext,
      offset,
      ValueTypes.NUMBER_ARRAY
    );
    const parsedTexCoord = expressionToGlsl(
      vertContext,
      texCoord,
      ValueTypes.NUMBER_ARRAY
    );
    const parsedRotation = expressionToGlsl(
      vertContext,
      rotation,
      ValueTypes.NUMBER
    );

    /**
     * @type {import("../style/expressions.js").ParsingContext}
     */
    const fragContext = {
      inFragmentShader: true,
      variables: vertContext.variables,
      attributes: [],
      stringLiteralsMap: vertContext.stringLiteralsMap,
      functions: {},
    };
    const parsedColor = expressionToGlsl(fragContext, color, ValueTypes.COLOR);
    const parsedOpacity = expressionToGlsl(
      fragContext,
      opacity,
      ValueTypes.NUMBER
    );

    let opacityFilter = '1.0';
    const visibleSize = `vec2(${expressionToGlsl(
    fragContext,
    size,
    ValueTypes.NUMBER_ARRAY | ValueTypes.NUMBER
  )}).x`;
    switch (symbStyle.symbolType) {
      case 'square':
        break;
      case 'image':
        break;
      // taken from https://thebookofshaders.com/07/
      case 'circle':
        opacityFilter = `(1.0-smoothstep(1.-4./${visibleSize},1.,dot(v_quadCoord-.5,v_quadCoord-.5)*4.))`;
        break;
      case 'triangle':
        const st = '(v_quadCoord*2.-1.)';
        const a = `(atan(${st}.x,${st}.y))`;
        opacityFilter = `(1.0-smoothstep(.5-3./${visibleSize},.5,cos(floor(.5+${a}/2.094395102)*2.094395102-${a})*length(${st})))`;
        break;

      default:
        throw new Error('Unexpected symbol type: ' + symbStyle.symbolType);
    }

    const builder = new ShaderBuilder()
      .setSizeExpression(`vec2(${parsedSize})`)
      .setRotationExpression(parsedRotation)
      .setSymbolOffsetExpression(parsedOffset)
      .setTextureCoordinateExpression(parsedTexCoord)
      .setSymbolRotateWithView(!!symbStyle.rotateWithView)
      .setColorExpression(
        `vec4(${parsedColor}.rgb, ${parsedColor}.a * ${parsedOpacity} * ${opacityFilter})`
      );

    if (style.filter) {
      const parsedFilter = expressionToGlsl(
        fragContext,
        style.filter,
        ValueTypes.BOOLEAN
      );
      builder.setFragmentDiscardExpression(`!${parsedFilter}`);
    }

    /** @type {Object<string,import("../webgl/Helper").UniformValue>} */
    const uniforms = {};

    // define one uniform per variable
    fragContext.variables.forEach(function (varName) {
      const uniformName = uniformNameForVariable(varName);
      builder.addUniform(`float ${uniformName}`);
      uniforms[uniformName] = function () {
        if (!style.variables || style.variables[varName] === undefined) {
          throw new Error(
            `The following variable is missing from the style: ${varName}`
          );
        }
        let value = style.variables[varName];
        if (typeof value === 'string') {
          value = getStringNumberEquivalent(vertContext, value);
        }
        return value !== undefined ? value : -9999999; // to avoid matching with the first string literal
      };
    });

    if (symbStyle.symbolType === 'image' && symbStyle.src) {
      const texture = new Image();
      texture.crossOrigin =
        symbStyle.crossOrigin === undefined ? 'anonymous' : symbStyle.crossOrigin;
      texture.src = symbStyle.src;
      builder
        .addUniform('sampler2D u_texture')
        .setColorExpression(
          builder.getColorExpression() + ' * texture2D(u_texture, v_texCoord)'
        );
      uniforms['u_texture'] = texture;
    }

    // for each feature attribute used in the fragment shader, define a varying that will be used to pass data
    // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)
    fragContext.attributes.forEach(function (attrName) {
      if (!vertContext.attributes.includes(attrName)) {
        vertContext.attributes.push(attrName);
      }
      builder.addVarying(`v_${attrName}`, 'float', `a_${attrName}`);
    });

    // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.
    vertContext.attributes.forEach(function (attrName) {
      builder.addAttribute(`float a_${attrName}`);
    });

    return {
      builder: builder,
      attributes: vertContext.attributes.map(function (attributeName) {
        return {
          name: attributeName,
          callback: function (feature, props) {
            let value = props[attributeName];
            if (typeof value === 'string') {
              value = getStringNumberEquivalent(vertContext, value);
            }
            return value !== undefined ? value : -9999999; // to avoid matching with the first string literal
          },
        };
      }),
      uniforms: uniforms,
    };
  }

  /**
   * @module ol/layer/WebGLPoints
   */

  /**
   * @template {import("../source/Vector.js").default<import("../geom/Point.js").default>} VectorSourceType
   * @typedef {Object} Options
   * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {VectorSourceType} [source] Point source.
   * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will
   * prevent all hit detection on the layer.
   * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.
   */

  /**
   * @classdesc
   * Layer optimized for rendering large point datasets. Takes a `style` property which
   * is a serializable JSON object describing how the layer should be rendered.
   *
   * Here are a few samples of literal style objects:
   * ```js
   * const style = {
   *   symbol: {
   *     symbolType: 'circle',
   *     size: 8,
   *     color: '#33AAFF',
   *     opacity: 0.9
   *   }
   * }
   * ```
   *
   * ```js
   * const style = {
   *   symbol: {
   *     symbolType: 'image',
   *     offset: [0, 12],
   *     size: [4, 8],
   *     src: '../static/exclamation-mark.png'
   *   }
   * }
   * ```
   *
   * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context
   * will not be garbage collected.**
   *
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default<import("../geom/Point.js").default>} VectorSourceType
   * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}
   * @fires import("../render/Event.js").RenderEvent
   */
  class WebGLPointsLayer extends Layer$1 {
    /**
     * @param {Options<VectorSourceType>} options Options.
     */
    constructor(options) {
      const baseOptions = Object.assign({}, options);

      super(baseOptions);

      /**
       * @private
       * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}
       */
      this.parseResult_ = parseLiteralStyle(options.style);

      /**
       * @type {Object<string, (string|number)>}
       * @private
       */
      this.styleVariables_ = options.style.variables || {};

      /**
       * @private
       * @type {boolean}
       */
      this.hitDetectionDisabled_ = !!options.disableHitDetection;
    }

    createRenderer() {
      return new WebGLPointsLayerRenderer$1(this, {
        vertexShader: this.parseResult_.builder.getSymbolVertexShader(),
        fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),
        hitVertexShader:
          !this.hitDetectionDisabled_ &&
          this.parseResult_.builder.getSymbolVertexShader(true),
        hitFragmentShader:
          !this.hitDetectionDisabled_ &&
          this.parseResult_.builder.getSymbolFragmentShader(true),
        uniforms: this.parseResult_.uniforms,
        attributes: this.parseResult_.attributes,
      });
    }

    /**
     * Update any variables used by the layer style and trigger a re-render.
     * @param {Object<string, number>} variables Variables to update.
     */
    updateStyleVariables(variables) {
      Object.assign(this.styleVariables_, variables);
      this.changed();
    }
  }

  var WebGLPointsLayer$1 = WebGLPointsLayer;

  /**
   * @module ol/layer/WebGLTile
   */

  /**
   * @typedef {import("../source/DataTile.js").default|import("../source/TileImage.js").default} SourceType
   */

  /**
   * @typedef {Object} Style
   * Translates tile data to rendered pixels.
   *
   * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These
   * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`
   * {@link import("../style/expressions.js").ExpressionValue expressions}, using the `['var', 'varName']` operator.
   * To update style variables, use the {@link import("./WebGLTile.js").default#updateStyleVariables} method.
   * @property {import("../style/expressions.js").ExpressionValue} [color] An expression applied to color values.
   * @property {import("../style/expressions.js").ExpressionValue} [brightness=0] Value used to decrease or increase
   * the layer brightness.  Values range from -1 to 1.
   * @property {import("../style/expressions.js").ExpressionValue} [contrast=0] Value used to decrease or increase
   * the layer contrast.  Values range from -1 to 1.
   * @property {import("../style/expressions.js").ExpressionValue} [exposure=0] Value used to decrease or increase
   * the layer exposure.  Values range from -1 to 1.
   * @property {import("../style/expressions.js").ExpressionValue} [saturation=0] Value used to decrease or increase
   * the layer saturation.  Values range from -1 to 1.
   * @property {import("../style/expressions.js").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.
   * Values range from 0 to infinity.
   */

  /**
   * @typedef {Object} Options
   * @property {Style} [style] Style to apply to the layer.
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {SourceType} [source] Source for this layer.
   * @property {Array<SourceType>|function(import("../extent.js").Extent, number):Array<SourceType>} [sources] Array
   * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that
   * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See
   * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a
   * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.
   * @property {import("../Map.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map~Map#addLayer}.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render
   * two zoom levels worth of tiles.
   */

  /**
   * @typedef {Object} ParsedStyle
   * @property {string} vertexShader The vertex shader.
   * @property {string} fragmentShader The fragment shader.
   * @property {Object<string,import("../webgl/Helper.js").UniformValue>} uniforms Uniform definitions.
   * @property {Array<import("../webgl/PaletteTexture.js").default>} paletteTextures Palette textures.
   */

  /**
   * @param {Style} style The layer style.
   * @param {number} [bandCount] The number of bands.
   * @return {ParsedStyle} Shaders and uniforms generated from the style.
   */
  function parseStyle(style, bandCount) {
    const vertexShader = `
    attribute vec2 ${Attributes.TEXTURE_COORD};
    uniform mat4 ${Uniforms.TILE_TRANSFORM};
    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};
    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};
    uniform float ${Uniforms.TEXTURE_RESOLUTION};
    uniform float ${Uniforms.TEXTURE_ORIGIN_X};
    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};
    uniform float ${Uniforms.DEPTH};

    varying vec2 v_textureCoord;
    varying vec2 v_mapCoord;

    void main() {
      v_textureCoord = ${Attributes.TEXTURE_COORD};
      v_mapCoord = vec2(
        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],
        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]
      );
      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);
    }
  `;

    /**
     * @type {import("../style/expressions.js").ParsingContext}
     */
    const context = {
      inFragmentShader: true,
      variables: [],
      attributes: [],
      stringLiteralsMap: {},
      functions: {},
      bandCount: bandCount,
    };

    const pipeline = [];

    if (style.color !== undefined) {
      const color = expressionToGlsl(context, style.color, ValueTypes.COLOR);
      pipeline.push(`color = ${color};`);
    }

    if (style.contrast !== undefined) {
      const contrast = expressionToGlsl(
        context,
        style.contrast,
        ValueTypes.NUMBER
      );
      pipeline.push(
        `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`
      );
    }

    if (style.exposure !== undefined) {
      const exposure = expressionToGlsl(
        context,
        style.exposure,
        ValueTypes.NUMBER
      );
      pipeline.push(
        `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`
      );
    }

    if (style.saturation !== undefined) {
      const saturation = expressionToGlsl(
        context,
        style.saturation,
        ValueTypes.NUMBER
      );
      pipeline.push(`
      float saturation = ${saturation} + 1.0;
      float sr = (1.0 - saturation) * 0.2126;
      float sg = (1.0 - saturation) * 0.7152;
      float sb = (1.0 - saturation) * 0.0722;
      mat3 saturationMatrix = mat3(
        sr + saturation, sr, sr,
        sg, sg + saturation, sg,
        sb, sb, sb + saturation
      );
      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));
    `);
    }

    if (style.gamma !== undefined) {
      const gamma = expressionToGlsl(context, style.gamma, ValueTypes.NUMBER);
      pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);
    }

    if (style.brightness !== undefined) {
      const brightness = expressionToGlsl(
        context,
        style.brightness,
        ValueTypes.NUMBER
      );
      pipeline.push(
        `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`
      );
    }

    /** @type {Object<string,import("../webgl/Helper").UniformValue>} */
    const uniforms = {};

    const numVariables = context.variables.length;
    if (numVariables > 1 && !style.variables) {
      throw new Error(
        `Missing variables in style (expected ${context.variables})`
      );
    }

    for (let i = 0; i < numVariables; ++i) {
      const variableName = context.variables[i];
      if (!(variableName in style.variables)) {
        throw new Error(`Missing '${variableName}' in style variables`);
      }
      const uniformName = uniformNameForVariable(variableName);
      uniforms[uniformName] = function () {
        let value = style.variables[variableName];
        if (typeof value === 'string') {
          value = getStringNumberEquivalent(context, value);
        }
        return value !== undefined ? value : -9999999; // to avoid matching with the first string literal
      };
    }

    const uniformDeclarations = Object.keys(uniforms).map(function (name) {
      return `uniform float ${name};`;
    });

    const textureCount = Math.ceil(bandCount / 4);
    uniformDeclarations.push(
      `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`
    );

    if (context.paletteTextures) {
      uniformDeclarations.push(
        `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`
      );
    }

    const functionDefintions = Object.keys(context.functions).map(function (
      name
    ) {
      return context.functions[name];
    });

    const fragmentShader = `
    #ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    #else
    precision mediump float;
    #endif

    varying vec2 v_textureCoord;
    varying vec2 v_mapCoord;
    uniform vec4 ${Uniforms.RENDER_EXTENT};
    uniform float ${Uniforms.TRANSITION_ALPHA};
    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};
    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};
    uniform float ${Uniforms.RESOLUTION};
    uniform float ${Uniforms.ZOOM};

    ${uniformDeclarations.join('\n')}

    ${functionDefintions.join('\n')}

    void main() {
      if (
        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||
        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||
        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||
        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]
      ) {
        discard;
      }

      vec4 color = texture2D(${
        Uniforms.TILE_TEXTURE_ARRAY
      }[0],  v_textureCoord);

      ${pipeline.join('\n')}

      if (color.a == 0.0) {
        discard;
      }

      gl_FragColor = color;
      gl_FragColor.rgb *= gl_FragColor.a;
      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};
    }`;

    return {
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
      uniforms: uniforms,
      paletteTextures: context.paletteTextures,
    };
  }

  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>
   * @fires import("../render/Event.js").RenderEvent
   * @api
   */
  class WebGLTileLayer extends BaseTileLayer$1 {
    /**
     * @param {Options} options Tile layer options.
     */
    constructor(options) {
      options = options ? Object.assign({}, options) : {};

      const style = options.style || {};
      delete options.style;

      const cacheSize = options.cacheSize;
      delete options.cacheSize;

      super(options);

      /**
       * @type {Array<SourceType>|function(import("../extent.js").Extent, number):Array<SourceType>}
       * @private
       */
      this.sources_ = options.sources;

      /**
       * @type {SourceType|null}
       * @private
       */
      this.renderedSource_ = null;

      /**
       * @type {number}
       * @private
       */
      this.renderedResolution_ = NaN;

      /**
       * @type {Style}
       * @private
       */
      this.style_ = style;

      /**
       * @type {number}
       * @private
       */
      this.cacheSize_ = cacheSize;

      /**
       * @type {Object<string, (string|number)>}
       * @private
       */
      this.styleVariables_ = this.style_.variables || {};

      this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);
    }

    /**
     * Gets the sources for this layer, for a given extent and resolution.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @return {Array<SourceType>} Sources.
     */
    getSources(extent, resolution) {
      const source = this.getSource();
      return this.sources_
        ? typeof this.sources_ === 'function'
          ? this.sources_(extent, resolution)
          : this.sources_
        : source
        ? [source]
        : [];
    }

    /**
     * @return {SourceType} The source being rendered.
     */
    getRenderSource() {
      return this.renderedSource_ || this.getSource();
    }

    /**
     * @return {import("../source/Source.js").State} Source state.
     */
    getSourceState() {
      const source = this.getRenderSource();
      return source ? source.getState() : 'undefined';
    }

    /**
     * @private
     */
    handleSourceUpdate_() {
      if (this.hasRenderer()) {
        this.getRenderer().clearCache();
      }
      if (this.getSource()) {
        this.setStyle(this.style_);
      }
    }

    /**
     * @private
     * @return {number} The number of source bands.
     */
    getSourceBandCount_() {
      const max = Number.MAX_SAFE_INTEGER;
      const sources = this.getSources([-max, -max, max, max], max);
      return sources && sources.length && 'bandCount' in sources[0]
        ? sources[0].bandCount
        : 4;
    }

    createRenderer() {
      const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());

      return new WebGLTileLayerRenderer$1(this, {
        vertexShader: parsedStyle.vertexShader,
        fragmentShader: parsedStyle.fragmentShader,
        uniforms: parsedStyle.uniforms,
        cacheSize: this.cacheSize_,
        paletteTextures: parsedStyle.paletteTextures,
      });
    }

    /**
     * @param {import("../Map").FrameState} frameState Frame state.
     * @param {Array<SourceType>} sources Sources.
     * @return {HTMLElement} Canvas.
     */
    renderSources(frameState, sources) {
      const layerRenderer = this.getRenderer();
      let canvas;
      for (let i = 0, ii = sources.length; i < ii; ++i) {
        this.renderedSource_ = sources[i];
        if (layerRenderer.prepareFrame(frameState)) {
          canvas = layerRenderer.renderFrame(frameState);
        }
      }
      return canvas;
    }

    /**
     * @param {?import("../Map.js").FrameState} frameState Frame state.
     * @param {HTMLElement} target Target which the renderer may (but need not) use
     * for rendering its content.
     * @return {HTMLElement} The rendered element.
     */
    render(frameState, target) {
      this.rendered = true;
      const viewState = frameState.viewState;
      const sources = this.getSources(frameState.extent, viewState.resolution);
      let ready = true;
      for (let i = 0, ii = sources.length; i < ii; ++i) {
        const source = sources[i];
        const sourceState = source.getState();
        if (sourceState == 'loading') {
          const onChange = () => {
            if (source.getState() == 'ready') {
              source.removeEventListener('change', onChange);
              this.changed();
            }
          };
          source.addEventListener('change', onChange);
        }
        ready = ready && sourceState == 'ready';
      }
      const canvas = this.renderSources(frameState, sources);
      if (this.getRenderer().renderComplete && ready) {
        // Fully rendered, done.
        this.renderedResolution_ = viewState.resolution;
        return canvas;
      }
      // Render sources from previously fully rendered frames
      if (this.renderedResolution_ > 0.5 * viewState.resolution) {
        const altSources = this.getSources(
          frameState.extent,
          this.renderedResolution_
        ).filter((source) => !sources.includes(source));
        if (altSources.length > 0) {
          return this.renderSources(frameState, altSources);
        }
      }
      return canvas;
    }

    /**
     * Update the layer style.  The `updateStyleVariables` function is a more efficient
     * way to update layer rendering.  In cases where the whole style needs to be updated,
     * this method may be called instead.  Note that calling this method will also replace
     * any previously set variables, so the new style also needs to include new variables,
     * if needed.
     * @param {Style} style The new style.
     */
    setStyle(style) {
      this.styleVariables_ = style.variables || {};
      this.style_ = style;
      const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());
      const renderer = this.getRenderer();
      renderer.reset({
        vertexShader: parsedStyle.vertexShader,
        fragmentShader: parsedStyle.fragmentShader,
        uniforms: parsedStyle.uniforms,
        paletteTextures: parsedStyle.paletteTextures,
      });
      this.changed();
    }

    /**
     * Update any variables used by the layer style and trigger a re-render.
     * @param {Object<string, number>} variables Variables to update.
     * @api
     */
    updateStyleVariables(variables) {
      Object.assign(this.styleVariables_, variables);
      this.changed();
    }
  }

  /**
   * Clean up underlying WebGL resources.
   * @function
   * @api
   */
  WebGLTileLayer.prototype.dispose;

  var WebGLTileLayer$1 = WebGLTileLayer;

  /**
   * @module ol/layer
   */

  var nsLayer = {
    __proto__: null,
    Graticule: Graticule$1,
    Group: LayerGroup$1,
    Heatmap: Heatmap$1,
    Image: ImageLayer$1,
    Layer: Layer$1,
    MapboxVector: MapboxVectorLayer$1,
    Tile: TileLayer$1,
    Vector: VectorLayer$1,
    VectorImage: VectorImageLayer$1,
    VectorTile: VectorTileLayer$1,
    WebGLPoints: WebGLPointsLayer$1,
    WebGLTile: WebGLTileLayer$1
  };

  /**
   * @module ol/proj/proj4
   */

  /**
   * @type {import("proj4")|null}
   */
  let registered = null;

  /**
   * @return {boolean} Proj4 has been registered.
   */
  function isRegistered() {
    return !!registered;
  }

  /**
   * Unsets the shared proj4 previsouly set with register.
   */
  function unregister() {
    registered = null;
  }

  /**
   * Make projections defined in proj4 (with `proj4.defs()`) available in
   * OpenLayers. Requires proj4 >= 2.8.0.
   *
   * This function should be called whenever changes are made to the proj4
   * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be
   * modified by this function.
   *
   * @param {import("proj4")} proj4 Proj4.
   * @api
   */
  function register(proj4) {
    registered = proj4;

    const projCodes = Object.keys(proj4.defs);
    const len = projCodes.length;
    let i, j;
    for (i = 0; i < len; ++i) {
      const code = projCodes[i];
      if (!get$2(code)) {
        const def = proj4.defs(code);
        let units = /** @type {import("./Units.js").Units} */ (def.units);
        if (!units && def.projName === 'longlat') {
          units = 'degrees';
        }
        addProjection(
          new Projection$1({
            code: code,
            axisOrientation: def.axis,
            metersPerUnit: def.to_meter,
            units,
          })
        );
      }
    }
    for (i = 0; i < len; ++i) {
      const code1 = projCodes[i];
      const proj1 = get$2(code1);
      for (j = 0; j < len; ++j) {
        const code2 = projCodes[j];
        const proj2 = get$2(code2);
        if (!get$3(code1, code2)) {
          if (proj4.defs[code1] === proj4.defs[code2]) {
            addEquivalentProjections([proj1, proj2]);
          } else {
            const transform = proj4(code1, code2);
            addCoordinateTransforms(
              proj1,
              proj2,
              createSafeCoordinateTransform(proj1, proj2, transform.forward),
              createSafeCoordinateTransform(proj2, proj1, transform.inverse)
            );
          }
        }
      }
    }
  }

  /**
   * @param {number} code The EPSG code.
   * @return {Promise<string>} The proj4 definition.
   */
  let epsgLookup = async function (code) {
    const response = await fetch(`https://epsg.io/${code}.proj4`);
    if (!response.ok) {
      throw new Error(`Unexpected response from epsg.io: ${response.status}`);
    }
    return response.text();
  };

  /**
   * Set the lookup function for getting proj4 definitions given an EPSG code.
   * By default, the {@link module:ol/proj/proj4.fromEPSGCode} function uses the
   * epsg.io website for proj4 definitions.  This can be changed by providing a
   * different lookup function.
   *
   * @param {function(number):Promise<string>} func The lookup function.
   * @api
   */
  function setEPSGLookup(func) {
    epsgLookup = func;
  }

  /**
   * Get the current EPSG lookup function.
   *
   * @return {function(number):Promise<string>} The EPSG lookup function.
   */
  function getEPSGLookup() {
    return epsgLookup;
  }

  /**
   * Get a projection from an EPSG code.  This function fetches the projection
   * definition from the epsg.io website, registers this definition for use with
   * proj4, and returns a configured projection.  You must call import proj4 and
   * call {@link module:ol/proj/proj4.register} before using this function.
   *
   * If the projection definition is already registered with proj4, it will not
   * be fetched again (so it is ok to call this function multiple times with the
   * same code).
   *
   * @param {number|string} code The EPSG code (e.g. 4326 or 'EPSG:4326').
   * @return {Promise<Projection>} The projection.
   * @api
   */
  async function fromEPSGCode(code) {
    if (typeof code === 'string') {
      code = parseInt(code.split(':').pop(), 10);
    }

    const proj4 = registered;
    if (!proj4) {
      throw new Error('Proj4 must be registered first with register(proj4)');
    }

    const epsgCode = 'EPSG:' + code;
    if (proj4.defs(epsgCode)) {
      return get$2(epsgCode);
    }

    proj4.defs(epsgCode, await epsgLookup(code));
    register(proj4);

    return get$2(epsgCode);
  }

  var proj_proj4 = {
    __proto__: null,
    isRegistered: isRegistered,
    unregister: unregister,
    register: register,
    setEPSGLookup: setEPSGLookup,
    getEPSGLookup: getEPSGLookup,
    fromEPSGCode: fromEPSGCode
  };

  /**
   * @module ol/source/BingMaps
   */

  /**
   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.
   * @return {string} Quad key.
   */
  function quadKey(tileCoord) {
    const z = tileCoord[0];
    const digits = new Array(z);
    let mask = 1 << (z - 1);
    let i, charCode;
    for (i = 0; i < z; ++i) {
      // 48 is charCode for 0 - '0'.charCodeAt(0)
      charCode = 48;
      if (tileCoord[1] & mask) {
        charCode += 1;
      }
      if (tileCoord[2] & mask) {
        charCode += 2;
      }
      digits[i] = String.fromCharCode(charCode);
      mask >>= 1;
    }
    return digits.join('');
  }

  /**
   * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’
   * Terms Of Use.
   * @const
   * @type {string}
   */
  const TOS_ATTRIBUTION =
    '<a class="ol-attribution-bing-tos" ' +
    'href="https://www.microsoft.com/maps/product/terms.html" target="_blank">' +
    'Terms of Use</a>';

  /**
   * @typedef {Object} Options
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.
   * @property {string} [culture='en-us'] Culture code.
   * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.
   * @property {string} imagerySet Type of imagery.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @typedef {Object} BingMapsImageryMetadataResponse
   * @property {number} statusCode The response status code
   * @property {string} statusDescription The response status description
   * @property {string} authenticationResultCode The authentication result code
   * @property {Array<ResourceSet>} resourceSets The array of resource sets
   */

  /**
   * @typedef {Object} ResourceSet
   * @property {Array<Resource>} resources Resources.
   */

  /**
   * @typedef {Object} Resource
   * @property {number} imageHeight The image height
   * @property {number} imageWidth The image width
   * @property {number} zoomMin The minimum zoom level
   * @property {number} zoomMax The maximum zoom level
   * @property {string} imageUrl The image URL
   * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation
   * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders
   */

  /**
   * @typedef {Object} ImageryProvider
   * @property {Array<CoverageArea>} coverageAreas The coverage areas
   * @property {string} [attribution] The attribution
   */

  /**
   * @typedef {Object} CoverageArea
   * @property {number} zoomMin The minimum zoom
   * @property {number} zoomMax The maximum zoom
   * @property {Array<number>} bbox The coverage bounding box
   */

  /**
   * @classdesc
   * Layer source for Bing Maps tile data.
   * @api
   */
  class BingMaps extends TileImage$1 {
    /**
     * @param {Options} options Bing Maps options.
     */
    constructor(options) {
      const hidpi = options.hidpi !== undefined ? options.hidpi : false;

      super({
        cacheSize: options.cacheSize,
        crossOrigin: 'anonymous',
        interpolate: options.interpolate,
        opaque: true,
        projection: get$2('EPSG:3857'),
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        state: 'loading',
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: hidpi ? 2 : 1,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = hidpi;

      /**
       * @private
       * @type {string}
       */
      this.culture_ = options.culture !== undefined ? options.culture : 'en-us';

      /**
       * @private
       * @type {number}
       */
      this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;

      /**
       * @private
       * @type {string}
       */
      this.apiKey_ = options.key;

      /**
       * @private
       * @type {string}
       */
      this.imagerySet_ = options.imagerySet;

      const url =
        'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +
        this.imagerySet_ +
        '?uriScheme=https&include=ImageryProviders&key=' +
        this.apiKey_ +
        '&c=' +
        this.culture_;

      fetch(url)
        .then((response) => response.json())
        .then((json) => this.handleImageryMetadataResponse(json));
    }

    /**
     * Get the api key used for this source.
     *
     * @return {string} The api key.
     * @api
     */
    getApiKey() {
      return this.apiKey_;
    }

    /**
     * Get the imagery set associated with this source.
     *
     * @return {string} The imagery set.
     * @api
     */
    getImagerySet() {
      return this.imagerySet_;
    }

    /**
     * @param {BingMapsImageryMetadataResponse} response Response.
     */
    handleImageryMetadataResponse(response) {
      if (
        response.statusCode != 200 ||
        response.statusDescription != 'OK' ||
        response.authenticationResultCode != 'ValidCredentials' ||
        response.resourceSets.length != 1 ||
        response.resourceSets[0].resources.length != 1
      ) {
        this.setState('error');
        return;
      }

      const resource = response.resourceSets[0].resources[0];
      const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;

      const sourceProjection = this.getProjection();
      const extent = extentFromProjection(sourceProjection);
      const scale = this.hidpi_ ? 2 : 1;
      const tileSize =
        resource.imageWidth == resource.imageHeight
          ? resource.imageWidth / scale
          : [resource.imageWidth / scale, resource.imageHeight / scale];

      const tileGrid = createXYZ({
        extent: extent,
        minZoom: resource.zoomMin,
        maxZoom: maxZoom,
        tileSize: tileSize,
      });
      this.tileGrid = tileGrid;

      const culture = this.culture_;
      const hidpi = this.hidpi_;
      this.tileUrlFunction = createFromTileUrlFunctions(
        resource.imageUrlSubdomains.map(function (subdomain) {
          /** @type {import('../tilecoord.js').TileCoord} */
          const quadKeyTileCoord = [0, 0, 0];
          const imageUrl = resource.imageUrl
            .replace('{subdomain}', subdomain)
            .replace('{culture}', culture);
          return (
            /**
             * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
             * @param {number} pixelRatio Pixel ratio.
             * @param {import("../proj/Projection.js").default} projection Projection.
             * @return {string|undefined} Tile URL.
             */
            function (tileCoord, pixelRatio, projection) {
              if (!tileCoord) {
                return undefined;
              }
              createOrUpdate$1(
                tileCoord[0],
                tileCoord[1],
                tileCoord[2],
                quadKeyTileCoord
              );
              let url = imageUrl;
              if (hidpi) {
                url += '&dpi=d1&device=mobile';
              }
              return url.replace('{quadkey}', quadKey(quadKeyTileCoord));
            }
          );
        })
      );

      if (resource.imageryProviders) {
        const transform = getTransformFromProjections(
          get$2('EPSG:4326'),
          this.getProjection()
        );

        this.setAttributions((frameState) => {
          const attributions = [];
          const viewState = frameState.viewState;
          const tileGrid = this.getTileGrid();
          const z = tileGrid.getZForResolution(
            viewState.resolution,
            this.zDirection
          );
          const tileCoord = tileGrid.getTileCoordForCoordAndZ(
            viewState.center,
            z
          );
          const zoom = tileCoord[0];
          resource.imageryProviders.map(function (imageryProvider) {
            let intersecting = false;
            const coverageAreas = imageryProvider.coverageAreas;
            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {
              const coverageArea = coverageAreas[i];
              if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {
                const bbox = coverageArea.bbox;
                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];
                const extent = applyTransform(epsg4326Extent, transform);
                if (intersects$2(extent, frameState.extent)) {
                  intersecting = true;
                  break;
                }
              }
            }
            if (intersecting) {
              attributions.push(imageryProvider.attribution);
            }
          });

          attributions.push(TOS_ATTRIBUTION);
          return attributions;
        });
      }

      this.setState('ready');
    }
  }

  var BingMaps$1 = BingMaps;

  /**
   * @module ol/source/XYZ
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {boolean} [opaque=false] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
   * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
   * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * Not used if `tileGrid` is provided.
   * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.
   * This allows artifacts of rendering at tile edges to be ignored.
   * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
   * tile URL given a tile coordinate and the projection.
   * Required if `url` or `urls` are not provided.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
   * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
   * may be used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data with URLs in a set XYZ format that are
   * defined in a URL template. By default, this follows the widely-used
   * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
   * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
   * using the `{-y}` placeholder in the URL template, so long as the
   * source does not have a custom tile grid. In this case
   * a `tileUrlFunction` can be used, such as:
   * ```js
   *  tileUrlFunction: function(coordinate) {
   *    return 'http://mapserver.com/' + coordinate[0] + '/' +
   *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';
   *  }
   * ```
   * @api
   */
  class XYZ extends TileImage$1 {
    /**
     * @param {Options} [options] XYZ options.
     */
    constructor(options) {
      options = options || {};

      const projection =
        options.projection !== undefined ? options.projection : 'EPSG:3857';

      const tileGrid =
        options.tileGrid !== undefined
          ? options.tileGrid
          : createXYZ({
              extent: extentFromProjection(projection),
              maxResolution: options.maxResolution,
              maxZoom: options.maxZoom,
              minZoom: options.minZoom,
              tileSize: options.tileSize,
            });

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        opaque: options.opaque,
        projection: projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        tileUrlFunction: options.tileUrlFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        attributionsCollapsible: options.attributionsCollapsible,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter !== undefined ? options.gutter : 0;
    }

    /**
     * @return {number} Gutter.
     */
    getGutter() {
      return this.gutter_;
    }
  }

  var XYZ$1 = XYZ;

  /**
   * @module ol/source/CartoDB
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [maxZoom=18] Max zoom.
   * @property {number} [minZoom] Minimum zoom.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See
   * https://carto.com/developers/maps-api/guides/anonymous-maps/
   * for more detail.
   * If using named maps, a key-value lookup with the template parameters.
   * See https://carto.com/developers/maps-api/guides/named-maps/
   * for more detail.
   * @property {string} [map] If using named maps, this will be the name of the template to load.
   * See https://carto.com/developers/maps-api/guides/named-maps/
   * for more detail.
   * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @typedef {Object} CartoDBLayerInfo
   * @property {string} layergroupid The layer group ID
   * @property {{https: string}} cdn_url The CDN URL
   */

  /**
   * @classdesc
   * Layer source for the CartoDB Maps API.
   * @api
   */
  class CartoDB extends XYZ$1 {
    /**
     * @param {Options} options CartoDB options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,
        minZoom: options.minZoom,
        projection: options.projection,
        transition: options.transition,
        wrapX: options.wrapX,
        zDirection: options.zDirection,
      });

      /**
       * @type {string}
       * @private
       */
      this.account_ = options.account;

      /**
       * @type {string}
       * @private
       */
      this.mapId_ = options.map || '';

      /**
       * @type {!Object}
       * @private
       */
      this.config_ = options.config || {};

      /**
       * @type {!Object<string, CartoDBLayerInfo>}
       * @private
       */
      this.templateCache_ = {};

      this.initializeMap_();
    }

    /**
     * Returns the current config.
     * @return {!Object} The current configuration.
     * @api
     */
    getConfig() {
      return this.config_;
    }

    /**
     * Updates the carto db config.
     * @param {Object} config a key-value lookup. Values will replace current values
     *     in the config.
     * @api
     */
    updateConfig(config) {
      Object.assign(this.config_, config);
      this.initializeMap_();
    }

    /**
     * Sets the CartoDB config
     * @param {Object} config In the case of anonymous maps, a CartoDB configuration
     *     object.
     * If using named maps, a key-value lookup with the template parameters.
     * @api
     */
    setConfig(config) {
      this.config_ = config || {};
      this.initializeMap_();
    }

    /**
     * Issue a request to initialize the CartoDB map.
     * @private
     */
    initializeMap_() {
      const paramHash = JSON.stringify(this.config_);
      if (this.templateCache_[paramHash]) {
        this.applyTemplate_(this.templateCache_[paramHash]);
        return;
      }
      let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';

      if (this.mapId_) {
        mapUrl += '/named/' + this.mapId_;
      }

      const client = new XMLHttpRequest();
      client.addEventListener(
        'load',
        this.handleInitResponse_.bind(this, paramHash)
      );
      client.addEventListener('error', this.handleInitError_.bind(this));
      client.open('POST', mapUrl);
      client.setRequestHeader('Content-type', 'application/json');
      client.send(JSON.stringify(this.config_));
    }

    /**
     * Handle map initialization response.
     * @param {string} paramHash a hash representing the parameter set that was used
     *     for the request
     * @param {Event} event Event.
     * @private
     */
    handleInitResponse_(paramHash, event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || (client.status >= 200 && client.status < 300)) {
        let response;
        try {
          response = /** @type {CartoDBLayerInfo} */ (
            JSON.parse(client.responseText)
          );
        } catch (err) {
          this.setState('error');
          return;
        }
        this.applyTemplate_(response);
        this.templateCache_[paramHash] = response;
        this.setState('ready');
      } else {
        this.setState('error');
      }
    }

    /**
     * @private
     * @param {Event} event Event.
     */
    handleInitError_(event) {
      this.setState('error');
    }

    /**
     * Apply the new tile urls returned by carto db
     * @param {CartoDBLayerInfo} data Result of carto db call.
     * @private
     */
    applyTemplate_(data) {
      const tilesUrl =
        'https://' +
        data.cdn_url.https +
        '/' +
        this.account_ +
        '/api/v1/map/' +
        data.layergroupid +
        '/{z}/{x}/{y}.png';
      this.setUrl(tilesUrl);
    }
  }

  var CartoDB$1 = CartoDB;

  /**
   * @module ol/source/Cluster
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [distance=20] Distance in pixels within which features will
   * be clustered together.
   * @property {number} [minDistance=0] Minimum distance in pixels between clusters.
   * Will be capped at the configured distance.
   * By default no minimum distance is guaranteed. This config can be used to avoid
   * overlapping icons. As a tradoff, the cluster feature's position will no longer be
   * the center of all its features.
   * @property {function(Feature):Point} [geometryFunction]
   * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an
   * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a
   * feature should not be considered for clustering, the function should return
   * `null`. The default, which works when the underlying source contains point
   * features only, is
   * ```js
   * function(feature) {
   *   return feature.getGeometry();
   * }
   * ```
   * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster
   * calculation point for polygons.
   * @property {function(Point, Array<Feature>):Feature} [createCluster]
   * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array
   * of {@link module:ol/Feature~Feature} included in this cluster. Must return a
   * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:
   * ```js
   * function(point, features) {
   *   return new Feature({
   *     geometry: point,
   *     features: features
   *   });
   * }
   * ```
   * @property {VectorSource} [source=null] Source.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */

  /**
   * @classdesc
   * Layer source to cluster vector data. Works out of the box with point
   * geometries. For other geometry types, or if not all geometries should be
   * considered for clustering, a custom `geometryFunction` can be defined.
   *
   * If the instance is disposed without also disposing the underlying
   * source `setSource(null)` has to be called to remove the listener reference
   * from the wrapped source.
   * @api
   */
  class Cluster extends VectorSource$1 {
    /**
     * @param {Options} options Cluster options.
     */
    constructor(options) {
      super({
        attributions: options.attributions,
        wrapX: options.wrapX,
      });

      /**
       * @type {number|undefined}
       * @protected
       */
      this.resolution = undefined;

      /**
       * @type {number}
       * @protected
       */
      this.distance = options.distance !== undefined ? options.distance : 20;

      /**
       * @type {number}
       * @protected
       */
      this.minDistance = options.minDistance || 0;

      /**
       * @type {number}
       * @protected
       */
      this.interpolationRatio = 0;

      /**
       * @type {Array<Feature>}
       * @protected
       */
      this.features = [];

      /**
       * @param {Feature} feature Feature.
       * @return {Point} Cluster calculation point.
       * @protected
       */
      this.geometryFunction =
        options.geometryFunction ||
        function (feature) {
          const geometry = /** @type {Point} */ (feature.getGeometry());
          assert(geometry.getType() == 'Point', 10); // The default `geometryFunction` can only handle `Point` geometries
          return geometry;
        };

      /**
       * @type {function(Point, Array<Feature>):Feature}
       * @private
       */
      this.createCustomCluster_ = options.createCluster;

      /**
       * @type {VectorSource|null}
       * @protected
       */
      this.source = null;

      /**
       * @private
       */
      this.boundRefresh_ = this.refresh.bind(this);

      this.updateDistance(this.distance, this.minDistance);
      this.setSource(options.source || null);
    }

    /**
     * Remove all features from the source.
     * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.
     * @api
     */
    clear(fast) {
      this.features.length = 0;
      super.clear(fast);
    }

    /**
     * Get the distance in pixels between clusters.
     * @return {number} Distance.
     * @api
     */
    getDistance() {
      return this.distance;
    }

    /**
     * Get a reference to the wrapped source.
     * @return {VectorSource|null} Source.
     * @api
     */
    getSource() {
      return this.source;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {import("../proj/Projection.js").default} projection Projection.
     */
    loadFeatures(extent, resolution, projection) {
      this.source.loadFeatures(extent, resolution, projection);
      if (resolution !== this.resolution) {
        this.resolution = resolution;
        this.refresh();
      }
    }

    /**
     * Set the distance within which features will be clusterd together.
     * @param {number} distance The distance in pixels.
     * @api
     */
    setDistance(distance) {
      this.updateDistance(distance, this.minDistance);
    }

    /**
     * Set the minimum distance between clusters. Will be capped at the
     * configured distance.
     * @param {number} minDistance The minimum distance in pixels.
     * @api
     */
    setMinDistance(minDistance) {
      this.updateDistance(this.distance, minDistance);
    }

    /**
     * The configured minimum distance between clusters.
     * @return {number} The minimum distance in pixels.
     * @api
     */
    getMinDistance() {
      return this.minDistance;
    }

    /**
     * Replace the wrapped source.
     * @param {VectorSource|null} source The new source for this instance.
     * @api
     */
    setSource(source) {
      if (this.source) {
        this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);
      }
      this.source = source;
      if (source) {
        source.addEventListener(EventType.CHANGE, this.boundRefresh_);
      }
      this.refresh();
    }

    /**
     * Handle the source changing.
     */
    refresh() {
      this.clear();
      this.cluster();
      this.addFeatures(this.features);
    }

    /**
     * Update the distances and refresh the source if necessary.
     * @param {number} distance The new distance.
     * @param {number} minDistance The new minimum distance.
     */
    updateDistance(distance, minDistance) {
      const ratio =
        distance === 0 ? 0 : Math.min(minDistance, distance) / distance;
      const changed =
        distance !== this.distance || this.interpolationRatio !== ratio;
      this.distance = distance;
      this.minDistance = minDistance;
      this.interpolationRatio = ratio;
      if (changed) {
        this.refresh();
      }
    }

    /**
     * @protected
     */
    cluster() {
      if (this.resolution === undefined || !this.source) {
        return;
      }
      const extent = createEmpty();
      const mapDistance = this.distance * this.resolution;
      const features = this.source.getFeatures();

      /** @type {Object<string, true>} */
      const clustered = {};

      for (let i = 0, ii = features.length; i < ii; i++) {
        const feature = features[i];
        if (!(getUid(feature) in clustered)) {
          const geometry = this.geometryFunction(feature);
          if (geometry) {
            const coordinates = geometry.getCoordinates();
            createOrUpdateFromCoordinate(coordinates, extent);
            buffer$2(extent, mapDistance, extent);

            const neighbors = this.source
              .getFeaturesInExtent(extent)
              .filter(function (neighbor) {
                const uid = getUid(neighbor);
                if (uid in clustered) {
                  return false;
                }
                clustered[uid] = true;
                return true;
              });
            this.features.push(this.createCluster(neighbors, extent));
          }
        }
      }
    }

    /**
     * @param {Array<Feature>} features Features
     * @param {import("../extent.js").Extent} extent The searched extent for these features.
     * @return {Feature} The cluster feature.
     * @protected
     */
    createCluster(features, extent) {
      const centroid = [0, 0];
      for (let i = features.length - 1; i >= 0; --i) {
        const geometry = this.geometryFunction(features[i]);
        if (geometry) {
          add(centroid, geometry.getCoordinates());
        } else {
          features.splice(i, 1);
        }
      }
      scale$2(centroid, 1 / features.length);
      const searchCenter = getCenter(extent);
      const ratio = this.interpolationRatio;
      const geometry = new Point$1([
        centroid[0] * (1 - ratio) + searchCenter[0] * ratio,
        centroid[1] * (1 - ratio) + searchCenter[1] * ratio,
      ]);
      if (this.createCustomCluster_) {
        return this.createCustomCluster_(geometry, features);
      }
      return new Feature$1({
        geometry,
        features,
      });
    }
  }

  var Cluster$1 = Cluster;

  /**
   * @module ol/source/DataTile
   */

  /**
   * Data tile loading function.  The function is called with z, x, and y tile coordinates and
   * returns {@link import("../DataTile.js").Data data} for a tile or a promise for the same.
   * @typedef {function(number, number, number) : (import("../DataTile.js").Data|Promise<import("../DataTile.js").Data>)} Loader
   */

  /**
   * @typedef {Object} Options
   * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.
   * Returns {@link import("../DataTile.js").Data data} for a tile or a promise for the same.
   * For loaders that generate images, the promise should not resolve until the image is loaded.
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
   * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.
   * This may be different than the rendered pixel size if a `tileGrid` is provided.
   * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.
   * This allows artifacts of rendering at tile edges to be ignored.
   * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.
   * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Tile projection.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {boolean} [opaque=false] Whether the layer is opaque.
   * @property {import("./Source.js").State} [state] The source state.
   * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.
   * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).
   * @property {number} [bandCount=4] Number of bands represented in the data.
   * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,
   * the nearest neighbor is used when resampling.
   */

  /**
   * @classdesc
   * A source for typed array data tiles.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  class DataTileSource extends TileSource$1 {
    /**
     * @param {Options} options DataTile source options.
     */
    constructor(options) {
      const projection =
        options.projection === undefined ? 'EPSG:3857' : options.projection;

      let tileGrid = options.tileGrid;
      if (tileGrid === undefined && projection) {
        tileGrid = createXYZ({
          extent: extentFromProjection(projection),
          maxResolution: options.maxResolution,
          maxZoom: options.maxZoom,
          minZoom: options.minZoom,
          tileSize: options.tileSize,
        });
      }

      super({
        cacheSize: 0.1, // don't cache on the source
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        projection: projection,
        tileGrid: tileGrid,
        opaque: options.opaque,
        state: options.state,
        wrapX: options.wrapX,
        transition: options.transition,
        interpolate: options.interpolate,
      });

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter !== undefined ? options.gutter : 0;

      /**
       * @private
       * @type {import('../size.js').Size|null}
       */
      this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;

      /**
       * @private
       * @type {Array<import('../size.js').Size>|null}
       */
      this.tileSizes_ = null;

      /**
       * @private
       * @type {!Object<string, boolean>}
       */
      this.tileLoadingKeys_ = {};

      /**
       * @private
       */
      this.loader_ = options.loader;

      this.handleTileChange_ = this.handleTileChange_.bind(this);

      /**
       * @type {number}
       */
      this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined

      /**
       * @private
       * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
       */
      this.tileGridForProjection_ = {};

      /**
       * @private
       * @type {!Object<string, import("../TileCache.js").default>}
       */
      this.tileCacheForProjection_ = {};
    }

    /**
     * Set the source tile sizes.  The length of the array is expected to match the number of
     * levels in the tile grid.
     * @protected
     * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.
     */
    setTileSizes(tileSizes) {
      this.tileSizes_ = tileSizes;
    }

    /**
     * Get the source tile size at the given zoom level.  This may be different than the rendered tile
     * size.
     * @protected
     * @param {number} z Tile zoom level.
     * @return {import('../size.js').Size} The source tile size.
     */
    getTileSize(z) {
      if (this.tileSizes_) {
        return this.tileSizes_[z];
      }
      if (this.tileSize_) {
        return this.tileSize_;
      }
      const tileGrid = this.getTileGrid();
      return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {number} Gutter.
     */
    getGutterForProjection(projection) {
      const thisProj = this.getProjection();
      if (!thisProj || equivalent(thisProj, projection)) {
        return this.gutter_;
      }

      return 0;
    }

    /**
     * @param {Loader} loader The data loader.
     * @protected
     */
    setLoader(loader) {
      this.loader_ = loader;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {import("../proj/Projection.js").default} targetProj The output projection.
     * @param {import("../proj/Projection.js").default} sourceProj The input projection.
     * @return {!DataTile} Tile.
     */
    getReprojTile_(z, x, y, targetProj, sourceProj) {
      const cache = this.getTileCacheForProjection(targetProj);
      const tileCoordKey = getKeyZXY(z, x, y);
      if (cache.containsKey(tileCoordKey)) {
        const tile = cache.get(tileCoordKey);
        if (tile && tile.key == this.getKey()) {
          return tile;
        }
      }

      const tileGrid = this.getTileGrid();
      const reprojTilePixelRatio = Math.max.apply(
        null,
        tileGrid.getResolutions().map((r, z) => {
          const tileSize = toSize(tileGrid.getTileSize(z));
          const textureSize = this.getTileSize(z);
          return Math.max(
            textureSize[0] / tileSize[0],
            textureSize[1] / tileSize[1]
          );
        })
      );

      const sourceTileGrid = this.getTileGridForProjection(sourceProj);
      const targetTileGrid = this.getTileGridForProjection(targetProj);
      const tileCoord = [z, x, y];
      const wrappedTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        targetProj
      );

      const options = Object.assign(
        {
          sourceProj,
          sourceTileGrid,
          targetProj,
          targetTileGrid,
          tileCoord,
          wrappedTileCoord,
          pixelRatio: reprojTilePixelRatio,
          gutter: this.getGutterForProjection(sourceProj),
          getTileFunction: (z, x, y, pixelRatio) =>
            this.getTile(z, x, y, pixelRatio, sourceProj),
        },
        this.tileOptions
      );
      const newTile = new ReprojDataTile$1(options);
      newTile.key = this.getKey();
      return newTile;
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!DataTile} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      const sourceProjection = this.getProjection();
      if (
        sourceProjection &&
        projection &&
        !equivalent(sourceProjection, projection)
      ) {
        return this.getReprojTile_(z, x, y, projection, sourceProjection);
      }

      const size = this.getTileSize(z);
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        return this.tileCache.get(tileCoordKey);
      }

      const sourceLoader = this.loader_;

      function loader() {
        return toPromise(function () {
          return sourceLoader(z, x, y);
        });
      }

      const options = Object.assign(
        {
          tileCoord: [z, x, y],
          loader: loader,
          size: size,
        },
        this.tileOptions
      );

      const tile = new DataTile$2(options);
      tile.key = this.getKey();
      tile.addEventListener(EventType.CHANGE, this.handleTileChange_);

      this.tileCache.set(tileCoordKey, tile);
      return tile;
    }

    /**
     * Handle tile change events.
     * @param {import("../events/Event.js").default} event Event.
     */
    handleTileChange_(event) {
      const tile = /** @type {import("../Tile.js").default} */ (event.target);
      const uid = getUid(tile);
      const tileState = tile.getState();
      let type;
      if (tileState == TileState.LOADING) {
        this.tileLoadingKeys_[uid] = true;
        type = TileEventType.TILELOADSTART;
      } else if (uid in this.tileLoadingKeys_) {
        delete this.tileLoadingKeys_[uid];
        type =
          tileState == TileState.ERROR
            ? TileEventType.TILELOADERROR
            : tileState == TileState.LOADED
            ? TileEventType.TILELOADEND
            : undefined;
      }
      if (type) {
        this.dispatchEvent(new TileSourceEvent(type, tile));
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
     */
    getTileGridForProjection(projection) {
      const thisProj = this.getProjection();
      if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
        return this.tileGrid;
      }

      const projKey = getUid(projection);
      if (!(projKey in this.tileGridForProjection_)) {
        this.tileGridForProjection_[projKey] =
          getForProjection(projection);
      }
      return this.tileGridForProjection_[projKey];
    }

    /**
     * Sets the tile grid to use when reprojecting the tiles to the given
     * projection instead of the default tile grid for the projection.
     *
     * This can be useful when the default tile grid cannot be created
     * (e.g. projection has no extent defined) or
     * for optimization reasons (custom tile size, resolutions, ...).
     *
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
     * @api
     */
    setTileGridForProjection(projection, tilegrid) {
      const proj = get$2(projection);
      if (proj) {
        const projKey = getUid(proj);
        if (!(projKey in this.tileGridForProjection_)) {
          this.tileGridForProjection_[projKey] = tilegrid;
        }
      }
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../TileCache.js").default} Tile cache.
     */
    getTileCacheForProjection(projection) {
      const thisProj = this.getProjection();
      if (!thisProj || equivalent(thisProj, projection)) {
        return this.tileCache;
      }

      const projKey = getUid(projection);
      if (!(projKey in this.tileCacheForProjection_)) {
        this.tileCacheForProjection_[projKey] = new TileCache$1(0.1); // don't cache
      }
      return this.tileCacheForProjection_[projKey];
    }

    /**
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {!Object<string, boolean>} usedTiles Used tiles.
     */
    expireCache(projection, usedTiles) {
      const usedTileCache = this.getTileCacheForProjection(projection);

      this.tileCache.expireCache(
        this.tileCache == usedTileCache ? usedTiles : {}
      );
      for (const id in this.tileCacheForProjection_) {
        const tileCache = this.tileCacheForProjection_[id];
        tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
      }
    }

    clear() {
      super.clear();
      for (const id in this.tileCacheForProjection_) {
        this.tileCacheForProjection_[id].clear();
      }
    }
  }

  var DataTile = DataTileSource;

  /* eslint-disable no-restricted-globals, no-restricted-syntax */

  /** @type {<T extends (...args: any) => any>(target: T) => (thisArg: ThisType<T>, ...args: any[]) => any} */
  function uncurryThis(target) {
    return (thisArg, ...args) => {
      return ReflectApply(target, thisArg, args);
    };
  }

  /** @type {(target: any, key: string | symbol) => (thisArg: any, ...args: any[]) => any} */
  function uncurryThisGetter(target, key) {
    return uncurryThis(
      ReflectGetOwnPropertyDescriptor(
        target,
        key
      ).get
    );
  }

  // Reflect
  const {
    apply: ReflectApply,
    construct: ReflectConstruct,
    defineProperty: ReflectDefineProperty,
    get: ReflectGet,
    getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,
    getPrototypeOf: ReflectGetPrototypeOf,
    has: ReflectHas,
    ownKeys: ReflectOwnKeys,
    set: ReflectSet,
    setPrototypeOf: ReflectSetPrototypeOf,
  } = Reflect;

  // Symbol
  const {
    iterator: SymbolIterator,
    species: SymbolSpecies,
    toStringTag: SymbolToStringTag,
    for: SymbolFor,
  } = Symbol;

  // Object
  const NativeObject = Object;
  const {
    create: ObjectCreate,
    defineProperty: ObjectDefineProperty,
    freeze: ObjectFreeze,
    is: ObjectIs,
  } = NativeObject;

  // Array
  const NativeArray = Array;
  const ArrayPrototype = NativeArray.prototype;
  const NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];
  /** @type {<T>(array: T[]) => IterableIterator<T>} */
  const ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);

  // ArrayBuffer
  const NativeArrayBuffer = ArrayBuffer;
  const ArrayBufferPrototype = NativeArrayBuffer.prototype;
  /** @type {(buffer: ArrayBuffer) => ArrayBuffer} */
  uncurryThisGetter(ArrayBufferPrototype, "byteLength");

  // SharedArrayBuffer
  const NativeSharedArrayBuffer = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : null;
  /** @type {(buffer: SharedArrayBuffer) => SharedArrayBuffer} */
  NativeSharedArrayBuffer
    && uncurryThisGetter(NativeSharedArrayBuffer.prototype, "byteLength");

  // TypedArray
  /** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */
  /** @type {any} */
  const TypedArray = ReflectGetPrototypeOf(Uint8Array);
  TypedArray.from;
  const TypedArrayPrototype = TypedArray.prototype;
  TypedArrayPrototype[SymbolIterator];
  /** @type {(typedArray: TypedArray) => IterableIterator<number>} */
  uncurryThis(TypedArrayPrototype.keys);
  /** @type {(typedArray: TypedArray) => IterableIterator<number>} */
  uncurryThis(
    TypedArrayPrototype.values
  );
  /** @type {(typedArray: TypedArray) => IterableIterator<[number, number]>} */
  uncurryThis(
    TypedArrayPrototype.entries
  );
  /** @type {(typedArray: TypedArray, array: ArrayLike<number>, offset?: number) => void} */
  uncurryThis(TypedArrayPrototype.set);
  /** @type {<T extends TypedArray>(typedArray: T) => T} */
  uncurryThis(
    TypedArrayPrototype.reverse
  );
  /** @type {<T extends TypedArray>(typedArray: T, value: number, start?: number, end?: number) => T} */
  uncurryThis(TypedArrayPrototype.fill);
  /** @type {<T extends TypedArray>(typedArray: T, target: number, start: number, end?: number) => T} */
  uncurryThis(
    TypedArrayPrototype.copyWithin
  );
  /** @type {<T extends TypedArray>(typedArray: T, compareFn?: (a: number, b: number) => number) => T} */
  uncurryThis(TypedArrayPrototype.sort);
  /** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */
  uncurryThis(TypedArrayPrototype.slice);
  /** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */
  uncurryThis(
    TypedArrayPrototype.subarray
  );
  /** @type {((typedArray: TypedArray) => ArrayBuffer)} */
  uncurryThisGetter(
    TypedArrayPrototype,
    "buffer"
  );
  /** @type {((typedArray: TypedArray) => number)} */
  uncurryThisGetter(
    TypedArrayPrototype,
    "byteOffset"
  );
  /** @type {((typedArray: TypedArray) => number)} */
  uncurryThisGetter(
    TypedArrayPrototype,
    "length"
  );
  /** @type {(target: unknown) => string} */
  uncurryThisGetter(
    TypedArrayPrototype,
    SymbolToStringTag
  );

  // Uint32Array
  const NativeUint32Array = Uint32Array;

  // Float32Array
  const NativeFloat32Array = Float32Array;

  // ArrayIterator
  /** @type {any} */
  const ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());
  /** @type {<T>(arrayIterator: IterableIterator<T>) => IteratorResult<T>} */
  const ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);

  // Generator
  /** @type {<T = unknown, TReturn = any, TNext = unknown>(generator: Generator<T, TReturn, TNext>, value?: TNext) => T} */
  const GeneratorPrototypeNext = uncurryThis((function* () {})().next);

  // Iterator
  const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);

  // DataView
  const DataViewPrototype = DataView.prototype;
  /** @type {(dataView: DataView, byteOffset: number, littleEndian?: boolean) => number} */
  const DataViewPrototypeGetUint16 = uncurryThis(
    DataViewPrototype.getUint16
  );

  // WeakMap
  /**
   * Do not construct with arguments to avoid calling the "set" method
   *
   * @type {{new <K extends {}, V>(): WeakMap<K, V>}}
   */
  const NativeWeakMap = WeakMap;
  const WeakMapPrototype = NativeWeakMap.prototype;
  /** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => V} */
  const WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);
  /** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K, value: V) => WeakMap} */
  const WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);

  /** @type {WeakMap<{}, IterableIterator<any>>} */
  const arrayIterators = new NativeWeakMap();

  const SafeIteratorPrototype = ObjectCreate(null, {
    next: {
      value: function next() {
        const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);
        return ArrayIteratorPrototypeNext(arrayIterator);
      },
    },

    [SymbolIterator]: {
      value: function values() {
        return this;
      },
    },
  });

  /**
   * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified
   *
   * @type {<T>(array: T[]) => Iterable<T>}
   */
  function safeIfNeeded(array) {
    if (
      array[SymbolIterator] === NativeArrayPrototypeSymbolIterator &&
      ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext
    ) {
      return array;
    }

    const safe = ObjectCreate(SafeIteratorPrototype);
    WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));
    return safe;
  }

  /** @type {WeakMap<{}, Generator<any>>} */
  const generators = new NativeWeakMap();

  /** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */
  const DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {
    next: {
      value: function next() {
        const generator = WeakMapPrototypeGet(generators, this);
        return GeneratorPrototypeNext(generator);
      },
      writable: true,
      configurable: true,
    },
  });

  for (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {
    // next method has already defined
    if (key === "next") {
      continue;
    }

    // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype
    ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));
  }

  // algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf

  const buffer = new NativeArrayBuffer(4);
  const floatView = new NativeFloat32Array(buffer);
  const uint32View = new NativeUint32Array(buffer);

  const baseTable = new NativeUint32Array(512);
  const shiftTable = new NativeUint32Array(512);

  for (let i = 0; i < 256; ++i) {
    const e = i - 127;

    // very small number (0, -0)
    if (e < -27) {
      baseTable[i]         = 0x0000;
      baseTable[i | 0x100] = 0x8000;
      shiftTable[i]         = 24;
      shiftTable[i | 0x100] = 24;

    // small number (denorm)
    } else if (e < -14) {
      baseTable[i]         =  0x0400 >> (-e - 14);
      baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;
      shiftTable[i]         = -e - 1;
      shiftTable[i | 0x100] = -e - 1;

    // normal number
    } else if (e <= 15) {
      baseTable[i]         =  (e + 15) << 10;
      baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;
      shiftTable[i]         = 13;
      shiftTable[i | 0x100] = 13;

    // large number (Infinity, -Infinity)
    } else if (e < 128) {
      baseTable[i]         = 0x7c00;
      baseTable[i | 0x100] = 0xfc00;
      shiftTable[i]         = 24;
      shiftTable[i | 0x100] = 24;

    // stay (NaN, Infinity, -Infinity)
    } else {
      baseTable[i]         = 0x7c00;
      baseTable[i | 0x100] = 0xfc00;
      shiftTable[i]         = 13;
      shiftTable[i | 0x100] = 13;
    }
  }

  const mantissaTable = new NativeUint32Array(2048);
  const exponentTable = new NativeUint32Array(64);
  const offsetTable = new NativeUint32Array(64);

  for (let i = 1; i < 1024; ++i) {
    let m = i << 13;    // zero pad mantissa bits
    let e = 0;          // zero exponent

    // normalized
    while((m & 0x00800000) === 0) {
      m <<= 1;
      e -= 0x00800000;  // decrement exponent
    }

    m &= ~0x00800000;   // clear leading 1 bit
    e += 0x38800000;    // adjust bias

    mantissaTable[i] = m | e;
  }
  for (let i = 1024; i < 2048; ++i) {
    mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);
  }

  for (let i = 1; i < 31; ++i) {
    exponentTable[i] = i << 23;
  }
  exponentTable[31] = 0x47800000;
  exponentTable[32] = 0x80000000;
  for (let i = 33; i < 63; ++i) {
    exponentTable[i] = 0x80000000 + ((i - 32) << 23);
  }
  exponentTable[63] = 0xc7800000;

  for (let i = 1; i < 64; ++i) {
    if (i !== 32) {
      offsetTable[i] = 1024;
    }
  }

  /**
   * convert a half float number bits to a number
   *
   * @param {number} float16bits - half float number bits
   * @returns {number} double float
   */
  function convertToNumber(float16bits) {
    const m = float16bits >> 10;
    uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];
    return floatView[0];
  }

  /**
   * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView
   *
   * @param {DataView} dataView
   * @param {number} byteOffset
   * @param {[boolean]} opts
   * @returns {number}
   */
  function getFloat16(dataView, byteOffset, ...opts) {
    return convertToNumber(
      DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))
    );
  }

  var getAttribute$2 = {exports: {}};

  function getAttribute(tag, attributeName, options) {
    const debug = (options && options.debug) || false;
    if (debug) console.log("getting " + attributeName + " in " + tag);

    const xml = typeof tag === "object" ? tag.outer : tag;

    const pattern = `${attributeName}\\="\([^"]*\)"`;
    if (debug) console.log("pattern:", pattern);

    const re = new RegExp(pattern);
    const match = re.exec(xml);
    if (debug) console.log("match:", match);
    if (match) return match[1];
  }

  getAttribute$2.exports = getAttribute;
  getAttribute$2.exports.default = getAttribute;

  var getAttribute$1 = getAttribute$2.exports;

  var findTagsByName$2 = {exports: {}};

  var findTagByName$2 = {exports: {}};

  var indexOfMatch$2 = {exports: {}};

  function indexOfMatch$1(xml, pattern, startIndex) {
    const re = new RegExp(pattern);
    const match = re.exec(xml.slice(startIndex));
    if (match) return startIndex + match.index;
    else return -1;
  }

  indexOfMatch$2.exports = indexOfMatch$1;
  indexOfMatch$2.exports.default = indexOfMatch$1;

  var indexOfMatchEnd$2 = {exports: {}};

  function indexOfMatchEnd$1(xml, pattern, startIndex) {
    const re = new RegExp(pattern);
    const match = re.exec(xml.slice(startIndex));
    if (match) return startIndex + match.index + match[0].length - 1;
    else return -1;
  }

  indexOfMatchEnd$2.exports = indexOfMatchEnd$1;
  indexOfMatchEnd$2.exports.default = indexOfMatchEnd$1;

  var countSubstring$2 = {exports: {}};

  function countSubstring$1(string, substring) {
    const pattern = new RegExp(substring, "g");
    const match = string.match(pattern);
    return match ? match.length : 0;
  }

  countSubstring$2.exports = countSubstring$1;
  countSubstring$2.exports.default = countSubstring$1;

  const indexOfMatch = indexOfMatch$2.exports;
  const indexOfMatchEnd = indexOfMatchEnd$2.exports;
  const countSubstring = countSubstring$2.exports;

  function findTagByName$1(xml, tagName, options) {
    const debug = (options && options.debug) || false;
    const nested = !(options && typeof options.nested === false);

    const startIndex = (options && options.startIndex) || 0;

    if (debug) console.log("[xml-utils] starting findTagByName with", tagName, " and ", options);

    const start = indexOfMatch(xml, `\<${tagName}[ \>\/]`, startIndex);
    if (debug) console.log("[xml-utils] start:", start);
    if (start === -1) return undefined;

    const afterStart = xml.slice(start + tagName.length);

    let relativeEnd = indexOfMatchEnd(afterStart, "^[^<]*[ /]>", 0);

    const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === "/";
    if (debug) console.log("[xml-utils] selfClosing:", selfClosing);

    if (selfClosing === false) {
      // check if tag has subtags with the same name
      if (nested) {
        let startIndex = 0;
        let openings = 1;
        let closings = 0;
        while ((relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", startIndex)) !== -1) {
          const clip = afterStart.substring(startIndex, relativeEnd + 1);
          openings += countSubstring(clip, "<" + tagName);
          closings += countSubstring(clip, "/" + tagName + ">");
          // we can't have more openings than closings
          if (closings >= openings) break;
          startIndex = relativeEnd;
        }
      } else {
        relativeEnd = indexOfMatchEnd(afterStart, "[ /]" + tagName + ">", 0);
      }
    }

    const end = start + tagName.length + relativeEnd + 1;
    if (debug) console.log("[xml-utils] end:", end);
    if (end === -1) return undefined;

    const outer = xml.slice(start, end);
    // tag is like <gml:identifier codeSpace="OGP">urn:ogc:def:crs:EPSG::32617</gml:identifier>

    let inner;
    if (selfClosing) {
      inner = null;
    } else {
      inner = outer.slice(outer.indexOf(">") + 1, outer.lastIndexOf("<"));
    }

    return { inner, outer, start, end };
  }

  findTagByName$2.exports = findTagByName$1;
  findTagByName$2.exports.default = findTagByName$1;

  const findTagByName = findTagByName$2.exports;

  function findTagsByName(xml, tagName, options) {
    const tags = [];
    const debug = (options && options.debug) || false;
    const nested = options && typeof options.nested === "boolean" ? options.nested : true;
    let startIndex = (options && options.startIndex) || 0;
    let tag;
    while ((tag = findTagByName(xml, tagName, { debug, startIndex }))) {
      if (nested) {
        startIndex = tag.start + 1 + tagName.length;
      } else {
        startIndex = tag.end;
      }
      tags.push(tag);
    }
    if (debug) console.log("findTagsByName found", tags.length, "tags");
    return tags;
  }

  findTagsByName$2.exports = findTagsByName;
  findTagsByName$2.exports.default = findTagsByName;

  var findTagsByName$1 = findTagsByName$2.exports;

  const fieldTagNames = {
    // TIFF Baseline
    0x013B: 'Artist',
    0x0102: 'BitsPerSample',
    0x0109: 'CellLength',
    0x0108: 'CellWidth',
    0x0140: 'ColorMap',
    0x0103: 'Compression',
    0x8298: 'Copyright',
    0x0132: 'DateTime',
    0x0152: 'ExtraSamples',
    0x010A: 'FillOrder',
    0x0121: 'FreeByteCounts',
    0x0120: 'FreeOffsets',
    0x0123: 'GrayResponseCurve',
    0x0122: 'GrayResponseUnit',
    0x013C: 'HostComputer',
    0x010E: 'ImageDescription',
    0x0101: 'ImageLength',
    0x0100: 'ImageWidth',
    0x010F: 'Make',
    0x0119: 'MaxSampleValue',
    0x0118: 'MinSampleValue',
    0x0110: 'Model',
    0x00FE: 'NewSubfileType',
    0x0112: 'Orientation',
    0x0106: 'PhotometricInterpretation',
    0x011C: 'PlanarConfiguration',
    0x0128: 'ResolutionUnit',
    0x0116: 'RowsPerStrip',
    0x0115: 'SamplesPerPixel',
    0x0131: 'Software',
    0x0117: 'StripByteCounts',
    0x0111: 'StripOffsets',
    0x00FF: 'SubfileType',
    0x0107: 'Threshholding',
    0x011A: 'XResolution',
    0x011B: 'YResolution',

    // TIFF Extended
    0x0146: 'BadFaxLines',
    0x0147: 'CleanFaxData',
    0x0157: 'ClipPath',
    0x0148: 'ConsecutiveBadFaxLines',
    0x01B1: 'Decode',
    0x01B2: 'DefaultImageColor',
    0x010D: 'DocumentName',
    0x0150: 'DotRange',
    0x0141: 'HalftoneHints',
    0x015A: 'Indexed',
    0x015B: 'JPEGTables',
    0x011D: 'PageName',
    0x0129: 'PageNumber',
    0x013D: 'Predictor',
    0x013F: 'PrimaryChromaticities',
    0x0214: 'ReferenceBlackWhite',
    0x0153: 'SampleFormat',
    0x0154: 'SMinSampleValue',
    0x0155: 'SMaxSampleValue',
    0x022F: 'StripRowCounts',
    0x014A: 'SubIFDs',
    0x0124: 'T4Options',
    0x0125: 'T6Options',
    0x0145: 'TileByteCounts',
    0x0143: 'TileLength',
    0x0144: 'TileOffsets',
    0x0142: 'TileWidth',
    0x012D: 'TransferFunction',
    0x013E: 'WhitePoint',
    0x0158: 'XClipPathUnits',
    0x011E: 'XPosition',
    0x0211: 'YCbCrCoefficients',
    0x0213: 'YCbCrPositioning',
    0x0212: 'YCbCrSubSampling',
    0x0159: 'YClipPathUnits',
    0x011F: 'YPosition',

    // EXIF
    0x9202: 'ApertureValue',
    0xA001: 'ColorSpace',
    0x9004: 'DateTimeDigitized',
    0x9003: 'DateTimeOriginal',
    0x8769: 'Exif IFD',
    0x9000: 'ExifVersion',
    0x829A: 'ExposureTime',
    0xA300: 'FileSource',
    0x9209: 'Flash',
    0xA000: 'FlashpixVersion',
    0x829D: 'FNumber',
    0xA420: 'ImageUniqueID',
    0x9208: 'LightSource',
    0x927C: 'MakerNote',
    0x9201: 'ShutterSpeedValue',
    0x9286: 'UserComment',

    // IPTC
    0x83BB: 'IPTC',

    // ICC
    0x8773: 'ICC Profile',

    // XMP
    0x02BC: 'XMP',

    // GDAL
    0xA480: 'GDAL_METADATA',
    0xA481: 'GDAL_NODATA',

    // Photoshop
    0x8649: 'Photoshop',

    // GeoTiff
    0x830E: 'ModelPixelScale',
    0x8482: 'ModelTiepoint',
    0x85D8: 'ModelTransformation',
    0x87AF: 'GeoKeyDirectory',
    0x87B0: 'GeoDoubleParams',
    0x87B1: 'GeoAsciiParams',

    // LERC
    0xC5F2: 'LercParameters',
  };

  const fieldTags = {};
  for (const key in fieldTagNames) {
    if (fieldTagNames.hasOwnProperty(key)) {
      fieldTags[fieldTagNames[key]] = parseInt(key, 10);
    }
  }

  const arrayFields = [
    fieldTags.BitsPerSample,
    fieldTags.ExtraSamples,
    fieldTags.SampleFormat,
    fieldTags.StripByteCounts,
    fieldTags.StripOffsets,
    fieldTags.StripRowCounts,
    fieldTags.TileByteCounts,
    fieldTags.TileOffsets,
    fieldTags.SubIFDs,
  ];

  const fieldTypeNames = {
    0x0001: 'BYTE',
    0x0002: 'ASCII',
    0x0003: 'SHORT',
    0x0004: 'LONG',
    0x0005: 'RATIONAL',
    0x0006: 'SBYTE',
    0x0007: 'UNDEFINED',
    0x0008: 'SSHORT',
    0x0009: 'SLONG',
    0x000A: 'SRATIONAL',
    0x000B: 'FLOAT',
    0x000C: 'DOUBLE',
    // IFD offset, suggested by https://owl.phy.queensu.ca/~phil/exiftool/standards.html
    0x000D: 'IFD',
    // introduced by BigTIFF
    0x0010: 'LONG8',
    0x0011: 'SLONG8',
    0x0012: 'IFD8',
  };

  const fieldTypes = {};
  for (const key in fieldTypeNames) {
    if (fieldTypeNames.hasOwnProperty(key)) {
      fieldTypes[fieldTypeNames[key]] = parseInt(key, 10);
    }
  }

  const photometricInterpretations = {
    WhiteIsZero: 0,
    BlackIsZero: 1,
    RGB: 2,
    Palette: 3,
    TransparencyMask: 4,
    CMYK: 5,
    YCbCr: 6,

    CIELab: 8,
    ICCLab: 9,
  };

  const ExtraSamplesValues = {
    Unspecified: 0,
    Assocalpha: 1,
    Unassalpha: 2,
  };

  const LercParameters = {
    Version: 0,
    AddCompression: 1,
  };

  const LercAddCompression = {
    None: 0,
    Deflate: 1,
  };

  const geoKeyNames = {
    1024: 'GTModelTypeGeoKey',
    1025: 'GTRasterTypeGeoKey',
    1026: 'GTCitationGeoKey',
    2048: 'GeographicTypeGeoKey',
    2049: 'GeogCitationGeoKey',
    2050: 'GeogGeodeticDatumGeoKey',
    2051: 'GeogPrimeMeridianGeoKey',
    2052: 'GeogLinearUnitsGeoKey',
    2053: 'GeogLinearUnitSizeGeoKey',
    2054: 'GeogAngularUnitsGeoKey',
    2055: 'GeogAngularUnitSizeGeoKey',
    2056: 'GeogEllipsoidGeoKey',
    2057: 'GeogSemiMajorAxisGeoKey',
    2058: 'GeogSemiMinorAxisGeoKey',
    2059: 'GeogInvFlatteningGeoKey',
    2060: 'GeogAzimuthUnitsGeoKey',
    2061: 'GeogPrimeMeridianLongGeoKey',
    2062: 'GeogTOWGS84GeoKey',
    3072: 'ProjectedCSTypeGeoKey',
    3073: 'PCSCitationGeoKey',
    3074: 'ProjectionGeoKey',
    3075: 'ProjCoordTransGeoKey',
    3076: 'ProjLinearUnitsGeoKey',
    3077: 'ProjLinearUnitSizeGeoKey',
    3078: 'ProjStdParallel1GeoKey',
    3079: 'ProjStdParallel2GeoKey',
    3080: 'ProjNatOriginLongGeoKey',
    3081: 'ProjNatOriginLatGeoKey',
    3082: 'ProjFalseEastingGeoKey',
    3083: 'ProjFalseNorthingGeoKey',
    3084: 'ProjFalseOriginLongGeoKey',
    3085: 'ProjFalseOriginLatGeoKey',
    3086: 'ProjFalseOriginEastingGeoKey',
    3087: 'ProjFalseOriginNorthingGeoKey',
    3088: 'ProjCenterLongGeoKey',
    3089: 'ProjCenterLatGeoKey',
    3090: 'ProjCenterEastingGeoKey',
    3091: 'ProjCenterNorthingGeoKey',
    3092: 'ProjScaleAtNatOriginGeoKey',
    3093: 'ProjScaleAtCenterGeoKey',
    3094: 'ProjAzimuthAngleGeoKey',
    3095: 'ProjStraightVertPoleLongGeoKey',
    3096: 'ProjRectifiedGridAngleGeoKey',
    4096: 'VerticalCSTypeGeoKey',
    4097: 'VerticalCitationGeoKey',
    4098: 'VerticalDatumGeoKey',
    4099: 'VerticalUnitsGeoKey',
  };

  function fromWhiteIsZero(raster, max) {
    const { width, height } = raster;
    const rgbRaster = new Uint8Array(width * height * 3);
    let value;
    for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {
      value = 256 - (raster[i] / max * 256);
      rgbRaster[j] = value;
      rgbRaster[j + 1] = value;
      rgbRaster[j + 2] = value;
    }
    return rgbRaster;
  }

  function fromBlackIsZero(raster, max) {
    const { width, height } = raster;
    const rgbRaster = new Uint8Array(width * height * 3);
    let value;
    for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {
      value = raster[i] / max * 256;
      rgbRaster[j] = value;
      rgbRaster[j + 1] = value;
      rgbRaster[j + 2] = value;
    }
    return rgbRaster;
  }

  function fromPalette(raster, colorMap) {
    const { width, height } = raster;
    const rgbRaster = new Uint8Array(width * height * 3);
    const greenOffset = colorMap.length / 3;
    const blueOffset = colorMap.length / 3 * 2;
    for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {
      const mapIndex = raster[i];
      rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;
      rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;
      rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;
    }
    return rgbRaster;
  }

  function fromCMYK(cmykRaster) {
    const { width, height } = cmykRaster;
    const rgbRaster = new Uint8Array(width * height * 3);
    for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {
      const c = cmykRaster[i];
      const m = cmykRaster[i + 1];
      const y = cmykRaster[i + 2];
      const k = cmykRaster[i + 3];

      rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);
      rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);
      rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);
    }
    return rgbRaster;
  }

  function fromYCbCr(yCbCrRaster) {
    const { width, height } = yCbCrRaster;
    const rgbRaster = new Uint8ClampedArray(width * height * 3);
    for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {
      const y = yCbCrRaster[i];
      const cb = yCbCrRaster[i + 1];
      const cr = yCbCrRaster[i + 2];

      rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));
      rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));
      rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));
    }
    return rgbRaster;
  }

  const Xn = 0.95047;
  const Yn = 1.00000;
  const Zn = 1.08883;

  // from https://github.com/antimatter15/rgb-lab/blob/master/color.js

  function fromCIELab(cieLabRaster) {
    const { width, height } = cieLabRaster;
    const rgbRaster = new Uint8Array(width * height * 3);

    for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {
      const L = cieLabRaster[i + 0];
      const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8
      const b_ = cieLabRaster[i + 2] << 24 >> 24; // same

      let y = (L + 16) / 116;
      let x = (a_ / 500) + y;
      let z = y - (b_ / 200);
      let r;
      let g;
      let b;

      x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);
      y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);
      z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);

      r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
      g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
      b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

      r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;
      g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;
      b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;

      rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;
      rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;
      rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;
    }
    return rgbRaster;
  }

  const registry = new Map();

  function addDecoder(cases, importFn) {
    if (!Array.isArray(cases)) {
      cases = [cases]; // eslint-disable-line no-param-reassign
    }
    cases.forEach((c) => registry.set(c, importFn));
  }

  async function getDecoder(fileDirectory) {
    const importFn = registry.get(fileDirectory.Compression);
    if (!importFn) {
      throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);
    }
    const Decoder = await importFn();
    return new Decoder(fileDirectory);
  }

  // Add default decoders to registry (end-user may override with other implementations)
  addDecoder([undefined, 1], () => Promise.resolve().then(function () { return raw; }).then((m) => m.default));
  addDecoder(5, () => Promise.resolve().then(function () { return lzw; }).then((m) => m.default));
  addDecoder(6, () => {
    throw new Error('old style JPEG compression is not supported.');
  });
  addDecoder(7, () => Promise.resolve().then(function () { return jpeg; }).then((m) => m.default));
  addDecoder([8, 32946], () => Promise.resolve().then(function () { return deflate; }).then((m) => m.default));
  addDecoder(32773, () => Promise.resolve().then(function () { return packbits; }).then((m) => m.default));
  addDecoder(34887, () => Promise.resolve().then(function () { return lerc; }).then((m) => m.default));
  addDecoder(50001, () => Promise.resolve().then(function () { return webimage; }).then((m) => m.default));

  /**
   * @module resample
   */

  function copyNewSize(array, width, height, samplesPerPixel = 1) {
    return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);
  }

  /**
   * Resample the input arrays using nearest neighbor value selection.
   * @param {TypedArray[]} valueArrays The input arrays to resample
   * @param {number} inWidth The width of the input rasters
   * @param {number} inHeight The height of the input rasters
   * @param {number} outWidth The desired width of the output rasters
   * @param {number} outHeight The desired height of the output rasters
   * @returns {TypedArray[]} The resampled rasters
   */
  function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {
    const relX = inWidth / outWidth;
    const relY = inHeight / outHeight;
    return valueArrays.map((array) => {
      const newArray = copyNewSize(array, outWidth, outHeight);
      for (let y = 0; y < outHeight; ++y) {
        const cy = Math.min(Math.round(relY * y), inHeight - 1);
        for (let x = 0; x < outWidth; ++x) {
          const cx = Math.min(Math.round(relX * x), inWidth - 1);
          const value = array[(cy * inWidth) + cx];
          newArray[(y * outWidth) + x] = value;
        }
      }
      return newArray;
    });
  }

  // simple linear interpolation, code from:
  // https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support
  function lerp(v0, v1, t) {
    return ((1 - t) * v0) + (t * v1);
  }

  /**
   * Resample the input arrays using bilinear interpolation.
   * @param {TypedArray[]} valueArrays The input arrays to resample
   * @param {number} inWidth The width of the input rasters
   * @param {number} inHeight The height of the input rasters
   * @param {number} outWidth The desired width of the output rasters
   * @param {number} outHeight The desired height of the output rasters
   * @returns {TypedArray[]} The resampled rasters
   */
  function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {
    const relX = inWidth / outWidth;
    const relY = inHeight / outHeight;

    return valueArrays.map((array) => {
      const newArray = copyNewSize(array, outWidth, outHeight);
      for (let y = 0; y < outHeight; ++y) {
        const rawY = relY * y;

        const yl = Math.floor(rawY);
        const yh = Math.min(Math.ceil(rawY), (inHeight - 1));

        for (let x = 0; x < outWidth; ++x) {
          const rawX = relX * x;
          const tx = rawX % 1;

          const xl = Math.floor(rawX);
          const xh = Math.min(Math.ceil(rawX), (inWidth - 1));

          const ll = array[(yl * inWidth) + xl];
          const hl = array[(yl * inWidth) + xh];
          const lh = array[(yh * inWidth) + xl];
          const hh = array[(yh * inWidth) + xh];

          const value = lerp(
            lerp(ll, hl, tx),
            lerp(lh, hh, tx),
            rawY % 1,
          );
          newArray[(y * outWidth) + x] = value;
        }
      }
      return newArray;
    });
  }

  /**
   * Resample the input arrays using the selected resampling method.
   * @param {TypedArray[]} valueArrays The input arrays to resample
   * @param {number} inWidth The width of the input rasters
   * @param {number} inHeight The height of the input rasters
   * @param {number} outWidth The desired width of the output rasters
   * @param {number} outHeight The desired height of the output rasters
   * @param {string} [method = 'nearest'] The desired resampling method
   * @returns {TypedArray[]} The resampled rasters
   */
  function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {
    switch (method.toLowerCase()) {
      case 'nearest':
        return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);
      case 'bilinear':
      case 'linear':
        return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);
      default:
        throw new Error(`Unsupported resampling method: '${method}'`);
    }
  }

  /**
   * Resample the pixel interleaved input array using nearest neighbor value selection.
   * @param {TypedArray} valueArrays The input arrays to resample
   * @param {number} inWidth The width of the input rasters
   * @param {number} inHeight The height of the input rasters
   * @param {number} outWidth The desired width of the output rasters
   * @param {number} outHeight The desired height of the output rasters
   * @param {number} samples The number of samples per pixel for pixel
   *                         interleaved data
   * @returns {TypedArray} The resampled raster
   */
  function resampleNearestInterleaved(
    valueArray, inWidth, inHeight, outWidth, outHeight, samples) {
    const relX = inWidth / outWidth;
    const relY = inHeight / outHeight;

    const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);
    for (let y = 0; y < outHeight; ++y) {
      const cy = Math.min(Math.round(relY * y), inHeight - 1);
      for (let x = 0; x < outWidth; ++x) {
        const cx = Math.min(Math.round(relX * x), inWidth - 1);
        for (let i = 0; i < samples; ++i) {
          const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];
          newArray[(y * outWidth * samples) + (x * samples) + i] = value;
        }
      }
    }
    return newArray;
  }

  /**
   * Resample the pixel interleaved input array using bilinear interpolation.
   * @param {TypedArray} valueArrays The input arrays to resample
   * @param {number} inWidth The width of the input rasters
   * @param {number} inHeight The height of the input rasters
   * @param {number} outWidth The desired width of the output rasters
   * @param {number} outHeight The desired height of the output rasters
   * @param {number} samples The number of samples per pixel for pixel
   *                         interleaved data
   * @returns {TypedArray} The resampled raster
   */
  function resampleBilinearInterleaved(
    valueArray, inWidth, inHeight, outWidth, outHeight, samples) {
    const relX = inWidth / outWidth;
    const relY = inHeight / outHeight;
    const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);
    for (let y = 0; y < outHeight; ++y) {
      const rawY = relY * y;

      const yl = Math.floor(rawY);
      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));

      for (let x = 0; x < outWidth; ++x) {
        const rawX = relX * x;
        const tx = rawX % 1;

        const xl = Math.floor(rawX);
        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));

        for (let i = 0; i < samples; ++i) {
          const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];
          const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];
          const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];
          const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];

          const value = lerp(
            lerp(ll, hl, tx),
            lerp(lh, hh, tx),
            rawY % 1,
          );
          newArray[(y * outWidth * samples) + (x * samples) + i] = value;
        }
      }
    }
    return newArray;
  }

  /**
   * Resample the pixel interleaved input array using the selected resampling method.
   * @param {TypedArray} valueArray The input array to resample
   * @param {number} inWidth The width of the input rasters
   * @param {number} inHeight The height of the input rasters
   * @param {number} outWidth The desired width of the output rasters
   * @param {number} outHeight The desired height of the output rasters
   * @param {number} samples The number of samples per pixel for pixel
   *                                 interleaved data
   * @param {string} [method = 'nearest'] The desired resampling method
   * @returns {TypedArray} The resampled rasters
   */
  function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {
    switch (method.toLowerCase()) {
      case 'nearest':
        return resampleNearestInterleaved(
          valueArray, inWidth, inHeight, outWidth, outHeight, samples,
        );
      case 'bilinear':
      case 'linear':
        return resampleBilinearInterleaved(
          valueArray, inWidth, inHeight, outWidth, outHeight, samples,
        );
      default:
        throw new Error(`Unsupported resampling method: '${method}'`);
    }
  }

  /** @module geotiffimage */

  /**
   * @typedef {Object} ReadRasterOptions
   * @property {Array<number>} [window=whole window] the subset to read data from in pixels.
   * @property {Array<number>} [bbox=whole image] the subset to read data from in
   *                                           geographical coordinates.
   * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.
   * @property {boolean} [interleave=false] whether the data shall be read
   *                                             in one single array or separate
   *                                             arrays.
   * @property {Pool} [pool=null] The optional decoder pool to use.
   * @property {number} [width] The desired width of the output. When the width is not the
   *                                 same as the images, resampling will be performed.
   * @property {number} [height] The desired height of the output. When the width is not the
   *                                  same as the images, resampling will be performed.
   * @property {string} [resampleMethod='nearest'] The desired resampling method.
   * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                                       to be aborted
   * @property {number|number[]} [fillValue] The value to use for parts of the image
   *                                              outside of the images extent. When multiple
   *                                              samples are requested, an array of fill values
   *                                              can be passed.
   */

  /** @typedef {import("./geotiff.js").TypedArray} TypedArray */
  /** @typedef {import("./geotiff.js").ReadRasterResult} ReadRasterResult */

  function sum(array, start, end) {
    let s = 0;
    for (let i = start; i < end; ++i) {
      s += array[i];
    }
    return s;
  }

  function arrayForType(format, bitsPerSample, size) {
    switch (format) {
      case 1: // unsigned integer data
        if (bitsPerSample <= 8) {
          return new Uint8Array(size);
        } else if (bitsPerSample <= 16) {
          return new Uint16Array(size);
        } else if (bitsPerSample <= 32) {
          return new Uint32Array(size);
        }
        break;
      case 2: // twos complement signed integer data
        if (bitsPerSample === 8) {
          return new Int8Array(size);
        } else if (bitsPerSample === 16) {
          return new Int16Array(size);
        } else if (bitsPerSample === 32) {
          return new Int32Array(size);
        }
        break;
      case 3: // floating point data
        switch (bitsPerSample) {
          case 16:
          case 32:
            return new Float32Array(size);
          case 64:
            return new Float64Array(size);
        }
        break;
    }
    throw Error('Unsupported data format/bitsPerSample');
  }

  function needsNormalization(format, bitsPerSample) {
    if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {
      return false;
    } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {
      return false;
    }
    return true;
  }

  function normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {
    // const inByteArray = new Uint8Array(inBuffer);
    const view = new DataView(inBuffer);
    const outSize = planarConfiguration === 2
      ? tileHeight * tileWidth
      : tileHeight * tileWidth * samplesPerPixel;
    const samplesToTransfer = planarConfiguration === 2
      ? 1 : samplesPerPixel;
    const outArray = arrayForType(format, bitsPerSample, outSize);
    // let pixel = 0;

    const bitMask = parseInt('1'.repeat(bitsPerSample), 2);

    if (format === 1) { // unsigned integer
      // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337
      let pixelBitSkip;
      // let sampleBitOffset = 0;
      if (planarConfiguration === 1) {
        pixelBitSkip = samplesPerPixel * bitsPerSample;
        // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;
      } else {
        pixelBitSkip = bitsPerSample;
      }

      // Bits per line rounds up to next byte boundary.
      let bitsPerLine = tileWidth * pixelBitSkip;
      if ((bitsPerLine & 7) !== 0) {
        bitsPerLine = (bitsPerLine + 7) & (~7);
      }

      for (let y = 0; y < tileHeight; ++y) {
        const lineBitOffset = y * bitsPerLine;
        for (let x = 0; x < tileWidth; ++x) {
          const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);
          for (let i = 0; i < samplesToTransfer; ++i) {
            const bitOffset = pixelBitOffset + (i * bitsPerSample);
            const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;

            const byteOffset = Math.floor(bitOffset / 8);
            const innerBitOffset = bitOffset % 8;
            if (innerBitOffset + bitsPerSample <= 8) {
              outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;
            } else if (innerBitOffset + bitsPerSample <= 16) {
              outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;
            } else if (innerBitOffset + bitsPerSample <= 24) {
              const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));
              outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;
            } else {
              outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;
            }

            // let outWord = 0;
            // for (let bit = 0; bit < bitsPerSample; ++bit) {
            //   if (inByteArray[bitOffset >> 3]
            //     & (0x80 >> (bitOffset & 7))) {
            //     outWord |= (1 << (bitsPerSample - 1 - bit));
            //   }
            //   ++bitOffset;
            // }

            // outArray[outIndex] = outWord;
            // outArray[pixel] = outWord;
            // pixel += 1;
          }
          // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;
        }
      }
    }

    return outArray.buffer;
  }

  /**
   * GeoTIFF sub-file image.
   */
  class GeoTIFFImage {
    /**
     * @constructor
     * @param {Object} fileDirectory The parsed file directory
     * @param {Object} geoKeys The parsed geo-keys
     * @param {DataView} dataView The DataView for the underlying file.
     * @param {Boolean} littleEndian Whether the file is encoded in little or big endian
     * @param {Boolean} cache Whether or not decoded tiles shall be cached
     * @param {import('./source/basesource').BaseSource} source The datasource to read from
     */
    constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {
      this.fileDirectory = fileDirectory;
      this.geoKeys = geoKeys;
      this.dataView = dataView;
      this.littleEndian = littleEndian;
      this.tiles = cache ? {} : null;
      this.isTiled = !fileDirectory.StripOffsets;
      const planarConfiguration = fileDirectory.PlanarConfiguration;
      this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;
      if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {
        throw new Error('Invalid planar configuration.');
      }

      this.source = source;
    }

    /**
     * Returns the associated parsed file directory.
     * @returns {Object} the parsed file directory
     */
    getFileDirectory() {
      return this.fileDirectory;
    }

    /**
     * Returns the associated parsed geo keys.
     * @returns {Object} the parsed geo keys
     */
    getGeoKeys() {
      return this.geoKeys;
    }

    /**
     * Returns the width of the image.
     * @returns {Number} the width of the image
     */
    getWidth() {
      return this.fileDirectory.ImageWidth;
    }

    /**
     * Returns the height of the image.
     * @returns {Number} the height of the image
     */
    getHeight() {
      return this.fileDirectory.ImageLength;
    }

    /**
     * Returns the number of samples per pixel.
     * @returns {Number} the number of samples per pixel
     */
    getSamplesPerPixel() {
      return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'
        ? this.fileDirectory.SamplesPerPixel : 1;
    }

    /**
     * Returns the width of each tile.
     * @returns {Number} the width of each tile
     */
    getTileWidth() {
      return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();
    }

    /**
     * Returns the height of each tile.
     * @returns {Number} the height of each tile
     */
    getTileHeight() {
      if (this.isTiled) {
        return this.fileDirectory.TileLength;
      }
      if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {
        return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());
      }
      return this.getHeight();
    }

    getBlockWidth() {
      return this.getTileWidth();
    }

    getBlockHeight(y) {
      if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {
        return this.getTileHeight();
      } else {
        return this.getHeight() - (y * this.getTileHeight());
      }
    }

    /**
     * Calculates the number of bytes for each pixel across all samples. Only full
     * bytes are supported, an exception is thrown when this is not the case.
     * @returns {Number} the bytes per pixel
     */
    getBytesPerPixel() {
      let bytes = 0;
      for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {
        bytes += this.getSampleByteSize(i);
      }
      return bytes;
    }

    getSampleByteSize(i) {
      if (i >= this.fileDirectory.BitsPerSample.length) {
        throw new RangeError(`Sample index ${i} is out of range.`);
      }
      return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);
    }

    getReaderForSample(sampleIndex) {
      const format = this.fileDirectory.SampleFormat
        ? this.fileDirectory.SampleFormat[sampleIndex] : 1;
      const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];
      switch (format) {
        case 1: // unsigned integer data
          if (bitsPerSample <= 8) {
            return DataView.prototype.getUint8;
          } else if (bitsPerSample <= 16) {
            return DataView.prototype.getUint16;
          } else if (bitsPerSample <= 32) {
            return DataView.prototype.getUint32;
          }
          break;
        case 2: // twos complement signed integer data
          if (bitsPerSample <= 8) {
            return DataView.prototype.getInt8;
          } else if (bitsPerSample <= 16) {
            return DataView.prototype.getInt16;
          } else if (bitsPerSample <= 32) {
            return DataView.prototype.getInt32;
          }
          break;
        case 3:
          switch (bitsPerSample) {
            case 16:
              return function (offset, littleEndian) {
                return getFloat16(this, offset, littleEndian);
              };
            case 32:
              return DataView.prototype.getFloat32;
            case 64:
              return DataView.prototype.getFloat64;
          }
          break;
      }
      throw Error('Unsupported data format/bitsPerSample');
    }

    getSampleFormat(sampleIndex = 0) {
      return this.fileDirectory.SampleFormat
        ? this.fileDirectory.SampleFormat[sampleIndex] : 1;
    }

    getBitsPerSample(sampleIndex = 0) {
      return this.fileDirectory.BitsPerSample[sampleIndex];
    }

    getArrayForSample(sampleIndex, size) {
      const format = this.getSampleFormat(sampleIndex);
      const bitsPerSample = this.getBitsPerSample(sampleIndex);
      return arrayForType(format, bitsPerSample, size);
    }

    /**
     * Returns the decoded strip or tile.
     * @param {Number} x the strip or tile x-offset
     * @param {Number} y the tile y-offset (0 for stripped images)
     * @param {Number} sample the sample to get for separated samples
     * @param {import("./geotiff").Pool|import("./geotiff").BaseDecoder} poolOrDecoder the decoder or decoder pool
     * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
     *                               to be aborted
     * @returns {Promise.<ArrayBuffer>}
     */
    async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {
      const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());
      const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());
      let index;
      const { tiles } = this;
      if (this.planarConfiguration === 1) {
        index = (y * numTilesPerRow) + x;
      } else if (this.planarConfiguration === 2) {
        index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;
      }

      let offset;
      let byteCount;
      if (this.isTiled) {
        offset = this.fileDirectory.TileOffsets[index];
        byteCount = this.fileDirectory.TileByteCounts[index];
      } else {
        offset = this.fileDirectory.StripOffsets[index];
        byteCount = this.fileDirectory.StripByteCounts[index];
      }
      const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];

      let request;
      if (tiles === null || !tiles[index]) {
      // resolve each request by potentially applying array normalization
        request = (async () => {
          let data = await poolOrDecoder.decode(this.fileDirectory, slice);
          const sampleFormat = this.getSampleFormat();
          const bitsPerSample = this.getBitsPerSample();
          if (needsNormalization(sampleFormat, bitsPerSample)) {
            data = normalizeArray(
              data,
              sampleFormat,
              this.planarConfiguration,
              this.getSamplesPerPixel(),
              bitsPerSample,
              this.getTileWidth(),
              this.getBlockHeight(y),
            );
          }
          return data;
        })();

        // set the cache
        if (tiles !== null) {
          tiles[index] = request;
        }
      } else {
        // get from the cache
        request = tiles[index];
      }

      // cache the tile request
      return { x, y, sample, data: await request };
    }

    /**
     * Internal read function.
     * @private
     * @param {Array} imageWindow The image window in pixel coordinates
     * @param {Array} samples The selected samples (0-based indices)
     * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into
     * @param {Boolean} interleave Whether or not to write in an interleaved manner
     * @param {import("./geotiff").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool
     * @param {number} width the width of window to be read into
     * @param {number} height the height of window to be read into
     * @param {number} resampleMethod the resampling method to be used when interpolating
     * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
     *                               to be aborted
     * @returns {Promise<ReadRasterResult>}
     */
    async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,
      height, resampleMethod, signal) {
      const tileWidth = this.getTileWidth();
      const tileHeight = this.getTileHeight();
      const imageWidth = this.getWidth();
      const imageHeight = this.getHeight();

      const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);
      const maxXTile = Math.min(
        Math.ceil(imageWindow[2] / tileWidth),
        Math.ceil(imageWidth / tileWidth),
      );
      const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);
      const maxYTile = Math.min(
        Math.ceil(imageWindow[3] / tileHeight),
        Math.ceil(imageHeight / tileHeight),
      );
      const windowWidth = imageWindow[2] - imageWindow[0];

      let bytesPerPixel = this.getBytesPerPixel();

      const srcSampleOffsets = [];
      const sampleReaders = [];
      for (let i = 0; i < samples.length; ++i) {
        if (this.planarConfiguration === 1) {
          srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);
        } else {
          srcSampleOffsets.push(0);
        }
        sampleReaders.push(this.getReaderForSample(samples[i]));
      }

      const promises = [];
      const { littleEndian } = this;

      for (let yTile = minYTile; yTile < maxYTile; ++yTile) {
        for (let xTile = minXTile; xTile < maxXTile; ++xTile) {
          for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {
            const si = sampleIndex;
            const sample = samples[sampleIndex];
            if (this.planarConfiguration === 2) {
              bytesPerPixel = this.getSampleByteSize(sampleIndex);
            }
            const promise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal).then((tile) => {
              const buffer = tile.data;
              const dataView = new DataView(buffer);
              const blockHeight = this.getBlockHeight(tile.y);
              const firstLine = tile.y * tileHeight;
              const firstCol = tile.x * tileWidth;
              const lastLine = firstLine + blockHeight;
              const lastCol = (tile.x + 1) * tileWidth;
              const reader = sampleReaders[si];

              const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);
              const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);

              for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {
                for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {
                  const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;
                  const value = reader.call(
                    dataView, pixelOffset + srcSampleOffsets[si], littleEndian,
                  );
                  let windowCoordinate;
                  if (interleave) {
                    windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)
                      + ((x + firstCol - imageWindow[0]) * samples.length)
                      + si;
                    valueArrays[windowCoordinate] = value;
                  } else {
                    windowCoordinate = (
                      (y + firstLine - imageWindow[1]) * windowWidth
                    ) + x + firstCol - imageWindow[0];
                    valueArrays[si][windowCoordinate] = value;
                  }
                }
              }
            });
            promises.push(promise);
          }
        }
      }
      await Promise.all(promises);

      if ((width && (imageWindow[2] - imageWindow[0]) !== width)
          || (height && (imageWindow[3] - imageWindow[1]) !== height)) {
        let resampled;
        if (interleave) {
          resampled = resampleInterleaved(
            valueArrays,
            imageWindow[2] - imageWindow[0],
            imageWindow[3] - imageWindow[1],
            width, height,
            samples.length,
            resampleMethod,
          );
        } else {
          resampled = resample(
            valueArrays,
            imageWindow[2] - imageWindow[0],
            imageWindow[3] - imageWindow[1],
            width, height,
            resampleMethod,
          );
        }
        resampled.width = width;
        resampled.height = height;
        return resampled;
      }

      valueArrays.width = width || imageWindow[2] - imageWindow[0];
      valueArrays.height = height || imageWindow[3] - imageWindow[1];

      return valueArrays;
    }

    /**
     * Reads raster data from the image. This function reads all selected samples
     * into separate arrays of the correct type for that sample or into a single
     * combined array when `interleave` is set. When provided, only a subset
     * of the raster is read for each sample.
     *
     * @param {ReadRasterOptions} [options={}] optional parameters
     * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise
     */
    async readRasters({
      window: wnd, samples = [], interleave, pool = null,
      width, height, resampleMethod, fillValue, signal,
    } = {}) {
      const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];

      // check parameters
      if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {
        throw new Error('Invalid subsets');
      }

      const imageWindowWidth = imageWindow[2] - imageWindow[0];
      const imageWindowHeight = imageWindow[3] - imageWindow[1];
      const numPixels = imageWindowWidth * imageWindowHeight;
      const samplesPerPixel = this.getSamplesPerPixel();

      if (!samples || !samples.length) {
        for (let i = 0; i < samplesPerPixel; ++i) {
          samples.push(i);
        }
      } else {
        for (let i = 0; i < samples.length; ++i) {
          if (samples[i] >= samplesPerPixel) {
            return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));
          }
        }
      }
      let valueArrays;
      if (interleave) {
        const format = this.fileDirectory.SampleFormat
          ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;
        const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);
        valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);
        if (fillValue) {
          valueArrays.fill(fillValue);
        }
      } else {
        valueArrays = [];
        for (let i = 0; i < samples.length; ++i) {
          const valueArray = this.getArrayForSample(samples[i], numPixels);
          if (Array.isArray(fillValue) && i < fillValue.length) {
            valueArray.fill(fillValue[i]);
          } else if (fillValue && !Array.isArray(fillValue)) {
            valueArray.fill(fillValue);
          }
          valueArrays.push(valueArray);
        }
      }

      const poolOrDecoder = pool || await getDecoder(this.fileDirectory);

      const result = await this._readRaster(
        imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,
      );
      return result;
    }

    /**
     * Reads raster data from the image as RGB. The result is always an
     * interleaved typed array.
     * Colorspaces other than RGB will be transformed to RGB, color maps expanded.
     * When no other method is applicable, the first sample is used to produce a
     * grayscale image.
     * When provided, only a subset of the raster is read for each sample.
     *
     * @param {Object} [options] optional parameters
     * @param {Array<number>} [options.window] the subset to read data from in pixels.
     * @param {boolean} [options.interleave=true] whether the data shall be read
     *                                             in one single array or separate
     *                                             arrays.
     * @param {import("./geotiff").Pool} [options.pool=null] The optional decoder pool to use.
     * @param {number} [options.width] The desired width of the output. When the width is no the
     *                                 same as the images, resampling will be performed.
     * @param {number} [options.height] The desired height of the output. When the width is no the
     *                                  same as the images, resampling will be performed.
     * @param {string} [options.resampleMethod='nearest'] The desired resampling method.
     * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.
     * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is
     *                                       to be aborted
     * @returns {Promise<ReadRasterResult>} the RGB array as a Promise
     */
    async readRGB({ window, interleave = true, pool = null, width, height,
      resampleMethod, enableAlpha = false, signal } = {}) {
      const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];

      // check parameters
      if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {
        throw new Error('Invalid subsets');
      }

      const pi = this.fileDirectory.PhotometricInterpretation;

      if (pi === photometricInterpretations.RGB) {
        let s = [0, 1, 2];
        if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {
          s = [];
          for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {
            s.push(i);
          }
        }
        return this.readRasters({
          window,
          interleave,
          samples: s,
          pool,
          width,
          height,
          resampleMethod,
          signal,
        });
      }

      let samples;
      switch (pi) {
        case photometricInterpretations.WhiteIsZero:
        case photometricInterpretations.BlackIsZero:
        case photometricInterpretations.Palette:
          samples = [0];
          break;
        case photometricInterpretations.CMYK:
          samples = [0, 1, 2, 3];
          break;
        case photometricInterpretations.YCbCr:
        case photometricInterpretations.CIELab:
          samples = [0, 1, 2];
          break;
        default:
          throw new Error('Invalid or unsupported photometric interpretation.');
      }

      const subOptions = {
        window: imageWindow,
        interleave: true,
        samples,
        pool,
        width,
        height,
        resampleMethod,
        signal,
      };
      const { fileDirectory } = this;
      const raster = await this.readRasters(subOptions);

      const max = 2 ** this.fileDirectory.BitsPerSample[0];
      let data;
      switch (pi) {
        case photometricInterpretations.WhiteIsZero:
          data = fromWhiteIsZero(raster, max);
          break;
        case photometricInterpretations.BlackIsZero:
          data = fromBlackIsZero(raster, max);
          break;
        case photometricInterpretations.Palette:
          data = fromPalette(raster, fileDirectory.ColorMap);
          break;
        case photometricInterpretations.CMYK:
          data = fromCMYK(raster);
          break;
        case photometricInterpretations.YCbCr:
          data = fromYCbCr(raster);
          break;
        case photometricInterpretations.CIELab:
          data = fromCIELab(raster);
          break;
        default:
          throw new Error('Unsupported photometric interpretation.');
      }

      // if non-interleaved data is requested, we must split the channels
      // into their respective arrays
      if (!interleave) {
        const red = new Uint8Array(data.length / 3);
        const green = new Uint8Array(data.length / 3);
        const blue = new Uint8Array(data.length / 3);
        for (let i = 0, j = 0; i < data.length; i += 3, ++j) {
          red[j] = data[i];
          green[j] = data[i + 1];
          blue[j] = data[i + 2];
        }
        data = [red, green, blue];
      }

      data.width = raster.width;
      data.height = raster.height;
      return data;
    }

    /**
     * Returns an array of tiepoints.
     * @returns {Object[]}
     */
    getTiePoints() {
      if (!this.fileDirectory.ModelTiepoint) {
        return [];
      }

      const tiePoints = [];
      for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {
        tiePoints.push({
          i: this.fileDirectory.ModelTiepoint[i],
          j: this.fileDirectory.ModelTiepoint[i + 1],
          k: this.fileDirectory.ModelTiepoint[i + 2],
          x: this.fileDirectory.ModelTiepoint[i + 3],
          y: this.fileDirectory.ModelTiepoint[i + 4],
          z: this.fileDirectory.ModelTiepoint[i + 5],
        });
      }
      return tiePoints;
    }

    /**
     * Returns the parsed GDAL metadata items.
     *
     * If sample is passed to null, dataset-level metadata will be returned.
     * Otherwise only metadata specific to the provided sample will be returned.
     *
     * @param {number} [sample=null] The sample index.
     * @returns {Object}
     */
    getGDALMetadata(sample = null) {
      const metadata = {};
      if (!this.fileDirectory.GDAL_METADATA) {
        return null;
      }
      const string = this.fileDirectory.GDAL_METADATA;

      let items = findTagsByName$1(string, 'Item');

      if (sample === null) {
        items = items.filter((item) => getAttribute$1(item, 'sample') === undefined);
      } else {
        items = items.filter((item) => Number(getAttribute$1(item, 'sample')) === sample);
      }

      for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        metadata[getAttribute$1(item, 'name')] = item.inner;
      }
      return metadata;
    }

    /**
     * Returns the GDAL nodata value
     * @returns {number|null}
     */
    getGDALNoData() {
      if (!this.fileDirectory.GDAL_NODATA) {
        return null;
      }
      const string = this.fileDirectory.GDAL_NODATA;
      return Number(string.substring(0, string.length - 1));
    }

    /**
     * Returns the image origin as a XYZ-vector. When the image has no affine
     * transformation, then an exception is thrown.
     * @returns {Array<number>} The origin as a vector
     */
    getOrigin() {
      const tiePoints = this.fileDirectory.ModelTiepoint;
      const modelTransformation = this.fileDirectory.ModelTransformation;
      if (tiePoints && tiePoints.length === 6) {
        return [
          tiePoints[3],
          tiePoints[4],
          tiePoints[5],
        ];
      }
      if (modelTransformation) {
        return [
          modelTransformation[3],
          modelTransformation[7],
          modelTransformation[11],
        ];
      }
      throw new Error('The image does not have an affine transformation.');
    }

    /**
     * Returns the image resolution as a XYZ-vector. When the image has no affine
     * transformation, then an exception is thrown.
     * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from
     *                                             in cases when the current image does not have the
     *                                             required tags on its own.
     * @returns {Array<number>} The resolution as a vector
     */
    getResolution(referenceImage = null) {
      const modelPixelScale = this.fileDirectory.ModelPixelScale;
      const modelTransformation = this.fileDirectory.ModelTransformation;

      if (modelPixelScale) {
        return [
          modelPixelScale[0],
          -modelPixelScale[1],
          modelPixelScale[2],
        ];
      }
      if (modelTransformation) {
        return [
          modelTransformation[0],
          modelTransformation[5],
          modelTransformation[10],
        ];
      }

      if (referenceImage) {
        const [refResX, refResY, refResZ] = referenceImage.getResolution();
        return [
          refResX * referenceImage.getWidth() / this.getWidth(),
          refResY * referenceImage.getHeight() / this.getHeight(),
          refResZ * referenceImage.getWidth() / this.getWidth(),
        ];
      }

      throw new Error('The image does not have an affine transformation.');
    }

    /**
     * Returns whether or not the pixels of the image depict an area (or point).
     * @returns {Boolean} Whether the pixels are a point
     */
    pixelIsArea() {
      return this.geoKeys.GTRasterTypeGeoKey === 1;
    }

    /**
     * Returns the image bounding box as an array of 4 values: min-x, min-y,
     * max-x and max-y. When the image has no affine transformation, then an
     * exception is thrown.
     * @returns {Array<number>} The bounding box
     */
    getBoundingBox() {
      const origin = this.getOrigin();
      const resolution = this.getResolution();

      const x1 = origin[0];
      const y1 = origin[1];

      const x2 = x1 + (resolution[0] * this.getWidth());
      const y2 = y1 + (resolution[1] * this.getHeight());

      return [
        Math.min(x1, x2),
        Math.min(y1, y2),
        Math.max(x1, x2),
        Math.max(y1, y2),
      ];
    }
  }

  var GeoTIFFImage$1 = GeoTIFFImage;

  class DataView64 {
    constructor(arrayBuffer) {
      this._dataView = new DataView(arrayBuffer);
    }

    get buffer() {
      return this._dataView.buffer;
    }

    getUint64(offset, littleEndian) {
      const left = this.getUint32(offset, littleEndian);
      const right = this.getUint32(offset + 4, littleEndian);
      let combined;
      if (littleEndian) {
        combined = left + ((2 ** 32) * right);
        if (!Number.isSafeInteger(combined)) {
          throw new Error(
            `${combined} exceeds MAX_SAFE_INTEGER. `
            + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',
          );
        }
        return combined;
      }
      combined = ((2 ** 32) * left) + right;
      if (!Number.isSafeInteger(combined)) {
        throw new Error(
          `${combined} exceeds MAX_SAFE_INTEGER. `
          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',
        );
      }

      return combined;
    }

    // adapted from https://stackoverflow.com/a/55338384/8060591
    getInt64(offset, littleEndian) {
      let value = 0;
      const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;
      let carrying = true;
      for (let i = 0; i < 8; i++) {
        let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));
        if (isNegative) {
          if (carrying) {
            if (byte !== 0x00) {
              byte = ~(byte - 1) & 0xff;
              carrying = false;
            }
          } else {
            byte = ~byte & 0xff;
          }
        }
        value += byte * (256 ** i);
      }
      if (isNegative) {
        value = -value;
      }
      return value;
    }

    getUint8(offset, littleEndian) {
      return this._dataView.getUint8(offset, littleEndian);
    }

    getInt8(offset, littleEndian) {
      return this._dataView.getInt8(offset, littleEndian);
    }

    getUint16(offset, littleEndian) {
      return this._dataView.getUint16(offset, littleEndian);
    }

    getInt16(offset, littleEndian) {
      return this._dataView.getInt16(offset, littleEndian);
    }

    getUint32(offset, littleEndian) {
      return this._dataView.getUint32(offset, littleEndian);
    }

    getInt32(offset, littleEndian) {
      return this._dataView.getInt32(offset, littleEndian);
    }

    getFloat16(offset, littleEndian) {
      return getFloat16(this._dataView, offset, littleEndian);
    }

    getFloat32(offset, littleEndian) {
      return this._dataView.getFloat32(offset, littleEndian);
    }

    getFloat64(offset, littleEndian) {
      return this._dataView.getFloat64(offset, littleEndian);
    }
  }

  class DataSlice {
    constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {
      this._dataView = new DataView(arrayBuffer);
      this._sliceOffset = sliceOffset;
      this._littleEndian = littleEndian;
      this._bigTiff = bigTiff;
    }

    get sliceOffset() {
      return this._sliceOffset;
    }

    get sliceTop() {
      return this._sliceOffset + this.buffer.byteLength;
    }

    get littleEndian() {
      return this._littleEndian;
    }

    get bigTiff() {
      return this._bigTiff;
    }

    get buffer() {
      return this._dataView.buffer;
    }

    covers(offset, length) {
      return this.sliceOffset <= offset && this.sliceTop >= offset + length;
    }

    readUint8(offset) {
      return this._dataView.getUint8(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readInt8(offset) {
      return this._dataView.getInt8(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readUint16(offset) {
      return this._dataView.getUint16(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readInt16(offset) {
      return this._dataView.getInt16(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readUint32(offset) {
      return this._dataView.getUint32(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readInt32(offset) {
      return this._dataView.getInt32(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readFloat32(offset) {
      return this._dataView.getFloat32(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readFloat64(offset) {
      return this._dataView.getFloat64(
        offset - this._sliceOffset, this._littleEndian,
      );
    }

    readUint64(offset) {
      const left = this.readUint32(offset);
      const right = this.readUint32(offset + 4);
      let combined;
      if (this._littleEndian) {
        combined = left + ((2 ** 32) * right);
        if (!Number.isSafeInteger(combined)) {
          throw new Error(
            `${combined} exceeds MAX_SAFE_INTEGER. `
            + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',
          );
        }
        return combined;
      }
      combined = ((2 ** 32) * left) + right;
      if (!Number.isSafeInteger(combined)) {
        throw new Error(
          `${combined} exceeds MAX_SAFE_INTEGER. `
          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',
        );
      }

      return combined;
    }

    // adapted from https://stackoverflow.com/a/55338384/8060591
    readInt64(offset) {
      let value = 0;
      const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)
        > 0;
      let carrying = true;
      for (let i = 0; i < 8; i++) {
        let byte = this._dataView.getUint8(
          offset + (this._littleEndian ? i : 7 - i),
        );
        if (isNegative) {
          if (carrying) {
            if (byte !== 0x00) {
              byte = ~(byte - 1) & 0xff;
              carrying = false;
            }
          } else {
            byte = ~byte & 0xff;
          }
        }
        value += byte * (256 ** i);
      }
      if (isNegative) {
        value = -value;
      }
      return value;
    }

    readOffset(offset) {
      if (this._bigTiff) {
        return this.readUint64(offset);
      }
      return this.readUint32(offset);
    }
  }

  const defaultPoolSize = typeof navigator !== 'undefined' ? (navigator.hardwareConcurrency || 2) : 2;

  /**
   * @module pool
   */

  /**
   * Pool for workers to decode chunks of the images.
   */
  class Pool {
    /**
     * @constructor
     * @param {Number} [size] The size of the pool. Defaults to the number of CPUs
     *                      available. When this parameter is `null` or 0, then the
     *                      decoding will be done in the main thread.
     * @param {function(): Worker} [createWorker] A function that creates the decoder worker.
     * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`
     * function is expected to return a `Worker` compatible with Web Workers. For code that
     * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.
     *
     * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:
     * ```js
     * import { addDecoder, getDecoder } from 'geotiff';
     * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));
     * self.addEventListener('message', async (e) => {
     *   const { id, fileDirectory, buffer } = e.data;
     *   const decoder = await getDecoder(fileDirectory);
     *   const decoded = await decoder.decode(fileDirectory, buffer);
     *   self.postMessage({ decoded, id }, [decoded]);
     * });
     * ```
     * The way the above code is built into a worker by the `createWorker()` function
     * depends on the used bundler. For most bundlers, something like this will work:
     * ```js
     * function createWorker() {
     *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));
     * }
     * ```
     */
    constructor(size = defaultPoolSize, createWorker) {
      this.workers = null;
      this._awaitingDecoder = null;
      this.size = size;
      this.messageId = 0;
      if (size) {
        this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise((resolve) => {
          Promise.resolve().then(function () { return decoder; }).then((module) => {
            resolve(module.create);
          });
        });
        this._awaitingDecoder.then((create) => {
          this._awaitingDecoder = null;
          this.workers = [];
          for (let i = 0; i < size; i++) {
            this.workers.push({ worker: create(), idle: true });
          }
        });
      }
    }

    /**
     * Decode the given block of bytes with the set compression method.
     * @param {ArrayBuffer} buffer the array buffer of bytes to decode.
     * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`
     */
    async decode(fileDirectory, buffer) {
      if (this._awaitingDecoder) {
        await this._awaitingDecoder;
      }
      return this.size === 0
        ? getDecoder(fileDirectory).then((decoder) => decoder.decode(fileDirectory, buffer))
        : new Promise((resolve) => {
          const worker = this.workers.find((candidate) => candidate.idle)
            || this.workers[Math.floor(Math.random() * this.size)];
          worker.idle = false;
          const id = this.messageId++;
          const onMessage = (e) => {
            if (e.data.id === id) {
              worker.idle = true;
              resolve(e.data.decoded);
              worker.worker.removeEventListener('message', onMessage);
            }
          };
          worker.worker.addEventListener('message', onMessage);
          worker.worker.postMessage({ fileDirectory, buffer, id }, [buffer]);
        });
    }

    destroy() {
      if (this.workers) {
        this.workers.forEach((worker) => {
          worker.worker.terminate();
        });
        this.workers = null;
      }
    }
  }

  var Pool$1 = Pool;

  const CRLFCRLF = '\r\n\r\n';

  /*
   * Shim for 'Object.fromEntries'
   */
  function itemsToObject(items) {
    if (typeof Object.fromEntries !== 'undefined') {
      return Object.fromEntries(items);
    }
    const obj = {};
    for (const [key, value] of items) {
      obj[key.toLowerCase()] = value;
    }
    return obj;
  }

  /**
   * Parse HTTP headers from a given string.
   * @param {String} text the text to parse the headers from
   * @returns {Object} the parsed headers with lowercase keys
   */
  function parseHeaders(text) {
    const items = text
      .split('\r\n')
      .map((line) => {
        const kv = line.split(':').map((str) => str.trim());
        kv[0] = kv[0].toLowerCase();
        return kv;
      });

    return itemsToObject(items);
  }

  /**
   * Parse a 'Content-Type' header value to the content-type and parameters
   * @param {String} rawContentType the raw string to parse from
   * @returns {Object} the parsed content type with the fields: type and params
   */
  function parseContentType(rawContentType) {
    const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());
    const paramsItems = rawParams.map((param) => param.split('='));
    return { type, params: itemsToObject(paramsItems) };
  }

  /**
   * Parse a 'Content-Range' header value to its start, end, and total parts
   * @param {String} rawContentRange the raw string to parse from
   * @returns {Object} the parsed parts
   */
  function parseContentRange(rawContentRange) {
    let start;
    let end;
    let total;

    if (rawContentRange) {
      [, start, end, total] = rawContentRange.match(/bytes (\d+)-(\d+)\/(\d+)/);
      start = parseInt(start, 10);
      end = parseInt(end, 10);
      total = parseInt(total, 10);
    }

    return { start, end, total };
  }

  /**
   * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.
   * Each item in the list has the following properties:
   * - headers: the HTTP headers
   * - data: the sliced ArrayBuffer for that specific part
   * - offset: the offset of the byterange within its originating file
   * - length: the length of the byterange
   * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split
   * @param {String} boundary the boundary string used to split the sections
   * @returns {Object[]} the parsed byteranges
   */
  function parseByteRanges(responseArrayBuffer, boundary) {
    let offset = null;
    const decoder = new TextDecoder('ascii');
    const out = [];

    const startBoundary = `--${boundary}`;
    const endBoundary = `${startBoundary}--`;

    // search for the initial boundary, may be offset by some bytes
    // TODO: more efficient to check for `--` in bytes directly
    for (let i = 0; i < 10; ++i) {
      const text = decoder.decode(
        new Uint8Array(responseArrayBuffer, i, startBoundary.length),
      );
      if (text === startBoundary) {
        offset = i;
      }
    }

    if (offset === null) {
      throw new Error('Could not find initial boundary');
    }

    while (offset < responseArrayBuffer.byteLength) {
      const text = decoder.decode(
        new Uint8Array(responseArrayBuffer, offset,
          Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),
        ),
      );

      // break if we arrived at the end
      if (text.length === 0 || text.startsWith(endBoundary)) {
        break;
      }

      // assert that we are actually dealing with a byterange and are at the correct offset
      if (!text.startsWith(startBoundary)) {
        throw new Error('Part does not start with boundary');
      }

      // get a substring from where we read the headers
      const innerText = text.substr(startBoundary.length + 2);

      if (innerText.length === 0) {
        break;
      }

      // find the double linebreak that denotes the end of the headers
      const endOfHeaders = innerText.indexOf(CRLFCRLF);

      // parse the headers to get the content range size
      const headers = parseHeaders(innerText.substr(0, endOfHeaders));
      const { start, end, total } = parseContentRange(headers['content-range']);

      // calculate the length of the slice and the next offset
      const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;
      const length = parseInt(end, 10) + 1 - parseInt(start, 10);
      out.push({
        headers,
        data: responseArrayBuffer.slice(startOfData, startOfData + length),
        offset: start,
        length,
        fileSize: total,
      });

      offset = startOfData + length + 4;
    }

    return out;
  }

  /**
   * @typedef Slice
   * @property {number} offset
   * @property {number} length
   */

  class BaseSource {
    /**
     *
     * @param {Slice[]} slices
     * @returns {ArrayBuffer[]}
     */
    async fetch(slices, signal = undefined) {
      return Promise.all(
        slices.map((slice) => this.fetchSlice(slice, signal)),
      );
    }

    /**
     *
     * @param {Slice} slice
     * @returns {ArrayBuffer}
     */
    async fetchSlice(slice) {
      throw new Error(`fetching of slice ${slice} not possible, not implemented`);
    }

    /**
     * Returns the filesize if already determined and null otherwise
     */
    get fileSize() {
      return null;
    }

    async close() {
      // no-op by default
    }
  }

  class QuickLRU extends Map {
  	constructor(options = {}) {
  		super();

  		if (!(options.maxSize && options.maxSize > 0)) {
  			throw new TypeError('`maxSize` must be a number greater than 0');
  		}

  		if (typeof options.maxAge === 'number' && options.maxAge === 0) {
  			throw new TypeError('`maxAge` must be a number greater than 0');
  		}

  		// TODO: Use private class fields when ESLint supports them.
  		this.maxSize = options.maxSize;
  		this.maxAge = options.maxAge || Number.POSITIVE_INFINITY;
  		this.onEviction = options.onEviction;
  		this.cache = new Map();
  		this.oldCache = new Map();
  		this._size = 0;
  	}

  	// TODO: Use private class methods when targeting Node.js 16.
  	_emitEvictions(cache) {
  		if (typeof this.onEviction !== 'function') {
  			return;
  		}

  		for (const [key, item] of cache) {
  			this.onEviction(key, item.value);
  		}
  	}

  	_deleteIfExpired(key, item) {
  		if (typeof item.expiry === 'number' && item.expiry <= Date.now()) {
  			if (typeof this.onEviction === 'function') {
  				this.onEviction(key, item.value);
  			}

  			return this.delete(key);
  		}

  		return false;
  	}

  	_getOrDeleteIfExpired(key, item) {
  		const deleted = this._deleteIfExpired(key, item);
  		if (deleted === false) {
  			return item.value;
  		}
  	}

  	_getItemValue(key, item) {
  		return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;
  	}

  	_peek(key, cache) {
  		const item = cache.get(key);

  		return this._getItemValue(key, item);
  	}

  	_set(key, value) {
  		this.cache.set(key, value);
  		this._size++;

  		if (this._size >= this.maxSize) {
  			this._size = 0;
  			this._emitEvictions(this.oldCache);
  			this.oldCache = this.cache;
  			this.cache = new Map();
  		}
  	}

  	_moveToRecent(key, item) {
  		this.oldCache.delete(key);
  		this._set(key, item);
  	}

  	* _entriesAscending() {
  		for (const item of this.oldCache) {
  			const [key, value] = item;
  			if (!this.cache.has(key)) {
  				const deleted = this._deleteIfExpired(key, value);
  				if (deleted === false) {
  					yield item;
  				}
  			}
  		}

  		for (const item of this.cache) {
  			const [key, value] = item;
  			const deleted = this._deleteIfExpired(key, value);
  			if (deleted === false) {
  				yield item;
  			}
  		}
  	}

  	get(key) {
  		if (this.cache.has(key)) {
  			const item = this.cache.get(key);

  			return this._getItemValue(key, item);
  		}

  		if (this.oldCache.has(key)) {
  			const item = this.oldCache.get(key);
  			if (this._deleteIfExpired(key, item) === false) {
  				this._moveToRecent(key, item);
  				return item.value;
  			}
  		}
  	}

  	set(key, value, {maxAge = this.maxAge} = {}) {
  		const expiry =
  			typeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY ?
  				Date.now() + maxAge :
  				undefined;
  		if (this.cache.has(key)) {
  			this.cache.set(key, {
  				value,
  				expiry
  			});
  		} else {
  			this._set(key, {value, expiry});
  		}
  	}

  	has(key) {
  		if (this.cache.has(key)) {
  			return !this._deleteIfExpired(key, this.cache.get(key));
  		}

  		if (this.oldCache.has(key)) {
  			return !this._deleteIfExpired(key, this.oldCache.get(key));
  		}

  		return false;
  	}

  	peek(key) {
  		if (this.cache.has(key)) {
  			return this._peek(key, this.cache);
  		}

  		if (this.oldCache.has(key)) {
  			return this._peek(key, this.oldCache);
  		}
  	}

  	delete(key) {
  		const deleted = this.cache.delete(key);
  		if (deleted) {
  			this._size--;
  		}

  		return this.oldCache.delete(key) || deleted;
  	}

  	clear() {
  		this.cache.clear();
  		this.oldCache.clear();
  		this._size = 0;
  	}

  	resize(newSize) {
  		if (!(newSize && newSize > 0)) {
  			throw new TypeError('`maxSize` must be a number greater than 0');
  		}

  		const items = [...this._entriesAscending()];
  		const removeCount = items.length - newSize;
  		if (removeCount < 0) {
  			this.cache = new Map(items);
  			this.oldCache = new Map();
  			this._size = items.length;
  		} else {
  			if (removeCount > 0) {
  				this._emitEvictions(items.slice(0, removeCount));
  			}

  			this.oldCache = new Map(items.slice(removeCount));
  			this.cache = new Map();
  			this._size = 0;
  		}

  		this.maxSize = newSize;
  	}

  	* keys() {
  		for (const [key] of this) {
  			yield key;
  		}
  	}

  	* values() {
  		for (const [, value] of this) {
  			yield value;
  		}
  	}

  	* [Symbol.iterator]() {
  		for (const item of this.cache) {
  			const [key, value] = item;
  			const deleted = this._deleteIfExpired(key, value);
  			if (deleted === false) {
  				yield [key, value.value];
  			}
  		}

  		for (const item of this.oldCache) {
  			const [key, value] = item;
  			if (!this.cache.has(key)) {
  				const deleted = this._deleteIfExpired(key, value);
  				if (deleted === false) {
  					yield [key, value.value];
  				}
  			}
  		}
  	}

  	* entriesDescending() {
  		let items = [...this.cache];
  		for (let i = items.length - 1; i >= 0; --i) {
  			const item = items[i];
  			const [key, value] = item;
  			const deleted = this._deleteIfExpired(key, value);
  			if (deleted === false) {
  				yield [key, value.value];
  			}
  		}

  		items = [...this.oldCache];
  		for (let i = items.length - 1; i >= 0; --i) {
  			const item = items[i];
  			const [key, value] = item;
  			if (!this.cache.has(key)) {
  				const deleted = this._deleteIfExpired(key, value);
  				if (deleted === false) {
  					yield [key, value.value];
  				}
  			}
  		}
  	}

  	* entriesAscending() {
  		for (const [key, value] of this._entriesAscending()) {
  			yield [key, value.value];
  		}
  	}

  	get size() {
  		if (!this._size) {
  			return this.oldCache.size;
  		}

  		let oldCacheSize = 0;
  		for (const key of this.oldCache.keys()) {
  			if (!this.cache.has(key)) {
  				oldCacheSize++;
  			}
  		}

  		return Math.min(this._size + oldCacheSize, this.maxSize);
  	}

  	entries() {
  		return this.entriesAscending();
  	}

  	forEach(callbackFunction, thisArgument = this) {
  		for (const [key, value] of this.entriesAscending()) {
  			callbackFunction.call(thisArgument, value, key, this);
  		}
  	}

  	get [Symbol.toStringTag]() {
  		return JSON.stringify([...this.entriesAscending()]);
  	}
  }

  /*
   * Promisified wrapper around 'setTimeout' to allow 'await'
   */
  async function wait(milliseconds) {
    return new Promise((resolve) => setTimeout(resolve, milliseconds));
  }

  function zip(a, b) {
    const A = Array.isArray(a) ? a : Array.from(a);
    const B = Array.isArray(b) ? b : Array.from(b);
    return A.map((k, i) => [k, B[i]]);
  }

  // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
  class AbortError extends Error {
    constructor(params) {
      // Pass remaining arguments (including vendor specific ones) to parent constructor
      super(params);

      // Maintains proper stack trace for where our error was thrown (only available on V8)
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, AbortError);
      }

      this.name = 'AbortError';
    }
  }

  class CustomAggregateError extends Error {
    constructor(errors, message) {
      super(message);
      this.errors = errors;
      this.message = message;
      this.name = 'AggregateError';
    }
  }

  const AggregateError = CustomAggregateError;

  class Block {
    /**
     *
     * @param {number} offset
     * @param {number} length
     * @param {ArrayBuffer} [data]
     */
    constructor(offset, length, data = null) {
      this.offset = offset;
      this.length = length;
      this.data = data;
    }

    /**
     * @returns {number} the top byte border
     */
    get top() {
      return this.offset + this.length;
    }
  }

  class BlockGroup {
    /**
     *
     * @param {number} offset
     * @param {number} length
     * @param {number[]} blockIds
     */
    constructor(offset, length, blockIds) {
      this.offset = offset;
      this.length = length;
      this.blockIds = blockIds;
    }
  }

  class BlockedSource extends BaseSource {
    /**
     *
     * @param {BaseSource} source The underlying source that shall be blocked and cached
     * @param {object} options
     * @param {number} [options.blockSize]
     * @param {number} [options.cacheSize]
     */
    constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {
      super();
      this.source = source;
      this.blockSize = blockSize;

      this.blockCache = new QuickLRU({
        maxSize: cacheSize,
        onEviction: (blockId, block) => {
          this.evictedBlocks.set(blockId, block);
        },
      });

      /** @type {Map<number, Block>} */
      this.evictedBlocks = new Map();

      // mapping blockId -> Block instance
      this.blockRequests = new Map();

      // set of blockIds missing for the current requests
      this.blockIdsToFetch = new Set();

      this.abortedBlockIds = new Set();
    }

    get fileSize() {
      return this.source.fileSize;
    }

    /**
     *
     * @param {import("./basesource").Slice[]} slices
     */
    async fetch(slices, signal) {
      const blockRequests = [];
      const missingBlockIds = [];
      const allBlockIds = [];
      this.evictedBlocks.clear();

      for (const { offset, length } of slices) {
        let top = offset + length;

        const { fileSize } = this;
        if (fileSize !== null) {
          top = Math.min(top, fileSize);
        }

        const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;

        for (let current = firstBlockOffset; current < top; current += this.blockSize) {
          const blockId = Math.floor(current / this.blockSize);
          if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {
            this.blockIdsToFetch.add(blockId);
            missingBlockIds.push(blockId);
          }
          if (this.blockRequests.has(blockId)) {
            blockRequests.push(this.blockRequests.get(blockId));
          }
          allBlockIds.push(blockId);
        }
      }

      // allow additional block requests to accumulate
      await wait();
      this.fetchBlocks(signal);

      // Gather all of the new requests that this fetch call is contributing to `fetch`.
      const missingRequests = [];
      for (const blockId of missingBlockIds) {
        // The requested missing block could already be in the cache
        // instead of having its request still be outstanding.
        if (this.blockRequests.has(blockId)) {
          missingRequests.push(this.blockRequests.get(blockId));
        }
      }

      // Actually await all pending requests that are needed for this `fetch`.
      await Promise.allSettled(blockRequests);
      await Promise.allSettled(missingRequests);

      // Perform retries if a block was interrupted by a previous signal
      const abortedBlockRequests = [];
      const abortedBlockIds = allBlockIds
        .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));
      abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));
      // start the retry of some blocks if required
      if (abortedBlockIds.length > 0 && signal && !signal.aborted) {
        this.fetchBlocks(null);
        for (const blockId of abortedBlockIds) {
          const block = this.blockRequests.get(blockId);
          if (!block) {
            throw new Error(`Block ${blockId} is not in the block requests`);
          }
          abortedBlockRequests.push(block);
        }
        await Promise.allSettled(abortedBlockRequests);
      }

      // throw an  abort error
      if (signal && signal.aborted) {
        throw new AbortError('Request was aborted');
      }

      const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));
      const failedBlocks = blocks.filter((i) => !i);
      if (failedBlocks.length) {
        throw new AggregateError(failedBlocks, 'Request failed');
      }

      // create a final Map, with all required blocks for this request to satisfy
      const requiredBlocks = new Map(zip(allBlockIds, blocks));

      // TODO: satisfy each slice
      return this.readSliceData(slices, requiredBlocks);
    }

    /**
     *
     * @param {AbortSignal} signal
     */
    fetchBlocks(signal) {
      // check if we still need to
      if (this.blockIdsToFetch.size > 0) {
        const groups = this.groupBlocks(this.blockIdsToFetch);

        // start requesting slices of data
        const groupRequests = this.source.fetch(groups, signal);

        for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {
          const group = groups[groupIndex];

          for (const blockId of group.blockIds) {
            // make an async IIFE for each block
            this.blockRequests.set(blockId, (async () => {
              try {
                const response = (await groupRequests)[groupIndex];
                const blockOffset = blockId * this.blockSize;
                const o = blockOffset - response.offset;
                const t = Math.min(o + this.blockSize, response.data.byteLength);
                const data = response.data.slice(o, t);
                const block = new Block(
                  blockOffset,
                  data.byteLength,
                  data,
                  blockId,
                );
                this.blockCache.set(blockId, block);
                this.abortedBlockIds.delete(blockId);
              } catch (err) {
                if (err.name === 'AbortError') {
                  // store the signal here, we need it to determine later if an
                  // error was caused by this signal
                  err.signal = signal;
                  this.blockCache.delete(blockId);
                  this.abortedBlockIds.add(blockId);
                } else {
                  throw err;
                }
              } finally {
                this.blockRequests.delete(blockId);
              }
            })());
          }
        }
        this.blockIdsToFetch.clear();
      }
    }

    /**
     *
     * @param {Set} blockIds
     * @returns {BlockGroup[]}
     */
    groupBlocks(blockIds) {
      const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);
      if (sortedBlockIds.length === 0) {
        return [];
      }
      let current = [];
      let lastBlockId = null;
      const groups = [];

      for (const blockId of sortedBlockIds) {
        if (lastBlockId === null || lastBlockId + 1 === blockId) {
          current.push(blockId);
          lastBlockId = blockId;
        } else {
          groups.push(new BlockGroup(
            current[0] * this.blockSize,
            current.length * this.blockSize,
            current,
          ));
          current = [blockId];
          lastBlockId = blockId;
        }
      }

      groups.push(new BlockGroup(
        current[0] * this.blockSize,
        current.length * this.blockSize,
        current,
      ));

      return groups;
    }

    /**
     *
     * @param {import("./basesource").Slice[]} slices
     * @param {Map} blocks
     */
    readSliceData(slices, blocks) {
      return slices.map((slice) => {
        let top = slice.offset + slice.length;
        if (this.fileSize !== null) {
          top = Math.min(this.fileSize, top);
        }
        const blockIdLow = Math.floor(slice.offset / this.blockSize);
        const blockIdHigh = Math.floor(top / this.blockSize);
        const sliceData = new ArrayBuffer(slice.length);
        const sliceView = new Uint8Array(sliceData);

        for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {
          const block = blocks.get(blockId);
          const delta = block.offset - slice.offset;
          const topDelta = block.top - top;
          let blockInnerOffset = 0;
          let rangeInnerOffset = 0;
          let usedBlockLength;

          if (delta < 0) {
            blockInnerOffset = -delta;
          } else if (delta > 0) {
            rangeInnerOffset = delta;
          }

          if (topDelta < 0) {
            usedBlockLength = block.length - blockInnerOffset;
          } else {
            usedBlockLength = top - block.offset - blockInnerOffset;
          }

          const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);
          sliceView.set(blockView, rangeInnerOffset);
        }

        return sliceData;
      });
    }
  }

  class BaseResponse {
    /**
     * Returns whether the response has an ok'ish status code
     */
    get ok() {
      return this.status >= 200 && this.status <= 299;
    }

    /**
     * Returns the status code of the response
     */
    get status() {
      throw new Error('not implemented');
    }

    /**
     * Returns the value of the specified header
     * @param {string} headerName the header name
     * @returns {string} the header value
     */
    getHeader(headerName) { // eslint-disable-line no-unused-vars
      throw new Error('not implemented');
    }

    /**
     * @returns {ArrayBuffer} the response data of the request
     */
    async getData() {
      throw new Error('not implemented');
    }
  }

  class BaseClient {
    constructor(url) {
      this.url = url;
    }

    /**
     * Send a request with the options
     * @param {object} [options]
     */
    async request({ headers, credentials, signal } = {}) { // eslint-disable-line no-unused-vars
      throw new Error('request is not implemented');
    }
  }

  class FetchResponse extends BaseResponse {
    /**
     * BaseResponse facade for fetch API Response
     * @param {Response} response
     */
    constructor(response) {
      super();
      this.response = response;
    }

    get status() {
      return this.response.status;
    }

    getHeader(name) {
      return this.response.headers.get(name);
    }

    async getData() {
      const data = this.response.arrayBuffer
        ? await this.response.arrayBuffer()
        : (await this.response.buffer()).buffer;
      return data;
    }
  }

  class FetchClient extends BaseClient {
    constructor(url, credentials) {
      super(url);
      this.credentials = credentials;
    }

    async request({ headers, credentials, signal } = {}) {
      const response = await fetch(this.url, {
        headers, credentials, signal,
      });
      return new FetchResponse(response);
    }
  }

  class XHRResponse extends BaseResponse {
    /**
     * BaseResponse facade for XMLHttpRequest
     * @param {XMLHttpRequest} xhr
     * @param {ArrayBuffer} data
     */
    constructor(xhr, data) {
      super();
      this.xhr = xhr;
      this.data = data;
    }

    get status() {
      return this.xhr.status;
    }

    getHeader(name) {
      return this.xhr.getResponseHeader(name);
    }

    async getData() {
      return this.data;
    }
  }

  class XHRClient extends BaseClient {
    constructRequest(headers, signal) {
      return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open('GET', this.url);
        xhr.responseType = 'arraybuffer';
        for (const [key, value] of Object.entries(headers)) {
          xhr.setRequestHeader(key, value);
        }

        // hook signals
        xhr.onload = () => {
          const data = xhr.response;
          resolve(new XHRResponse(xhr, data));
        };
        xhr.onerror = reject;
        xhr.onabort = () => reject(new AbortError('Request aborted'));
        xhr.send();

        if (signal) {
          if (signal.aborted) {
            xhr.abort();
          }
          signal.addEventListener('abort', () => xhr.abort());
        }
      });
    }

    async request({ headers, signal } = {}) {
      const response = await this.constructRequest(headers, signal);
      return response;
    }
  }

  var fs = {};

  class HttpResponse extends BaseResponse {
    /**
     * BaseResponse facade for node HTTP/HTTPS API Response
     * @param {http.ServerResponse} response
     */
    constructor(response, dataPromise) {
      super();
      this.response = response;
      this.dataPromise = dataPromise;
    }

    get status() {
      return this.response.statusCode;
    }

    getHeader(name) {
      return this.response.headers[name];
    }

    async getData() {
      const data = await this.dataPromise;
      return data;
    }
  }

  class HttpClient extends BaseClient {
    constructor(url) {
      super(url);
      this.parsedUrl = fs.parse(this.url);
      this.httpApi = (this.parsedUrl.protocol === 'http:' ? fs : fs);
    }

    constructRequest(headers, signal) {
      return new Promise((resolve, reject) => {
        const request = this.httpApi.get(
          {
            ...this.parsedUrl,
            headers,
          },
          (response) => {
            const dataPromise = new Promise((resolveData) => {
              const chunks = [];

              // collect chunks
              response.on('data', (chunk) => {
                chunks.push(chunk);
              });

              // concatenate all chunks and resolve the promise with the resulting buffer
              response.on('end', () => {
                const data = Buffer.concat(chunks).buffer;
                resolveData(data);
              });
              response.on('error', reject);
            });
            resolve(new HttpResponse(response, dataPromise));
          },
        );
        request.on('error', reject);

        if (signal) {
          if (signal.aborted) {
            request.destroy(new AbortError('Request aborted'));
          }
          signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));
        }
      });
    }

    async request({ headers, signal } = {}) {
      const response = await this.constructRequest(headers, signal);
      return response;
    }
  }

  class RemoteSource extends BaseSource {
    /**
     *
     * @param {BaseClient} client
     * @param {object} headers
     * @param {numbers} maxRanges
     * @param {boolean} allowFullFile
     */
    constructor(client, headers, maxRanges, allowFullFile) {
      super();
      this.client = client;
      this.headers = headers;
      this.maxRanges = maxRanges;
      this.allowFullFile = allowFullFile;
      this._fileSize = null;
    }

    /**
     *
     * @param {Slice[]} slices
     */
    async fetch(slices, signal) {
      // if we allow multi-ranges, split the incoming request into that many sub-requests
      // and join them afterwards
      if (this.maxRanges >= slices.length) {
        return this.fetchSlices(slices, signal);
      } else if (this.maxRanges > 0 && slices.length > 1) ;

      // otherwise make a single request for each slice
      return Promise.all(
        slices.map((slice) => this.fetchSlice(slice, signal)),
      );
    }

    async fetchSlices(slices, signal) {
      const response = await this.client.request({
        headers: {
          ...this.headers,
          Range: `bytes=${slices
          .map(({ offset, length }) => `${offset}-${offset + length}`)
          .join(',')
        }`,
        },
        signal,
      });

      if (!response.ok) {
        throw new Error('Error fetching data.');
      } else if (response.status === 206) {
        const { type, params } = parseContentType(response.getHeader('content-type'));
        if (type === 'multipart/byteranges') {
          const byteRanges = parseByteRanges(await response.getData(), params.boundary);
          this._fileSize = byteRanges[0].fileSize || null;
          return byteRanges;
        }

        const data = await response.getData();

        const { start, end, total } = parseContentRange(response.getHeader('content-range'));
        this._fileSize = total || null;
        const first = [{
          data,
          offset: start,
          length: end - start,
        }];

        if (slices.length > 1) {
          // we requested more than one slice, but got only the first
          // unfortunately, some HTTP Servers don't support multi-ranges
          // and return only the first

          // get the rest of the slices and fetch them iteratively
          const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));
          return first.concat(others);
        }
        return first;
      } else {
        if (!this.allowFullFile) {
          throw new Error('Server responded with full file');
        }
        const data = await response.getData();
        this._fileSize = data.byteLength;
        return [{
          data,
          offset: 0,
          length: data.byteLength,
        }];
      }
    }

    async fetchSlice(slice, signal) {
      const { offset, length } = slice;
      const response = await this.client.request({
        headers: {
          ...this.headers,
          Range: `bytes=${offset}-${offset + length}`,
        },
        signal,
      });

      // check the response was okay and if the server actually understands range requests
      if (!response.ok) {
        throw new Error('Error fetching data.');
      } else if (response.status === 206) {
        const data = await response.getData();

        const { total } = parseContentRange(response.getHeader('content-range'));
        this._fileSize = total || null;
        return {
          data,
          offset,
          length,
        };
      } else {
        if (!this.allowFullFile) {
          throw new Error('Server responded with full file');
        }

        const data = await response.getData();

        this._fileSize = data.byteLength;
        return {
          data,
          offset: 0,
          length: data.byteLength,
        };
      }
    }

    get fileSize() {
      return this._fileSize;
    }
  }

  function maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {
    if (blockSize === null) {
      return source;
    }
    return new BlockedSource(source, { blockSize, cacheSize });
  }

  function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
    const client = new FetchClient(url, credentials);
    const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
    return maybeWrapInBlockedSource(source, blockOptions);
  }

  function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
    const client = new XHRClient(url);
    const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
    return maybeWrapInBlockedSource(source, blockOptions);
  }

  function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {
    const client = new HttpClient(url);
    const source = new RemoteSource(client, headers, maxRanges, allowFullFile);
    return maybeWrapInBlockedSource(source, blockOptions);
  }

  /**
   *
   * @param {string} url
   * @param {object} options
   */
  function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {
    if (typeof fetch === 'function' && !forceXHR) {
      return makeFetchSource(url, clientOptions);
    }
    if (typeof XMLHttpRequest !== 'undefined') {
      return makeXHRSource(url, clientOptions);
    }
    return makeHttpSource(url, clientOptions);
  }

  class FileReaderSource extends BaseSource {
    constructor(file) {
      super();
      this.file = file;
    }

    async fetchSlice(slice, signal) {
      return new Promise((resolve, reject) => {
        const blob = this.file.slice(slice.offset, slice.offset + slice.length);
        const reader = new FileReader();
        reader.onload = (event) => resolve(event.target.result);
        reader.onerror = reject;
        reader.onabort = reject;
        reader.readAsArrayBuffer(blob);

        if (signal) {
          signal.addEventListener('abort', () => reader.abort());
        }
      });
    }
  }

  /**
   * Create a new source from a given file/blob.
   * @param {Blob} file The file or blob to read from.
   * @returns The constructed source
   */
  function makeFileReaderSource(file) {
    return new FileReaderSource(file);
  }

  function decodeRowAcc(row, stride) {
    let length = row.length - stride;
    let offset = 0;
    do {
      for (let i = stride; i > 0; i--) {
        row[offset + stride] += row[offset];
        offset++;
      }

      length -= stride;
    } while (length > 0);
  }

  function decodeRowFloatingPoint(row, stride, bytesPerSample) {
    let index = 0;
    let count = row.length;
    const wc = count / bytesPerSample;

    while (count > stride) {
      for (let i = stride; i > 0; --i) {
        row[index + stride] += row[index];
        ++index;
      }
      count -= stride;
    }

    const copy = row.slice();
    for (let i = 0; i < wc; ++i) {
      for (let b = 0; b < bytesPerSample; ++b) {
        row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];
      }
    }
  }

  function applyPredictor(block, predictor, width, height, bitsPerSample,
    planarConfiguration) {
    if (!predictor || predictor === 1) {
      return block;
    }

    for (let i = 0; i < bitsPerSample.length; ++i) {
      if (bitsPerSample[i] % 8 !== 0) {
        throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');
      }
      if (bitsPerSample[i] !== bitsPerSample[0]) {
        throw new Error('When decoding with predictor, all samples must have the same size.');
      }
    }

    const bytesPerSample = bitsPerSample[0] / 8;
    const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;

    for (let i = 0; i < height; ++i) {
      // Last strip will be truncated if height % stripHeight != 0
      if (i * stride * width * bytesPerSample >= block.byteLength) {
        break;
      }
      let row;
      if (predictor === 2) { // horizontal prediction
        switch (bitsPerSample[0]) {
          case 8:
            row = new Uint8Array(
              block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,
            );
            break;
          case 16:
            row = new Uint16Array(
              block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,
            );
            break;
          case 32:
            row = new Uint32Array(
              block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,
            );
            break;
          default:
            throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);
        }
        decodeRowAcc(row, stride);
      } else if (predictor === 3) { // horizontal floating point
        row = new Uint8Array(
          block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,
        );
        decodeRowFloatingPoint(row, stride, bytesPerSample);
      }
    }
    return block;
  }

  class BaseDecoder {
    async decode(fileDirectory, buffer) {
      const decoded = await this.decodeBlock(buffer);
      const predictor = fileDirectory.Predictor || 1;
      if (predictor !== 1) {
        const isTiled = !fileDirectory.StripOffsets;
        const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;
        const tileHeight = isTiled ? fileDirectory.TileLength : (
          fileDirectory.RowsPerStrip || fileDirectory.ImageLength
        );
        return applyPredictor(
          decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,
          fileDirectory.PlanarConfiguration,
        );
      }
      return decoded;
    }
  }

  /** @module geotiff */

  /**
   * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}
   * TypedArray
   */

  /**
   * @typedef {{ height:number, width: number }} Dimensions
   */

  /**
   * The autogenerated docs are a little confusing here. The effective type is:
   *
   * `TypedArray & { height: number; width: number}`
   * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions
   */

  /**
   * The autogenerated docs are a little confusing here. The effective type is:
   *
   * `TypedArray[] & { height: number; width: number}`
   * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions
   */

  /**
   *  The autogenerated docs are a little confusing here. The effective type is:
   *
   * `(TypedArray | TypedArray[]) & { height: number; width: number}`
   * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult
   */

  function getFieldTypeLength(fieldType) {
    switch (fieldType) {
      case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:
        return 1;
      case fieldTypes.SHORT: case fieldTypes.SSHORT:
        return 2;
      case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:
        return 4;
      case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:
      case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:
        return 8;
      default:
        throw new RangeError(`Invalid field type: ${fieldType}`);
    }
  }

  function parseGeoKeyDirectory(fileDirectory) {
    const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;
    if (!rawGeoKeyDirectory) {
      return null;
    }

    const geoKeyDirectory = {};
    for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {
      const key = geoKeyNames[rawGeoKeyDirectory[i]];
      const location = (rawGeoKeyDirectory[i + 1])
        ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;
      const count = rawGeoKeyDirectory[i + 2];
      const offset = rawGeoKeyDirectory[i + 3];

      let value = null;
      if (!location) {
        value = offset;
      } else {
        value = fileDirectory[location];
        if (typeof value === 'undefined' || value === null) {
          throw new Error(`Could not get value of geoKey '${key}'.`);
        } else if (typeof value === 'string') {
          value = value.substring(offset, offset + count - 1);
        } else if (value.subarray) {
          value = value.subarray(offset, offset + count);
          if (count === 1) {
            value = value[0];
          }
        }
      }
      geoKeyDirectory[key] = value;
    }
    return geoKeyDirectory;
  }

  function getValues(dataSlice, fieldType, count, offset) {
    let values = null;
    let readMethod = null;
    const fieldTypeLength = getFieldTypeLength(fieldType);

    switch (fieldType) {
      case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:
        values = new Uint8Array(count); readMethod = dataSlice.readUint8;
        break;
      case fieldTypes.SBYTE:
        values = new Int8Array(count); readMethod = dataSlice.readInt8;
        break;
      case fieldTypes.SHORT:
        values = new Uint16Array(count); readMethod = dataSlice.readUint16;
        break;
      case fieldTypes.SSHORT:
        values = new Int16Array(count); readMethod = dataSlice.readInt16;
        break;
      case fieldTypes.LONG: case fieldTypes.IFD:
        values = new Uint32Array(count); readMethod = dataSlice.readUint32;
        break;
      case fieldTypes.SLONG:
        values = new Int32Array(count); readMethod = dataSlice.readInt32;
        break;
      case fieldTypes.LONG8: case fieldTypes.IFD8:
        values = new Array(count); readMethod = dataSlice.readUint64;
        break;
      case fieldTypes.SLONG8:
        values = new Array(count); readMethod = dataSlice.readInt64;
        break;
      case fieldTypes.RATIONAL:
        values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;
        break;
      case fieldTypes.SRATIONAL:
        values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;
        break;
      case fieldTypes.FLOAT:
        values = new Float32Array(count); readMethod = dataSlice.readFloat32;
        break;
      case fieldTypes.DOUBLE:
        values = new Float64Array(count); readMethod = dataSlice.readFloat64;
        break;
      default:
        throw new RangeError(`Invalid field type: ${fieldType}`);
    }

    // normal fields
    if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {
      for (let i = 0; i < count; ++i) {
        values[i] = readMethod.call(
          dataSlice, offset + (i * fieldTypeLength),
        );
      }
    } else { // RATIONAL or SRATIONAL
      for (let i = 0; i < count; i += 2) {
        values[i] = readMethod.call(
          dataSlice, offset + (i * fieldTypeLength),
        );
        values[i + 1] = readMethod.call(
          dataSlice, offset + ((i * fieldTypeLength) + 4),
        );
      }
    }

    if (fieldType === fieldTypes.ASCII) {
      return new TextDecoder('utf-8').decode(values);
    }
    return values;
  }

  /**
   * Data class to store the parsed file directory, geo key directory and
   * offset to the next IFD
   */
  class ImageFileDirectory {
    constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {
      this.fileDirectory = fileDirectory;
      this.geoKeyDirectory = geoKeyDirectory;
      this.nextIFDByteOffset = nextIFDByteOffset;
    }
  }

  /**
   * Error class for cases when an IFD index was requested, that does not exist
   * in the file.
   */
  class GeoTIFFImageIndexError extends Error {
    constructor(index) {
      super(`No image at index ${index}`);
      this.index = index;
    }
  }

  class GeoTIFFBase {
    /**
     * (experimental) Reads raster data from the best fitting image. This function uses
     * the image with the lowest resolution that is still a higher resolution than the
     * requested resolution.
     * When specified, the `bbox` option is translated to the `window` option and the
     * `resX` and `resY` to `width` and `height` respectively.
     * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected
     * image is called and the result returned.
     * @see GeoTIFFImage.readRasters
     * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters
     * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise
     */
    async readRasters(options = {}) {
      const { window: imageWindow, width, height } = options;
      let { resX, resY, bbox } = options;

      const firstImage = await this.getImage();
      let usedImage = firstImage;
      const imageCount = await this.getImageCount();
      const imgBBox = firstImage.getBoundingBox();

      if (imageWindow && bbox) {
        throw new Error('Both "bbox" and "window" passed.');
      }

      // if width/height is passed, transform it to resolution
      if (width || height) {
        // if we have an image window (pixel coordinates), transform it to a BBox
        // using the origin/resolution of the first image.
        if (imageWindow) {
          const [oX, oY] = firstImage.getOrigin();
          const [rX, rY] = firstImage.getResolution();

          bbox = [
            oX + (imageWindow[0] * rX),
            oY + (imageWindow[1] * rY),
            oX + (imageWindow[2] * rX),
            oY + (imageWindow[3] * rY),
          ];
        }

        // if we have a bbox (or calculated one)

        const usedBBox = bbox || imgBBox;

        if (width) {
          if (resX) {
            throw new Error('Both width and resX passed');
          }
          resX = (usedBBox[2] - usedBBox[0]) / width;
        }
        if (height) {
          if (resY) {
            throw new Error('Both width and resY passed');
          }
          resY = (usedBBox[3] - usedBBox[1]) / height;
        }
      }

      // if resolution is set or calculated, try to get the image with the worst acceptable resolution
      if (resX || resY) {
        const allImages = [];
        for (let i = 0; i < imageCount; ++i) {
          const image = await this.getImage(i);
          const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;
          if (i === 0 || subfileType === 2 || newSubfileType & 1) {
            allImages.push(image);
          }
        }

        allImages.sort((a, b) => a.getWidth() - b.getWidth());
        for (let i = 0; i < allImages.length; ++i) {
          const image = allImages[i];
          const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();
          const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();

          usedImage = image;
          if ((resX && resX > imgResX) || (resY && resY > imgResY)) {
            break;
          }
        }
      }

      let wnd = imageWindow;
      if (bbox) {
        const [oX, oY] = firstImage.getOrigin();
        const [imageResX, imageResY] = usedImage.getResolution(firstImage);

        wnd = [
          Math.round((bbox[0] - oX) / imageResX),
          Math.round((bbox[1] - oY) / imageResY),
          Math.round((bbox[2] - oX) / imageResX),
          Math.round((bbox[3] - oY) / imageResY),
        ];
        wnd = [
          Math.min(wnd[0], wnd[2]),
          Math.min(wnd[1], wnd[3]),
          Math.max(wnd[0], wnd[2]),
          Math.max(wnd[1], wnd[3]),
        ];
      }

      return usedImage.readRasters({ ...options, window: wnd });
    }
  }

  /**
   * @typedef {Object} GeoTIFFOptions
   * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.
   */

  /**
   * The abstraction for a whole GeoTIFF file.
   * @augments GeoTIFFBase
   */
  class GeoTIFF extends GeoTIFFBase {
    /**
     * @constructor
     * @param {*} source The datasource to read from.
     * @param {boolean} littleEndian Whether the image uses little endian.
     * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.
     * @param {number} firstIFDOffset The numeric byte-offset from the start of the image
     *                                to the first IFD.
     * @param {GeoTIFFOptions} [options] further options.
     */
    constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {
      super();
      this.source = source;
      this.littleEndian = littleEndian;
      this.bigTiff = bigTiff;
      this.firstIFDOffset = firstIFDOffset;
      this.cache = options.cache || false;
      this.ifdRequests = [];
      this.ghostValues = null;
    }

    async getSlice(offset, size) {
      const fallbackSize = this.bigTiff ? 4048 : 1024;
      return new DataSlice(
        (await this.source.fetch([{
          offset,
          length: typeof size !== 'undefined' ? size : fallbackSize,
        }]))[0],
        offset,
        this.littleEndian,
        this.bigTiff,
      );
    }

    /**
     * Instructs to parse an image file directory at the given file offset.
     * As there is no way to ensure that a location is indeed the start of an IFD,
     * this function must be called with caution (e.g only using the IFD offsets from
     * the headers or other IFDs).
     * @param {number} offset the offset to parse the IFD at
     * @returns {Promise<ImageFileDirectory>} the parsed IFD
     */
    async parseFileDirectoryAt(offset) {
      const entrySize = this.bigTiff ? 20 : 12;
      const offsetSize = this.bigTiff ? 8 : 2;

      let dataSlice = await this.getSlice(offset);
      const numDirEntries = this.bigTiff
        ? dataSlice.readUint64(offset)
        : dataSlice.readUint16(offset);

      // if the slice does not cover the whole IFD, request a bigger slice, where the
      // whole IFD fits: num of entries + n x tag length + offset to next IFD
      const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);
      if (!dataSlice.covers(offset, byteSize)) {
        dataSlice = await this.getSlice(offset, byteSize);
      }

      const fileDirectory = {};

      // loop over the IFD and create a file directory object
      let i = offset + (this.bigTiff ? 8 : 2);
      for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {
        const fieldTag = dataSlice.readUint16(i);
        const fieldType = dataSlice.readUint16(i + 2);
        const typeCount = this.bigTiff
          ? dataSlice.readUint64(i + 4)
          : dataSlice.readUint32(i + 4);

        let fieldValues;
        let value;
        const fieldTypeLength = getFieldTypeLength(fieldType);
        const valueOffset = i + (this.bigTiff ? 12 : 8);

        // check whether the value is directly encoded in the tag or refers to a
        // different external byte range
        if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {
          fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);
        } else {
          // resolve the reference to the actual byte range
          const actualOffset = dataSlice.readOffset(valueOffset);
          const length = getFieldTypeLength(fieldType) * typeCount;

          // check, whether we actually cover the referenced byte range; if not,
          // request a new slice of bytes to read from it
          if (dataSlice.covers(actualOffset, length)) {
            fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);
          } else {
            const fieldDataSlice = await this.getSlice(actualOffset, length);
            fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);
          }
        }

        // unpack single values from the array
        if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1
          && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {
          value = fieldValues[0];
        } else {
          value = fieldValues;
        }

        // write the tags value to the file directly
        fileDirectory[fieldTagNames[fieldTag]] = value;
      }
      const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);
      const nextIFDByteOffset = dataSlice.readOffset(
        offset + offsetSize + (entrySize * numDirEntries),
      );

      return new ImageFileDirectory(
        fileDirectory,
        geoKeyDirectory,
        nextIFDByteOffset,
      );
    }

    async requestIFD(index) {
      // see if we already have that IFD index requested.
      if (this.ifdRequests[index]) {
        // attach to an already requested IFD
        return this.ifdRequests[index];
      } else if (index === 0) {
        // special case for index 0
        this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);
        return this.ifdRequests[index];
      } else if (!this.ifdRequests[index - 1]) {
        // if the previous IFD was not yet loaded, load that one first
        // this is the recursive call.
        try {
          this.ifdRequests[index - 1] = this.requestIFD(index - 1);
        } catch (e) {
          // if the previous one already was an index error, rethrow
          // with the current index
          if (e instanceof GeoTIFFImageIndexError) {
            throw new GeoTIFFImageIndexError(index);
          }
          // rethrow anything else
          throw e;
        }
      }
      // if the previous IFD was loaded, we can finally fetch the one we are interested in.
      // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed
      this.ifdRequests[index] = (async () => {
        const previousIfd = await this.ifdRequests[index - 1];
        if (previousIfd.nextIFDByteOffset === 0) {
          throw new GeoTIFFImageIndexError(index);
        }
        return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);
      })();
      return this.ifdRequests[index];
    }

    /**
     * Get the n-th internal subfile of an image. By default, the first is returned.
     *
     * @param {number} [index=0] the index of the image to return.
     * @returns {Promise<GeoTIFFImage>} the image at the given index
     */
    async getImage(index = 0) {
      const ifd = await this.requestIFD(index);
      return new GeoTIFFImage$1(
        ifd.fileDirectory, ifd.geoKeyDirectory,
        this.dataView, this.littleEndian, this.cache, this.source,
      );
    }

    /**
     * Returns the count of the internal subfiles.
     *
     * @returns {Promise<number>} the number of internal subfile images
     */
    async getImageCount() {
      let index = 0;
      // loop until we run out of IFDs
      let hasNext = true;
      while (hasNext) {
        try {
          await this.requestIFD(index);
          ++index;
        } catch (e) {
          if (e instanceof GeoTIFFImageIndexError) {
            hasNext = false;
          } else {
            throw e;
          }
        }
      }
      return index;
    }

    /**
     * Get the values of the COG ghost area as a parsed map.
     * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference
     * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found
     */
    async getGhostValues() {
      const offset = this.bigTiff ? 16 : 8;
      if (this.ghostValues) {
        return this.ghostValues;
      }
      const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';
      const heuristicAreaSize = detectionString.length + 100;
      let slice = await this.getSlice(offset, heuristicAreaSize);
      if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {
        const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);
        const firstLine = valuesString.split('\n')[0];
        const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;
        if (metadataSize > heuristicAreaSize) {
          slice = await this.getSlice(offset, metadataSize);
        }
        const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);
        this.ghostValues = {};
        fullString
          .split('\n')
          .filter((line) => line.length > 0)
          .map((line) => line.split('='))
          .forEach(([key, value]) => {
            this.ghostValues[key] = value;
          });
      }
      return this.ghostValues;
    }

    /**
     * Parse a (Geo)TIFF file from the given source.
     *
     * @param {*} source The source of data to parse from.
     * @param {GeoTIFFOptions} [options] Additional options.
     * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
     *                               to be aborted
     */
    static async fromSource(source, options, signal) {
      const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];
      const dataView = new DataView64(headerData);

      const BOM = dataView.getUint16(0, 0);
      let littleEndian;
      if (BOM === 0x4949) {
        littleEndian = true;
      } else if (BOM === 0x4D4D) {
        littleEndian = false;
      } else {
        throw new TypeError('Invalid byte order value.');
      }

      const magicNumber = dataView.getUint16(2, littleEndian);
      let bigTiff;
      if (magicNumber === 42) {
        bigTiff = false;
      } else if (magicNumber === 43) {
        bigTiff = true;
        const offsetByteSize = dataView.getUint16(4, littleEndian);
        if (offsetByteSize !== 8) {
          throw new Error('Unsupported offset byte-size.');
        }
      } else {
        throw new TypeError('Invalid magic number.');
      }

      const firstIFDOffset = bigTiff
        ? dataView.getUint64(8, littleEndian)
        : dataView.getUint32(4, littleEndian);
      return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);
    }

    /**
     * Closes the underlying file buffer
     * N.B. After the GeoTIFF has been completely processed it needs
     * to be closed but only if it has been constructed from a file.
     */
    close() {
      if (typeof this.source.close === 'function') {
        return this.source.close();
      }
      return false;
    }
  }

  /**
   * Wrapper for GeoTIFF files that have external overviews.
   * @augments GeoTIFFBase
   */
  class MultiGeoTIFF extends GeoTIFFBase {
    /**
     * Construct a new MultiGeoTIFF from a main and several overview files.
     * @param {GeoTIFF} mainFile The main GeoTIFF file.
     * @param {GeoTIFF[]} overviewFiles An array of overview files.
     */
    constructor(mainFile, overviewFiles) {
      super();
      this.mainFile = mainFile;
      this.overviewFiles = overviewFiles;
      this.imageFiles = [mainFile].concat(overviewFiles);

      this.fileDirectoriesPerFile = null;
      this.fileDirectoriesPerFileParsing = null;
      this.imageCount = null;
    }

    async parseFileDirectoriesPerFile() {
      const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]
        .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));

      this.fileDirectoriesPerFile = await Promise.all(requests);
      return this.fileDirectoriesPerFile;
    }

    /**
     * Get the n-th internal subfile of an image. By default, the first is returned.
     *
     * @param {number} [index=0] the index of the image to return.
     * @returns {Promise<GeoTIFFImage>} the image at the given index
     */
    async getImage(index = 0) {
      await this.getImageCount();
      await this.parseFileDirectoriesPerFile();
      let visited = 0;
      let relativeIndex = 0;
      for (let i = 0; i < this.imageFiles.length; i++) {
        const imageFile = this.imageFiles[i];
        for (let ii = 0; ii < this.imageCounts[i]; ii++) {
          if (index === visited) {
            const ifd = await imageFile.requestIFD(relativeIndex);
            return new GeoTIFFImage$1(
              ifd.fileDirectory, ifd.geoKeyDirectory,
              imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,
            );
          }
          visited++;
          relativeIndex++;
        }
        relativeIndex = 0;
      }

      throw new RangeError('Invalid image index');
    }

    /**
     * Returns the count of the internal subfiles.
     *
     * @returns {Promise<number>} the number of internal subfile images
     */
    async getImageCount() {
      if (this.imageCount !== null) {
        return this.imageCount;
      }
      const requests = [this.mainFile.getImageCount()]
        .concat(this.overviewFiles.map((file) => file.getImageCount()));
      this.imageCounts = await Promise.all(requests);
      this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);
      return this.imageCount;
    }
  }

  /**
   * Creates a new GeoTIFF from a remote URL.
   * @param {string} url The URL to access the image from
   * @param {object} [options] Additional options to pass to the source.
   *                           See {@link makeRemoteSource} for details.
   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                               to be aborted
   * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.
   */
  async function fromUrl(url, options = {}, signal) {
    return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);
  }

  /**
   * Construct a GeoTIFF from an HTML
   * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or
   * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}
   * object.
   * @param {Blob|File} blob The Blob or File object to read from.
   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                               to be aborted
   * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.
   */
  async function fromBlob(blob, signal) {
    return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);
  }

  /**
   * Construct a MultiGeoTIFF from the given URLs.
   * @param {string} mainUrl The URL for the main file.
   * @param {string[]} overviewUrls An array of URLs for the overview images.
   * @param {Object} [options] Additional options to pass to the source.
   *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}
   *                           for details.
   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is
   *                               to be aborted
   * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.
   */
  async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {
    const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);
    const overviewFiles = await Promise.all(
      overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),
    );

    return new MultiGeoTIFF(mainFile, overviewFiles);
  }

  /**
   * @module ol/source/GeoTIFF
   */

  /**
   * Determine if an image type is a mask.
   * See https://www.awaresystems.be/imaging/tiff/tifftags/newsubfiletype.html
   * @param {GeoTIFFImage} image The image.
   * @return {boolean} The image is a mask.
   */
  function isMask(image) {
    const fileDirectory = image.fileDirectory;
    const type = fileDirectory.NewSubfileType || 0;
    return (type & 4) === 4;
  }

  /**
   * @param {true|false|'auto'} preference The convertToRGB option.
   * @param {GeoTIFFImage} image The image.
   * @return {boolean} Use the `image.readRGB()` method.
   */
  function readRGB(preference, image) {
    if (!preference) {
      return false;
    }
    if (preference === true) {
      return true;
    }
    if (image.getSamplesPerPixel() !== 3) {
      return false;
    }
    const interpretation = image.fileDirectory.PhotometricInterpretation;
    const interpretations = photometricInterpretations;
    return (
      interpretation === interpretations.CMYK ||
      interpretation === interpretations.YCbCr ||
      interpretation === interpretations.CIELab ||
      interpretation === interpretations.ICCLab
    );
  }

  /**
   * @typedef {Object} SourceInfo
   * @property {string} [url] URL for the source GeoTIFF.
   * @property {Array<string>} [overviews] List of any overview URLs, only applies if the url parameter is given.
   * @property {Blob} [blob] Blob containing the source GeoTIFF. `blob` and `url` are mutually exclusive.
   * @property {number} [min=0] The minimum source data value.  Rendered values are scaled from 0 to 1 based on
   * the configured min and max.  If not provided and raster statistics are available, those will be used instead.
   * If neither are available, the minimum for the data type will be used.  To disable this behavior, set
   * the `normalize` option to `false` in the constructor.
   * @property {number} [max] The maximum source data value.  Rendered values are scaled from 0 to 1 based on
   * the configured min and max.  If not provided and raster statistics are available, those will be used instead.
   * If neither are available, the maximum for the data type will be used.  To disable this behavior, set
   * the `normalize` option to `false` in the constructor.
   * @property {number} [nodata] Values to discard (overriding any nodata values in the metadata).
   * When provided, an additional alpha band will be added to the data.  Often the GeoTIFF metadata
   * will include information about nodata values, so you should only need to set this property if
   * you find that it is not already extracted from the metadata.
   * @property {Array<number>} [bands] Band numbers to be read from (where the first band is `1`). If not provided, all bands will
   * be read. For example, if a GeoTIFF has blue (1), green (2), red (3), and near-infrared (4) bands, and you only need the
   * near-infrared band, configure `bands: [4]`.
   */

  /**
   * @typedef {Object} GeoKeys
   * @property {number} GTModelTypeGeoKey Model type.
   * @property {number} GTRasterTypeGeoKey Raster type.
   * @property {number} GeogAngularUnitsGeoKey Angular units.
   * @property {number} GeogInvFlatteningGeoKey Inverse flattening.
   * @property {number} GeogSemiMajorAxisGeoKey Semi-major axis.
   * @property {number} GeographicTypeGeoKey Geographic coordinate system code.
   * @property {number} ProjLinearUnitsGeoKey Projected linear unit code.
   * @property {number} ProjectedCSTypeGeoKey Projected coordinate system code.
   */

  /**
   * @typedef {import("geotiff").GeoTIFF} GeoTIFF
   */

  /**
   * @typedef {import("geotiff").MultiGeoTIFF} MultiGeoTIFF
   */

  /**
   * @typedef {Object} GDALMetadata
   * @property {string} STATISTICS_MINIMUM The minimum value (as a string).
   * @property {string} STATISTICS_MAXIMUM The maximum value (as a string).
   */

  const STATISTICS_MAXIMUM = 'STATISTICS_MAXIMUM';
  const STATISTICS_MINIMUM = 'STATISTICS_MINIMUM';

  const defaultTileSize = 256;

  /**
   * @typedef {import("geotiff").GeoTIFFImage} GeoTIFFImage
   */

  let workerPool;
  function getWorkerPool() {
    if (!workerPool) {
      workerPool = new Pool$1();
    }
    return workerPool;
  }

  /**
   * Get the bounding box of an image.  If the image does not have an affine transform,
   * the pixel bounds are returned.
   * @param {GeoTIFFImage} image The image.
   * @return {Array<number>} The image bounding box.
   */
  function getBoundingBox(image) {
    try {
      return image.getBoundingBox();
    } catch (_) {
      return [0, 0, image.getWidth(), image.getHeight()];
    }
  }

  /**
   * Get the origin of an image.  If the image does not have an affine transform,
   * the top-left corner of the pixel bounds is returned.
   * @param {GeoTIFFImage} image The image.
   * @return {Array<number>} The image origin.
   */
  function getOrigin(image) {
    try {
      return image.getOrigin().slice(0, 2);
    } catch (_) {
      return [0, image.getHeight()];
    }
  }

  /**
   * Get the resolution of an image.  If the image does not have an affine transform,
   * the width of the image is compared with the reference image.
   * @param {GeoTIFFImage} image The image.
   * @param {GeoTIFFImage} referenceImage The reference image.
   * @return {Array<number>} The map x and y units per pixel.
   */
  function getResolutions(image, referenceImage) {
    try {
      return image.getResolution(referenceImage);
    } catch (_) {
      return [
        referenceImage.getWidth() / image.getWidth(),
        referenceImage.getHeight() / image.getHeight(),
      ];
    }
  }

  /**
   * @param {GeoTIFFImage} image A GeoTIFF.
   * @return {import("../proj/Projection.js").default} The image projection.
   */
  function getProjection(image) {
    const geoKeys = image.geoKeys;
    if (!geoKeys) {
      return null;
    }

    if (
      geoKeys.ProjectedCSTypeGeoKey &&
      geoKeys.ProjectedCSTypeGeoKey !== 32767
    ) {
      const code = 'EPSG:' + geoKeys.ProjectedCSTypeGeoKey;
      let projection = get$2(code);
      if (!projection) {
        const units = fromCode(geoKeys.ProjLinearUnitsGeoKey);
        if (units) {
          projection = new Projection$1({
            code: code,
            units: units,
          });
        }
      }
      return projection;
    }

    if (geoKeys.GeographicTypeGeoKey && geoKeys.GeographicTypeGeoKey !== 32767) {
      const code = 'EPSG:' + geoKeys.GeographicTypeGeoKey;
      let projection = get$2(code);
      if (!projection) {
        const units = fromCode(geoKeys.GeogAngularUnitsGeoKey);
        if (units) {
          projection = new Projection$1({
            code: code,
            units: units,
          });
        }
      }
      return projection;
    }

    return null;
  }

  /**
   * @param {GeoTIFF|MultiGeoTIFF} tiff A GeoTIFF.
   * @return {Promise<Array<GeoTIFFImage>>} Resolves to a list of images.
   */
  function getImagesForTIFF(tiff) {
    return tiff.getImageCount().then(function (count) {
      const requests = new Array(count);
      for (let i = 0; i < count; ++i) {
        requests[i] = tiff.getImage(i);
      }
      return Promise.all(requests);
    });
  }

  /**
   * @param {SourceInfo} source The GeoTIFF source.
   * @param {Object} options Options for the GeoTIFF source.
   * @return {Promise<Array<GeoTIFFImage>>} Resolves to a list of images.
   */
  function getImagesForSource(source, options) {
    let request;
    if (source.blob) {
      request = fromBlob(source.blob);
    } else if (source.overviews) {
      request = fromUrls(source.url, source.overviews, options);
    } else {
      request = fromUrl(source.url, options);
    }
    return request.then(getImagesForTIFF);
  }

  /**
   * @param {number|Array<number>|Array<Array<number>>} expected Expected value.
   * @param {number|Array<number>|Array<Array<number>>} got Actual value.
   * @param {number} tolerance Accepted tolerance in fraction of expected between expected and got.
   * @param {string} message The error message.
   * @param {function(Error):void} rejector A function to be called with any error.
   */
  function assertEqual(expected, got, tolerance, message, rejector) {
    if (Array.isArray(expected)) {
      const length = expected.length;
      if (!Array.isArray(got) || length != got.length) {
        const error = new Error(message);
        rejector(error);
        throw error;
      }
      for (let i = 0; i < length; ++i) {
        assertEqual(expected[i], got[i], tolerance, message, rejector);
      }
      return;
    }

    got = /** @type {number} */ (got);
    if (Math.abs(expected - got) > tolerance * expected) {
      throw new Error(message);
    }
  }

  /**
   * @param {Array} array The data array.
   * @return {number} The minimum value.
   */
  function getMinForDataType(array) {
    if (array instanceof Int8Array) {
      return -128;
    }
    if (array instanceof Int16Array) {
      return -32768;
    }
    if (array instanceof Int32Array) {
      return -2147483648;
    }
    if (array instanceof Float32Array) {
      return 1.2e-38;
    }
    return 0;
  }

  /**
   * @param {Array} array The data array.
   * @return {number} The maximum value.
   */
  function getMaxForDataType(array) {
    if (array instanceof Int8Array) {
      return 127;
    }
    if (array instanceof Uint8Array) {
      return 255;
    }
    if (array instanceof Uint8ClampedArray) {
      return 255;
    }
    if (array instanceof Int16Array) {
      return 32767;
    }
    if (array instanceof Uint16Array) {
      return 65535;
    }
    if (array instanceof Int32Array) {
      return 2147483647;
    }
    if (array instanceof Uint32Array) {
      return 4294967295;
    }
    if (array instanceof Float32Array) {
      return 3.4e38;
    }
    return 255;
  }

  /**
   * @typedef {Object} GeoTIFFSourceOptions
   * @property {boolean} [forceXHR=false] Whether to force the usage of the browsers XMLHttpRequest API.
   * @property {Object<string, string>} [headers] additional key-value pairs of headers to be passed with each request. Key is the header name, value the header value.
   * @property {string} [credentials] How credentials shall be handled. See
   * https://developer.mozilla.org/en-US/docs/Web/API/fetch for reference and possible values
   * @property {number} [maxRanges] The maximum amount of ranges to request in a single multi-range request.
   * By default only a single range is used.
   * @property {boolean} [allowFullFile=false] Whether or not a full file is accepted when only a portion is
   * requested. Only use this when you know the source image to be small enough to fit in memory.
   * @property {number} [blockSize=65536] The block size to use.
   * @property {number} [cacheSize=100] The number of blocks that shall be held in a LRU cache.
   */

  /**
   * @typedef {Object} Options
   * @property {Array<SourceInfo>} sources List of information about GeoTIFF sources.
   * Multiple sources can be combined when their resolution sets are equal after applying a scale.
   * The list of sources defines a mapping between input bands as they are read from each GeoTIFF and
   * the output bands that are provided by data tiles. To control which bands to read from each GeoTIFF,
   * use the {@link import("./GeoTIFF.js").SourceInfo bands} property. If, for example, you specify two
   * sources, one with 3 bands and {@link import("./GeoTIFF.js").SourceInfo nodata} configured, and
   * another with 1 band, the resulting data tiles will have 5 bands: 3 from the first source, 1 alpha
   * band from the first source, and 1 band from the second source.
   * @property {GeoTIFFSourceOptions} [sourceOptions] Additional options to be passed to [geotiff.js](https://geotiffjs.github.io/geotiff.js/module-geotiff.html)'s `fromUrl` or `fromUrls` methods.
   * @property {true|false|'auto'} [convertToRGB=false] By default, bands from the sources are read as-is. When
   * reading GeoTIFFs with the purpose of displaying them as RGB images, setting this to `true` will
   * convert other color spaces (YCbCr, CMYK) to RGB.  Setting the option to `'auto'` will make it so CMYK, YCbCr,
   * CIELab, and ICCLab images will automatically be converted to RGB.
   * @property {boolean} [normalize=true] By default, the source data is normalized to values between
   * 0 and 1 with scaling factors based on the raster statistics or `min` and `max` properties of each source.
   * If instead you want to work with the raw values in a style expression, set this to `false`.  Setting this option
   * to `false` will make it so any `min` and `max` properties on sources are ignored.
   * @property {boolean} [opaque=false] Whether the layer is opaque.
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {boolean} [wrapX=false] Render tiles beyond the tile grid extent.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * the linear interpolation is used to resample the data.  If false, nearest neighbor is used.
   */

  /**
   * @classdesc
   * A source for working with GeoTIFF data.
   * **Note for users of the full build**: The `GeoTIFF` source requires the
   * [geotiff.js](https://github.com/geotiffjs/geotiff.js) library to be loaded as well.
   *
   * @api
   */
  class GeoTIFFSource extends DataTile {
    /**
     * @param {Options} options Data tile options.
     */
    constructor(options) {
      super({
        state: 'loading',
        tileGrid: null,
        projection: null,
        opaque: options.opaque,
        transition: options.transition,
        interpolate: options.interpolate !== false,
        wrapX: options.wrapX,
      });

      /**
       * @type {Array<SourceInfo>}
       * @private
       */
      this.sourceInfo_ = options.sources;

      const numSources = this.sourceInfo_.length;

      /**
       * @type {Object}
       * @private
       */
      this.sourceOptions_ = options.sourceOptions;

      /**
       * @type {Array<Array<GeoTIFFImage>>}
       * @private
       */
      this.sourceImagery_ = new Array(numSources);

      /**
       * @type {Array<Array<GeoTIFFImage>>}
       * @private
       */
      this.sourceMasks_ = new Array(numSources);

      /**
       * @type {Array<number>}
       * @private
       */
      this.resolutionFactors_ = new Array(numSources);

      /**
       * @type {Array<number>}
       * @private
       */
      this.samplesPerPixel_;

      /**
       * @type {Array<Array<number>>}
       * @private
       */
      this.nodataValues_;

      /**
       * @type {Array<Array<GDALMetadata>>}
       * @private
       */
      this.metadata_;

      /**
       * @type {boolean}
       * @private
       */
      this.normalize_ = options.normalize !== false;

      /**
       * @type {boolean}
       * @private
       */
      this.addAlpha_ = false;

      /**
       * @type {Error}
       * @private
       */
      this.error_ = null;

      /**
       * @type {true|false|'auto'}
       */
      this.convertToRGB_ = options.convertToRGB || false;

      this.setKey(this.sourceInfo_.map((source) => source.url).join(','));

      const self = this;
      const requests = new Array(numSources);
      for (let i = 0; i < numSources; ++i) {
        requests[i] = getImagesForSource(
          this.sourceInfo_[i],
          this.sourceOptions_
        );
      }
      Promise.all(requests)
        .then(function (sources) {
          self.configure_(sources);
        })
        .catch(function (error) {
          error$1(error);
          self.error_ = error;
          self.setState('error');
        });
    }

    /**
     * @return {Error} A source loading error. When the source state is `error`, use this function
     * to get more information about the error. To debug a faulty configuration, you may want to use
     * a listener like
     * ```js
     * geotiffSource.on('change', () => {
     *   if (geotiffSource.getState() === 'error') {
     *     console.error(geotiffSource.getError());
     *   }
     * });
     * ```
     */
    getError() {
      return this.error_;
    }

    /**
     * Determine the projection of the images in this GeoTIFF.
     * The default implementation looks at the ProjectedCSTypeGeoKey and the GeographicTypeGeoKey
     * of each image in turn.
     * You can override this method in a subclass to support more projections.
     *
     * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images
     * from a single GeoTIFF.
     */
    determineProjection(sources) {
      const firstSource = sources[0];
      for (let i = firstSource.length - 1; i >= 0; --i) {
        const image = firstSource[i];
        const projection = getProjection(image);
        if (projection) {
          this.projection = projection;
          break;
        }
      }
    }

    /**
     * Configure the tile grid based on images within the source GeoTIFFs.  Each GeoTIFF
     * must have the same internal tiled structure.
     * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images
     * from a single GeoTIFF.
     * @private
     */
    configure_(sources) {
      let extent;
      let origin;
      let commonRenderTileSizes;
      let commonSourceTileSizes;
      let resolutions;
      const samplesPerPixel = new Array(sources.length);
      const nodataValues = new Array(sources.length);
      const metadata = new Array(sources.length);
      let minZoom = 0;

      const sourceCount = sources.length;
      for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {
        const images = [];
        const masks = [];
        sources[sourceIndex].forEach((item) => {
          if (isMask(item)) {
            masks.push(item);
          } else {
            images.push(item);
          }
        });

        const imageCount = images.length;
        if (masks.length > 0 && masks.length !== imageCount) {
          throw new Error(
            `Expected one mask per image found ${masks.length} masks and ${imageCount} images`
          );
        }

        let sourceExtent;
        let sourceOrigin;
        const sourceTileSizes = new Array(imageCount);
        const renderTileSizes = new Array(imageCount);
        const sourceResolutions = new Array(imageCount);

        nodataValues[sourceIndex] = new Array(imageCount);
        metadata[sourceIndex] = new Array(imageCount);

        for (let imageIndex = 0; imageIndex < imageCount; ++imageIndex) {
          const image = images[imageIndex];
          const nodataValue = image.getGDALNoData();
          metadata[sourceIndex][imageIndex] = image.getGDALMetadata(0);
          nodataValues[sourceIndex][imageIndex] = nodataValue;

          const wantedSamples = this.sourceInfo_[sourceIndex].bands;
          samplesPerPixel[sourceIndex] = wantedSamples
            ? wantedSamples.length
            : image.getSamplesPerPixel();
          const level = imageCount - (imageIndex + 1);

          if (!sourceExtent) {
            sourceExtent = getBoundingBox(image);
          }

          if (!sourceOrigin) {
            sourceOrigin = getOrigin(image);
          }

          const imageResolutions = getResolutions(image, images[0]);
          sourceResolutions[level] = imageResolutions[0];

          const sourceTileSize = [image.getTileWidth(), image.getTileHeight()];

          // request larger blocks for untiled layouts
          if (
            sourceTileSize[0] !== sourceTileSize[1] &&
            sourceTileSize[1] < defaultTileSize
          ) {
            sourceTileSize[0] = defaultTileSize;
            sourceTileSize[1] = defaultTileSize;
          }

          sourceTileSizes[level] = sourceTileSize;

          const aspectRatio = imageResolutions[0] / Math.abs(imageResolutions[1]);
          renderTileSizes[level] = [
            sourceTileSize[0],
            sourceTileSize[1] / aspectRatio,
          ];
        }

        if (!extent) {
          extent = sourceExtent;
        } else {
          getIntersection(extent, sourceExtent, extent);
        }

        if (!origin) {
          origin = sourceOrigin;
        } else {
          const message = `Origin mismatch for source ${sourceIndex}, got [${sourceOrigin}] but expected [${origin}]`;
          assertEqual(origin, sourceOrigin, 0, message, this.viewRejector);
        }

        if (!resolutions) {
          resolutions = sourceResolutions;
          this.resolutionFactors_[sourceIndex] = 1;
        } else {
          if (resolutions.length - minZoom > sourceResolutions.length) {
            minZoom = resolutions.length - sourceResolutions.length;
          }
          const resolutionFactor =
            resolutions[resolutions.length - 1] /
            sourceResolutions[sourceResolutions.length - 1];
          this.resolutionFactors_[sourceIndex] = resolutionFactor;
          const scaledSourceResolutions = sourceResolutions.map(
            (resolution) => (resolution *= resolutionFactor)
          );
          const message = `Resolution mismatch for source ${sourceIndex}, got [${scaledSourceResolutions}] but expected [${resolutions}]`;
          assertEqual(
            resolutions.slice(minZoom, resolutions.length),
            scaledSourceResolutions,
            0.02,
            message,
            this.viewRejector
          );
        }

        if (!commonRenderTileSizes) {
          commonRenderTileSizes = renderTileSizes;
        } else {
          assertEqual(
            commonRenderTileSizes.slice(minZoom, commonRenderTileSizes.length),
            renderTileSizes,
            0.01,
            `Tile size mismatch for source ${sourceIndex}`,
            this.viewRejector
          );
        }

        if (!commonSourceTileSizes) {
          commonSourceTileSizes = sourceTileSizes;
        } else {
          assertEqual(
            commonSourceTileSizes.slice(minZoom, commonSourceTileSizes.length),
            sourceTileSizes,
            0,
            `Tile size mismatch for source ${sourceIndex}`,
            this.viewRejector
          );
        }

        this.sourceImagery_[sourceIndex] = images.reverse();
        this.sourceMasks_[sourceIndex] = masks.reverse();
      }

      for (let i = 0, ii = this.sourceImagery_.length; i < ii; ++i) {
        const sourceImagery = this.sourceImagery_[i];
        while (sourceImagery.length < resolutions.length) {
          sourceImagery.unshift(undefined);
        }
      }

      if (!this.getProjection()) {
        this.determineProjection(sources);
      }

      this.samplesPerPixel_ = samplesPerPixel;
      this.nodataValues_ = nodataValues;
      this.metadata_ = metadata;

      // decide if we need to add an alpha band to handle nodata
      outer: for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {
        // option 1: source is configured with a nodata value
        if (this.sourceInfo_[sourceIndex].nodata !== undefined) {
          this.addAlpha_ = true;
          break;
        }
        if (this.sourceMasks_[sourceIndex].length) {
          this.addAlpha_ = true;
          break;
        }

        const values = nodataValues[sourceIndex];

        // option 2: check image metadata for limited bands
        const bands = this.sourceInfo_[sourceIndex].bands;
        if (bands) {
          for (let i = 0; i < bands.length; ++i) {
            if (values[bands[i] - 1] !== null) {
              this.addAlpha_ = true;
              break outer;
            }
          }
          continue;
        }

        // option 3: check image metadata for all bands
        for (let imageIndex = 0; imageIndex < values.length; ++imageIndex) {
          if (values[imageIndex] !== null) {
            this.addAlpha_ = true;
            break outer;
          }
        }
      }

      let bandCount = this.addAlpha_ ? 1 : 0;
      for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {
        bandCount += samplesPerPixel[sourceIndex];
      }
      this.bandCount = bandCount;

      const tileGrid = new TileGrid$1({
        extent: extent,
        minZoom: minZoom,
        origin: origin,
        resolutions: resolutions,
        tileSizes: commonRenderTileSizes,
      });

      this.tileGrid = tileGrid;
      this.setTileSizes(commonSourceTileSizes);

      this.setLoader(this.loadTile_.bind(this));
      this.setState('ready');

      const zoom = 1;
      if (resolutions.length === 2) {
        resolutions = [resolutions[0], resolutions[1], resolutions[1] / 2];
      } else if (resolutions.length === 1) {
        resolutions = [resolutions[0] * 2, resolutions[0], resolutions[0] / 2];
      }

      this.viewResolver({
        showFullExtent: true,
        projection: this.projection,
        resolutions: resolutions,
        center: toUserCoordinate(getCenter(extent), this.projection),
        extent: toUserExtent(extent, this.projection),
        zoom: zoom,
      });
    }

    /**
     * @param {number} z The z tile index.
     * @param {number} x The x tile index.
     * @param {number} y The y tile index.
     * @return {Promise} The composed tile data.
     * @private
     */
    loadTile_(z, x, y) {
      const sourceTileSize = this.getTileSize(z);
      const sourceCount = this.sourceImagery_.length;
      const requests = new Array(sourceCount * 2);
      const nodataValues = this.nodataValues_;
      const sourceInfo = this.sourceInfo_;
      const pool = getWorkerPool();
      for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {
        const source = sourceInfo[sourceIndex];
        const resolutionFactor = this.resolutionFactors_[sourceIndex];
        const pixelBounds = [
          Math.round(x * (sourceTileSize[0] * resolutionFactor)),
          Math.round(y * (sourceTileSize[1] * resolutionFactor)),
          Math.round((x + 1) * (sourceTileSize[0] * resolutionFactor)),
          Math.round((y + 1) * (sourceTileSize[1] * resolutionFactor)),
        ];
        const image = this.sourceImagery_[sourceIndex][z];
        let samples;
        if (source.bands) {
          samples = source.bands.map(function (bandNumber) {
            return bandNumber - 1;
          });
        }

        /** @type {number|Array<number>} */
        let fillValue;
        if ('nodata' in source && source.nodata !== null) {
          fillValue = source.nodata;
        } else {
          if (!samples) {
            fillValue = nodataValues[sourceIndex];
          } else {
            fillValue = samples.map(function (sampleIndex) {
              return nodataValues[sourceIndex][sampleIndex];
            });
          }
        }

        const readOptions = {
          window: pixelBounds,
          width: sourceTileSize[0],
          height: sourceTileSize[1],
          samples: samples,
          fillValue: fillValue,
          pool: pool,
          interleave: false,
        };
        if (readRGB(this.convertToRGB_, image)) {
          requests[sourceIndex] = image.readRGB(readOptions);
        } else {
          requests[sourceIndex] = image.readRasters(readOptions);
        }

        // requests after `sourceCount` are for mask data (if any)
        const maskIndex = sourceCount + sourceIndex;
        const mask = this.sourceMasks_[sourceIndex][z];
        if (!mask) {
          requests[maskIndex] = Promise.resolve(null);
          continue;
        }

        requests[maskIndex] = mask.readRasters({
          window: pixelBounds,
          width: sourceTileSize[0],
          height: sourceTileSize[1],
          samples: [0],
          pool: pool,
          interleave: false,
        });
      }

      return Promise.all(requests)
        .then(this.composeTile_.bind(this, sourceTileSize))
        .catch(function (error) {
          error$1(error);
          throw error;
        });
    }

    /**
     * @param {import("../size.js").Size} sourceTileSize The source tile size.
     * @param {Array} sourceSamples The source samples.
     * @return {import("../DataTile.js").Data} The composed tile data.
     * @private
     */
    composeTile_(sourceTileSize, sourceSamples) {
      const metadata = this.metadata_;
      const sourceInfo = this.sourceInfo_;
      const sourceCount = this.sourceImagery_.length;
      const bandCount = this.bandCount;
      const samplesPerPixel = this.samplesPerPixel_;
      const nodataValues = this.nodataValues_;
      const normalize = this.normalize_;
      const addAlpha = this.addAlpha_;

      const pixelCount = sourceTileSize[0] * sourceTileSize[1];
      const dataLength = pixelCount * bandCount;

      /** @type {Uint8Array|Float32Array} */
      let data;
      if (normalize) {
        data = new Uint8Array(dataLength);
      } else {
        data = new Float32Array(dataLength);
      }

      let dataIndex = 0;
      for (let pixelIndex = 0; pixelIndex < pixelCount; ++pixelIndex) {
        let transparent = addAlpha;
        for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {
          const source = sourceInfo[sourceIndex];

          let min = source.min;
          let max = source.max;
          let gain, bias;
          if (normalize) {
            const stats = metadata[sourceIndex][0];
            if (min === undefined) {
              if (stats && STATISTICS_MINIMUM in stats) {
                min = parseFloat(stats[STATISTICS_MINIMUM]);
              } else {
                min = getMinForDataType(sourceSamples[sourceIndex][0]);
              }
            }
            if (max === undefined) {
              if (stats && STATISTICS_MAXIMUM in stats) {
                max = parseFloat(stats[STATISTICS_MAXIMUM]);
              } else {
                max = getMaxForDataType(sourceSamples[sourceIndex][0]);
              }
            }

            gain = 255 / (max - min);
            bias = -min * gain;
          }

          for (
            let sampleIndex = 0;
            sampleIndex < samplesPerPixel[sourceIndex];
            ++sampleIndex
          ) {
            const sourceValue =
              sourceSamples[sourceIndex][sampleIndex][pixelIndex];

            let value;
            if (normalize) {
              value = clamp(gain * sourceValue + bias, 0, 255);
            } else {
              value = sourceValue;
            }

            if (!addAlpha) {
              data[dataIndex] = value;
            } else {
              let nodata = source.nodata;
              if (nodata === undefined) {
                let bandIndex;
                if (source.bands) {
                  bandIndex = source.bands[sampleIndex] - 1;
                } else {
                  bandIndex = sampleIndex;
                }
                nodata = nodataValues[sourceIndex][bandIndex];
              }

              const nodataIsNaN = isNaN(nodata);
              if (
                (!nodataIsNaN && sourceValue !== nodata) ||
                (nodataIsNaN && !isNaN(sourceValue))
              ) {
                transparent = false;
                data[dataIndex] = value;
              }
            }
            dataIndex++;
          }
          if (!transparent) {
            const maskIndex = sourceCount + sourceIndex;
            const mask = sourceSamples[maskIndex];
            if (mask && !mask[0][pixelIndex]) {
              transparent = true;
            }
          }
        }
        if (addAlpha) {
          if (!transparent) {
            data[dataIndex] = 255;
          }
          dataIndex++;
        }
      }

      return data;
    }
  }

  /**
   * Get a promise for view properties based on the source.  Use the result of this function
   * as the `view` option in a map constructor.
   *
   *     const source = new GeoTIFF(options);
   *
   *     const map = new Map({
   *       target: 'map',
   *       layers: [
   *         new TileLayer({
   *           source: source,
   *         }),
   *       ],
   *       view: source.getView(),
   *     });
   *
   * @function
   * @return {Promise<import("../View.js").ViewOptions>} A promise for view-related properties.
   * @api
   *
   */
  GeoTIFFSource.prototype.getView;

  var GeoTIFFSource$1 = GeoTIFFSource;

  /**
   * @module ol/source/Zoomify
   */

  /**
   * @typedef {'default' | 'truncated'} TierSizeCalculation
   */

  class CustomTile$1 extends ImageTile$1 {
    /**
     * @param {import("../size.js").Size} tileSize Full tile size.
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../TileState.js").default} state State.
     * @param {string} src Image source URI.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
     * @param {import("../Tile.js").Options} [options] Tile options.
     */
    constructor(
      tileSize,
      tileCoord,
      state,
      src,
      crossOrigin,
      tileLoadFunction,
      options
    ) {
      super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);

      /**
       * @private
       * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
       */
      this.zoomifyImage_ = null;

      /**
       * @type {import("../size.js").Size}
       */
      this.tileSize_ = tileSize;
    }

    /**
     * Get the image element for this tile.
     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
     */
    getImage() {
      if (this.zoomifyImage_) {
        return this.zoomifyImage_;
      }
      const image = super.getImage();
      if (this.state == TileState.LOADED) {
        const tileSize = this.tileSize_;
        if (image.width == tileSize[0] && image.height == tileSize[1]) {
          this.zoomifyImage_ = image;
          return image;
        }
        const context = createCanvasContext2D(tileSize[0], tileSize[1]);
        context.drawImage(image, 0, 0);
        this.zoomifyImage_ = context.canvas;
        return context.canvas;
      }
      return image;
    }
  }

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {string} url URL template or base URL of the Zoomify service.
   * A base URL is the fixed part
   * of the URL, excluding the tile group, z, x, and y folder structure, e.g.
   * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include
   * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.
   * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.
   * Internet Imaging Protocol (IIP) with JTL extension can be also used with
   * `{tileIndex}` and `{z}` placeholders, e.g.
   * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.
   * @property {import("../size.js").Size} size Size.
   * @property {import("../extent.js").Extent} [extent] Extent for the TileGrid that is created.
   * Default sets the TileGrid in the
   * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the
   * extent to the first quadrant (the default for OpenLayers 2) set the extent
   * as `[0, 0, width, height]`.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data in Zoomify format (both Zoomify and Internet
   * Imaging Protocol are supported).
   * @api
   */
  class Zoomify extends TileImage$1 {
    /**
     * @param {Options} options Options.
     */
    constructor(options) {
      const size = options.size;
      const tierSizeCalculation =
        options.tierSizeCalculation !== undefined
          ? options.tierSizeCalculation
          : 'default';

      const tilePixelRatio = options.tilePixelRatio || 1;
      const imageWidth = size[0];
      const imageHeight = size[1];
      const tierSizeInTiles = [];
      const tileSize = options.tileSize || DEFAULT_TILE_SIZE;
      let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;

      switch (tierSizeCalculation) {
        case 'default':
          while (
            imageWidth > tileSizeForTierSizeCalculation ||
            imageHeight > tileSizeForTierSizeCalculation
          ) {
            tierSizeInTiles.push([
              Math.ceil(imageWidth / tileSizeForTierSizeCalculation),
              Math.ceil(imageHeight / tileSizeForTierSizeCalculation),
            ]);
            tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;
          }
          break;
        case 'truncated':
          let width = imageWidth;
          let height = imageHeight;
          while (
            width > tileSizeForTierSizeCalculation ||
            height > tileSizeForTierSizeCalculation
          ) {
            tierSizeInTiles.push([
              Math.ceil(width / tileSizeForTierSizeCalculation),
              Math.ceil(height / tileSizeForTierSizeCalculation),
            ]);
            width >>= 1;
            height >>= 1;
          }
          break;
        default: // Unknown `tierSizeCalculation` configured
          assert(false, 53);
          break;
      }

      tierSizeInTiles.push([1, 1]);
      tierSizeInTiles.reverse();

      const resolutions = [tilePixelRatio];
      const tileCountUpToTier = [0];
      for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {
        resolutions.push(tilePixelRatio << i);
        tileCountUpToTier.push(
          tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +
            tileCountUpToTier[i - 1]
        );
      }
      resolutions.reverse();

      const tileGrid = new TileGrid$1({
        tileSize: tileSize,
        extent: options.extent || [0, -imageHeight, imageWidth, 0],
        resolutions: resolutions,
      });

      let url = options.url;
      if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {
        url += '{TileGroup}/{z}-{x}-{y}.jpg';
      }
      const urls = expandUrl(url);

      let tileWidth = tileSize * tilePixelRatio;

      /**
       * @param {string} template Template.
       * @return {import("../Tile.js").UrlFunction} Tile URL function.
       */
      function createFromTemplate(template) {
        return (
          /**
           * @param {import("../tilecoord.js").TileCoord} tileCoord Tile Coordinate.
           * @param {number} pixelRatio Pixel ratio.
           * @param {import("../proj/Projection.js").default} projection Projection.
           * @return {string|undefined} Tile URL.
           */
          function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
              return undefined;
            }
            const tileCoordZ = tileCoord[0];
            const tileCoordX = tileCoord[1];
            const tileCoordY = tileCoord[2];
            const tileIndex =
              tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];
            const tileGroup =
              ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;
            const localContext = {
              'z': tileCoordZ,
              'x': tileCoordX,
              'y': tileCoordY,
              'tileIndex': tileIndex,
              'TileGroup': 'TileGroup' + tileGroup,
            };
            return template.replace(/\{(\w+?)\}/g, function (m, p) {
              return localContext[p];
            });
          }
        );
      }

      const tileUrlFunction = createFromTileUrlFunctions(
        urls.map(createFromTemplate)
      );

      const ZoomifyTileClass = CustomTile$1.bind(
        null,
        toSize(tileSize * tilePixelRatio)
      );

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: options.projection,
        tilePixelRatio: tilePixelRatio,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: ZoomifyTileClass,
        tileGrid: tileGrid,
        tileUrlFunction: tileUrlFunction,
        transition: options.transition,
      });

      /**
       * @type {number|import("../array.js").NearestDirectionFunction}
       */
      this.zDirection = options.zDirection;

      // Server retina tile detection (non-standard):
      // Try loading the center tile for the highest resolution. If it is not
      // available, we are dealing with retina tiles, and need to adjust the
      // tile url calculation.
      const tileUrl = tileGrid.getTileCoordForCoordAndResolution(
        getCenter(tileGrid.getExtent()),
        resolutions[resolutions.length - 1]
      );
      const testTileUrl = tileUrlFunction(tileUrl, 1, null);
      const image = new Image();
      image.addEventListener('error', () => {
        tileWidth = tileSize;
        this.changed();
      });
      image.src = testTileUrl;
    }
  }

  var Zoomify$1 = Zoomify;

  /**
   * @module ol/source/IIIF
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Size of the cache.
   * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.
   * @property {import("../extent.js").Extent} [extent=[0, -height, width, 0]] The extent.
   * @property {string} [format='jpg'] Requested image format.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection.
   * @property {string} [quality] Requested IIIF image quality. Default is 'native'
   * for version 1, 'default' for versions 2 and 3.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'
   * @property {import("../size.js").Size} size Size of the image [width, height].
   * @property {Array<import("../size.js").Size>} [sizes] Supported scaled image sizes.
   * Content of the IIIF info.json 'sizes' property, but as array of Size objects.
   * @property {import("./Source.js").State} [state] Source state.
   * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation
   * features.
   * @property {number} [tilePixelRatio] Tile pixel ratio.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Same tile size is used for all zoom levels. If tile size is a number,
   * a square tile is assumed. If the IIIF image service supports arbitrary
   * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct
   * are supported), the default tilesize is 256.
   * @property {number} [transition] Transition.
   * @property {string} [url] Base URL of the IIIF Image service.
   * This should be the same as the IIIF Image ID.
   * @property {import("../format/IIIFInfo.js").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  function formatPercentage(percentage) {
    return percentage.toLocaleString('en', {maximumFractionDigits: 10});
  }

  /**
   * @classdesc
   * Layer source for IIIF Image API services.
   * @api
   */
  class IIIF extends TileImage$1 {
    /**
     * @param {Options} [options] Tile source options. Use {@link import("../format/IIIFInfo.js").IIIFInfo}
     * to parse Image API service information responses into constructor options.
     * @api
     */
    constructor(options) {
      /**
       * @type {Partial<Options>}
       */
      const partialOptions = options || {};

      let baseUrl = partialOptions.url || '';
      baseUrl =
        baseUrl +
        (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''
          ? ''
          : '/');
      const version = partialOptions.version || Versions.VERSION2;
      const sizes = partialOptions.sizes || [];
      const size = partialOptions.size;
      assert(
        size != undefined &&
          Array.isArray(size) &&
          size.length == 2 &&
          !isNaN(size[0]) &&
          size[0] > 0 &&
          !isNaN(size[1]) &&
          size[1] > 0,
        60
      );
      const width = size[0];
      const height = size[1];
      const tileSize = partialOptions.tileSize;
      const tilePixelRatio = partialOptions.tilePixelRatio || 1;
      const format = partialOptions.format || 'jpg';
      const quality =
        partialOptions.quality ||
        (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');
      let resolutions = partialOptions.resolutions || [];
      const supports = partialOptions.supports || [];
      const extent = partialOptions.extent || [0, -height, width, 0];

      const supportsListedSizes =
        sizes != undefined && Array.isArray(sizes) && sizes.length > 0;
      const supportsListedTiles =
        tileSize !== undefined &&
        ((typeof tileSize === 'number' &&
          Number.isInteger(tileSize) &&
          tileSize > 0) ||
          (Array.isArray(tileSize) && tileSize.length > 0));
      const supportsArbitraryTiling =
        supports != undefined &&
        Array.isArray(supports) &&
        (supports.includes('regionByPx') || supports.includes('regionByPct')) &&
        (supports.includes('sizeByWh') ||
          supports.includes('sizeByH') ||
          supports.includes('sizeByW') ||
          supports.includes('sizeByPct'));

      let tileWidth, tileHeight, maxZoom;

      resolutions.sort(function (a, b) {
        return b - a;
      });

      if (supportsListedTiles || supportsArbitraryTiling) {
        if (tileSize != undefined) {
          if (
            typeof tileSize === 'number' &&
            Number.isInteger(tileSize) &&
            tileSize > 0
          ) {
            tileWidth = tileSize;
            tileHeight = tileSize;
          } else if (Array.isArray(tileSize) && tileSize.length > 0) {
            if (
              tileSize.length == 1 ||
              (tileSize[1] == undefined && Number.isInteger(tileSize[0]))
            ) {
              tileWidth = tileSize[0];
              tileHeight = tileSize[0];
            }
            if (tileSize.length == 2) {
              if (
                Number.isInteger(tileSize[0]) &&
                Number.isInteger(tileSize[1])
              ) {
                tileWidth = tileSize[0];
                tileHeight = tileSize[1];
              } else if (
                tileSize[0] == undefined &&
                Number.isInteger(tileSize[1])
              ) {
                tileWidth = tileSize[1];
                tileHeight = tileSize[1];
              }
            }
          }
        }
        if (tileWidth === undefined || tileHeight === undefined) {
          tileWidth = DEFAULT_TILE_SIZE;
          tileHeight = DEFAULT_TILE_SIZE;
        }
        if (resolutions.length == 0) {
          maxZoom = Math.max(
            Math.ceil(Math.log(width / tileWidth) / Math.LN2),
            Math.ceil(Math.log(height / tileHeight) / Math.LN2)
          );
          for (let i = maxZoom; i >= 0; i--) {
            resolutions.push(Math.pow(2, i));
          }
        } else {
          const maxScaleFactor = Math.max(...resolutions);
          // TODO maxScaleFactor might not be a power to 2
          maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);
        }
      } else {
        // No tile support.
        tileWidth = width;
        tileHeight = height;
        resolutions = [];
        if (supportsListedSizes) {
          /*
           * 'sizes' provided. Use full region in different resolutions. Every
           * resolution has only one tile.
           */
          sizes.sort(function (a, b) {
            return a[0] - b[0];
          });
          maxZoom = -1;
          const ignoredSizesIndex = [];
          for (let i = 0; i < sizes.length; i++) {
            const resolution = width / sizes[i][0];
            if (
              resolutions.length > 0 &&
              resolutions[resolutions.length - 1] == resolution
            ) {
              ignoredSizesIndex.push(i);
              continue;
            }
            resolutions.push(resolution);
            maxZoom++;
          }
          if (ignoredSizesIndex.length > 0) {
            for (let i = 0; i < ignoredSizesIndex.length; i++) {
              sizes.splice(ignoredSizesIndex[i] - i, 1);
            }
          }
        } else {
          // No useful image information at all. Try pseudo tile with full image.
          resolutions.push(1);
          sizes.push([width, height]);
          maxZoom = 0;
        }
      }

      const tileGrid = new TileGrid$1({
        tileSize: [tileWidth, tileHeight],
        extent: extent,
        origin: getTopLeft(extent),
        resolutions: resolutions,
      });

      const tileUrlFunction = function (tileCoord, pixelRatio, projection) {
        let regionParam, sizeParam;
        const zoom = tileCoord[0];
        if (zoom > maxZoom) {
          return;
        }
        const tileX = tileCoord[1],
          tileY = tileCoord[2],
          scale = resolutions[zoom];
        if (
          tileX === undefined ||
          tileY === undefined ||
          scale === undefined ||
          tileX < 0 ||
          Math.ceil(width / scale / tileWidth) <= tileX ||
          tileY < 0 ||
          Math.ceil(height / scale / tileHeight) <= tileY
        ) {
          return;
        }
        if (supportsArbitraryTiling || supportsListedTiles) {
          const regionX = tileX * tileWidth * scale,
            regionY = tileY * tileHeight * scale;
          let regionW = tileWidth * scale,
            regionH = tileHeight * scale,
            sizeW = tileWidth,
            sizeH = tileHeight;
          if (regionX + regionW > width) {
            regionW = width - regionX;
          }
          if (regionY + regionH > height) {
            regionH = height - regionY;
          }
          if (regionX + tileWidth * scale > width) {
            sizeW = Math.floor((width - regionX + scale - 1) / scale);
          }
          if (regionY + tileHeight * scale > height) {
            sizeH = Math.floor((height - regionY + scale - 1) / scale);
          }
          if (
            regionX == 0 &&
            regionW == width &&
            regionY == 0 &&
            regionH == height
          ) {
            // canonical full image region parameter is 'full', not 'x,y,w,h'
            regionParam = 'full';
          } else if (
            !supportsArbitraryTiling ||
            supports.includes('regionByPx')
          ) {
            regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;
          } else if (supports.includes('regionByPct')) {
            const pctX = formatPercentage((regionX / width) * 100),
              pctY = formatPercentage((regionY / height) * 100),
              pctW = formatPercentage((regionW / width) * 100),
              pctH = formatPercentage((regionH / height) * 100);
            regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;
          }
          if (
            version == Versions.VERSION3 &&
            (!supportsArbitraryTiling || supports.includes('sizeByWh'))
          ) {
            sizeParam = sizeW + ',' + sizeH;
          } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {
            sizeParam = sizeW + ',';
          } else if (supports.includes('sizeByH')) {
            sizeParam = ',' + sizeH;
          } else if (supports.includes('sizeByWh')) {
            sizeParam = sizeW + ',' + sizeH;
          } else if (supports.includes('sizeByPct')) {
            sizeParam = 'pct:' + formatPercentage(100 / scale);
          }
        } else {
          regionParam = 'full';
          if (supportsListedSizes) {
            const regionWidth = sizes[zoom][0],
              regionHeight = sizes[zoom][1];
            if (version == Versions.VERSION3) {
              if (regionWidth == width && regionHeight == height) {
                sizeParam = 'max';
              } else {
                sizeParam = regionWidth + ',' + regionHeight;
              }
            } else {
              if (regionWidth == width) {
                sizeParam = 'full';
              } else {
                sizeParam = regionWidth + ',';
              }
            }
          } else {
            sizeParam = version == Versions.VERSION3 ? 'max' : 'full';
          }
        }
        return (
          baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format
        );
      };

      const IiifTileClass = CustomTile$1.bind(
        null,
        toSize(tileSize || 256).map(function (size) {
          return size * tilePixelRatio;
        })
      );

      super({
        attributions: partialOptions.attributions,
        attributionsCollapsible: partialOptions.attributionsCollapsible,
        cacheSize: partialOptions.cacheSize,
        crossOrigin: partialOptions.crossOrigin,
        interpolate: partialOptions.interpolate,
        projection: partialOptions.projection,
        reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,
        state: partialOptions.state,
        tileClass: IiifTileClass,
        tileGrid: tileGrid,
        tilePixelRatio: partialOptions.tilePixelRatio,
        tileUrlFunction: tileUrlFunction,
        transition: partialOptions.transition,
      });

      /**
       * @type {number|import("../array.js").NearestDirectionFunction}
       */
      this.zDirection = partialOptions.zDirection;
    }
  }

  var IIIF$1 = IIIF;

  /**
   * @module ol/uri
   */

  /**
   * Appends query parameters to a URI.
   *
   * @param {string} uri The original URI, which may already have query data.
   * @param {!Object} params An object where keys are URI-encoded parameter keys,
   *     and the values are arbitrary types or arrays.
   * @return {string} The new URI.
   */
  function appendParams(uri, params) {
    const keyParams = [];
    // Skip any null or undefined parameter values
    Object.keys(params).forEach(function (k) {
      if (params[k] !== null && params[k] !== undefined) {
        keyParams.push(k + '=' + encodeURIComponent(params[k]));
      }
    });
    const qs = keyParams.join('&');
    // remove any trailing ? or &
    uri = uri.replace(/[?&]$/, '');
    // append ? or & depending on whether uri has existing parameters
    uri += uri.includes('?') ? '&' : '?';
    return uri + qs;
  }

  /**
   * @module ol/source/ImageArcGISRest
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from
   * the remote server.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given
   * a URL.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service
   * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is
   * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`
   * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See
   * https://developers.arcgis.com/rest/services-reference/export-map.htm
   * for further reference.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * The projection code must contain a numeric end portion separated by :
   * or the entire code must form a valid ArcGIS SpatialReference definition.
   * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,
   * `2` means twice the size of the map viewport, and so on.
   * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for
   * these resolutions only.
   * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url
   * should include /MapServer or /ImageServer.
   */

  /**
   * @classdesc
   * Source for data from ArcGIS Rest services providing single, untiled images.
   * Useful when underlying map service has labels.
   *
   * If underlying map service is not using labels,
   * take advantage of ol image caching and use
   * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageArcGISRest extends ImageSource$1 {
    /**
     * @param {Options} [options] Image ArcGIS Rest Options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        attributions: options.attributions,
        interpolate: options.interpolate,
        projection: options.projection,
        resolutions: options.resolutions,
      });

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = createCanvasContext2D(1, 1);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {string|undefined}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../Image.js").LoadFunction}
       */
      this.imageLoadFunction_ =
        options.imageLoadFunction !== undefined
          ? options.imageLoadFunction
          : defaultImageLoadFunction;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../Image.js").default} Single image.
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      if (this.url_ === undefined) {
        return null;
      }

      resolution = this.findNearestResolution(resolution);
      pixelRatio = this.hidpi_ ? pixelRatio : 1;

      const image = this.image_;
      if (
        image &&
        this.renderedRevision_ == this.getRevision() &&
        image.getResolution() == resolution &&
        image.getPixelRatio() == pixelRatio &&
        containsExtent(image.getExtent(), extent)
      ) {
        return image;
      }

      const params = {
        'F': 'image',
        'FORMAT': 'PNG32',
        'TRANSPARENT': true,
      };
      Object.assign(params, this.params_);

      extent = extent.slice();
      const centerX = (extent[0] + extent[2]) / 2;
      const centerY = (extent[1] + extent[3]) / 2;
      if (this.ratio_ != 1) {
        const halfWidth = (this.ratio_ * getWidth(extent)) / 2;
        const halfHeight = (this.ratio_ * getHeight(extent)) / 2;
        extent[0] = centerX - halfWidth;
        extent[1] = centerY - halfHeight;
        extent[2] = centerX + halfWidth;
        extent[3] = centerY + halfHeight;
      }

      const imageResolution = resolution / pixelRatio;

      // Compute an integer width and height.
      const width = Math.ceil(getWidth(extent) / imageResolution);
      const height = Math.ceil(getHeight(extent) / imageResolution);

      // Modify the extent to match the integer width and height.
      extent[0] = centerX - (imageResolution * width) / 2;
      extent[2] = centerX + (imageResolution * width) / 2;
      extent[1] = centerY - (imageResolution * height) / 2;
      extent[3] = centerY + (imageResolution * height) / 2;

      this.imageSize_[0] = width;
      this.imageSize_[1] = height;

      const url = this.getRequestUrl_(
        extent,
        this.imageSize_,
        pixelRatio,
        projection,
        params
      );

      this.image_ = new Image$1(
        extent,
        resolution,
        pixelRatio,
        url,
        this.crossOrigin_,
        this.imageLoadFunction_,
        this.context_
      );

      this.renderedRevision_ = this.getRevision();

      this.image_.addEventListener(
        EventType.CHANGE,
        this.handleImageChange.bind(this)
      );

      return this.image_;
    }

    /**
     * Return the image load function of the source.
     * @return {import("../Image.js").LoadFunction} The image load function.
     * @api
     */
    getImageLoadFunction() {
      return this.imageLoadFunction_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string} Request URL.
     * @private
     */
    getRequestUrl_(extent, size, pixelRatio, projection, params) {
      // ArcGIS Server only wants the numeric portion of the projection ID.
      // (if there is no numeric portion the entire projection code must
      // form a valid ArcGIS SpatialReference definition).
      const srid = projection
        .getCode()
        .split(/:(?=\d+$)/)
        .pop();

      params['SIZE'] = size[0] + ',' + size[1];
      params['BBOX'] = extent.join(',');
      params['BBOXSR'] = srid;
      params['IMAGESR'] = srid;
      params['DPI'] = Math.round(90 * pixelRatio);

      const url = this.url_;

      const modifiedUrl = url
        .replace(/MapServer\/?$/, 'MapServer/export')
        .replace(/ImageServer\/?$/, 'ImageServer/exportImage');
      if (modifiedUrl == url) {
        assert(false, 50); // `options.featureTypes` should be an Array
      }
      return appendParams(modifiedUrl, params);
    }

    /**
     * Return the URL used for this ArcGIS source.
     * @return {string|undefined} URL.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * Set the image load function of the source.
     * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
     * @api
     */
    setImageLoadFunction(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    }

    /**
     * Set the URL to use for requests.
     * @param {string|undefined} url URL.
     * @api
     */
    setUrl(url) {
      if (url != this.url_) {
        this.url_ = url;
        this.image_ = null;
        this.changed();
      }
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      Object.assign(this.params_, params);
      this.image_ = null;
      this.changed();
    }
  }

  var ImageArcGISRest$1 = ImageArcGISRest;

  /**
   * @module ol/source/ImageCanvas
   */

  /**
   * A function returning the canvas element (`{HTMLCanvasElement}`)
   * used by the source as an image. The arguments passed to the function are:
   * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,
   * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,
   * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by
   * this function is cached by the source. The this keyword inside the function
   * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.
   *
   * @typedef {function(this:import("../ImageCanvas.js").default, import("../extent.js").Extent, number,
   *     number, import("../size.js").Size, import("../proj/Projection.js").default): HTMLCanvasElement} FunctionType
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {FunctionType} [canvasFunction] Canvas function.
   * The function returning the canvas element used by the source
   * as an image. The arguments passed to the function are: {@link import("../extent.js").Extent} the
   * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,
   * {@link import("../size.js").Size} the image size, and {@link import("../proj/Projection.js").default} the image
   * projection. The canvas returned by this function is cached by the source. If
   * the value returned by the function is later changed then
   * `changed` should be called on the source for the source to
   * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the
   * width and height of the map viewport, and so on. Must be `1` or higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, new canvases will be created for these resolutions
   * @property {import("./Source.js").State} [state] Source state.
   */

  /**
   * @classdesc
   * Base class for image sources where a canvas element is the image.
   * @api
   */
  class ImageCanvasSource extends ImageSource$1 {
    /**
     * @param {Options} [options] ImageCanvas options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        attributions: options.attributions,
        interpolate: options.interpolate,
        projection: options.projection,
        resolutions: options.resolutions,
        state: options.state,
      });

      /**
       * @private
       * @type {FunctionType}
       */
      this.canvasFunction_ = options.canvasFunction;

      /**
       * @private
       * @type {import("../ImageCanvas.js").default}
       */
      this.canvas_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../ImageCanvas.js").default} Single image.
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      resolution = this.findNearestResolution(resolution);

      let canvas = this.canvas_;
      if (
        canvas &&
        this.renderedRevision_ == this.getRevision() &&
        canvas.getResolution() == resolution &&
        canvas.getPixelRatio() == pixelRatio &&
        containsExtent(canvas.getExtent(), extent)
      ) {
        return canvas;
      }

      extent = extent.slice();
      scaleFromCenter(extent, this.ratio_);
      const width = getWidth(extent) / resolution;
      const height = getHeight(extent) / resolution;
      const size = [width * pixelRatio, height * pixelRatio];

      const canvasElement = this.canvasFunction_.call(
        this,
        extent,
        resolution,
        pixelRatio,
        size,
        projection
      );
      if (canvasElement) {
        canvas = new ImageCanvas$1(extent, resolution, pixelRatio, canvasElement);
      }
      this.canvas_ = canvas;
      this.renderedRevision_ = this.getRevision();

      return canvas;
    }
  }

  var ImageCanvasSource$1 = ImageCanvasSource;

  /**
   * @module ol/source/ImageMapGuide
   */

  /**
   * @typedef {Object} Options
   * @property {string} [url] The mapagent url.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {number} [displayDpi=96] The display resolution.
   * @property {number} [metersPerUnit=1] The meters-per-unit value.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means
   * twice the width and height of the map viewport, and so on. Must be `1` or higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, requests will be made for these resolutions only.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {Object} [params] Additional parameters.
   */

  /**
   * @classdesc
   * Source for images from Mapguide servers
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageMapGuide extends ImageSource$1 {
    /**
     * @param {Options} options ImageMapGuide options.
     */
    constructor(options) {
      super({
        interpolate: options.interpolate,
        projection: options.projection,
        resolutions: options.resolutions,
      });

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = createCanvasContext2D(1, 1);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @private
       * @type {number}
       */
      this.displayDpi_ =
        options.displayDpi !== undefined ? options.displayDpi : 96;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {string|undefined}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../Image.js").LoadFunction}
       */
      this.imageLoadFunction_ =
        options.imageLoadFunction !== undefined
          ? options.imageLoadFunction
          : defaultImageLoadFunction;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {number}
       */
      this.metersPerUnit_ =
        options.metersPerUnit !== undefined ? options.metersPerUnit : 1;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1;

      /**
       * @private
       * @type {boolean}
       */
      this.useOverlay_ =
        options.useOverlay !== undefined ? options.useOverlay : false;

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../Image.js").default} Single image.
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      resolution = this.findNearestResolution(resolution);
      pixelRatio = this.hidpi_ ? pixelRatio : 1;

      let image = this.image_;
      if (
        image &&
        this.renderedRevision_ == this.getRevision() &&
        image.getResolution() == resolution &&
        image.getPixelRatio() == pixelRatio &&
        containsExtent(image.getExtent(), extent)
      ) {
        return image;
      }

      if (this.ratio_ != 1) {
        extent = extent.slice();
        scaleFromCenter(extent, this.ratio_);
      }
      const width = getWidth(extent) / resolution;
      const height = getHeight(extent) / resolution;
      const size = [width * pixelRatio, height * pixelRatio];

      if (this.url_ !== undefined) {
        const imageUrl = this.getUrl(
          this.url_,
          this.params_,
          extent,
          size,
          projection
        );
        image = new Image$1(
          extent,
          resolution,
          pixelRatio,
          imageUrl,
          this.crossOrigin_,
          this.imageLoadFunction_,
          this.context_
        );
        image.addEventListener(
          EventType.CHANGE,
          this.handleImageChange.bind(this)
        );
      } else {
        image = null;
      }
      this.image_ = image;
      this.renderedRevision_ = this.getRevision();

      return image;
    }

    /**
     * Return the image load function of the source.
     * @return {import("../Image.js").LoadFunction} The image load function.
     * @api
     */
    getImageLoadFunction() {
      return this.imageLoadFunction_;
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      Object.assign(this.params_, params);
      this.changed();
    }

    /**
     * @param {string} baseUrl The mapagent url.
     * @param {Object<string, string|number>} params Request parameters.
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../size.js").Size} size Size.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {string} The mapagent map image request URL.
     */
    getUrl(baseUrl, params, extent, size, projection) {
      const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);
      const center = getCenter(extent);
      const baseParams = {
        'OPERATION': this.useOverlay_
          ? 'GETDYNAMICMAPOVERLAYIMAGE'
          : 'GETMAPIMAGE',
        'VERSION': '2.0.0',
        'LOCALE': 'en',
        'CLIENTAGENT': 'ol/source/ImageMapGuide source',
        'CLIP': '1',
        'SETDISPLAYDPI': this.displayDpi_,
        'SETDISPLAYWIDTH': Math.round(size[0]),
        'SETDISPLAYHEIGHT': Math.round(size[1]),
        'SETVIEWSCALE': scale,
        'SETVIEWCENTERX': center[0],
        'SETVIEWCENTERY': center[1],
      };
      Object.assign(baseParams, params);
      return appendParams(baseUrl, baseParams);
    }

    /**
     * Set the image load function of the MapGuide source.
     * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
     * @api
     */
    setImageLoadFunction(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    }
  }

  /**
   * @param {import("../extent.js").Extent} extent The map extents.
   * @param {import("../size.js").Size} size The viewport size.
   * @param {number} metersPerUnit The meters-per-unit value.
   * @param {number} dpi The display resolution.
   * @return {number} The computed map scale.
   */
  function getScale(extent, size, metersPerUnit, dpi) {
    const mcsW = getWidth(extent);
    const mcsH = getHeight(extent);
    const devW = size[0];
    const devH = size[1];
    const mpp = 0.0254 / dpi;
    if (devH * mcsW > devW * mcsH) {
      return (mcsW * metersPerUnit) / (devW * mpp); // width limited
    }
    return (mcsH * metersPerUnit) / (devH * mpp); // height limited
  }

  var ImageMapGuide$1 = ImageMapGuide;

  /**
   * @module ol/source/ImageStatic
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../extent.js").Extent} [imageExtent] Extent of the image in map coordinates.
   * This is the [left, bottom, right, top] map coordinates of your image.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {import("../size.js").Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this
   * only needs to be set if auto-detection fails for some reason.
   * @property {string} url Image URL.
   */

  /**
   * @classdesc
   * A layer source for displaying a single, static image.
   * @api
   */
  class Static extends ImageSource$1 {
    /**
     * @param {Options} options ImageStatic options.
     */
    constructor(options) {
      const crossOrigin =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      const /** @type {import("../Image.js").LoadFunction} */ imageLoadFunction =
          options.imageLoadFunction !== undefined
            ? options.imageLoadFunction
            : defaultImageLoadFunction;

      super({
        attributions: options.attributions,
        interpolate: options.interpolate,
        projection: get$2(options.projection),
      });

      /**
       * @private
       * @type {string}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.imageExtent_ = options.imageExtent;

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = new Image$1(
        this.imageExtent_,
        undefined,
        1,
        this.url_,
        crossOrigin,
        imageLoadFunction,
        createCanvasContext2D(1, 1)
      );

      /**
       * @private
       * @type {import("../size.js").Size|null}
       */
      this.imageSize_ = options.imageSize ? options.imageSize : null;

      this.image_.addEventListener(
        EventType.CHANGE,
        this.handleImageChange.bind(this)
      );
    }

    /**
     * Returns the image extent
     * @return {import("../extent.js").Extent} image extent.
     * @api
     */
    getImageExtent() {
      return this.imageExtent_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../Image.js").default} Single image.
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      if (intersects$2(extent, this.image_.getExtent())) {
        return this.image_;
      }
      return null;
    }

    /**
     * Return the URL used for this image source.
     * @return {string} URL.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * @param {import("../events/Event.js").default} evt Event.
     */
    handleImageChange(evt) {
      if (this.image_.getState() == ImageState.LOADED) {
        const imageExtent = this.image_.getExtent();
        const image = this.image_.getImage();
        let imageWidth, imageHeight;
        if (this.imageSize_) {
          imageWidth = this.imageSize_[0];
          imageHeight = this.imageSize_[1];
        } else {
          imageWidth = image.width;
          imageHeight = image.height;
        }
        const extentWidth = getWidth(imageExtent);
        const extentHeight = getHeight(imageExtent);
        const xResolution = extentWidth / imageWidth;
        const yResolution = extentHeight / imageHeight;
        let targetWidth = imageWidth;
        let targetHeight = imageHeight;
        if (xResolution > yResolution) {
          targetWidth = Math.round(extentWidth / yResolution);
        } else {
          targetHeight = Math.round(extentHeight / xResolution);
        }
        if (targetWidth !== imageWidth || targetHeight !== imageHeight) {
          const context = createCanvasContext2D(targetWidth, targetHeight);
          if (!this.getInterpolate()) {
            context.imageSmoothingEnabled = false;
          }
          const canvas = context.canvas;
          context.drawImage(
            image,
            0,
            0,
            imageWidth,
            imageHeight,
            0,
            0,
            canvas.width,
            canvas.height
          );
          this.image_.setImage(canvas);
        }
      }
      super.handleImageChange(evt);
    }
  }

  var Static$1 = Static;

  /**
   * @module ol/source/wms
   */

  /**
   * Default WMS version.
   * @type {string}
   */
  const DEFAULT_VERSION = '1.3.0';

  /**
   * @api
   * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType
   * Set the server type to use implementation-specific parameters beyond the WMS specification.
   *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)
   *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)
   *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)
   *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)
   */

  /**
   * @module ol/source/ImageWMS
   */

  /**
   * Number of decimal digits to consider in integer values when rounding.
   * @type {number}
   */
  const DECIMALS = 4;

  /**
   * @const
   * @type {import("../size.js").Size}
   */
  const GETFEATUREINFO_IMAGE_SIZE = [101, 101];

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("./wms.js").ServerType} [serverType] The type of
   * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.
   * Only needed if `hidpi` is `true`.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {Object<string,*>} [params] WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means
   * twice the width and height of the map viewport, and so on. Must be `1` or
   * higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, requests will be made for these resolutions only.
   * @property {string} [url] WMS service URL.
   */

  /**
   * @classdesc
   * Source for WMS servers providing single, untiled images.
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  class ImageWMS extends ImageSource$1 {
    /**
     * @param {Options} [options] ImageWMS options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        attributions: options.attributions,
        interpolate: options.interpolate,
        projection: options.projection,
        resolutions: options.resolutions,
      });

      /**
       * @private
       * @type {CanvasRenderingContext2D}
       */
      this.context_ = createCanvasContext2D(1, 1);

      /**
       * @private
       * @type {?string}
       */
      this.crossOrigin_ =
        options.crossOrigin !== undefined ? options.crossOrigin : null;

      /**
       * @private
       * @type {string|undefined}
       */
      this.url_ = options.url;

      /**
       * @private
       * @type {import("../Image.js").LoadFunction}
       */
      this.imageLoadFunction_ =
        options.imageLoadFunction !== undefined
          ? options.imageLoadFunction
          : defaultImageLoadFunction;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = Object.assign({}, options.params);

      /**
       * @private
       * @type {boolean}
       */
      this.v13_ = true;
      this.updateV13_();

      /**
       * @private
       * @type {import("./wms.js").ServerType}
       */
      this.serverType_ = options.serverType;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {import("../Image.js").default}
       */
      this.image_ = null;

      /**
       * @private
       * @type {import("../size.js").Size}
       */
      this.imageSize_ = [0, 0];

      /**
       * @private
       * @type {number}
       */
      this.renderedRevision_ = 0;

      /**
       * @private
       * @type {number}
       */
      this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;
    }

    /**
     * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
     * projection. Return `undefined` if the GetFeatureInfo URL cannot be
     * constructed.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
     *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
     *     in the `LAYERS` parameter will be used. `VERSION` should not be
     *     specified here.
     * @return {string|undefined} GetFeatureInfo URL.
     * @api
     */
    getFeatureInfoUrl(coordinate, resolution, projection, params) {
      if (this.url_ === undefined) {
        return undefined;
      }
      const projectionObj = get$2(projection);
      const sourceProjectionObj = this.getProjection();

      if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
        resolution = calculateSourceResolution(
          sourceProjectionObj,
          projectionObj,
          coordinate,
          resolution
        );
        coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
      }

      const extent = getForViewAndSize(
        coordinate,
        resolution,
        0,
        GETFEATUREINFO_IMAGE_SIZE
      );

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetFeatureInfo',
        'FORMAT': 'image/png',
        'TRANSPARENT': true,
        'QUERY_LAYERS': this.params_['LAYERS'],
      };
      Object.assign(baseParams, this.params_, params);

      const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);
      const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);
      baseParams[this.v13_ ? 'I' : 'X'] = x;
      baseParams[this.v13_ ? 'J' : 'Y'] = y;

      return this.getRequestUrl_(
        extent,
        GETFEATUREINFO_IMAGE_SIZE,
        1,
        sourceProjectionObj || projectionObj,
        baseParams
      );
    }

    /**
     * Return the GetLegendGraphic URL, optionally optimized for the passed
     * resolution and possibly including any passed specific parameters. Returns
     * `undefined` if the GetLegendGraphic URL cannot be constructed.
     *
     * @param {number} [resolution] Resolution. If set to undefined, `SCALE`
     *     will not be calculated and included in URL.
     * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the
     *     request is generated for this wms layer, else it will try to use the
     *     configured wms layer. Default `FORMAT` is `image/png`.
     *     `VERSION` should not be specified here.
     * @return {string|undefined} GetLegendGraphic URL.
     * @api
     */
    getLegendUrl(resolution, params) {
      if (this.url_ === undefined) {
        return undefined;
      }

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetLegendGraphic',
        'FORMAT': 'image/png',
      };

      if (params === undefined || params['LAYER'] === undefined) {
        const layers = this.params_.LAYERS;
        const isSingleLayer = !Array.isArray(layers) || layers.length === 1;
        if (!isSingleLayer) {
          return undefined;
        }
        baseParams['LAYER'] = layers;
      }

      if (resolution !== undefined) {
        const mpu = this.getProjection()
          ? this.getProjection().getMetersPerUnit()
          : 1;
        const pixelSize = 0.00028;
        baseParams['SCALE'] = (resolution * mpu) / pixelSize;
      }

      Object.assign(baseParams, params);

      return appendParams(/** @type {string} */ (this.url_), baseParams);
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {import("../Image.js").default} Single image.
     */
    getImageInternal(extent, resolution, pixelRatio, projection) {
      if (this.url_ === undefined) {
        return null;
      }

      resolution = this.findNearestResolution(resolution);

      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
        pixelRatio = 1;
      }

      const imageResolution = resolution / pixelRatio;

      const center = getCenter(extent);
      const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);
      const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);
      const viewExtent = getForViewAndSize(center, imageResolution, 0, [
        viewWidth,
        viewHeight,
      ]);
      const requestWidth = ceil(
        (this.ratio_ * getWidth(extent)) / imageResolution,
        DECIMALS
      );
      const requestHeight = ceil(
        (this.ratio_ * getHeight(extent)) / imageResolution,
        DECIMALS
      );
      const requestExtent = getForViewAndSize(center, imageResolution, 0, [
        requestWidth,
        requestHeight,
      ]);

      const image = this.image_;
      if (
        image &&
        this.renderedRevision_ == this.getRevision() &&
        image.getResolution() == resolution &&
        image.getPixelRatio() == pixelRatio &&
        containsExtent(image.getExtent(), viewExtent)
      ) {
        return image;
      }

      const params = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetMap',
        'FORMAT': 'image/png',
        'TRANSPARENT': true,
      };
      Object.assign(params, this.params_);

      this.imageSize_[0] = round(
        getWidth(requestExtent) / imageResolution,
        DECIMALS
      );
      this.imageSize_[1] = round(
        getHeight(requestExtent) / imageResolution,
        DECIMALS
      );

      const url = this.getRequestUrl_(
        requestExtent,
        this.imageSize_,
        pixelRatio,
        projection,
        params
      );

      this.image_ = new Image$1(
        requestExtent,
        resolution,
        pixelRatio,
        url,
        this.crossOrigin_,
        this.imageLoadFunction_,
        this.context_
      );

      this.renderedRevision_ = this.getRevision();

      this.image_.addEventListener(
        EventType.CHANGE,
        this.handleImageChange.bind(this)
      );

      return this.image_;
    }

    /**
     * Return the image load function of the source.
     * @return {import("../Image.js").LoadFunction} The image load function.
     * @api
     */
    getImageLoadFunction() {
      return this.imageLoadFunction_;
    }

    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {import("../size.js").Size} size Size.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string} Request URL.
     * @private
     */
    getRequestUrl_(extent, size, pixelRatio, projection, params) {
      assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`

      params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();

      if (!('STYLES' in this.params_)) {
        params['STYLES'] = '';
      }

      if (pixelRatio != 1) {
        switch (this.serverType_) {
          case 'geoserver':
            const dpi = (90 * pixelRatio + 0.5) | 0;
            if ('FORMAT_OPTIONS' in params) {
              params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
            } else {
              params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
            }
            break;
          case 'mapserver':
            params['MAP_RESOLUTION'] = 90 * pixelRatio;
            break;
          case 'carmentaserver':
          case 'qgis':
            params['DPI'] = 90 * pixelRatio;
            break;
          default: // Unknown `serverType` configured
            assert(false, 8);
            break;
        }
      }

      params['WIDTH'] = size[0];
      params['HEIGHT'] = size[1];

      const axisOrientation = projection.getAxisOrientation();
      let bbox;
      if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
        bbox = [extent[1], extent[0], extent[3], extent[2]];
      } else {
        bbox = extent;
      }
      params['BBOX'] = bbox.join(',');

      return appendParams(/** @type {string} */ (this.url_), params);
    }

    /**
     * Return the URL used for this WMS source.
     * @return {string|undefined} URL.
     * @api
     */
    getUrl() {
      return this.url_;
    }

    /**
     * Set the image load function of the source.
     * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
     * @api
     */
    setImageLoadFunction(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    }

    /**
     * Set the URL to use for requests.
     * @param {string|undefined} url URL.
     * @api
     */
    setUrl(url) {
      if (url != this.url_) {
        this.url_ = url;
        this.image_ = null;
        this.changed();
      }
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      Object.assign(this.params_, params);
      this.updateV13_();
      this.image_ = null;
      this.changed();
    }

    /**
     * @private
     */
    updateV13_() {
      const version = this.params_['VERSION'] || DEFAULT_VERSION;
      this.v13_ = compareVersions(version, '1.3') >= 0;
    }
  }

  var ImageWMS$1 = ImageWMS;

  /**
   * @module ol/source/OSM
   */

  /**
   * The attribution containing a link to the OpenStreetMap Copyright and License
   * page.
   * @const
   * @type {string}
   * @api
   */
  const ATTRIBUTION =
    '&#169; ' +
    '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> ' +
    'contributors.';

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {number} [maxZoom=19] Max zoom.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
   * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for the OpenStreetMap tile server.
   * @api
   */
  class OSM extends XYZ$1 {
    /**
     * @param {Options} [options] Open Street Map options.
     */
    constructor(options) {
      options = options || {};

      let attributions;
      if (options.attributions !== undefined) {
        attributions = options.attributions;
      } else {
        attributions = [ATTRIBUTION];
      }

      const crossOrigin =
        options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';

      const url =
        options.url !== undefined
          ? options.url
          : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';

      super({
        attributions: attributions,
        attributionsCollapsible: false,
        cacheSize: options.cacheSize,
        crossOrigin: crossOrigin,
        interpolate: options.interpolate,
        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
        opaque: options.opaque !== undefined ? options.opaque : true,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileLoadFunction: options.tileLoadFunction,
        transition: options.transition,
        url: url,
        wrapX: options.wrapX,
        zDirection: options.zDirection,
      });
    }
  }

  var OSM$1 = OSM;

  /**
   * @module ol/source/Stamen
   */

  /**
   * @const
   * @type {Array<string>}
   */
  const ATTRIBUTIONS = [
    'Map tiles by <a href="https://stamen.com/" target="_blank">Stamen Design</a>, ' +
      'under <a href="https://creativecommons.org/licenses/by/3.0/" target="_blank">CC BY' +
      ' 3.0</a>.',
    ATTRIBUTION,
  ];

  /**
   * @type {Object<string, {extension: string, opaque: boolean}>}
   */
  const LayerConfig = {
    'terrain': {
      extension: 'png',
      opaque: true,
    },
    'terrain-background': {
      extension: 'png',
      opaque: true,
    },
    'terrain-labels': {
      extension: 'png',
      opaque: false,
    },
    'terrain-lines': {
      extension: 'png',
      opaque: false,
    },
    'toner-background': {
      extension: 'png',
      opaque: true,
    },
    'toner': {
      extension: 'png',
      opaque: true,
    },
    'toner-hybrid': {
      extension: 'png',
      opaque: false,
    },
    'toner-labels': {
      extension: 'png',
      opaque: false,
    },
    'toner-lines': {
      extension: 'png',
      opaque: false,
    },
    'toner-lite': {
      extension: 'png',
      opaque: true,
    },
    'watercolor': {
      extension: 'jpg',
      opaque: true,
    },
  };

  /**
   * @type {Object<string, {minZoom: number, maxZoom: number}>}
   */
  const ProviderConfig = {
    'terrain': {
      minZoom: 0,
      maxZoom: 18,
    },
    'toner': {
      minZoom: 0,
      maxZoom: 20,
    },
    'watercolor': {
      minZoom: 0,
      maxZoom: 18,
    },
  };

  /**
   * @typedef {Object} Options
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {string} layer Layer name.
   * @property {number} [minZoom] Minimum zoom.
   * @property {number} [maxZoom] Maximum zoom.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
   * Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [transition=250] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for the Stamen tile server.
   * @api
   */
  class Stamen extends XYZ$1 {
    /**
     * @param {Options} options Stamen options.
     */
    constructor(options) {
      const i = options.layer.indexOf('-');
      const provider = i == -1 ? options.layer : options.layer.slice(0, i);
      const providerConfig = ProviderConfig[provider];

      const layerConfig = LayerConfig[options.layer];

      const url =
        options.url !== undefined
          ? options.url
          : 'https://stamen-tiles-{a-d}.a.ssl.fastly.net/' +
            options.layer +
            '/{z}/{x}/{y}.' +
            layerConfig.extension;

      super({
        attributions: ATTRIBUTIONS,
        cacheSize: options.cacheSize,
        crossOrigin: 'anonymous',
        interpolate: options.interpolate,
        maxZoom:
          options.maxZoom != undefined ? options.maxZoom : providerConfig.maxZoom,
        minZoom:
          options.minZoom != undefined ? options.minZoom : providerConfig.minZoom,
        opaque: layerConfig.opaque,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileLoadFunction: options.tileLoadFunction,
        transition: options.transition,
        url: url,
        wrapX: options.wrapX,
        zDirection: options.zDirection,
      });
    }
  }

  var Stamen$1 = Stamen;

  /**
   * @module ol/source/TileArcGISRest
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be
   * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by
   * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,
   * and `IMAGESR` will be set dynamically. Set `LAYERS` to
   * override the default service layer visibility. See
   * https://developers.arcgis.com/rest/services-reference/export-map.htm
   * for further reference.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid. Base this on the resolutions,
   * tilesize and extent supported by the server.
   * If this is not defined, a default grid will be used: if there is a projection
   * extent, the grid will be based on that; if not, a grid based on a global
   * extent with origin at 0,0 will be used.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * The projection code must contain a numeric end portion separated by :
   * or the entire code must form a valid ArcGIS SpatialReference definition.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.
   * The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The
   * url should include /MapServer or /ImageServer.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity
   * transition, pass `transition: 0`.
   * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS
   * Service supports multiple urls for export requests.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data from ArcGIS Rest services. Map and Image
   * Services are supported.
   *
   * For cached ArcGIS services, better performance is available using the
   * {@link module:ol/source/XYZ~XYZ} data source.
   * @api
   */
  class TileArcGISRest extends TileImage$1 {
    /**
     * @param {Options} [options] Tile ArcGIS Rest options.
     */
    constructor(options) {
      options = options ? options : {};

      super({
        attributions: options.attributions,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = options.params || {};

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = createEmpty();

      this.setKey(this.getKeyForParams_());
    }

    /**
     * @private
     * @return {string} The key for the current params.
     */
    getKeyForParams_() {
      let i = 0;
      const res = [];
      for (const key in this.params_) {
        res[i++] = key + '-' + this.params_[key];
      }
      return res.join('/');
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../size.js").Size} tileSize Tile size.
     * @param {import("../extent.js").Extent} tileExtent Tile extent.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string|undefined} Request URL.
     * @private
     */
    getRequestUrl_(
      tileCoord,
      tileSize,
      tileExtent,
      pixelRatio,
      projection,
      params
    ) {
      const urls = this.urls;
      if (!urls) {
        return undefined;
      }

      // ArcGIS Server only wants the numeric portion of the projection ID.
      // (if there is no numeric portion the entire projection code must
      // form a valid ArcGIS SpatialReference definition).
      const srid = projection
        .getCode()
        .split(/:(?=\d+$)/)
        .pop();

      params['SIZE'] = tileSize[0] + ',' + tileSize[1];
      params['BBOX'] = tileExtent.join(',');
      params['BBOXSR'] = srid;
      params['IMAGESR'] = srid;
      params['DPI'] = Math.round(
        params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio
      );

      let url;
      if (urls.length == 1) {
        url = urls[0];
      } else {
        const index = modulo(hash(tileCoord), urls.length);
        url = urls[index];
      }

      const modifiedUrl = url
        .replace(/MapServer\/?$/, 'MapServer/export')
        .replace(/ImageServer\/?$/, 'ImageServer/exportImage');
      return appendParams(modifiedUrl, params);
    }

    /**
     * Get the tile pixel ratio for this source.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    getTilePixelRatio(pixelRatio) {
      return this.hidpi_ ? pixelRatio : 1;
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      Object.assign(this.params_, params);
      this.setKey(this.getKeyForParams_());
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord The tile coordinate
     * @param {number} pixelRatio The pixel ratio
     * @param {import("../proj/Projection.js").default} projection The projection
     * @return {string|undefined} The tile URL
     * @override
     */
    tileUrlFunction(tileCoord, pixelRatio, projection) {
      let tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projection);
      }

      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return undefined;
      }

      if (pixelRatio != 1 && !this.hidpi_) {
        pixelRatio = 1;
      }

      const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

      if (pixelRatio != 1) {
        tileSize = scale(tileSize, pixelRatio, this.tmpSize);
      }

      // Apply default params and override with user specified values.
      const baseParams = {
        'F': 'image',
        'FORMAT': 'PNG32',
        'TRANSPARENT': true,
      };
      Object.assign(baseParams, this.params_);

      return this.getRequestUrl_(
        tileCoord,
        tileSize,
        tileExtent,
        pixelRatio,
        projection,
        baseParams
      );
    }
  }

  var TileArcGISRest$1 = TileArcGISRest;

  /**
   * @module ol/source/TileDebug
   */

  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Optional projection.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Set to `1` when debugging `VectorTile` sources with a default configuration.
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.
   * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   */

  /**
   * @classdesc
   * A pseudo tile source, which does not fetch tiles from a server, but renders
   * a grid outline for the tile grid/projection along with the coordinates for
   * each tile. See examples/canvas-tiles for an example.
   * @api
   */
  class TileDebug extends XYZ$1 {
    /**
     * @param {Options} [options] Debug tile options.
     */
    constructor(options) {
      /**
       * @type {Options}
       */
      options = options || {};

      super({
        opaque: false,
        projection: options.projection,
        tileGrid: options.tileGrid,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        zDirection: options.zDirection,
        url: options.template || 'z:{z} x:{x} y:{y}',
        tileLoadFunction: (tile, text) => {
          const z = tile.getTileCoord()[0];
          const tileSize = toSize(this.tileGrid.getTileSize(z));
          const context = createCanvasContext2D(tileSize[0], tileSize[1]);

          context.strokeStyle = 'grey';
          context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);

          context.fillStyle = 'grey';
          context.strokeStyle = 'white';
          context.textAlign = 'center';
          context.textBaseline = 'middle';
          context.font = '24px sans-serif';
          context.lineWidth = 4;
          context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);
          context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);

          /** @type {import("../ImageTile.js").default} */ (tile).setImage(
            context.canvas
          );
        },
      });
    }
  }

  var TileDebug$1 = TileDebug;

  /**
   * @module ol/source/TileWMS
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {Object<string,*>} params WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {number} [gutter=0]
   * The size in pixels of the gutter around image tiles to ignore. By setting
   * this property to a non-zero value, images will be requested that are wider
   * and taller than the tile size by a value of `2 x gutter`.
   * Using a non-zero value allows artifacts of rendering at tile edges to be
   * ignored. If you control the WMS service it is recommended to address
   * "artifacts at tile edges" issues by properly configuring the WMS service. For
   * example, MapServer has a `tile_map_edge_buffer` configuration parameter for
   * this. See https://mapserver.org/output/tile_mode.html.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid. Base this on the resolutions,
   * tilesize and extent supported by the server.
   * If this is not defined, a default grid will be used: if there is a projection
   * extent, the grid will be based on that; if not, a grid based on a global
   * extent with origin at 0,0 will be used.
   * @property {import("./wms.js").ServerType} [serverType] The type of
   * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.
   * Only needed if `hidpi` is `true`.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url] WMS service URL.
   * @property {Array<string>} [urls] WMS service urls.
   * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When `true`, tiles will be requested for one world only,
   * but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data from WMS servers.
   * @api
   */
  class TileWMS extends TileImage$1 {
    /**
     * @param {Options} [options] Tile WMS options.
     */
    constructor(options) {
      options = options ? options : /** @type {Options} */ ({});

      const params = Object.assign({}, options.params);

      const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        opaque: !transparent,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {number}
       */
      this.gutter_ = options.gutter !== undefined ? options.gutter : 0;

      /**
       * @private
       * @type {!Object}
       */
      this.params_ = params;

      /**
       * @private
       * @type {boolean}
       */
      this.v13_ = true;

      /**
       * @private
       * @type {import("./wms.js").ServerType}
       */
      this.serverType_ = options.serverType;

      /**
       * @private
       * @type {boolean}
       */
      this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.tmpExtent_ = createEmpty();

      this.updateV13_();
      this.setKey(this.getKeyForParams_());
    }

    /**
     * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
     * projection. Return `undefined` if the GetFeatureInfo URL cannot be
     * constructed.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {import("../proj.js").ProjectionLike} projection Projection.
     * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
     *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
     *     in the `LAYERS` parameter will be used. `VERSION` should not be
     *     specified here.
     * @return {string|undefined} GetFeatureInfo URL.
     * @api
     */
    getFeatureInfoUrl(coordinate, resolution, projection, params) {
      const projectionObj = get$2(projection);
      const sourceProjectionObj = this.getProjection();

      let tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projectionObj);
      }

      const z = tileGrid.getZForResolution(resolution, this.zDirection);
      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);

      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return undefined;
      }

      let tileResolution = tileGrid.getResolution(tileCoord[0]);
      let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

      const gutter = this.gutter_;
      if (gutter !== 0) {
        tileSize = buffer$1(tileSize, gutter, this.tmpSize);
        tileExtent = buffer$2(tileExtent, tileResolution * gutter, tileExtent);
      }

      if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
        tileResolution = calculateSourceResolution(
          sourceProjectionObj,
          projectionObj,
          coordinate,
          tileResolution
        );
        tileExtent = transformExtent(
          tileExtent,
          projectionObj,
          sourceProjectionObj
        );
        coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
      }

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetFeatureInfo',
        'FORMAT': 'image/png',
        'TRANSPARENT': true,
        'QUERY_LAYERS': this.params_['LAYERS'],
      };
      Object.assign(baseParams, this.params_, params);

      const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);
      const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);

      baseParams[this.v13_ ? 'I' : 'X'] = x;
      baseParams[this.v13_ ? 'J' : 'Y'] = y;

      return this.getRequestUrl_(
        tileCoord,
        tileSize,
        tileExtent,
        1,
        sourceProjectionObj || projectionObj,
        baseParams
      );
    }

    /**
     * Return the GetLegendGraphic URL, optionally optimized for the passed
     * resolution and possibly including any passed specific parameters. Returns
     * `undefined` if the GetLegendGraphic URL cannot be constructed.
     *
     * @param {number} [resolution] Resolution. If set to undefined, `SCALE`
     *     will not be calculated and included in URL.
     * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the
     *     request is generated for this wms layer, else it will try to use the
     *     configured wms layer. Default `FORMAT` is `image/png`.
     *     `VERSION` should not be specified here.
     * @return {string|undefined} GetLegendGraphic URL.
     * @api
     */
    getLegendUrl(resolution, params) {
      if (this.urls[0] === undefined) {
        return undefined;
      }

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetLegendGraphic',
        'FORMAT': 'image/png',
      };

      if (params === undefined || params['LAYER'] === undefined) {
        const layers = this.params_.LAYERS;
        const isSingleLayer = !Array.isArray(layers) || layers.length === 1;
        if (!isSingleLayer) {
          return undefined;
        }
        baseParams['LAYER'] = layers;
      }

      if (resolution !== undefined) {
        const mpu = this.getProjection()
          ? this.getProjection().getMetersPerUnit()
          : 1;
        const pixelSize = 0.00028;
        baseParams['SCALE'] = (resolution * mpu) / pixelSize;
      }

      Object.assign(baseParams, params);

      return appendParams(/** @type {string} */ (this.urls[0]), baseParams);
    }

    /**
     * @return {number} Gutter.
     */
    getGutter() {
      return this.gutter_;
    }

    /**
     * Get the user-provided params, i.e. those passed to the constructor through
     * the "params" option, and possibly updated using the updateParams method.
     * @return {Object} Params.
     * @api
     */
    getParams() {
      return this.params_;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../size.js").Size} tileSize Tile size.
     * @param {import("../extent.js").Extent} tileExtent Tile extent.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @param {Object} params Params.
     * @return {string|undefined} Request URL.
     * @private
     */
    getRequestUrl_(
      tileCoord,
      tileSize,
      tileExtent,
      pixelRatio,
      projection,
      params
    ) {
      const urls = this.urls;
      if (!urls) {
        return undefined;
      }

      params['WIDTH'] = tileSize[0];
      params['HEIGHT'] = tileSize[1];

      params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();

      if (!('STYLES' in this.params_)) {
        params['STYLES'] = '';
      }

      if (pixelRatio != 1) {
        switch (this.serverType_) {
          case 'geoserver':
            const dpi = (90 * pixelRatio + 0.5) | 0;
            if ('FORMAT_OPTIONS' in params) {
              params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
            } else {
              params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
            }
            break;
          case 'mapserver':
            params['MAP_RESOLUTION'] = 90 * pixelRatio;
            break;
          case 'carmentaserver':
          case 'qgis':
            params['DPI'] = 90 * pixelRatio;
            break;
          default: // Unknown `serverType` configured
            assert(false, 52);
            break;
        }
      }

      const axisOrientation = projection.getAxisOrientation();
      const bbox = tileExtent;
      if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
        let tmp;
        tmp = tileExtent[0];
        bbox[0] = tileExtent[1];
        bbox[1] = tmp;
        tmp = tileExtent[2];
        bbox[2] = tileExtent[3];
        bbox[3] = tmp;
      }
      params['BBOX'] = bbox.join(',');

      let url;
      if (urls.length == 1) {
        url = urls[0];
      } else {
        const index = modulo(hash(tileCoord), urls.length);
        url = urls[index];
      }
      return appendParams(url, params);
    }

    /**
     * Get the tile pixel ratio for this source.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Tile pixel ratio.
     */
    getTilePixelRatio(pixelRatio) {
      return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;
    }

    /**
     * @private
     * @return {string} The key for the current params.
     */
    getKeyForParams_() {
      let i = 0;
      const res = [];
      for (const key in this.params_) {
        res[i++] = key + '-' + this.params_[key];
      }
      return res.join('/');
    }

    /**
     * Update the user-provided params.
     * @param {Object} params Params.
     * @api
     */
    updateParams(params) {
      Object.assign(this.params_, params);
      this.updateV13_();
      this.setKey(this.getKeyForParams_());
    }

    /**
     * @private
     */
    updateV13_() {
      const version = this.params_['VERSION'] || DEFAULT_VERSION;
      this.v13_ = compareVersions(version, '1.3') >= 0;
    }

    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord The tile coordinate
     * @param {number} pixelRatio The pixel ratio
     * @param {import("../proj/Projection.js").default} projection The projection
     * @return {string|undefined} The tile URL
     * @override
     */
    tileUrlFunction(tileCoord, pixelRatio, projection) {
      let tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projection);
      }

      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return undefined;
      }

      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
        pixelRatio = 1;
      }

      const tileResolution = tileGrid.getResolution(tileCoord[0]);
      let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);

      const gutter = this.gutter_;
      if (gutter !== 0) {
        tileSize = buffer$1(tileSize, gutter, this.tmpSize);
        tileExtent = buffer$2(tileExtent, tileResolution * gutter, tileExtent);
      }

      if (pixelRatio != 1) {
        tileSize = scale(tileSize, pixelRatio, this.tmpSize);
      }

      const baseParams = {
        'SERVICE': 'WMS',
        'VERSION': DEFAULT_VERSION,
        'REQUEST': 'GetMap',
        'FORMAT': 'image/png',
        'TRANSPARENT': true,
      };
      Object.assign(baseParams, this.params_);

      return this.getRequestUrl_(
        tileCoord,
        tileSize,
        tileExtent,
        pixelRatio,
        projection,
        baseParams
      );
    }
  }

  var TileWMS$1 = TileWMS;

  /**
   * @module ol/source/UTFGrid
   */

  /**
   * @typedef {Object} UTFGridJSON
   * @property {Array<string>} grid The grid.
   * @property {Array<string>} keys The keys.
   * @property {Object<string, Object>} [data] Optional data.
   */

  class CustomTile extends Tile$1 {
    /**
     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("../TileState.js").default} state State.
     * @param {string} src Image source URI.
     * @param {import("../extent.js").Extent} extent Extent of the tile.
     * @param {boolean} preemptive Load the tile when visible (before it's needed).
     * @param {boolean} jsonp Load the tile as a script.
     */
    constructor(tileCoord, state, src, extent, preemptive, jsonp) {
      super(tileCoord, state);

      /**
       * @private
       * @type {string}
       */
      this.src_ = src;

      /**
       * @private
       * @type {import("../extent.js").Extent}
       */
      this.extent_ = extent;

      /**
       * @private
       * @type {boolean}
       */
      this.preemptive_ = preemptive;

      /**
       * @private
       * @type {Array<string>}
       */
      this.grid_ = null;

      /**
       * @private
       * @type {Array<string>}
       */
      this.keys_ = null;

      /**
       * @private
       * @type {Object<string, Object>|undefined}
       */
      this.data_ = null;

      /**
       * @private
       * @type {boolean}
       */
      this.jsonp_ = jsonp;
    }

    /**
     * Get the image element for this tile.
     * @return {HTMLImageElement} Image.
     */
    getImage() {
      return null;
    }

    /**
     * Synchronously returns data at given coordinate (if available).
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @return {*} The data.
     */
    getData(coordinate) {
      if (!this.grid_ || !this.keys_) {
        return null;
      }
      const xRelative =
        (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);
      const yRelative =
        (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);

      const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];

      if (typeof row !== 'string') {
        return null;
      }

      let code = row.charCodeAt(Math.floor(xRelative * row.length));
      if (code >= 93) {
        code--;
      }
      if (code >= 35) {
        code--;
      }
      code -= 32;

      let data = null;
      if (code in this.keys_) {
        const id = this.keys_[code];
        if (this.data_ && id in this.data_) {
          data = this.data_[id];
        } else {
          data = id;
        }
      }
      return data;
    }

    /**
     * Calls the callback (synchronously by default) with the available data
     * for given coordinate (or `null` if not yet loaded).
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {function(*): void} callback Callback.
     * @param {boolean} [request] If `true` the callback is always async.
     *                               The tile data is requested if not yet loaded.
     */
    forDataAtCoordinate(coordinate, callback, request) {
      if (this.state == TileState.EMPTY && request === true) {
        this.state = TileState.IDLE;
        listenOnce(
          this,
          EventType.CHANGE,
          function (e) {
            callback(this.getData(coordinate));
          },
          this
        );
        this.loadInternal_();
      } else {
        if (request === true) {
          setTimeout(() => {
            callback(this.getData(coordinate));
          }, 0);
        } else {
          callback(this.getData(coordinate));
        }
      }
    }

    /**
     * Return the key to be used for all tiles in the source.
     * @return {string} The key for all tiles.
     */
    getKey() {
      return this.src_;
    }

    /**
     * @private
     */
    handleError_() {
      this.state = TileState.ERROR;
      this.changed();
    }

    /**
     * @param {!UTFGridJSON} json UTFGrid data.
     * @private
     */
    handleLoad_(json) {
      this.grid_ = json['grid'];
      this.keys_ = json['keys'];
      this.data_ = json['data'];

      this.state = TileState.LOADED;
      this.changed();
    }

    /**
     * @private
     */
    loadInternal_() {
      if (this.state == TileState.IDLE) {
        this.state = TileState.LOADING;
        if (this.jsonp_) {
          jsonp(
            this.src_,
            this.handleLoad_.bind(this),
            this.handleError_.bind(this)
          );
        } else {
          const client = new XMLHttpRequest();
          client.addEventListener('load', this.onXHRLoad_.bind(this));
          client.addEventListener('error', this.onXHRError_.bind(this));
          client.open('GET', this.src_);
          client.send();
        }
      }
    }

    /**
     * @private
     * @param {Event} event The load event.
     */
    onXHRLoad_(event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || (client.status >= 200 && client.status < 300)) {
        let response;
        try {
          response = /** @type {!UTFGridJSON} */ (
            JSON.parse(client.responseText)
          );
        } catch (err) {
          this.handleError_();
          return;
        }
        this.handleLoad_(response);
      } else {
        this.handleError_();
      }
    }

    /**
     * @private
     * @param {Event} event The error event.
     */
    onXHRError_(event) {
      this.handleError_();
    }

    /**
     */
    load() {
      if (this.preemptive_) {
        this.loadInternal_();
      } else {
        this.setState(TileState.EMPTY);
      }
    }
  }

  /**
   * @typedef {Object} Options
   * @property {boolean} [preemptive=true]
   * If `true` the UTFGrid source loads the tiles based on their "visibility".
   * This improves the speed of response, but increases traffic.
   * Note that if set to `false` (lazy loading), you need to pass `true` as
   * `request` to the `forDataAtCoordinateAndResolution` method otherwise no
   * data will ever be loaded.
   * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
   * Useful when the server does not support CORS..
   * @property {import("./TileJSON.js").Config} [tileJSON] TileJSON configuration for this source.
   * If not provided, `url` must be configured.
   * @property {string} [url] TileJSON endpoint that provides the configuration for this source.
   * Request will be made through JSONP. If not provided, `tileJSON` must be configured.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for UTFGrid interaction data loaded from TileJSON format.
   * @api
   */
  class UTFGrid extends TileSource$1 {
    /**
     * @param {Options} options Source options.
     */
    constructor(options) {
      super({
        projection: get$2('EPSG:3857'),
        state: 'loading',
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {boolean}
       */
      this.preemptive_ =
        options.preemptive !== undefined ? options.preemptive : true;

      /**
       * @private
       * @type {!import("../Tile.js").UrlFunction}
       */
      this.tileUrlFunction_ = nullTileUrlFunction;

      /**
       * @private
       * @type {string|undefined}
       */
      this.template_ = undefined;

      /**
       * @private
       * @type {boolean}
       */
      this.jsonp_ = options.jsonp || false;

      if (options.url) {
        if (this.jsonp_) {
          jsonp(
            options.url,
            this.handleTileJSONResponse.bind(this),
            this.handleTileJSONError.bind(this)
          );
        } else {
          const client = new XMLHttpRequest();
          client.addEventListener('load', this.onXHRLoad_.bind(this));
          client.addEventListener('error', this.onXHRError_.bind(this));
          client.open('GET', options.url);
          client.send();
        }
      } else if (options.tileJSON) {
        this.handleTileJSONResponse(options.tileJSON);
      } else {
        assert(false, 51); // Either `url` or `tileJSON` options must be provided
      }
    }

    /**
     * @private
     * @param {Event} event The load event.
     */
    onXHRLoad_(event) {
      const client = /** @type {XMLHttpRequest} */ (event.target);
      // status will be 0 for file:// urls
      if (!client.status || (client.status >= 200 && client.status < 300)) {
        let response;
        try {
          response = /** @type {import("./TileJSON.js").Config} */ (
            JSON.parse(client.responseText)
          );
        } catch (err) {
          this.handleTileJSONError();
          return;
        }
        this.handleTileJSONResponse(response);
      } else {
        this.handleTileJSONError();
      }
    }

    /**
     * @private
     * @param {Event} event The error event.
     */
    onXHRError_(event) {
      this.handleTileJSONError();
    }

    /**
     * Return the template from TileJSON.
     * @return {string|undefined} The template from TileJSON.
     * @api
     */
    getTemplate() {
      return this.template_;
    }

    /**
     * Calls the callback (synchronously by default) with the available data
     * for given coordinate and resolution (or `null` if not yet loaded or
     * in case of an error).
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} resolution Resolution.
     * @param {function(*): void} callback Callback.
     * @param {boolean} [request] If `true` the callback is always async.
     *                               The tile data is requested if not yet loaded.
     * @api
     */
    forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {
      if (this.tileGrid) {
        const z = this.tileGrid.getZForResolution(resolution, this.zDirection);
        const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);
        const tile = /** @type {!CustomTile} */ (
          this.getTile(
            tileCoord[0],
            tileCoord[1],
            tileCoord[2],
            1,
            this.getProjection()
          )
        );
        tile.forDataAtCoordinate(coordinate, callback, request);
      } else {
        if (request === true) {
          setTimeout(function () {
            callback(null);
          }, 0);
        } else {
          callback(null);
        }
      }
    }

    /**
     * @protected
     */
    handleTileJSONError() {
      this.setState('error');
    }

    /**
     * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse
     * @protected
     * @param {import("./TileJSON.js").Config} tileJSON Tile JSON.
     */
    handleTileJSONResponse(tileJSON) {
      const epsg4326Projection = get$2('EPSG:4326');

      const sourceProjection = this.getProjection();
      let extent;
      if (tileJSON['bounds'] !== undefined) {
        const transform = getTransformFromProjections(
          epsg4326Projection,
          sourceProjection
        );
        extent = applyTransform(tileJSON['bounds'], transform);
      }

      const gridExtent = extentFromProjection(sourceProjection);
      const minZoom = tileJSON['minzoom'] || 0;
      const maxZoom = tileJSON['maxzoom'] || 22;
      const tileGrid = createXYZ({
        extent: gridExtent,
        maxZoom: maxZoom,
        minZoom: minZoom,
      });
      this.tileGrid = tileGrid;

      this.template_ = tileJSON['template'];

      const grids = tileJSON['grids'];
      if (!grids) {
        this.setState('error');
        return;
      }

      this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);

      if (tileJSON['attribution'] !== undefined) {
        const attributionExtent = extent !== undefined ? extent : gridExtent;
        this.setAttributions(function (frameState) {
          if (intersects$2(attributionExtent, frameState.extent)) {
            return [tileJSON['attribution']];
          }
          return null;
        });
      }

      this.setState('ready');
    }

    /**
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("../proj/Projection.js").default} projection Projection.
     * @return {!CustomTile} Tile.
     */
    getTile(z, x, y, pixelRatio, projection) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        return this.tileCache.get(tileCoordKey);
      }
      const tileCoord = [z, x, y];
      const urlTileCoord = this.getTileCoordForTileUrlFunction(
        tileCoord,
        projection
      );
      const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);
      const tile = new CustomTile(
        tileCoord,
        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,
        tileUrl !== undefined ? tileUrl : '',
        this.tileGrid.getTileCoordExtent(tileCoord),
        this.preemptive_,
        this.jsonp_
      );
      this.tileCache.set(tileCoordKey, tile);
      return tile;
    }

    /**
     * Marks a tile coord as being used, without triggering a load.
     * @param {number} z Tile coordinate z.
     * @param {number} x Tile coordinate x.
     * @param {number} y Tile coordinate y.
     */
    useTile(z, x, y) {
      const tileCoordKey = getKeyZXY(z, x, y);
      if (this.tileCache.containsKey(tileCoordKey)) {
        this.tileCache.get(tileCoordKey);
      }
    }
  }

  var UTFGrid$1 = UTFGrid;

  /**
   * @module ol/tilegrid/WMTS
   */

  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles
   * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.
   * When no `origin` or `origins` are configured, the `origin` will be set to the
   * top-left corner of the extent.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e.
   * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left
   * to right and downwards. If not specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins,
   * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If
   * given, the array length should match the length of the `resolutions` array, i.e.
   * each resolution can have a different origin. Tile coordinates increase left to
   * right and downwards. If not specified, `extent` or `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each
   * resolution needs to match the zoom level. This means that even if a `minZoom`
   * is configured, the resolutions array will have a length of `maxZoom + 1`
   * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs
   * to match the length of the `resolutions` array.
   * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
   * of the grid for each zoom level. The values here are the `TileMatrixWidth` and
   * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and
   * define each zoom level's extent together with the `origin` or `origins`.
   * A grid `extent` can be configured in addition, and will further limit the extent for
   * which tile requests are made by sources. If the bottom-left corner of
   * an extent is used as `origin` or `origins`, then the `y` value must be
   * negative because OpenLayers tile coordinates use the top left as the origin.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * @property {Array<number|import("../size.js").Size>} [tileSizes] Tile sizes. The length of
   * this array needs to match the length of the `resolutions` array.
   */

  /**
   * @classdesc
   * Set the grid pattern for sources accessing WMTS tiled-image servers.
   * @api
   */
  class WMTSTileGrid extends TileGrid$1 {
    /**
     * @param {Options} options WMTS options.
     */
    constructor(options) {
      super({
        extent: options.extent,
        origin: options.origin,
        origins: options.origins,
        resolutions: options.resolutions,
        tileSize: options.tileSize,
        tileSizes: options.tileSizes,
        sizes: options.sizes,
      });

      /**
       * @private
       * @type {!Array<string>}
       */
      this.matrixIds_ = options.matrixIds;
    }

    /**
     * @param {number} z Z.
     * @return {string} MatrixId..
     */
    getMatrixId(z) {
      return this.matrixIds_[z];
    }

    /**
     * Get the list of matrix identifiers.
     * @return {Array<string>} MatrixIds.
     * @api
     */
    getMatrixIds() {
      return this.matrixIds_;
    }
  }

  var tilegrid_WMTS = WMTSTileGrid;

  /**
   * @module ol/source/WMTS
   */

  /**
   * Request encoding. One of 'KVP', 'REST'.
   * @typedef {'KVP' | 'REST'} RequestEncoding
   */

  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,
   * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.
   * @property {import("../tilegrid/WMTS.js").default} tileGrid Tile grid.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.
   * @property {string} layer Layer name as advertised in the WMTS capabilities.
   * @property {string} style Style name as advertised in the WMTS capabilities.
   * @property {typeof import("../ImageTile.js").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.
   * @property {string} [version='1.0.0'] WMTS version.
   * @property {string} matrixSet Matrix set.
   * @property {!Object} [dimensions] Additional "dimensions" for tile requests.
   * This is an object with properties named like the advertised WMTS dimensions.
   * @property {string} [url]  A URL for the service.
   * For the RESTful request encoding, this is a URL
   * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,
   * for example `subdomain{a-f}.domain.com`, may be used instead of defining
   * each one separately in the `urls` option.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {Array<string>} [urls] An array of URLs.
   * Requests will be distributed among the URLs in this array.
   * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number|import("../array.js").NearestDirectionFunction} [zDirection=0]
   * Choose whether to use tiles with a higher or lower zoom level when between integer
   * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.
   */

  /**
   * @classdesc
   * Layer source for tile data from WMTS servers.
   * @api
   */
  class WMTS extends TileImage$1 {
    /**
     * @param {Options} options WMTS options.
     */
    constructor(options) {
      // TODO: add support for TileMatrixLimits

      const requestEncoding =
        options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';

      // FIXME: should we create a default tileGrid?
      // we could issue a getCapabilities xhr to retrieve missing configuration
      const tileGrid = options.tileGrid;

      let urls = options.urls;
      if (urls === undefined && options.url !== undefined) {
        urls = expandUrl(options.url);
      }

      super({
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate: options.interpolate,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        tilePixelRatio: options.tilePixelRatio,
        urls: urls,
        wrapX: options.wrapX !== undefined ? options.wrapX : false,
        transition: options.transition,
        zDirection: options.zDirection,
      });

      /**
       * @private
       * @type {string}
       */
      this.version_ = options.version !== undefined ? options.version : '1.0.0';

      /**
       * @private
       * @type {string}
       */
      this.format_ = options.format !== undefined ? options.format : 'image/jpeg';

      /**
       * @private
       * @type {!Object}
       */
      this.dimensions_ =
        options.dimensions !== undefined ? options.dimensions : {};

      /**
       * @private
       * @type {string}
       */
      this.layer_ = options.layer;

      /**
       * @private
       * @type {string}
       */
      this.matrixSet_ = options.matrixSet;

      /**
       * @private
       * @type {string}
       */
      this.style_ = options.style;

      // FIXME: should we guess this requestEncoding from options.url(s)
      //        structure? that would mean KVP only if a template is not provided.

      /**
       * @private
       * @type {RequestEncoding}
       */
      this.requestEncoding_ = requestEncoding;

      this.setKey(this.getKeyForDimensions_());

      if (urls && urls.length > 0) {
        this.tileUrlFunction = createFromTileUrlFunctions(
          urls.map(this.createFromWMTSTemplate.bind(this))
        );
      }
    }

    /**
     * Set the URLs to use for requests.
     * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.
     * @param {Array<string>} urls URLs.
     */
    setUrls(urls) {
      this.urls = urls;
      const key = urls.join('\n');
      this.setTileUrlFunction(
        createFromTileUrlFunctions(
          urls.map(this.createFromWMTSTemplate.bind(this))
        ),
        key
      );
    }

    /**
     * Get the dimensions, i.e. those passed to the constructor through the
     * "dimensions" option, and possibly updated using the updateDimensions
     * method.
     * @return {!Object} Dimensions.
     * @api
     */
    getDimensions() {
      return this.dimensions_;
    }

    /**
     * Return the image format of the WMTS source.
     * @return {string} Format.
     * @api
     */
    getFormat() {
      return this.format_;
    }

    /**
     * Return the layer of the WMTS source.
     * @return {string} Layer.
     * @api
     */
    getLayer() {
      return this.layer_;
    }

    /**
     * Return the matrix set of the WMTS source.
     * @return {string} MatrixSet.
     * @api
     */
    getMatrixSet() {
      return this.matrixSet_;
    }

    /**
     * Return the request encoding, either "KVP" or "REST".
     * @return {RequestEncoding} Request encoding.
     * @api
     */
    getRequestEncoding() {
      return this.requestEncoding_;
    }

    /**
     * Return the style of the WMTS source.
     * @return {string} Style.
     * @api
     */
    getStyle() {
      return this.style_;
    }

    /**
     * Return the version of the WMTS source.
     * @return {string} Version.
     * @api
     */
    getVersion() {
      return this.version_;
    }

    /**
     * @private
     * @return {string} The key for the current dimensions.
     */
    getKeyForDimensions_() {
      const res = this.urls ? this.urls.slice(0) : [];
      for (const key in this.dimensions_) {
        res.push(key + '-' + this.dimensions_[key]);
      }
      return res.join('/');
    }

    /**
     * Update the dimensions.
     * @param {Object} dimensions Dimensions.
     * @api
     */
    updateDimensions(dimensions) {
      Object.assign(this.dimensions_, dimensions);
      this.setKey(this.getKeyForDimensions_());
    }

    /**
     * @param {string} template Template.
     * @return {import("../Tile.js").UrlFunction} Tile URL function.
     */
    createFromWMTSTemplate(template) {
      const requestEncoding = this.requestEncoding_;

      // context property names are lower case to allow for a case insensitive
      // replacement as some services use different naming conventions
      const context = {
        'layer': this.layer_,
        'style': this.style_,
        'tilematrixset': this.matrixSet_,
      };

      if (requestEncoding == 'KVP') {
        Object.assign(context, {
          'Service': 'WMTS',
          'Request': 'GetTile',
          'Version': this.version_,
          'Format': this.format_,
        });
      }

      // TODO: we may want to create our own appendParams function so that params
      // order conforms to wmts spec guidance, and so that we can avoid to escape
      // special template params

      template =
        requestEncoding == 'KVP'
          ? appendParams(template, context)
          : template.replace(/\{(\w+?)\}/g, function (m, p) {
              return p.toLowerCase() in context ? context[p.toLowerCase()] : m;
            });

      const tileGrid = /** @type {import("../tilegrid/WMTS.js").default} */ (
        this.tileGrid
      );
      const dimensions = this.dimensions_;

      return (
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
            return undefined;
          }
          const localContext = {
            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),
            'TileCol': tileCoord[1],
            'TileRow': tileCoord[2],
          };
          Object.assign(localContext, dimensions);
          let url = template;
          if (requestEncoding == 'KVP') {
            url = appendParams(url, localContext);
          } else {
            url = url.replace(/\{(\w+?)\}/g, function (m, p) {
              return localContext[p];
            });
          }
          return url;
        }
      );
    }
  }

  var WMTS$1 = WMTS;

  /**
   * @module ol/source
   */

  /**
   * Creates a sources function from a tile grid. This function can be used as value for the
   * `sources` property of the {@link module:ol/layer/Layer~Layer} subclasses that support it.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @param {function(import("./tilecoord.js").TileCoord): import("./source/Source.js").default} factory Source factory.
   * This function takes a {@link module:ol/tilecoord~TileCoord} as argument and is expected to return a
   * {@link module:ol/source/Source~Source}. **Note**: The returned sources should have a tile grid with
   * a limited set of resolutions, matching the resolution range of a single zoom level of the pyramid
   * `tileGrid` that `sourcesFromTileGrid` was called with.
   * @return {function(import("./extent.js").Extent, number): Array<import("./source/Source.js").default>} Sources function.
   * @api
   */
  function sourcesFromTileGrid(tileGrid, factory) {
    const sourceCache = new LRUCache$1(32);
    const tileGridExtent = tileGrid.getExtent();
    return function (extent, resolution) {
      sourceCache.expireCache();
      if (tileGridExtent) {
        extent = getIntersection(tileGridExtent, extent);
      }
      const z = tileGrid.getZForResolution(resolution);
      const wantedSources = [];
      tileGrid.forEachTileCoord(extent, z, (tileCoord) => {
        const key = tileCoord.toString();
        if (!sourceCache.containsKey(key)) {
          const source = factory(tileCoord);
          sourceCache.set(key, source);
        }
        wantedSources.push(sourceCache.get(key));
      });
      return wantedSources;
    };
  }

  var nsSource = {
    __proto__: null,
    sourcesFromTileGrid: sourcesFromTileGrid,
    BingMaps: BingMaps$1,
    CartoDB: CartoDB$1,
    Cluster: Cluster$1,
    DataTile: DataTile,
    GeoTIFF: GeoTIFFSource$1,
    IIIF: IIIF$1,
    Image: ImageSource$1,
    ImageArcGISRest: ImageArcGISRest$1,
    ImageCanvas: ImageCanvasSource$1,
    ImageMapGuide: ImageMapGuide$1,
    ImageStatic: Static$1,
    ImageWMS: ImageWMS$1,
    OSM: OSM$1,
    Raster: Raster,
    Source: Source$1,
    Stamen: Stamen$1,
    Tile: TileSource$1,
    TileArcGISRest: TileArcGISRest$1,
    TileDebug: TileDebug$1,
    TileImage: TileImage$1,
    TileJSON: TileJSON$1,
    TileWMS: TileWMS$1,
    UrlTile: UrlTile$1,
    UTFGrid: UTFGrid$1,
    Vector: VectorSource$1,
    VectorTile: VectorTileSource,
    WMTS: WMTS$1,
    XYZ: XYZ$1,
    Zoomify: Zoomify$1
  };

  // Import (parts of) Openlayers 6 and reexport them in a ~nested namespace structure similar to Openlayers 4

  var nsInteraction = {};
  Object.assign(nsInteraction, interaction0);
  nsInteraction.Draw.createBox = createBox;

  var nsProj = {};
  Object.assign(nsProj, proj0, {
      proj4: proj_proj4
  });

  var nsStyle = {};
  Object.assign(nsStyle, style0, {
      expressions: style_expressions,
      IconAnchorUnits: {
          /**
           * This changed from a separate module to a simple typedef
           * @see https://github.com/openlayers/openlayers/blob/v6.15.1/src/ol/style/IconAnchorUnits.js
           * @see https://github.com/openlayers/openlayers/blob/v7.2.2/src/ol/style/Icon.js#L13
           */
          FRACTION: 'fraction',
          PIXELS: 'pixels'
      },
      IconOrigin: {
          /**
           * This changed from a separate module to a simple typedef
           * @see https://github.com/openlayers/openlayers/blob/v6.15.1/src/ol/style/IconOrigin.js
           * @see https://github.com/openlayers/openlayers/blob/v7.2.2/src/ol/style/Icon.js#L18
           */
          BOTTOM_LEFT: 'bottom-left',
          BOTTOM_RIGHT: 'bottom-right',
          TOP_LEFT: 'top-left',
          TOP_RIGHT: 'top-right'
      },
      TextPlacement: {
          /**
           * This changed from a separate module to a simple typedef
           * @see https://github.com/openlayers/openlayers/blob/v6.15.1/src/ol/style/TextPlacement.js
           * @see https://github.com/openlayers/openlayers/blob/v7.2.2/src/ol/style/Text.js#L8
           */
          POINT: 'point',
          LINE: 'line'
      }
  });
  Object.assign(nsStyle.Style, {
      createDefaultStyle: createDefaultStyle,
      createEditingStyle: createEditingStyle
  });


  var ol = {
      // top-level classes
      AssertionError: AssertionError$1,
      Collection: Collection$1,
      Disposable: Disposable$1,
      Feature: Feature$1,
      Geolocation: Geolocation$1,
      Graticule: Graticule$1,
      Image: Image$1,
      ImageBase: ImageBase$1,
      ImageCanvas: ImageCanvas$1,
      ImageTile: ImageTile$1,
      Kinetic: Kinetic$1,
      Map: Map$2,
      MapBrowserEvent: MapBrowserEvent$1,
      MapBrowserEventHandler: MapBrowserEventHandler$1,
      MapEvent: MapEvent$1,
      Object: olObject,
      Observable: Observable$1,
      Overlay: Overlay$1,
      PluggableMap: Map$2,      /** Legacy alias; no longer defined in Openlayers 7 */
      Tile: Tile$1,
      TileCache: TileCache$1,
      TileQueue: TileQueue$1,
      TileRange: TileRange$1,
      VectorRenderTile: VectorRenderTile$1,
      VectorTile: VectorTile$2,
      View: View$1,
      // globals (from util)
      getUid: getUid,
      VERSION: VERSION,
      // sub-namespaces
      coordinate: nsCoordinate,
      control: nsControl,
      events: Object.assign({}, nsEvents, {
          Event: Object.assign({}, nsEvents_Event, {
              BaseEvent: BaseEvent,
              stopPropagation: stopPropagation,
              preventDefault: preventDefault
          }),
          condition: nsEvents_condition
      }),
      extent: nsExtent,
      format: {
          GeoJSON: format_GeoJSON,
          GML: format_GML,
          KML: format_KML,
          WFS: format_WFS,
          WKT: format_WKT,
          filter: nsFormat_filter
      },
      geom: Object.assign({}, nsGeom, {
          Polygon: geom_Polygon
      }),
      interaction: nsInteraction,
      layer: nsLayer,
      proj: nsProj,
      source: nsSource,
      sphere: nsSphere,
      style: nsStyle,
      tilegrid: {
          WMTS: tilegrid_WMTS
      },
  	loadingstrategy: nsLoadingstrategy
  };
  // dirty solution?
  if (window.ol) {
      window.console.error('"ol" already exists');
  } else {
      window.ol = ol;
  }

  class RawDecoder extends BaseDecoder {
    decodeBlock(buffer) {
      return buffer;
    }
  }

  var raw = {
    __proto__: null,
    'default': RawDecoder
  };

  const MIN_BITS = 9;
  const CLEAR_CODE = 256; // clear code
  const EOI_CODE = 257; // end of information
  const MAX_BYTELENGTH = 12;

  function getByte(array, position, length) {
    const d = position % 8;
    const a = Math.floor(position / 8);
    const de = 8 - d;
    const ef = (position + length) - ((a + 1) * 8);
    let fg = (8 * (a + 2)) - (position + length);
    const dg = ((a + 2) * 8) - position;
    fg = Math.max(0, fg);
    if (a >= array.length) {
      console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');
      return EOI_CODE;
    }
    let chunk1 = array[a] & ((2 ** (8 - d)) - 1);
    chunk1 <<= (length - de);
    let chunks = chunk1;
    if (a + 1 < array.length) {
      let chunk2 = array[a + 1] >>> fg;
      chunk2 <<= Math.max(0, (length - dg));
      chunks += chunk2;
    }
    if (ef > 8 && a + 2 < array.length) {
      const hi = ((a + 3) * 8) - (position + length);
      const chunk3 = array[a + 2] >>> hi;
      chunks += chunk3;
    }
    return chunks;
  }

  function appendReversed(dest, source) {
    for (let i = source.length - 1; i >= 0; i--) {
      dest.push(source[i]);
    }
    return dest;
  }

  function decompress(input) {
    const dictionaryIndex = new Uint16Array(4093);
    const dictionaryChar = new Uint8Array(4093);
    for (let i = 0; i <= 257; i++) {
      dictionaryIndex[i] = 4096;
      dictionaryChar[i] = i;
    }
    let dictionaryLength = 258;
    let byteLength = MIN_BITS;
    let position = 0;

    function initDictionary() {
      dictionaryLength = 258;
      byteLength = MIN_BITS;
    }
    function getNext(array) {
      const byte = getByte(array, position, byteLength);
      position += byteLength;
      return byte;
    }
    function addToDictionary(i, c) {
      dictionaryChar[dictionaryLength] = c;
      dictionaryIndex[dictionaryLength] = i;
      dictionaryLength++;
      return dictionaryLength - 1;
    }
    function getDictionaryReversed(n) {
      const rev = [];
      for (let i = n; i !== 4096; i = dictionaryIndex[i]) {
        rev.push(dictionaryChar[i]);
      }
      return rev;
    }

    const result = [];
    initDictionary();
    const array = new Uint8Array(input);
    let code = getNext(array);
    let oldCode;
    while (code !== EOI_CODE) {
      if (code === CLEAR_CODE) {
        initDictionary();
        code = getNext(array);
        while (code === CLEAR_CODE) {
          code = getNext(array);
        }

        if (code === EOI_CODE) {
          break;
        } else if (code > CLEAR_CODE) {
          throw new Error(`corrupted code at scanline ${code}`);
        } else {
          const val = getDictionaryReversed(code);
          appendReversed(result, val);
          oldCode = code;
        }
      } else if (code < dictionaryLength) {
        const val = getDictionaryReversed(code);
        appendReversed(result, val);
        addToDictionary(oldCode, val[val.length - 1]);
        oldCode = code;
      } else {
        const oldVal = getDictionaryReversed(oldCode);
        if (!oldVal) {
          throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);
        }
        appendReversed(result, oldVal);
        result.push(oldVal[oldVal.length - 1]);
        addToDictionary(oldCode, oldVal[oldVal.length - 1]);
        oldCode = code;
      }

      if (dictionaryLength + 1 >= (2 ** byteLength)) {
        if (byteLength === MAX_BYTELENGTH) {
          oldCode = undefined;
        } else {
          byteLength++;
        }
      }
      code = getNext(array);
    }
    return new Uint8Array(result);
  }

  class LZWDecoder extends BaseDecoder {
    decodeBlock(buffer) {
      return decompress(buffer).buffer;
    }
  }

  var lzw = {
    __proto__: null,
    'default': LZWDecoder
  };

  /* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
  /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
  /*
     Copyright 2011 notmasteryet
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
         http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
  */

  // - The JPEG specification can be found in the ITU CCITT Recommendation T.81
  //   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
  // - The JFIF specification can be found in the JPEG File Interchange Format
  //   (www.w3.org/Graphics/JPEG/jfif3.pdf)
  // - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
  //   in PostScript Level 2, Technical Note #5116
  //   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)

  const dctZigZag = new Int32Array([
    0,
    1, 8,
    16, 9, 2,
    3, 10, 17, 24,
    32, 25, 18, 11, 4,
    5, 12, 19, 26, 33, 40,
    48, 41, 34, 27, 20, 13, 6,
    7, 14, 21, 28, 35, 42, 49, 56,
    57, 50, 43, 36, 29, 22, 15,
    23, 30, 37, 44, 51, 58,
    59, 52, 45, 38, 31,
    39, 46, 53, 60,
    61, 54, 47,
    55, 62,
    63,
  ]);

  const dctCos1 = 4017; // cos(pi/16)
  const dctSin1 = 799; // sin(pi/16)
  const dctCos3 = 3406; // cos(3*pi/16)
  const dctSin3 = 2276; // sin(3*pi/16)
  const dctCos6 = 1567; // cos(6*pi/16)
  const dctSin6 = 3784; // sin(6*pi/16)
  const dctSqrt2 = 5793; // sqrt(2)
  const dctSqrt1d2 = 2896;// sqrt(2) / 2

  function buildHuffmanTable(codeLengths, values) {
    let k = 0;
    const code = [];
    let length = 16;
    while (length > 0 && !codeLengths[length - 1]) {
      --length;
    }
    code.push({ children: [], index: 0 });

    let p = code[0];
    let q;
    for (let i = 0; i < length; i++) {
      for (let j = 0; j < codeLengths[i]; j++) {
        p = code.pop();
        p.children[p.index] = values[k];
        while (p.index > 0) {
          p = code.pop();
        }
        p.index++;
        code.push(p);
        while (code.length <= i) {
          code.push(q = { children: [], index: 0 });
          p.children[p.index] = q.children;
          p = q;
        }
        k++;
      }
      if (i + 1 < length) {
        // p here points to last code
        code.push(q = { children: [], index: 0 });
        p.children[p.index] = q.children;
        p = q;
      }
    }
    return code[0].children;
  }

  function decodeScan(data, initialOffset,
    frame, components, resetInterval,
    spectralStart, spectralEnd,
    successivePrev, successive) {
    const { mcusPerLine, progressive } = frame;

    const startOffset = initialOffset;
    let offset = initialOffset;
    let bitsData = 0;
    let bitsCount = 0;
    function readBit() {
      if (bitsCount > 0) {
        bitsCount--;
        return (bitsData >> bitsCount) & 1;
      }
      bitsData = data[offset++];
      if (bitsData === 0xFF) {
        const nextByte = data[offset++];
        if (nextByte) {
          throw new Error(`unexpected marker: ${((bitsData << 8) | nextByte).toString(16)}`);
        }
        // unstuff 0
      }
      bitsCount = 7;
      return bitsData >>> 7;
    }
    function decodeHuffman(tree) {
      let node = tree;
      let bit;
      while ((bit = readBit()) !== null) { // eslint-disable-line no-cond-assign
        node = node[bit];
        if (typeof node === 'number') {
          return node;
        }
        if (typeof node !== 'object') {
          throw new Error('invalid huffman sequence');
        }
      }
      return null;
    }
    function receive(initialLength) {
      let length = initialLength;
      let n = 0;
      while (length > 0) {
        const bit = readBit();
        if (bit === null) {
          return undefined;
        }
        n = (n << 1) | bit;
        --length;
      }
      return n;
    }
    function receiveAndExtend(length) {
      const n = receive(length);
      if (n >= 1 << (length - 1)) {
        return n;
      }
      return n + (-1 << length) + 1;
    }
    function decodeBaseline(component, zz) {
      const t = decodeHuffman(component.huffmanTableDC);
      const diff = t === 0 ? 0 : receiveAndExtend(t);
      component.pred += diff;
      zz[0] = component.pred;
      let k = 1;
      while (k < 64) {
        const rs = decodeHuffman(component.huffmanTableAC);
        const s = rs & 15;
        const r = rs >> 4;
        if (s === 0) {
          if (r < 15) {
            break;
          }
          k += 16;
        } else {
          k += r;
          const z = dctZigZag[k];
          zz[z] = receiveAndExtend(s);
          k++;
        }
      }
    }
    function decodeDCFirst(component, zz) {
      const t = decodeHuffman(component.huffmanTableDC);
      const diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);
      component.pred += diff;
      zz[0] = component.pred;
    }
    function decodeDCSuccessive(component, zz) {
      zz[0] |= readBit() << successive;
    }
    let eobrun = 0;
    function decodeACFirst(component, zz) {
      if (eobrun > 0) {
        eobrun--;
        return;
      }
      let k = spectralStart;
      const e = spectralEnd;
      while (k <= e) {
        const rs = decodeHuffman(component.huffmanTableAC);
        const s = rs & 15;
        const r = rs >> 4;
        if (s === 0) {
          if (r < 15) {
            eobrun = receive(r) + (1 << r) - 1;
            break;
          }
          k += 16;
        } else {
          k += r;
          const z = dctZigZag[k];
          zz[z] = receiveAndExtend(s) * (1 << successive);
          k++;
        }
      }
    }
    let successiveACState = 0;
    let successiveACNextValue;
    function decodeACSuccessive(component, zz) {
      let k = spectralStart;
      const e = spectralEnd;
      let r = 0;
      while (k <= e) {
        const z = dctZigZag[k];
        const direction = zz[z] < 0 ? -1 : 1;
        switch (successiveACState) {
          case 0: { // initial state
            const rs = decodeHuffman(component.huffmanTableAC);
            const s = rs & 15;
            r = rs >> 4;
            if (s === 0) {
              if (r < 15) {
                eobrun = receive(r) + (1 << r);
                successiveACState = 4;
              } else {
                r = 16;
                successiveACState = 1;
              }
            } else {
              if (s !== 1) {
                throw new Error('invalid ACn encoding');
              }
              successiveACNextValue = receiveAndExtend(s);
              successiveACState = r ? 2 : 3;
            }
            continue; // eslint-disable-line no-continue
          }
          case 1: // skipping r zero items
          case 2:
            if (zz[z]) {
              zz[z] += (readBit() << successive) * direction;
            } else {
              r--;
              if (r === 0) {
                successiveACState = successiveACState === 2 ? 3 : 0;
              }
            }
            break;
          case 3: // set value for a zero item
            if (zz[z]) {
              zz[z] += (readBit() << successive) * direction;
            } else {
              zz[z] = successiveACNextValue << successive;
              successiveACState = 0;
            }
            break;
          case 4: // eob
            if (zz[z]) {
              zz[z] += (readBit() << successive) * direction;
            }
            break;
        }
        k++;
      }
      if (successiveACState === 4) {
        eobrun--;
        if (eobrun === 0) {
          successiveACState = 0;
        }
      }
    }
    function decodeMcu(component, decodeFunction, mcu, row, col) {
      const mcuRow = (mcu / mcusPerLine) | 0;
      const mcuCol = mcu % mcusPerLine;
      const blockRow = (mcuRow * component.v) + row;
      const blockCol = (mcuCol * component.h) + col;
      decodeFunction(component, component.blocks[blockRow][blockCol]);
    }
    function decodeBlock(component, decodeFunction, mcu) {
      const blockRow = (mcu / component.blocksPerLine) | 0;
      const blockCol = mcu % component.blocksPerLine;
      decodeFunction(component, component.blocks[blockRow][blockCol]);
    }

    const componentsLength = components.length;
    let component;
    let i;
    let j;
    let k;
    let n;
    let decodeFn;
    if (progressive) {
      if (spectralStart === 0) {
        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
      } else {
        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
      }
    } else {
      decodeFn = decodeBaseline;
    }

    let mcu = 0;
    let marker;
    let mcuExpected;
    if (componentsLength === 1) {
      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
    } else {
      mcuExpected = mcusPerLine * frame.mcusPerColumn;
    }

    const usedResetInterval = resetInterval || mcuExpected;

    while (mcu < mcuExpected) {
      // reset interval stuff
      for (i = 0; i < componentsLength; i++) {
        components[i].pred = 0;
      }
      eobrun = 0;

      if (componentsLength === 1) {
        component = components[0];
        for (n = 0; n < usedResetInterval; n++) {
          decodeBlock(component, decodeFn, mcu);
          mcu++;
        }
      } else {
        for (n = 0; n < usedResetInterval; n++) {
          for (i = 0; i < componentsLength; i++) {
            component = components[i];
            const { h, v } = component;
            for (j = 0; j < v; j++) {
              for (k = 0; k < h; k++) {
                decodeMcu(component, decodeFn, mcu, j, k);
              }
            }
          }
          mcu++;

          // If we've reached our expected MCU's, stop decoding
          if (mcu === mcuExpected) {
            break;
          }
        }
      }

      // find marker
      bitsCount = 0;
      marker = (data[offset] << 8) | data[offset + 1];
      if (marker < 0xFF00) {
        throw new Error('marker was not found');
      }

      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx
        offset += 2;
      } else {
        break;
      }
    }

    return offset - startOffset;
  }

  function buildComponentData(frame, component) {
    const lines = [];
    const { blocksPerLine, blocksPerColumn } = component;
    const samplesPerLine = blocksPerLine << 3;
    const R = new Int32Array(64);
    const r = new Uint8Array(64);

    // A port of poppler's IDCT method which in turn is taken from:
    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
    //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
    //   988-991.
    function quantizeAndInverse(zz, dataOut, dataIn) {
      const qt = component.quantizationTable;
      let v0;
      let v1;
      let v2;
      let v3;
      let v4;
      let v5;
      let v6;
      let v7;
      let t;
      const p = dataIn;
      let i;

      // dequant
      for (i = 0; i < 64; i++) {
        p[i] = zz[i] * qt[i];
      }

      // inverse DCT on rows
      for (i = 0; i < 8; ++i) {
        const row = 8 * i;

        // check for all-zero AC coefficients
        if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0
          && p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0
          && p[7 + row] === 0) {
          t = ((dctSqrt2 * p[0 + row]) + 512) >> 10;
          p[0 + row] = t;
          p[1 + row] = t;
          p[2 + row] = t;
          p[3 + row] = t;
          p[4 + row] = t;
          p[5 + row] = t;
          p[6 + row] = t;
          p[7 + row] = t;
          continue; // eslint-disable-line no-continue
        }

        // stage 4
        v0 = ((dctSqrt2 * p[0 + row]) + 128) >> 8;
        v1 = ((dctSqrt2 * p[4 + row]) + 128) >> 8;
        v2 = p[2 + row];
        v3 = p[6 + row];
        v4 = ((dctSqrt1d2 * (p[1 + row] - p[7 + row])) + 128) >> 8;
        v7 = ((dctSqrt1d2 * (p[1 + row] + p[7 + row])) + 128) >> 8;
        v5 = p[3 + row] << 4;
        v6 = p[5 + row] << 4;

        // stage 3
        t = (v0 - v1 + 1) >> 1;
        v0 = (v0 + v1 + 1) >> 1;
        v1 = t;
        t = ((v2 * dctSin6) + (v3 * dctCos6) + 128) >> 8;
        v2 = ((v2 * dctCos6) - (v3 * dctSin6) + 128) >> 8;
        v3 = t;
        t = (v4 - v6 + 1) >> 1;
        v4 = (v4 + v6 + 1) >> 1;
        v6 = t;
        t = (v7 + v5 + 1) >> 1;
        v5 = (v7 - v5 + 1) >> 1;
        v7 = t;

        // stage 2
        t = (v0 - v3 + 1) >> 1;
        v0 = (v0 + v3 + 1) >> 1;
        v3 = t;
        t = (v1 - v2 + 1) >> 1;
        v1 = (v1 + v2 + 1) >> 1;
        v2 = t;
        t = ((v4 * dctSin3) + (v7 * dctCos3) + 2048) >> 12;
        v4 = ((v4 * dctCos3) - (v7 * dctSin3) + 2048) >> 12;
        v7 = t;
        t = ((v5 * dctSin1) + (v6 * dctCos1) + 2048) >> 12;
        v5 = ((v5 * dctCos1) - (v6 * dctSin1) + 2048) >> 12;
        v6 = t;

        // stage 1
        p[0 + row] = v0 + v7;
        p[7 + row] = v0 - v7;
        p[1 + row] = v1 + v6;
        p[6 + row] = v1 - v6;
        p[2 + row] = v2 + v5;
        p[5 + row] = v2 - v5;
        p[3 + row] = v3 + v4;
        p[4 + row] = v3 - v4;
      }

      // inverse DCT on columns
      for (i = 0; i < 8; ++i) {
        const col = i;

        // check for all-zero AC coefficients
        if (p[(1 * 8) + col] === 0 && p[(2 * 8) + col] === 0 && p[(3 * 8) + col] === 0
          && p[(4 * 8) + col] === 0 && p[(5 * 8) + col] === 0 && p[(6 * 8) + col] === 0
          && p[(7 * 8) + col] === 0) {
          t = ((dctSqrt2 * dataIn[i + 0]) + 8192) >> 14;
          p[(0 * 8) + col] = t;
          p[(1 * 8) + col] = t;
          p[(2 * 8) + col] = t;
          p[(3 * 8) + col] = t;
          p[(4 * 8) + col] = t;
          p[(5 * 8) + col] = t;
          p[(6 * 8) + col] = t;
          p[(7 * 8) + col] = t;
          continue; // eslint-disable-line no-continue
        }

        // stage 4
        v0 = ((dctSqrt2 * p[(0 * 8) + col]) + 2048) >> 12;
        v1 = ((dctSqrt2 * p[(4 * 8) + col]) + 2048) >> 12;
        v2 = p[(2 * 8) + col];
        v3 = p[(6 * 8) + col];
        v4 = ((dctSqrt1d2 * (p[(1 * 8) + col] - p[(7 * 8) + col])) + 2048) >> 12;
        v7 = ((dctSqrt1d2 * (p[(1 * 8) + col] + p[(7 * 8) + col])) + 2048) >> 12;
        v5 = p[(3 * 8) + col];
        v6 = p[(5 * 8) + col];

        // stage 3
        t = (v0 - v1 + 1) >> 1;
        v0 = (v0 + v1 + 1) >> 1;
        v1 = t;
        t = ((v2 * dctSin6) + (v3 * dctCos6) + 2048) >> 12;
        v2 = ((v2 * dctCos6) - (v3 * dctSin6) + 2048) >> 12;
        v3 = t;
        t = (v4 - v6 + 1) >> 1;
        v4 = (v4 + v6 + 1) >> 1;
        v6 = t;
        t = (v7 + v5 + 1) >> 1;
        v5 = (v7 - v5 + 1) >> 1;
        v7 = t;

        // stage 2
        t = (v0 - v3 + 1) >> 1;
        v0 = (v0 + v3 + 1) >> 1;
        v3 = t;
        t = (v1 - v2 + 1) >> 1;
        v1 = (v1 + v2 + 1) >> 1;
        v2 = t;
        t = ((v4 * dctSin3) + (v7 * dctCos3) + 2048) >> 12;
        v4 = ((v4 * dctCos3) - (v7 * dctSin3) + 2048) >> 12;
        v7 = t;
        t = ((v5 * dctSin1) + (v6 * dctCos1) + 2048) >> 12;
        v5 = ((v5 * dctCos1) - (v6 * dctSin1) + 2048) >> 12;
        v6 = t;

        // stage 1
        p[(0 * 8) + col] = v0 + v7;
        p[(7 * 8) + col] = v0 - v7;
        p[(1 * 8) + col] = v1 + v6;
        p[(6 * 8) + col] = v1 - v6;
        p[(2 * 8) + col] = v2 + v5;
        p[(5 * 8) + col] = v2 - v5;
        p[(3 * 8) + col] = v3 + v4;
        p[(4 * 8) + col] = v3 - v4;
      }

      // convert to 8-bit integers
      for (i = 0; i < 64; ++i) {
        const sample = 128 + ((p[i] + 8) >> 4);
        if (sample < 0) {
          dataOut[i] = 0;
        } else if (sample > 0XFF) {
          dataOut[i] = 0xFF;
        } else {
          dataOut[i] = sample;
        }
      }
    }

    for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
      const scanLine = blockRow << 3;
      for (let i = 0; i < 8; i++) {
        lines.push(new Uint8Array(samplesPerLine));
      }
      for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {
        quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);

        let offset = 0;
        const sample = blockCol << 3;
        for (let j = 0; j < 8; j++) {
          const line = lines[scanLine + j];
          for (let i = 0; i < 8; i++) {
            line[sample + i] = r[offset++];
          }
        }
      }
    }
    return lines;
  }

  class JpegStreamReader {
    constructor() {
      this.jfif = null;
      this.adobe = null;

      this.quantizationTables = [];
      this.huffmanTablesAC = [];
      this.huffmanTablesDC = [];
      this.resetFrames();
    }

    resetFrames() {
      this.frames = [];
    }

    parse(data) {
      let offset = 0;
      // const { length } = data;
      function readUint16() {
        const value = (data[offset] << 8) | data[offset + 1];
        offset += 2;
        return value;
      }
      function readDataBlock() {
        const length = readUint16();
        const array = data.subarray(offset, offset + length - 2);
        offset += array.length;
        return array;
      }
      function prepareComponents(frame) {
        let maxH = 0;
        let maxV = 0;
        let component;
        let componentId;
        for (componentId in frame.components) {
          if (frame.components.hasOwnProperty(componentId)) {
            component = frame.components[componentId];
            if (maxH < component.h) {
              maxH = component.h;
            }
            if (maxV < component.v) {
              maxV = component.v;
            }
          }
        }
        const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);
        const mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);
        for (componentId in frame.components) {
          if (frame.components.hasOwnProperty(componentId)) {
            component = frame.components[componentId];
            const blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);
            const blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);
            const blocksPerLineForMcu = mcusPerLine * component.h;
            const blocksPerColumnForMcu = mcusPerColumn * component.v;
            const blocks = [];
            for (let i = 0; i < blocksPerColumnForMcu; i++) {
              const row = [];
              for (let j = 0; j < blocksPerLineForMcu; j++) {
                row.push(new Int32Array(64));
              }
              blocks.push(row);
            }
            component.blocksPerLine = blocksPerLine;
            component.blocksPerColumn = blocksPerColumn;
            component.blocks = blocks;
          }
        }
        frame.maxH = maxH;
        frame.maxV = maxV;
        frame.mcusPerLine = mcusPerLine;
        frame.mcusPerColumn = mcusPerColumn;
      }

      let fileMarker = readUint16();
      if (fileMarker !== 0xFFD8) { // SOI (Start of Image)
        throw new Error('SOI not found');
      }

      fileMarker = readUint16();
      while (fileMarker !== 0xFFD9) { // EOI (End of image)
        switch (fileMarker) {
          case 0xFF00: break;
          case 0xFFE0: // APP0 (Application Specific)
          case 0xFFE1: // APP1
          case 0xFFE2: // APP2
          case 0xFFE3: // APP3
          case 0xFFE4: // APP4
          case 0xFFE5: // APP5
          case 0xFFE6: // APP6
          case 0xFFE7: // APP7
          case 0xFFE8: // APP8
          case 0xFFE9: // APP9
          case 0xFFEA: // APP10
          case 0xFFEB: // APP11
          case 0xFFEC: // APP12
          case 0xFFED: // APP13
          case 0xFFEE: // APP14
          case 0xFFEF: // APP15
          case 0xFFFE: { // COM (Comment)
            const appData = readDataBlock();

            if (fileMarker === 0xFFE0) {
              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49
                && appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\x00'
                this.jfif = {
                  version: { major: appData[5], minor: appData[6] },
                  densityUnits: appData[7],
                  xDensity: (appData[8] << 8) | appData[9],
                  yDensity: (appData[10] << 8) | appData[11],
                  thumbWidth: appData[12],
                  thumbHeight: appData[13],
                  thumbData: appData.subarray(14, 14 + (3 * appData[12] * appData[13])),
                };
              }
            }
            // TODO APP1 - Exif
            if (fileMarker === 0xFFEE) {
              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F
                && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\x00'
                this.adobe = {
                  version: appData[6],
                  flags0: (appData[7] << 8) | appData[8],
                  flags1: (appData[9] << 8) | appData[10],
                  transformCode: appData[11],
                };
              }
            }
            break;
          }

          case 0xFFDB: { // DQT (Define Quantization Tables)
            const quantizationTablesLength = readUint16();
            const quantizationTablesEnd = quantizationTablesLength + offset - 2;
            while (offset < quantizationTablesEnd) {
              const quantizationTableSpec = data[offset++];
              const tableData = new Int32Array(64);
              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values
                for (let j = 0; j < 64; j++) {
                  const z = dctZigZag[j];
                  tableData[z] = data[offset++];
                }
              } else if ((quantizationTableSpec >> 4) === 1) { // 16 bit
                for (let j = 0; j < 64; j++) {
                  const z = dctZigZag[j];
                  tableData[z] = readUint16();
                }
              } else {
                throw new Error('DQT: invalid table spec');
              }
              this.quantizationTables[quantizationTableSpec & 15] = tableData;
            }
            break;
          }

          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)
          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)
          case 0xFFC2: { // SOF2 (Start of Frame, Progressive DCT)
            readUint16(); // skip data length
            const frame = {
              extended: (fileMarker === 0xFFC1),
              progressive: (fileMarker === 0xFFC2),
              precision: data[offset++],
              scanLines: readUint16(),
              samplesPerLine: readUint16(),
              components: {},
              componentsOrder: [],
            };

            const componentsCount = data[offset++];
            let componentId;
            // let maxH = 0;
            // let maxV = 0;
            for (let i = 0; i < componentsCount; i++) {
              componentId = data[offset];
              const h = data[offset + 1] >> 4;
              const v = data[offset + 1] & 15;
              const qId = data[offset + 2];
              frame.componentsOrder.push(componentId);
              frame.components[componentId] = {
                h,
                v,
                quantizationIdx: qId,
              };
              offset += 3;
            }
            prepareComponents(frame);
            this.frames.push(frame);
            break;
          }

          case 0xFFC4: { // DHT (Define Huffman Tables)
            const huffmanLength = readUint16();
            for (let i = 2; i < huffmanLength;) {
              const huffmanTableSpec = data[offset++];
              const codeLengths = new Uint8Array(16);
              let codeLengthSum = 0;
              for (let j = 0; j < 16; j++, offset++) {
                codeLengths[j] = data[offset];
                codeLengthSum += codeLengths[j];
              }
              const huffmanValues = new Uint8Array(codeLengthSum);
              for (let j = 0; j < codeLengthSum; j++, offset++) {
                huffmanValues[j] = data[offset];
              }
              i += 17 + codeLengthSum;

              if ((huffmanTableSpec >> 4) === 0) {
                this.huffmanTablesDC[huffmanTableSpec & 15] = buildHuffmanTable(
                  codeLengths, huffmanValues,
                );
              } else {
                this.huffmanTablesAC[huffmanTableSpec & 15] = buildHuffmanTable(
                  codeLengths, huffmanValues,
                );
              }
            }
            break;
          }

          case 0xFFDD: // DRI (Define Restart Interval)
            readUint16(); // skip data length
            this.resetInterval = readUint16();
            break;

          case 0xFFDA: { // SOS (Start of Scan)
            readUint16(); // skip length
            const selectorsCount = data[offset++];
            const components = [];
            const frame = this.frames[0];
            for (let i = 0; i < selectorsCount; i++) {
              const component = frame.components[data[offset++]];
              const tableSpec = data[offset++];
              component.huffmanTableDC = this.huffmanTablesDC[tableSpec >> 4];
              component.huffmanTableAC = this.huffmanTablesAC[tableSpec & 15];
              components.push(component);
            }
            const spectralStart = data[offset++];
            const spectralEnd = data[offset++];
            const successiveApproximation = data[offset++];
            const processed = decodeScan(data, offset,
              frame, components, this.resetInterval,
              spectralStart, spectralEnd,
              successiveApproximation >> 4, successiveApproximation & 15);
            offset += processed;
            break;
          }

          case 0xFFFF: // Fill bytes
            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.
              offset--;
            }
            break;

          default:
            if (data[offset - 3] === 0xFF
              && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
              // could be incorrect encoding -- last 0xFF byte of the previous
              // block was eaten by the encoder
              offset -= 3;
              break;
            }
            throw new Error(`unknown JPEG marker ${fileMarker.toString(16)}`);
        }
        fileMarker = readUint16();
      }
    }

    getResult() {
      const { frames } = this;
      if (this.frames.length === 0) {
        throw new Error('no frames were decoded');
      } else if (this.frames.length > 1) {
        console.warn('more than one frame is not supported');
      }

      // set each frame's components quantization table
      for (let i = 0; i < this.frames.length; i++) {
        const cp = this.frames[i].components;
        for (const j of Object.keys(cp)) {
          cp[j].quantizationTable = this.quantizationTables[cp[j].quantizationIdx];
          delete cp[j].quantizationIdx;
        }
      }

      const frame = frames[0];
      const { components, componentsOrder } = frame;
      const outComponents = [];
      const width = frame.samplesPerLine;
      const height = frame.scanLines;

      for (let i = 0; i < componentsOrder.length; i++) {
        const component = components[componentsOrder[i]];
        outComponents.push({
          lines: buildComponentData(frame, component),
          scaleX: component.h / frame.maxH,
          scaleY: component.v / frame.maxV,
        });
      }

      const out = new Uint8Array(width * height * outComponents.length);
      let oi = 0;
      for (let y = 0; y < height; ++y) {
        for (let x = 0; x < width; ++x) {
          for (let i = 0; i < outComponents.length; ++i) {
            const component = outComponents[i];
            out[oi] = component.lines[0 | y * component.scaleY][0 | x * component.scaleX];
            ++oi;
          }
        }
      }
      return out;
    }
  }

  class JpegDecoder extends BaseDecoder {
    constructor(fileDirectory) {
      super();
      this.reader = new JpegStreamReader();
      if (fileDirectory.JPEGTables) {
        this.reader.parse(fileDirectory.JPEGTables);
      }
    }

    decodeBlock(buffer) {
      this.reader.resetFrames();
      this.reader.parse(new Uint8Array(buffer));
      return this.reader.getResult().buffer;
    }
  }

  var jpeg = {
    __proto__: null,
    'default': JpegDecoder
  };

  /*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  /* eslint-disable space-unary-ops */

  /* Public constants ==========================================================*/
  /* ===========================================================================*/


  //const Z_FILTERED          = 1;
  //const Z_HUFFMAN_ONLY      = 2;
  //const Z_RLE               = 3;
  const Z_FIXED$1               = 4;
  //const Z_DEFAULT_STRATEGY  = 0;

  /* Possible values of the data_type field (though see inflate()) */
  const Z_BINARY              = 0;
  const Z_TEXT                = 1;
  //const Z_ASCII             = 1; // = Z_TEXT
  const Z_UNKNOWN$1             = 2;

  /*============================================================================*/


  function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

  // From zutil.h

  const STORED_BLOCK = 0;
  const STATIC_TREES = 1;
  const DYN_TREES    = 2;
  /* The three kinds of block type */

  const MIN_MATCH$1    = 3;
  const MAX_MATCH$1    = 258;
  /* The minimum and maximum match lengths */

  // From deflate.h
  /* ===========================================================================
   * Internal compression state.
   */

  const LENGTH_CODES$1  = 29;
  /* number of length codes, not counting the special END_BLOCK code */

  const LITERALS$1      = 256;
  /* number of literal bytes 0..255 */

  const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
  /* number of Literal or Length codes, including the END_BLOCK code */

  const D_CODES$1       = 30;
  /* number of distance codes */

  const BL_CODES$1      = 19;
  /* number of codes used to transfer the bit lengths */

  const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
  /* maximum heap size */

  const MAX_BITS$1      = 15;
  /* All codes must not exceed MAX_BITS bits */

  const Buf_size      = 16;
  /* size of bit buffer in bi_buf */


  /* ===========================================================================
   * Constants
   */

  const MAX_BL_BITS = 7;
  /* Bit length codes must not exceed MAX_BL_BITS bits */

  const END_BLOCK   = 256;
  /* end of block literal code */

  const REP_3_6     = 16;
  /* repeat previous bit length 3-6 times (2 bits of repeat count) */

  const REPZ_3_10   = 17;
  /* repeat a zero length 3-10 times  (3 bits of repeat count) */

  const REPZ_11_138 = 18;
  /* repeat a zero length 11-138 times  (7 bits of repeat count) */

  /* eslint-disable comma-spacing,array-bracket-spacing */
  const extra_lbits =   /* extra bits for each length code */
    new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

  const extra_dbits =   /* extra bits for each distance code */
    new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

  const extra_blbits =  /* extra bits for each bit length code */
    new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

  const bl_order =
    new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
  /* eslint-enable comma-spacing,array-bracket-spacing */

  /* The lengths of the bit length codes are sent in order of decreasing
   * probability, to avoid transmitting the lengths for unused bit length codes.
   */

  /* ===========================================================================
   * Local data. These are initialized only once.
   */

  // We pre-fill arrays with 0 to avoid uninitialized gaps

  const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

  // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
  const static_ltree  = new Array((L_CODES$1 + 2) * 2);
  zero$1(static_ltree);
  /* The static literal tree. Since the bit lengths are imposed, there is no
   * need for the L_CODES extra codes used during heap construction. However
   * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
   * below).
   */

  const static_dtree  = new Array(D_CODES$1 * 2);
  zero$1(static_dtree);
  /* The static distance tree. (Actually a trivial tree since all codes use
   * 5 bits.)
   */

  const _dist_code    = new Array(DIST_CODE_LEN);
  zero$1(_dist_code);
  /* Distance codes. The first 256 values correspond to the distances
   * 3 .. 258, the last 256 values correspond to the top 8 bits of
   * the 15 bit distances.
   */

  const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
  zero$1(_length_code);
  /* length code for each normalized match length (0 == MIN_MATCH) */

  const base_length   = new Array(LENGTH_CODES$1);
  zero$1(base_length);
  /* First normalized length for each code (0 = MIN_MATCH) */

  const base_dist     = new Array(D_CODES$1);
  zero$1(base_dist);
  /* First normalized distance for each code (0 = distance of 1) */


  function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

    this.static_tree  = static_tree;  /* static tree or NULL */
    this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
    this.extra_base   = extra_base;   /* base index for extra_bits */
    this.elems        = elems;        /* max number of elements in the tree */
    this.max_length   = max_length;   /* max bit length for the codes */

    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree    = static_tree && static_tree.length;
  }


  let static_l_desc;
  let static_d_desc;
  let static_bl_desc;


  function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree;     /* the dynamic tree */
    this.max_code = 0;            /* largest code with non zero frequency */
    this.stat_desc = stat_desc;   /* the corresponding static tree */
  }



  const d_code = (dist) => {

    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  };


  /* ===========================================================================
   * Output a short LSB first on the stream.
   * IN assertion: there is enough room in pendingBuf.
   */
  const put_short = (s, w) => {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = (w) & 0xff;
    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
  };


  /* ===========================================================================
   * Send a value on a given number of bits.
   * IN assertion: length <= 16 and value fits in length bits.
   */
  const send_bits = (s, value, length) => {

    if (s.bi_valid > (Buf_size - length)) {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      put_short(s, s.bi_buf);
      s.bi_buf = value >> (Buf_size - s.bi_valid);
      s.bi_valid += length - Buf_size;
    } else {
      s.bi_buf |= (value << s.bi_valid) & 0xffff;
      s.bi_valid += length;
    }
  };


  const send_code = (s, c, tree) => {

    send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
  };


  /* ===========================================================================
   * Reverse the first len bits of a code, using straightforward code (a faster
   * method would use a table)
   * IN assertion: 1 <= len <= 15
   */
  const bi_reverse = (code, len) => {

    let res = 0;
    do {
      res |= code & 1;
      code >>>= 1;
      res <<= 1;
    } while (--len > 0);
    return res >>> 1;
  };


  /* ===========================================================================
   * Flush the bit buffer, keeping at most 7 bits in it.
   */
  const bi_flush = (s) => {

    if (s.bi_valid === 16) {
      put_short(s, s.bi_buf);
      s.bi_buf = 0;
      s.bi_valid = 0;

    } else if (s.bi_valid >= 8) {
      s.pending_buf[s.pending++] = s.bi_buf & 0xff;
      s.bi_buf >>= 8;
      s.bi_valid -= 8;
    }
  };


  /* ===========================================================================
   * Compute the optimal bit lengths for a tree and update the total bit length
   * for the current block.
   * IN assertion: the fields freq and dad are set, heap[heap_max] and
   *    above are the tree nodes sorted by increasing frequency.
   * OUT assertions: the field len is set to the optimal bit length, the
   *     array bl_count contains the frequencies for each bit length.
   *     The length opt_len is updated; static_len is also updated if stree is
   *     not null.
   */
  const gen_bitlen = (s, desc) => {
  //    deflate_state *s;
  //    tree_desc *desc;    /* the tree descriptor */

    const tree            = desc.dyn_tree;
    const max_code        = desc.max_code;
    const stree           = desc.stat_desc.static_tree;
    const has_stree       = desc.stat_desc.has_stree;
    const extra           = desc.stat_desc.extra_bits;
    const base            = desc.stat_desc.extra_base;
    const max_length      = desc.stat_desc.max_length;
    let h;              /* heap index */
    let n, m;           /* iterate over the tree elements */
    let bits;           /* bit length */
    let xbits;          /* extra bits */
    let f;              /* frequency */
    let overflow = 0;   /* number of elements with bit length too large */

    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      s.bl_count[bits] = 0;
    }

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

    for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
      n = s.heap[h];
      bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
      if (bits > max_length) {
        bits = max_length;
        overflow++;
      }
      tree[n * 2 + 1]/*.Len*/ = bits;
      /* We overwrite tree[n].Dad which is no longer needed */

      if (n > max_code) { continue; } /* not a leaf node */

      s.bl_count[bits]++;
      xbits = 0;
      if (n >= base) {
        xbits = extra[n - base];
      }
      f = tree[n * 2]/*.Freq*/;
      s.opt_len += f * (bits + xbits);
      if (has_stree) {
        s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
      }
    }
    if (overflow === 0) { return; }

    // Tracev((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
      bits = max_length - 1;
      while (s.bl_count[bits] === 0) { bits--; }
      s.bl_count[bits]--;      /* move one leaf down the tree */
      s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
      s.bl_count[max_length]--;
      /* The brother of the overflow item also moves one step up,
       * but this does not affect bl_count[max_length]
       */
      overflow -= 2;
    } while (overflow > 0);

    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits !== 0; bits--) {
      n = s.bl_count[bits];
      while (n !== 0) {
        m = s.heap[--h];
        if (m > max_code) { continue; }
        if (tree[m * 2 + 1]/*.Len*/ !== bits) {
          // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
          s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
          tree[m * 2 + 1]/*.Len*/ = bits;
        }
        n--;
      }
    }
  };


  /* ===========================================================================
   * Generate the codes for a given tree and bit counts (which need not be
   * optimal).
   * IN assertion: the array bl_count contains the bit length statistics for
   * the given tree and the field len is set for all tree elements.
   * OUT assertion: the field code is set for all tree elements of non
   *     zero code length.
   */
  const gen_codes = (tree, max_code, bl_count) => {
  //    ct_data *tree;             /* the tree to decorate */
  //    int max_code;              /* largest code with non zero frequency */
  //    ushf *bl_count;            /* number of codes at each bit length */

    const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
    let code = 0;              /* running code value */
    let bits;                  /* bit index */
    let n;                     /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS$1; bits++) {
      code = (code + bl_count[bits - 1]) << 1;
      next_code[bits] = code;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0;  n <= max_code; n++) {
      let len = tree[n * 2 + 1]/*.Len*/;
      if (len === 0) { continue; }
      /* Now reverse the bits */
      tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

      //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
      //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
  };


  /* ===========================================================================
   * Initialize the various 'constant' tables.
   */
  const tr_static_init = () => {

    let n;        /* iterates over tree elements */
    let bits;     /* bit counter */
    let length;   /* length value */
    let code;     /* code value */
    let dist;     /* distance index */
    const bl_count = new Array(MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */

    // do check in _tr_init()
    //if (static_init_done) return;

    /* For some embedded targets, global variables are not initialized: */
  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

    /* Initialize the mapping length (0..255) -> length code (0..28) */
    length = 0;
    for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
      base_length[code] = length;
      for (n = 0; n < (1 << extra_lbits[code]); n++) {
        _length_code[length++] = code;
      }
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     */
    _length_code[length - 1] = code;

    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
    dist = 0;
    for (code = 0; code < 16; code++) {
      base_dist[code] = dist;
      for (n = 0; n < (1 << extra_dbits[code]); n++) {
        _dist_code[dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */
    for (; code < D_CODES$1; code++) {
      base_dist[code] = dist << 7;
      for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
        _dist_code[256 + dist++] = code;
      }
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

    /* Construct the codes of the static literal tree */
    for (bits = 0; bits <= MAX_BITS$1; bits++) {
      bl_count[bits] = 0;
    }

    n = 0;
    while (n <= 143) {
      static_ltree[n * 2 + 1]/*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    while (n <= 255) {
      static_ltree[n * 2 + 1]/*.Len*/ = 9;
      n++;
      bl_count[9]++;
    }
    while (n <= 279) {
      static_ltree[n * 2 + 1]/*.Len*/ = 7;
      n++;
      bl_count[7]++;
    }
    while (n <= 287) {
      static_ltree[n * 2 + 1]/*.Len*/ = 8;
      n++;
      bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     */
    gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

    /* The static distance tree is trivial: */
    for (n = 0; n < D_CODES$1; n++) {
      static_dtree[n * 2 + 1]/*.Len*/ = 5;
      static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
    }

    // Now data ready and we can init static trees
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

    //static_init_done = true;
  };


  /* ===========================================================================
   * Initialize a new block.
   */
  const init_block = (s) => {

    let n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
    for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
    for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

    s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
    s.opt_len = s.static_len = 0;
    s.sym_next = s.matches = 0;
  };


  /* ===========================================================================
   * Flush the bit buffer and align the output on a byte boundary
   */
  const bi_windup = (s) =>
  {
    if (s.bi_valid > 8) {
      put_short(s, s.bi_buf);
    } else if (s.bi_valid > 0) {
      //put_byte(s, (Byte)s->bi_buf);
      s.pending_buf[s.pending++] = s.bi_buf;
    }
    s.bi_buf = 0;
    s.bi_valid = 0;
  };

  /* ===========================================================================
   * Compares to subtrees, using the tree depth as tie breaker when
   * the subtrees have equal frequency. This minimizes the worst case length.
   */
  const smaller = (tree, n, m, depth) => {

    const _n2 = n * 2;
    const _m2 = m * 2;
    return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
           (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
  };

  /* ===========================================================================
   * Restore the heap property by moving down the tree starting at node k,
   * exchanging a node with the smallest of its two sons if necessary, stopping
   * when the heap property is re-established (each father smaller than its
   * two sons).
   */
  const pqdownheap = (s, tree, k) => {
  //    deflate_state *s;
  //    ct_data *tree;  /* the tree to restore */
  //    int k;               /* node to move down */

    const v = s.heap[k];
    let j = k << 1;  /* left son of k */
    while (j <= s.heap_len) {
      /* Set j to the smallest of the two sons: */
      if (j < s.heap_len &&
        smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
        j++;
      }
      /* Exit if v is smaller than both sons */
      if (smaller(tree, v, s.heap[j], s.depth)) { break; }

      /* Exchange v with the smallest son */
      s.heap[k] = s.heap[j];
      k = j;

      /* And continue down the tree, setting j to the left son of k */
      j <<= 1;
    }
    s.heap[k] = v;
  };


  // inlined manually
  // const SMALLEST = 1;

  /* ===========================================================================
   * Send the block data compressed using the given Huffman trees
   */
  const compress_block = (s, ltree, dtree) => {
  //    deflate_state *s;
  //    const ct_data *ltree; /* literal tree */
  //    const ct_data *dtree; /* distance tree */

    let dist;           /* distance of matched string */
    let lc;             /* match length or unmatched char (if dist == 0) */
    let sx = 0;         /* running index in sym_buf */
    let code;           /* the code to send */
    let extra;          /* number of extra bits to send */

    if (s.sym_next !== 0) {
      do {
        dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
        dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
        lc = s.pending_buf[s.sym_buf + sx++];
        if (dist === 0) {
          send_code(s, lc, ltree); /* send a literal byte */
          //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
          /* Here, lc is the match length - MIN_MATCH */
          code = _length_code[lc];
          send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
          extra = extra_lbits[code];
          if (extra !== 0) {
            lc -= base_length[code];
            send_bits(s, lc, extra);       /* send the extra length bits */
          }
          dist--; /* dist is now the match distance - 1 */
          code = d_code(dist);
          //Assert (code < D_CODES, "bad d_code");

          send_code(s, code, dtree);       /* send the distance code */
          extra = extra_dbits[code];
          if (extra !== 0) {
            dist -= base_dist[code];
            send_bits(s, dist, extra);   /* send the extra distance bits */
          }
        } /* literal or match pair ? */

        /* Check that the overlay between pending_buf and sym_buf is ok: */
        //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

      } while (sx < s.sym_next);
    }

    send_code(s, END_BLOCK, ltree);
  };


  /* ===========================================================================
   * Construct one Huffman tree and assigns the code bit strings and lengths.
   * Update the total bit length for the current block.
   * IN assertion: the field freq is set for all tree elements.
   * OUT assertions: the fields len and code are set to the optimal bit length
   *     and corresponding code. The length opt_len is updated; static_len is
   *     also updated if stree is not null. The field max_code is set.
   */
  const build_tree = (s, desc) => {
  //    deflate_state *s;
  //    tree_desc *desc; /* the tree descriptor */

    const tree     = desc.dyn_tree;
    const stree    = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems    = desc.stat_desc.elems;
    let n, m;          /* iterate over heap elements */
    let max_code = -1; /* largest code with non zero frequency */
    let node;          /* new node being created */

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s.heap_len = 0;
    s.heap_max = HEAP_SIZE$1;

    for (n = 0; n < elems; n++) {
      if (tree[n * 2]/*.Freq*/ !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;

      } else {
        tree[n * 2 + 1]/*.Len*/ = 0;
      }
    }

    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s.heap_len < 2) {
      node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
      tree[node * 2]/*.Freq*/ = 1;
      s.depth[node] = 0;
      s.opt_len--;

      if (has_stree) {
        s.static_len -= stree[node * 2 + 1]/*.Len*/;
      }
      /* node is 0 or 1 so it does not have extra bits */
    }
    desc.max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
    do {
      //pqremove(s, tree, n);  /* n = node of least frequency */
      /*** pqremove ***/
      n = s.heap[1/*SMALLEST*/];
      s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
      pqdownheap(s, tree, 1/*SMALLEST*/);
      /***/

      m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

      s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
      s.heap[--s.heap_max] = m;

      /* Create a new node father of n and m */
      tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
      s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
      tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

      /* and insert the new node in the heap */
      s.heap[1/*SMALLEST*/] = node++;
      pqdownheap(s, tree, 1/*SMALLEST*/);

    } while (s.heap_len >= 2);

    s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */
    gen_bitlen(s, desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes(tree, max_code, s.bl_count);
  };


  /* ===========================================================================
   * Scan a literal or distance tree to determine the frequencies of the codes
   * in the bit length tree.
   */
  const scan_tree = (s, tree, max_code) => {
  //    deflate_state *s;
  //    ct_data *tree;   /* the tree to be scanned */
  //    int max_code;    /* and its largest code of non zero frequency */

    let n;                     /* iterates over all tree elements */
    let prevlen = -1;          /* last emitted length */
    let curlen;                /* length of current code */

    let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

    let count = 0;             /* repeat count of the current code */
    let max_count = 7;         /* max repeat count */
    let min_count = 4;         /* min repeat count */

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        s.bl_tree[curlen * 2]/*.Freq*/ += count;

      } else if (curlen !== 0) {

        if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
        s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

      } else if (count <= 10) {
        s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

      } else {
        s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
      }

      count = 0;
      prevlen = curlen;

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };


  /* ===========================================================================
   * Send a literal or distance tree in compressed form, using the codes in
   * bl_tree.
   */
  const send_tree = (s, tree, max_code) => {
  //    deflate_state *s;
  //    ct_data *tree; /* the tree to be scanned */
  //    int max_code;       /* and its largest code of non zero frequency */

    let n;                     /* iterates over all tree elements */
    let prevlen = -1;          /* last emitted length */
    let curlen;                /* length of current code */

    let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

    let count = 0;             /* repeat count of the current code */
    let max_count = 7;         /* max repeat count */
    let min_count = 4;         /* min repeat count */

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (n = 0; n <= max_code; n++) {
      curlen = nextlen;
      nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

      if (++count < max_count && curlen === nextlen) {
        continue;

      } else if (count < min_count) {
        do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

      } else if (curlen !== 0) {
        if (curlen !== prevlen) {
          send_code(s, curlen, s.bl_tree);
          count--;
        }
        //Assert(count >= 3 && count <= 6, " 3_6?");
        send_code(s, REP_3_6, s.bl_tree);
        send_bits(s, count - 3, 2);

      } else if (count <= 10) {
        send_code(s, REPZ_3_10, s.bl_tree);
        send_bits(s, count - 3, 3);

      } else {
        send_code(s, REPZ_11_138, s.bl_tree);
        send_bits(s, count - 11, 7);
      }

      count = 0;
      prevlen = curlen;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;

      } else if (curlen === nextlen) {
        max_count = 6;
        min_count = 3;

      } else {
        max_count = 7;
        min_count = 4;
      }
    }
  };


  /* ===========================================================================
   * Construct the Huffman tree for the bit lengths and return the index in
   * bl_order of the last bit length code to send.
   */
  const build_bl_tree = (s) => {

    let max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

    /* Build the bit length tree: */
    build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
     */

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
      if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
        break;
      }
    }
    /* Update opt_len to include the bit length tree and counts */
    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));

    return max_blindex;
  };


  /* ===========================================================================
   * Send the header for a block using dynamic Huffman trees: the counts, the
   * lengths of the bit length codes, the literal tree and the distance tree.
   * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
   */
  const send_all_trees = (s, lcodes, dcodes, blcodes) => {
  //    deflate_state *s;
  //    int lcodes, dcodes, blcodes; /* number of codes for each tree */

    let rank;                    /* index in bl_order */

    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes - 1,   5);
    send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
      //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
      send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
    }
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
  };


  /* ===========================================================================
   * Check if the data type is TEXT or BINARY, using the following algorithm:
   * - TEXT if the two conditions below are satisfied:
   *    a) There are no non-portable control characters belonging to the
   *       "block list" (0..6, 14..25, 28..31).
   *    b) There is at least one printable character belonging to the
   *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
   * - BINARY otherwise.
   * - The following partially-portable control characters form a
   *   "gray list" that is ignored in this detection algorithm:
   *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
   * IN assertion: the fields Freq of dyn_ltree are set.
   */
  const detect_data_type = (s) => {
    /* block_mask is the bit mask of block-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    let block_mask = 0xf3ffc07f;
    let n;

    /* Check for non-textual ("block-listed") bytes. */
    for (n = 0; n <= 31; n++, block_mask >>>= 1) {
      if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
        return Z_BINARY;
      }
    }

    /* Check for textual ("allow-listed") bytes. */
    if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
        s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
    for (n = 32; n < LITERALS$1; n++) {
      if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
    }

    /* There are no "block-listed" or "allow-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */
    return Z_BINARY;
  };


  let static_init_done = false;

  /* ===========================================================================
   * Initialize the tree data structures for a new zlib stream.
   */
  const _tr_init$1 = (s) =>
  {

    if (!static_init_done) {
      tr_static_init();
      static_init_done = true;
    }

    s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

    s.bi_buf = 0;
    s.bi_valid = 0;

    /* Initialize the first block of the first file: */
    init_block(s);
  };


  /* ===========================================================================
   * Send a stored block
   */
  const _tr_stored_block$1 = (s, buf, stored_len, last) => {
  //DeflateState *s;
  //charf *buf;       /* input block */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */

    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
    bi_windup(s);        /* align on byte boundary */
    put_short(s, stored_len);
    put_short(s, ~stored_len);
    if (stored_len) {
      s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
    }
    s.pending += stored_len;
  };


  /* ===========================================================================
   * Send one empty static block to give enough lookahead for inflate.
   * This takes 10 bits, of which 7 may remain in the bit buffer.
   */
  const _tr_align$1 = (s) => {
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
  };


  /* ===========================================================================
   * Determine the best encoding for the current block: dynamic trees, static
   * trees or store, and write out the encoded block.
   */
  const _tr_flush_block$1 = (s, buf, stored_len, last) => {
  //DeflateState *s;
  //charf *buf;       /* input block, or NULL if too old */
  //ulg stored_len;   /* length of input block */
  //int last;         /* one if this is the last block for a file */

    let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
    let max_blindex = 0;        /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s.level > 0) {

      /* Check if the file is binary or text */
      if (s.strm.data_type === Z_UNKNOWN$1) {
        s.strm.data_type = detect_data_type(s);
      }

      /* Construct the literal and distance trees */
      build_tree(s, s.l_desc);
      // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));

      build_tree(s, s.d_desc);
      // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
      //        s->static_len));
      /* At this point, opt_len and static_len are the total bit lengths of
       * the compressed block data, excluding the tree representations.
       */

      /* Build the bit length tree for the above two trees, and get the index
       * in bl_order of the last bit length code to send.
       */
      max_blindex = build_bl_tree(s);

      /* Determine the best encoding. Compute the block lengths in bytes. */
      opt_lenb = (s.opt_len + 3 + 7) >>> 3;
      static_lenb = (s.static_len + 3 + 7) >>> 3;

      // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
      //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
      //        s->sym_next / 3));

      if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

    } else {
      // Assert(buf != (char*)0, "lost buf");
      opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
    }

    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
      /* 4: two words for the lengths */

      /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
       * Otherwise we can't have processed more than WSIZE input bytes since
       * the last block flush, because compression would have been
       * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
       * transform a block into a stored block.
       */
      _tr_stored_block$1(s, buf, stored_len, last);

    } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

      send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
      compress_block(s, static_ltree, static_dtree);

    } else {
      send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
      send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
      compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (last) {
      bi_windup(s);
    }
    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
    //       s->compressed_len-7*last));
  };

  /* ===========================================================================
   * Save the match info and tally the frequency counts. Return true if
   * the current block must be flushed.
   */
  const _tr_tally$1 = (s, dist, lc) => {
  //    deflate_state *s;
  //    unsigned dist;  /* distance of matched string */
  //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

    s.pending_buf[s.sym_buf + s.sym_next++] = dist;
    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
    s.pending_buf[s.sym_buf + s.sym_next++] = lc;
    if (dist === 0) {
      /* lc is the unmatched char */
      s.dyn_ltree[lc * 2]/*.Freq*/++;
    } else {
      s.matches++;
      /* Here, lc is the match length - MIN_MATCH */
      dist--;             /* dist = match distance - 1 */
      //Assert((ush)dist < (ush)MAX_DIST(s) &&
      //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
      //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

      s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
      s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
    }

    return (s.sym_next === s.sym_end);
  };

  var _tr_init_1  = _tr_init$1;
  var _tr_stored_block_1 = _tr_stored_block$1;
  var _tr_flush_block_1  = _tr_flush_block$1;
  var _tr_tally_1 = _tr_tally$1;
  var _tr_align_1 = _tr_align$1;

  var trees = {
  	_tr_init: _tr_init_1,
  	_tr_stored_block: _tr_stored_block_1,
  	_tr_flush_block: _tr_flush_block_1,
  	_tr_tally: _tr_tally_1,
  	_tr_align: _tr_align_1
  };

  // Note: adler32 takes 12% for level 0 and 2% for level 6.
  // It isn't worth it to make additional optimizations as in original.
  // Small size is preferable.

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  const adler32 = (adler, buf, len, pos) => {
    let s1 = (adler & 0xffff) |0,
        s2 = ((adler >>> 16) & 0xffff) |0,
        n = 0;

    while (len !== 0) {
      // Set limit ~ twice less than 5552, to keep
      // s2 in 31-bits, because we force signed ints.
      // in other case %= will fail.
      n = len > 2000 ? 2000 : len;
      len -= n;

      do {
        s1 = (s1 + buf[pos++]) |0;
        s2 = (s2 + s1) |0;
      } while (--n);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s1 | (s2 << 16)) |0;
  };


  var adler32_1 = adler32;

  // Note: we can't get significant speed boost here.
  // So write code to minimize size - no pregenerated tables
  // and array tools dependencies.

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  // Use ordinary array, since untyped makes no boost here
  const makeTable = () => {
    let c, table = [];

    for (var n = 0; n < 256; n++) {
      c = n;
      for (var k = 0; k < 8; k++) {
        c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
      }
      table[n] = c;
    }

    return table;
  };

  // Create table on load. Just 255 signed longs. Not a problem.
  const crcTable = new Uint32Array(makeTable());


  const crc32 = (crc, buf, len, pos) => {
    const t = crcTable;
    const end = pos + len;

    crc ^= -1;

    for (let i = pos; i < end; i++) {
      crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
  };


  var crc32_1 = crc32;

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  var messages = {
    2:      'need dictionary',     /* Z_NEED_DICT       2  */
    1:      'stream end',          /* Z_STREAM_END      1  */
    0:      '',                    /* Z_OK              0  */
    '-1':   'file error',          /* Z_ERRNO         (-1) */
    '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
    '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
    '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
    '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
    '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  var constants$2 = {

    /* Allowed flush values; see deflate() and inflate() below for details */
    Z_NO_FLUSH:         0,
    Z_PARTIAL_FLUSH:    1,
    Z_SYNC_FLUSH:       2,
    Z_FULL_FLUSH:       3,
    Z_FINISH:           4,
    Z_BLOCK:            5,
    Z_TREES:            6,

    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK:               0,
    Z_STREAM_END:       1,
    Z_NEED_DICT:        2,
    Z_ERRNO:           -1,
    Z_STREAM_ERROR:    -2,
    Z_DATA_ERROR:      -3,
    Z_MEM_ERROR:       -4,
    Z_BUF_ERROR:       -5,
    //Z_VERSION_ERROR: -6,

    /* compression levels */
    Z_NO_COMPRESSION:         0,
    Z_BEST_SPEED:             1,
    Z_BEST_COMPRESSION:       9,
    Z_DEFAULT_COMPRESSION:   -1,


    Z_FILTERED:               1,
    Z_HUFFMAN_ONLY:           2,
    Z_RLE:                    3,
    Z_FIXED:                  4,
    Z_DEFAULT_STRATEGY:       0,

    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY:                 0,
    Z_TEXT:                   1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN:                2,

    /* The deflate compression method */
    Z_DEFLATED:               8
    //Z_NULL:                 null // Use -1 or null inline, depending on var type
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
    Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
    Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
    Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
    Z_UNKNOWN,
    Z_DEFLATED: Z_DEFLATED$2
  } = constants$2;

  /*============================================================================*/


  const MAX_MEM_LEVEL = 9;
  /* Maximum value for memLevel in deflateInit2 */
  const MAX_WBITS$1 = 15;
  /* 32K LZ77 window */
  const DEF_MEM_LEVEL = 8;


  const LENGTH_CODES  = 29;
  /* number of length codes, not counting the special END_BLOCK code */
  const LITERALS      = 256;
  /* number of literal bytes 0..255 */
  const L_CODES       = LITERALS + 1 + LENGTH_CODES;
  /* number of Literal or Length codes, including the END_BLOCK code */
  const D_CODES       = 30;
  /* number of distance codes */
  const BL_CODES      = 19;
  /* number of codes used to transfer the bit lengths */
  const HEAP_SIZE     = 2 * L_CODES + 1;
  /* maximum heap size */
  const MAX_BITS  = 15;
  /* All codes must not exceed MAX_BITS bits */

  const MIN_MATCH = 3;
  const MAX_MATCH = 258;
  const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

  const PRESET_DICT = 0x20;

  const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
  //#ifdef GZIP
  const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
  //#endif
  const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
  const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
  const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
  const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
  const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
  const FINISH_STATE  = 666;    /* stream complete */

  const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
  const BS_BLOCK_DONE     = 2; /* block flush performed */
  const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
  const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

  const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

  const err = (strm, errorCode) => {
    strm.msg = messages[errorCode];
    return errorCode;
  };

  const rank = (f) => {
    return ((f) * 2) - ((f) > 4 ? 9 : 0);
  };

  const zero = (buf) => {
    let len = buf.length; while (--len >= 0) { buf[len] = 0; }
  };

  /* ===========================================================================
   * Slide the hash table when sliding the window down (could be avoided with 32
   * bit values at the expense of memory usage). We slide even when level == 0 to
   * keep the hash table consistent if we switch back to level > 0 later.
   */
  const slide_hash = (s) => {
    let n, m;
    let p;
    let wsize = s.w_size;

    n = s.hash_size;
    p = n;
    do {
      m = s.head[--p];
      s.head[p] = (m >= wsize ? m - wsize : 0);
    } while (--n);
    n = wsize;
  //#ifndef FASTEST
    p = n;
    do {
      m = s.prev[--p];
      s.prev[p] = (m >= wsize ? m - wsize : 0);
      /* If n is not on any hash chain, prev[n] is garbage but
       * its value will never be used.
       */
    } while (--n);
  //#endif
  };

  /* eslint-disable new-cap */
  let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
  // This hash causes less collisions, https://github.com/nodeca/pako/issues/135
  // But breaks binary compatibility
  //let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
  let HASH = HASH_ZLIB;


  /* =========================================================================
   * Flush as much pending output as possible. All deflate() output, except for
   * some deflate_stored() output, goes through this function so some
   * applications may wish to modify it to avoid allocating a large
   * strm->next_out buffer and copying into it. (See also read_buf()).
   */
  const flush_pending = (strm) => {
    const s = strm.state;

    //_tr_flush_bits(s);
    let len = s.pending;
    if (len > strm.avail_out) {
      len = strm.avail_out;
    }
    if (len === 0) { return; }

    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out  += len;
    s.pending_out  += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending      -= len;
    if (s.pending === 0) {
      s.pending_out = 0;
    }
  };


  const flush_block_only = (s, last) => {
    _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
  };


  const put_byte = (s, b) => {
    s.pending_buf[s.pending++] = b;
  };


  /* =========================================================================
   * Put a short in the pending buffer. The 16-bit value is put in MSB order.
   * IN assertion: the stream state is correct and there is enough room in
   * pending_buf.
   */
  const putShortMSB = (s, b) => {

    //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
  };


  /* ===========================================================================
   * Read a new buffer from the current input stream, update the adler32
   * and total number of bytes read.  All deflate() input goes through
   * this function so some applications may wish to modify it to avoid
   * allocating a large strm->input buffer and copying from it.
   * (See also flush_pending()).
   */
  const read_buf = (strm, buf, start, size) => {

    let len = strm.avail_in;

    if (len > size) { len = size; }
    if (len === 0) { return 0; }

    strm.avail_in -= len;

    // zmemcpy(buf, strm->next_in, len);
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) {
      strm.adler = adler32_1(strm.adler, buf, len, start);
    }

    else if (strm.state.wrap === 2) {
      strm.adler = crc32_1(strm.adler, buf, len, start);
    }

    strm.next_in += len;
    strm.total_in += len;

    return len;
  };


  /* ===========================================================================
   * Set match_start to the longest match starting at the given string and
   * return its length. Matches shorter or equal to prev_length are discarded,
   * in which case the result is equal to prev_length and match_start is
   * garbage.
   * IN assertions: cur_match is the head of the hash chain for the current
   *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
   * OUT assertion: the match length is not greater than s->lookahead.
   */
  const longest_match = (s, cur_match) => {

    let chain_length = s.max_chain_length;      /* max hash chain length */
    let scan = s.strstart; /* current string */
    let match;                       /* matched string */
    let len;                           /* length of current match */
    let best_len = s.prev_length;              /* best match length so far */
    let nice_match = s.nice_match;             /* stop if match long enough */
    const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

    const _win = s.window; // shortcut

    const wmask = s.w_mask;
    const prev  = s.prev;

    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */

    const strend = s.strstart + MAX_MATCH;
    let scan_end1  = _win[scan + best_len - 1];
    let scan_end   = _win[scan + best_len];

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s.prev_length >= s.good_match) {
      chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if (nice_match > s.lookahead) { nice_match = s.lookahead; }

    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
      // Assert(cur_match < s->strstart, "no future");
      match = cur_match;

      /* Skip to next match if the match length cannot increase
       * or if the match length is less than 2.  Note that the checks below
       * for insufficient lookahead only occur occasionally for performance
       * reasons.  Therefore uninitialized memory will be accessed, and
       * conditional jumps will be made that depend on those values.
       * However the length of the match is limited to the lookahead, so
       * the output of deflate is not affected by the uninitialized values.
       */

      if (_win[match + best_len]     !== scan_end  ||
          _win[match + best_len - 1] !== scan_end1 ||
          _win[match]                !== _win[scan] ||
          _win[++match]              !== _win[scan + 1]) {
        continue;
      }

      /* The check at best_len-1 can be removed because it will be made
       * again later. (This heuristic is not always a win.)
       * It is not necessary to compare scan[2] and match[2] since they
       * are always equal when the other bytes match, given that
       * the hash keys are equal and that HASH_BITS >= 8.
       */
      scan += 2;
      match++;
      // Assert(*scan == *match, "match[2]?");

      /* We check for insufficient lookahead only every 8th comparison;
       * the 256th check will be made at strstart+258.
       */
      do {
        /*jshint noempty:false*/
      } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
               scan < strend);

      // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

      len = MAX_MATCH - (strend - scan);
      scan = strend - MAX_MATCH;

      if (len > best_len) {
        s.match_start = cur_match;
        best_len = len;
        if (len >= nice_match) {
          break;
        }
        scan_end1  = _win[scan + best_len - 1];
        scan_end   = _win[scan + best_len];
      }
    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

    if (best_len <= s.lookahead) {
      return best_len;
    }
    return s.lookahead;
  };


  /* ===========================================================================
   * Fill the window when the lookahead becomes insufficient.
   * Updates strstart and lookahead.
   *
   * IN assertion: lookahead < MIN_LOOKAHEAD
   * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
   *    At least one byte has been read, or avail_in == 0; reads are
   *    performed for at least two bytes (required for the zip translate_eol
   *    option -- not supported here).
   */
  const fill_window = (s) => {

    const _w_size = s.w_size;
    let n, more, str;

    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

    do {
      more = s.window_size - s.lookahead - s.strstart;

      // JS ints have 32 bit, block below not needed
      /* Deal with !@#$% 64K limit: */
      //if (sizeof(int) <= 2) {
      //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
      //        more = wsize;
      //
      //  } else if (more == (unsigned)(-1)) {
      //        /* Very unlikely, but possible on 16 bit machine if
      //         * strstart == 0 && lookahead == 1 (input done a byte at time)
      //         */
      //        more--;
      //    }
      //}


      /* If the window is almost full and there is insufficient lookahead,
       * move the upper half to the lower one to make room in the upper half.
       */
      if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

        s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
        s.match_start -= _w_size;
        s.strstart -= _w_size;
        /* we now have strstart >= MAX_DIST */
        s.block_start -= _w_size;
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
        slide_hash(s);
        more += _w_size;
      }
      if (s.strm.avail_in === 0) {
        break;
      }

      /* If there was no sliding:
       *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
       *    more == window_size - lookahead - strstart
       * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
       * => more >= window_size - 2*WSIZE + 2
       * In the BIG_MEM or MMAP case (not yet supported),
       *   window_size == input_size + MIN_LOOKAHEAD  &&
       *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
       * Otherwise, window_size == 2*WSIZE so more >= 2.
       * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
       */
      //Assert(more >= 2, "more < 2");
      n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
      s.lookahead += n;

      /* Initialize the hash value now that we have some input: */
      if (s.lookahead + s.insert >= MIN_MATCH) {
        str = s.strstart - s.insert;
        s.ins_h = s.window[str];

        /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
  //#if MIN_MATCH != 3
  //        Call update_hash() MIN_MATCH-3 more times
  //#endif
        while (s.insert) {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
          s.insert--;
          if (s.lookahead + s.insert < MIN_MATCH) {
            break;
          }
        }
      }
      /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
       * but this is not important since only literal bytes will be emitted.
       */

    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

    /* If the WIN_INIT bytes after the end of the current data have never been
     * written, then zero those bytes in order to avoid memory check reports of
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
  //  if (s.high_water < s.window_size) {
  //    const curr = s.strstart + s.lookahead;
  //    let init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");
  };

  /* ===========================================================================
   * Copy without compression as much as possible from the input stream, return
   * the current block state.
   *
   * In case deflateParams() is used to later switch to a non-zero compression
   * level, s->matches (otherwise unused when storing) keeps track of the number
   * of hash table slides to perform. If s->matches is 1, then one hash table
   * slide will be done when switching. If s->matches is 2, the maximum value
   * allowed here, then the hash table will be cleared, since two or more slides
   * is the same as a clear.
   *
   * deflate_stored() is written to minimize the number of times an input byte is
   * copied. It is most efficient with large input and output buffers, which
   * maximizes the opportunites to have a single copy from next_in to next_out.
   */
  const deflate_stored = (s, flush) => {

    /* Smallest worthy block size when not flushing or finishing. By default
     * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
     * large input and output buffers, the stored block size will be larger.
     */
    let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

    /* Copy as many min_block or larger stored blocks directly to next_out as
     * possible. If flushing, copy the remaining available input to next_out as
     * stored blocks, if there is enough space.
     */
    let len, left, have, last = 0;
    let used = s.strm.avail_in;
    do {
      /* Set len to the maximum size block that we can copy directly with the
       * available input data and output space. Set left to how much of that
       * would be copied from what's left in the window.
       */
      len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
      have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
      if (s.strm.avail_out < have) {         /* need room for header */
        break;
      }
        /* maximum stored block length that will fit in avail_out: */
      have = s.strm.avail_out - have;
      left = s.strstart - s.block_start;  /* bytes left in window */
      if (len > left + s.strm.avail_in) {
        len = left + s.strm.avail_in;   /* limit len to the input */
      }
      if (len > have) {
        len = have;             /* limit len to the output */
      }

      /* If the stored block would be less than min_block in length, or if
       * unable to copy all of the available input when flushing, then try
       * copying to the window and the pending buffer instead. Also don't
       * write an empty block when flushing -- deflate() does that.
       */
      if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||
                          flush === Z_NO_FLUSH$2 ||
                          len !== left + s.strm.avail_in)) {
        break;
      }

      /* Make a dummy stored block in pending to get the header bytes,
       * including any pending bits. This also updates the debugging counts.
       */
      last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
      _tr_stored_block(s, 0, 0, last);

      /* Replace the lengths in the dummy stored block with len. */
      s.pending_buf[s.pending - 4] = len;
      s.pending_buf[s.pending - 3] = len >> 8;
      s.pending_buf[s.pending - 2] = ~len;
      s.pending_buf[s.pending - 1] = ~len >> 8;

      /* Write the stored block header bytes. */
      flush_pending(s.strm);

  //#ifdef ZLIB_DEBUG
  //    /* Update debugging counts for the data about to be copied. */
  //    s->compressed_len += len << 3;
  //    s->bits_sent += len << 3;
  //#endif

      /* Copy uncompressed bytes from the window to next_out. */
      if (left) {
        if (left > len) {
          left = len;
        }
        //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
        s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
        s.strm.next_out += left;
        s.strm.avail_out -= left;
        s.strm.total_out += left;
        s.block_start += left;
        len -= left;
      }

      /* Copy uncompressed bytes directly from next_in to next_out, updating
       * the check value.
       */
      if (len) {
        read_buf(s.strm, s.strm.output, s.strm.next_out, len);
        s.strm.next_out += len;
        s.strm.avail_out -= len;
        s.strm.total_out += len;
      }
    } while (last === 0);

    /* Update the sliding window with the last s->w_size bytes of the copied
     * data, or append all of the copied data to the existing window if less
     * than s->w_size bytes were copied. Also update the number of bytes to
     * insert in the hash tables, in the event that deflateParams() switches to
     * a non-zero compression level.
     */
    used -= s.strm.avail_in;    /* number of input bytes directly copied */
    if (used) {
      /* If any input was used, then no unused input remains in the window,
       * therefore s->block_start == s->strstart.
       */
      if (used >= s.w_size) {  /* supplant the previous history */
        s.matches = 2;     /* clear hash */
        //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
        s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
        s.strstart = s.w_size;
        s.insert = s.strstart;
      }
      else {
        if (s.window_size - s.strstart <= used) {
          /* Slide the window down. */
          s.strstart -= s.w_size;
          //zmemcpy(s->window, s->window + s->w_size, s->strstart);
          s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
          if (s.matches < 2) {
            s.matches++;   /* add a pending slide_hash() */
          }
          if (s.insert > s.strstart) {
            s.insert = s.strstart;
          }
        }
        //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
        s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
        s.strstart += used;
        s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
      }
      s.block_start = s.strstart;
    }
    if (s.high_water < s.strstart) {
      s.high_water = s.strstart;
    }

    /* If the last block was written to next_out, then done. */
    if (last) {
      return BS_FINISH_DONE;
    }

    /* If flushing and all input has been consumed, then done. */
    if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&
      s.strm.avail_in === 0 && s.strstart === s.block_start) {
      return BS_BLOCK_DONE;
    }

    /* Fill the window with any remaining input. */
    have = s.window_size - s.strstart;
    if (s.strm.avail_in > have && s.block_start >= s.w_size) {
      /* Slide the window down. */
      s.block_start -= s.w_size;
      s.strstart -= s.w_size;
      //zmemcpy(s->window, s->window + s->w_size, s->strstart);
      s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
      if (s.matches < 2) {
        s.matches++;       /* add a pending slide_hash() */
      }
      have += s.w_size;      /* more space now */
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
    }
    if (have > s.strm.avail_in) {
      have = s.strm.avail_in;
    }
    if (have) {
      read_buf(s.strm, s.window, s.strstart, have);
      s.strstart += have;
      s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
    }
    if (s.high_water < s.strstart) {
      s.high_water = s.strstart;
    }

    /* There was not enough avail_out to write a complete worthy or flushed
     * stored block to next_out. Write a stored block to pending instead, if we
     * have enough input for a worthy block, or if flushing and there is enough
     * room for the remaining input as a stored block in the pending buffer.
     */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
      /* maximum stored block length that will fit in pending: */
    have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
    min_block = have > s.w_size ? s.w_size : have;
    left = s.strstart - s.block_start;
    if (left >= min_block ||
       ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&
       s.strm.avail_in === 0 && left <= have)) {
      len = left > have ? have : left;
      last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&
           len === left ? 1 : 0;
      _tr_stored_block(s, s.block_start, len, last);
      s.block_start += len;
      flush_pending(s.strm);
    }

    /* We've done all we can with the available input and output. */
    return last ? BS_FINISH_STARTED : BS_NEED_MORE;
  };


  /* ===========================================================================
   * Compress as much as possible from the input stream, return the current
   * block state.
   * This function does not perform lazy evaluation of matches and inserts
   * new strings in the dictionary only for unmatched strings or for short
   * matches. It is used only for the fast compression options.
   */
  const deflate_fast = (s, flush) => {

    let hash_head;        /* head of the hash chain */
    let bflush;           /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) {
          break; /* flush the current block */
        }
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0/*NIL*/;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       * At this point we have always match_length < MIN_MATCH
       */
      if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */
      }
      if (s.match_length >= MIN_MATCH) {
        // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

        /*** _tr_tally_dist(s, s.strstart - s.match_start,
                       s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;

        /* Insert new strings in the hash table only if the match length
         * is not too large. This saves time but degrades compression.
         */
        if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
          s.match_length--; /* string at strstart already in table */
          do {
            s.strstart++;
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
            /* strstart never exceeds WSIZE-MAX_MATCH, so there are
             * always MIN_MATCH bytes ahead.
             */
          } while (--s.match_length !== 0);
          s.strstart++;
        } else
        {
          s.strstart += s.match_length;
          s.match_length = 0;
          s.ins_h = s.window[s.strstart];
          /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

  //#if MIN_MATCH != 3
  //                Call UPDATE_HASH() MIN_MATCH-3 more times
  //#endif
          /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
           * matter since it will be recomputed at next deflate call.
           */
        }
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s.window[s.strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  };

  /* ===========================================================================
   * Same as above, but achieves better compression. We use a lazy
   * evaluation for matches: a match is finally adopted only if there is
   * no better match at the next window position.
   */
  const deflate_slow = (s, flush) => {

    let hash_head;          /* head of hash chain */
    let bflush;              /* set if current block must be flushed */

    let max_insert;

    /* Process the input block. */
    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the next match, plus MIN_MATCH bytes to insert the
       * string following the next match.
       */
      if (s.lookahead < MIN_LOOKAHEAD) {
        fill_window(s);
        if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; } /* flush the current block */
      }

      /* Insert the string window[strstart .. strstart+2] in the
       * dictionary, and set hash_head to the head of the hash chain:
       */
      hash_head = 0/*NIL*/;
      if (s.lookahead >= MIN_MATCH) {
        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = s.strstart;
        /***/
      }

      /* Find the longest match, discarding those <= prev_length.
       */
      s.prev_length = s.match_length;
      s.prev_match = s.match_start;
      s.match_length = MIN_MATCH - 1;

      if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
          s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 &&
           (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH - 1;
        }
      }
      /* If there was a match at the previous step and the current
       * match is not better, output the previous match:
       */
      if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
        max_insert = s.strstart + s.lookahead - MIN_MATCH;
        /* Do not insert strings in hash table beyond this. */

        //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

        /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                       s.prev_length - MIN_MATCH, bflush);***/
        bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
        /* Insert in hash table all strings up to the end of the match.
         * strstart-1 and strstart are already inserted. If there is not
         * enough lookahead, the last two strings are not inserted in
         * the hash table.
         */
        s.lookahead -= s.prev_length - 1;
        s.prev_length -= 2;
        do {
          if (++s.strstart <= max_insert) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
            /***/
          }
        } while (--s.prev_length !== 0);
        s.match_available = 0;
        s.match_length = MIN_MATCH - 1;
        s.strstart++;

        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }

      } else if (s.match_available) {
        /* If there was no match at the previous position, output a
         * single literal. If there was a match but the current match
         * is longer, truncate the previous match to a single literal.
         */
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        if (bflush) {
          /*** FLUSH_BLOCK_ONLY(s, 0) ***/
          flush_block_only(s, false);
          /***/
        }
        s.strstart++;
        s.lookahead--;
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      } else {
        /* There is no previous match to compare with, wait for
         * the next step to decide.
         */
        s.match_available = 1;
        s.strstart++;
        s.lookahead--;
      }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }

    return BS_BLOCK_DONE;
  };


  /* ===========================================================================
   * For Z_RLE, simply look for runs of bytes, generate matches only of distance
   * one.  Do not maintain a hash table.  (It will be regenerated if this run of
   * deflate switches away from Z_RLE.)
   */
  const deflate_rle = (s, flush) => {

    let bflush;            /* set if current block must be flushed */
    let prev;              /* byte at distance one to match */
    let scan, strend;      /* scan goes up to strend for length of run */

    const _win = s.window;

    for (;;) {
      /* Make sure that we always have enough lookahead, except
       * at the end of the input file. We need MAX_MATCH bytes
       * for the longest run, plus one for the unrolled loop.
       */
      if (s.lookahead <= MAX_MATCH) {
        fill_window(s);
        if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        if (s.lookahead === 0) { break; } /* flush the current block */
      }

      /* See how many times the previous byte repeats */
      s.match_length = 0;
      if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
        scan = s.strstart - 1;
        prev = _win[scan];
        if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
          strend = s.strstart + MAX_MATCH;
          do {
            /*jshint noempty:false*/
          } while (prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   prev === _win[++scan] && prev === _win[++scan] &&
                   scan < strend);
          s.match_length = MAX_MATCH - (strend - scan);
          if (s.match_length > s.lookahead) {
            s.match_length = s.lookahead;
          }
        }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
      }

      /* Emit match if have run of MIN_MATCH or longer, else emit literal */
      if (s.match_length >= MIN_MATCH) {
        //check_match(s, s.strstart, s.strstart - 1, s.match_length);

        /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
        bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

        s.lookahead -= s.match_length;
        s.strstart += s.match_length;
        s.match_length = 0;
      } else {
        /* No match, output a literal byte */
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);

        s.lookahead--;
        s.strstart++;
      }
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  };

  /* ===========================================================================
   * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
   * (It will be regenerated if this run of deflate switches away from Huffman.)
   */
  const deflate_huff = (s, flush) => {

    let bflush;             /* set if current block must be flushed */

    for (;;) {
      /* Make sure that we have a literal to write. */
      if (s.lookahead === 0) {
        fill_window(s);
        if (s.lookahead === 0) {
          if (flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          break;      /* flush the current block */
        }
      }

      /* Output a literal byte */
      s.match_length = 0;
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
      /*** FLUSH_BLOCK(s, 1); ***/
      flush_block_only(s, true);
      if (s.strm.avail_out === 0) {
        return BS_FINISH_STARTED;
      }
      /***/
      return BS_FINISH_DONE;
    }
    if (s.sym_next) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    return BS_BLOCK_DONE;
  };

  /* Values for max_lazy_match, good_match and max_chain_length, depending on
   * the desired pack level (0..9). The values given below have been tuned to
   * exclude worst case performance for pathological files. Better values may be
   * found for specific files.
   */
  function Config(good_length, max_lazy, nice_length, max_chain, func) {

    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
  }

  const configuration_table = [
    /*      good lazy nice chain */
    new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
    new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
    new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
    new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

    new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
    new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
    new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
    new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
    new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
    new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
  ];


  /* ===========================================================================
   * Initialize the "longest match" routines for a new zlib stream
   */
  const lm_init = (s) => {

    s.window_size = 2 * s.w_size;

    /*** CLEAR_HASH(s); ***/
    zero(s.head); // Fill with NIL (= 0);

    /* Set the default configuration parameters:
     */
    s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;

    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
  };


  function DeflateState() {
    this.strm = null;            /* pointer back to this zlib stream */
    this.status = 0;            /* as the name implies */
    this.pending_buf = null;      /* output still pending */
    this.pending_buf_size = 0;  /* size of pending_buf */
    this.pending_out = 0;       /* next pending byte to output to the stream */
    this.pending = 0;           /* nb of bytes in the pending buffer */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
    this.gzhead = null;         /* gzip header information to write */
    this.gzindex = 0;           /* where in extra, name, or comment */
    this.method = Z_DEFLATED$2; /* can only be DEFLATED */
    this.last_flush = -1;   /* value of flush param for previous deflate call */

    this.w_size = 0;  /* LZ77 window size (32K by default) */
    this.w_bits = 0;  /* log2(w_size)  (8..16) */
    this.w_mask = 0;  /* w_size - 1 */

    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size.
     */

    this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     */

    this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     */

    this.head = null;   /* Heads of the hash chains or NIL. */

    this.ins_h = 0;       /* hash index of string to be inserted */
    this.hash_size = 0;   /* number of elements in hash table */
    this.hash_bits = 0;   /* log2(hash_size) */
    this.hash_mask = 0;   /* hash_size-1 */

    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     */

    this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     */

    this.match_length = 0;      /* length of best match */
    this.prev_match = 0;        /* previous match */
    this.match_available = 0;   /* set if previous match exists */
    this.strstart = 0;          /* start of string to insert */
    this.match_start = 0;       /* start of matching string */
    this.lookahead = 0;         /* number of valid bytes ahead in window */

    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     */

    this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     */

    this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     */
    // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     */

    this.level = 0;     /* compression level (1..9) */
    this.strategy = 0;  /* favor or force Huffman coding*/

    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */

    this.nice_match = 0; /* Stop searching when current match exceeds this */

                /* used by trees.c: */

    /* Didn't use ct_data typedef below to suppress compiler warning */

    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
    this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
    this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);

    this.l_desc   = null;         /* desc. for literal tree */
    this.d_desc   = null;         /* desc. for distance tree */
    this.bl_desc  = null;         /* desc. for bit length tree */

    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Uint16Array(MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */

    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
    zero(this.heap);

    this.heap_len = 0;               /* number of elements in the heap */
    this.heap_max = 0;               /* element of largest frequency */
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all trees.
     */

    this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
    zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
     */

    this.sym_buf = 0;        /* buffer for distances and literals/lengths */

    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     */

    this.sym_next = 0;      /* running index in sym_buf */
    this.sym_end = 0;       /* symbol table full when sym_next reaches this */

    this.opt_len = 0;       /* bit length of current block with optimal trees */
    this.static_len = 0;    /* bit length of current block with static trees */
    this.matches = 0;       /* number of string matches in current block */
    this.insert = 0;        /* bytes at end of window left to insert */


    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     */
    this.bi_valid = 0;
    /* Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     */

    // Used for window memory init. We safely ignore it for JS. That makes
    // sense only for pointers and memory check tools.
    //this.high_water = 0;
    /* High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     */
  }


  /* =========================================================================
   * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
   */
  const deflateStateCheck = (strm) => {

    if (!strm) {
      return 1;
    }
    const s = strm.state;
    if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
  //#ifdef GZIP
                                  s.status !== GZIP_STATE &&
  //#endif
                                  s.status !== EXTRA_STATE &&
                                  s.status !== NAME_STATE &&
                                  s.status !== COMMENT_STATE &&
                                  s.status !== HCRC_STATE &&
                                  s.status !== BUSY_STATE &&
                                  s.status !== FINISH_STATE)) {
      return 1;
    }
    return 0;
  };


  const deflateResetKeep = (strm) => {

    if (deflateStateCheck(strm)) {
      return err(strm, Z_STREAM_ERROR$2);
    }

    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN;

    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;

    if (s.wrap < 0) {
      s.wrap = -s.wrap;
      /* was made negative by deflate(..., Z_FINISH); */
    }
    s.status =
  //#ifdef GZIP
      s.wrap === 2 ? GZIP_STATE :
  //#endif
      s.wrap ? INIT_STATE : BUSY_STATE;
    strm.adler = (s.wrap === 2) ?
      0  // crc32(0, Z_NULL, 0)
    :
      1; // adler32(0, Z_NULL, 0)
    s.last_flush = -2;
    _tr_init(s);
    return Z_OK$3;
  };


  const deflateReset = (strm) => {

    const ret = deflateResetKeep(strm);
    if (ret === Z_OK$3) {
      lm_init(strm.state);
    }
    return ret;
  };


  const deflateSetHeader = (strm, head) => {

    if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
      return Z_STREAM_ERROR$2;
    }
    strm.state.gzhead = head;
    return Z_OK$3;
  };


  const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

    if (!strm) { // === Z_NULL
      return Z_STREAM_ERROR$2;
    }
    let wrap = 1;

    if (level === Z_DEFAULT_COMPRESSION$1) {
      level = 6;
    }

    if (windowBits < 0) { /* suppress zlib wrapper */
      wrap = 0;
      windowBits = -windowBits;
    }

    else if (windowBits > 15) {
      wrap = 2;           /* write gzip wrapper instead */
      windowBits -= 16;
    }


    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
      windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
      strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
      return err(strm, Z_STREAM_ERROR$2);
    }


    if (windowBits === 8) {
      windowBits = 9;
    }
    /* until 256-byte window bug fixed */

    const s = new DeflateState();

    strm.state = s;
    s.strm = strm;
    s.status = INIT_STATE;     /* to pass state test in deflateReset() */

    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;

    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);

    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */

    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    /* We overlay pending_buf and sym_buf. This works since the average size
     * for length/distance pairs over any compressed block is assured to be 31
     * bits or less.
     *
     * Analysis: The longest fixed codes are a length code of 8 bits plus 5
     * extra bits, for lengths 131 to 257. The longest fixed distance codes are
     * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
     * possible fixed-codes length/distance pair is then 31 bits total.
     *
     * sym_buf starts one-fourth of the way into pending_buf. So there are
     * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
     * in sym_buf is three bytes -- two for the distance and one for the
     * literal/length. As each symbol is consumed, the pointer to the next
     * sym_buf value to read moves forward three bytes. From that symbol, up to
     * 31 bits are written to pending_buf. The closest the written pending_buf
     * bits gets to the next sym_buf symbol to read is just before the last
     * code is written. At that time, 31*(n-2) bits have been written, just
     * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
     * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
     * symbols are written.) The closest the writing gets to what is unread is
     * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
     * can range from 128 to 32768.
     *
     * Therefore, at a minimum, there are 142 bits of space between what is
     * written and what is read in the overlain buffers, so the symbols cannot
     * be overwritten by the compressed data. That space is actually 139 bits,
     * due to the three-bit fixed-code block header.
     *
     * That covers the case where either Z_FIXED is specified, forcing fixed
     * codes, or when the use of fixed codes is chosen, because that choice
     * results in a smaller compressed block than dynamic codes. That latter
     * condition then assures that the above analysis also covers all dynamic
     * blocks. A dynamic-code block will only be chosen to be emitted if it has
     * fewer bits than a fixed-code block would for the same set of symbols.
     * Therefore its average symbol length is assured to be less than 31. So
     * the compressed data for a dynamic block also cannot overwrite the
     * symbols from which it is being constructed.
     */

    s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Uint8Array(s.pending_buf_size);

    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->sym_buf = s->pending_buf + s->lit_bufsize;
    s.sym_buf = s.lit_bufsize;

    //s->sym_end = (s->lit_bufsize - 1) * 3;
    s.sym_end = (s.lit_bufsize - 1) * 3;
    /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */

    s.level = level;
    s.strategy = strategy;
    s.method = method;

    return deflateReset(strm);
  };

  const deflateInit = (strm, level) => {

    return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
  };


  /* ========================================================================= */
  const deflate$2 = (strm, flush) => {

    if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
      return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
    }

    const s = strm.state;

    if (!strm.output ||
        (strm.avail_in !== 0 && !strm.input) ||
        (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
      return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
    }

    const old_flush = s.last_flush;
    s.last_flush = flush;

    /* Flush as much pending output as possible */
    if (s.pending !== 0) {
      flush_pending(strm);
      if (strm.avail_out === 0) {
        /* Since avail_out is 0, deflate will be called again with
         * more output space, but possibly with both pending and
         * avail_in equal to zero. There won't be anything to do,
         * but this is not an error situation so make sure we
         * return OK instead of BUF_ERROR at next call of deflate:
         */
        s.last_flush = -1;
        return Z_OK$3;
      }

      /* Make sure there is something to do and avoid duplicate consecutive
       * flushes. For repeated and useless calls with Z_FINISH, we keep
       * returning Z_STREAM_END instead of Z_BUF_ERROR.
       */
    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
      flush !== Z_FINISH$3) {
      return err(strm, Z_BUF_ERROR$1);
    }

    /* User must not provide more input after the first FINISH: */
    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
      return err(strm, Z_BUF_ERROR$1);
    }

    /* Write the header */
    if (s.status === INIT_STATE && s.wrap === 0) {
      s.status = BUSY_STATE;
    }
    if (s.status === INIT_STATE) {
      /* zlib header */
      let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
      let level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
  //#ifdef GZIP
    if (s.status === GZIP_STATE) {
      /* gzip header */
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;

        /* Compression must start with an empty pending buffer */
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    if (s.status === EXTRA_STATE) {
      if (s.gzhead.extra/* != Z_NULL*/) {
        let beg = s.pending;   /* start of bytes to update crc */
        let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
        while (s.pending + left > s.pending_buf_size) {
          let copy = s.pending_buf_size - s.pending;
          // zmemcpy(s.pending_buf + s.pending,
          //    s.gzhead.extra + s.gzindex, copy);
          s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
          s.pending = s.pending_buf_size;
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          s.gzindex += copy;
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
          left -= copy;
        }
        // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
        //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
        let gzhead_extra = new Uint8Array(s.gzhead.extra);
        // zmemcpy(s->pending_buf + s->pending,
        //     s->gzhead->extra + s->gzindex, left);
        s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
        s.pending += left;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex = 0;
      }
      s.status = NAME_STATE;
    }
    if (s.status === NAME_STATE) {
      if (s.gzhead.name/* != Z_NULL*/) {
        let beg = s.pending;   /* start of bytes to update crc */
        let val;
        do {
          if (s.pending === s.pending_buf_size) {
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            //---//
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK$3;
            }
            beg = 0;
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex = 0;
      }
      s.status = COMMENT_STATE;
    }
    if (s.status === COMMENT_STATE) {
      if (s.gzhead.comment/* != Z_NULL*/) {
        let beg = s.pending;   /* start of bytes to update crc */
        let val;
        do {
          if (s.pending === s.pending_buf_size) {
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            //---//
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK$3;
            }
            beg = 0;
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
      }
      s.status = HCRC_STATE;
    }
    if (s.status === HCRC_STATE) {
      if (s.gzhead.hcrc) {
        if (s.pending + 2 > s.pending_buf_size) {
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
        }
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
      }
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
  //#endif

    /* Start a new block or continue the current one.
     */
    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
      (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
      let bstate = s.level === 0 ? deflate_stored(s, flush) :
                   s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                   s.strategy === Z_RLE ? deflate_rle(s, flush) :
                   configuration_table[s.level].func(s, flush);

      if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
        s.status = FINISH_STATE;
      }
      if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          /* avoid BUF_ERROR next call, see above */
        }
        return Z_OK$3;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
         * of deflate should use the same flush parameter to make sure
         * that the flush is complete. So we don't have to output an
         * empty block here, this will be done at next call. This also
         * ensures that for a very small output buffer, we emit at most
         * one empty block.
         */
      }
      if (bstate === BS_BLOCK_DONE) {
        if (flush === Z_PARTIAL_FLUSH) {
          _tr_align(s);
        }
        else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

          _tr_stored_block(s, 0, 0, false);
          /* For a full flush, this empty block will be recognized
           * as a special marker by inflate_sync().
           */
          if (flush === Z_FULL_FLUSH$1) {
            /*** CLEAR_HASH(s); ***/             /* forget history */
            zero(s.head); // Fill with NIL (= 0);

            if (s.lookahead === 0) {
              s.strstart = 0;
              s.block_start = 0;
              s.insert = 0;
            }
          }
        }
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
          return Z_OK$3;
        }
      }
    }

    if (flush !== Z_FINISH$3) { return Z_OK$3; }
    if (s.wrap <= 0) { return Z_STREAM_END$3; }

    /* Write the trailer */
    if (s.wrap === 2) {
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      put_byte(s, (strm.adler >> 16) & 0xff);
      put_byte(s, (strm.adler >> 24) & 0xff);
      put_byte(s, strm.total_in & 0xff);
      put_byte(s, (strm.total_in >> 8) & 0xff);
      put_byte(s, (strm.total_in >> 16) & 0xff);
      put_byte(s, (strm.total_in >> 24) & 0xff);
    }
    else
    {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }

    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s.wrap > 0) { s.wrap = -s.wrap; }
    /* write the trailer only once! */
    return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
  };


  const deflateEnd = (strm) => {

    if (deflateStateCheck(strm)) {
      return Z_STREAM_ERROR$2;
    }

    const status = strm.state.status;

    strm.state = null;

    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
  };


  /* =========================================================================
   * Initializes the compression dictionary from the given byte
   * sequence without producing any compressed output.
   */
  const deflateSetDictionary = (strm, dictionary) => {

    let dictLength = dictionary.length;

    if (deflateStateCheck(strm)) {
      return Z_STREAM_ERROR$2;
    }

    const s = strm.state;
    const wrap = s.wrap;

    if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
      return Z_STREAM_ERROR$2;
    }

    /* when using zlib wrappers, compute Adler-32 for provided dictionary */
    if (wrap === 1) {
      /* adler32(strm->adler, dictionary, dictLength); */
      strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
    }

    s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

    /* if dictionary would fill window, just replace the history */
    if (dictLength >= s.w_size) {
      if (wrap === 0) {            /* already empty otherwise */
        /*** CLEAR_HASH(s); ***/
        zero(s.head); // Fill with NIL (= 0);
        s.strstart = 0;
        s.block_start = 0;
        s.insert = 0;
      }
      /* use the tail */
      // dictionary = dictionary.slice(dictLength - s.w_size);
      let tmpDict = new Uint8Array(s.w_size);
      tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
      dictionary = tmpDict;
      dictLength = s.w_size;
    }
    /* insert dictionary into window and hash */
    const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    fill_window(s);
    while (s.lookahead >= MIN_MATCH) {
      let str = s.strstart;
      let n = s.lookahead - (MIN_MATCH - 1);
      do {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];

        s.head[s.ins_h] = str;
        str++;
      } while (--n);
      s.strstart = str;
      s.lookahead = MIN_MATCH - 1;
      fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return Z_OK$3;
  };


  var deflateInit_1 = deflateInit;
  var deflateInit2_1 = deflateInit2;
  var deflateReset_1 = deflateReset;
  var deflateResetKeep_1 = deflateResetKeep;
  var deflateSetHeader_1 = deflateSetHeader;
  var deflate_2$1 = deflate$2;
  var deflateEnd_1 = deflateEnd;
  var deflateSetDictionary_1 = deflateSetDictionary;
  var deflateInfo = 'pako deflate (from Nodeca project)';

  /* Not implemented
  module.exports.deflateBound = deflateBound;
  module.exports.deflateCopy = deflateCopy;
  module.exports.deflateGetDictionary = deflateGetDictionary;
  module.exports.deflateParams = deflateParams;
  module.exports.deflatePending = deflatePending;
  module.exports.deflatePrime = deflatePrime;
  module.exports.deflateTune = deflateTune;
  */

  var deflate_1$2 = {
  	deflateInit: deflateInit_1,
  	deflateInit2: deflateInit2_1,
  	deflateReset: deflateReset_1,
  	deflateResetKeep: deflateResetKeep_1,
  	deflateSetHeader: deflateSetHeader_1,
  	deflate: deflate_2$1,
  	deflateEnd: deflateEnd_1,
  	deflateSetDictionary: deflateSetDictionary_1,
  	deflateInfo: deflateInfo
  };

  const _has = (obj, key) => {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  var assign = function (obj /*from1, from2, from3, ...*/) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      const source = sources.shift();
      if (!source) { continue; }

      if (typeof source !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (const p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  };


  // Join array of chunks to single array.
  var flattenChunks = (chunks) => {
    // calculate data length
    let len = 0;

    for (let i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    const result = new Uint8Array(len);

    for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
      let chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  };

  var common = {
  	assign: assign,
  	flattenChunks: flattenChunks
  };

  // String encode/decode helpers


  // Quick check if we can use fast array to bin string conversion
  //
  // - apply(Array) can fail on Android 2.2
  // - apply(Uint8Array) can fail on iOS 5.1 Safari
  //
  let STR_APPLY_UIA_OK = true;

  try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


  // Table with utf8 lengths (calculated by first byte of sequence)
  // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
  // because max possible codepoint is 0x10ffff
  const _utf8len = new Uint8Array(256);
  for (let q = 0; q < 256; q++) {
    _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
  }
  _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


  // convert string to array (typed, when possible)
  var string2buf = (str) => {
    if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
      return new TextEncoder().encode(str);
    }

    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    buf = new Uint8Array(buf_len);

    // convert
    for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
      c = str.charCodeAt(m_pos);
      if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
        c2 = str.charCodeAt(m_pos + 1);
        if ((c2 & 0xfc00) === 0xdc00) {
          c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
          m_pos++;
        }
      }
      if (c < 0x80) {
        /* one byte */
        buf[i++] = c;
      } else if (c < 0x800) {
        /* two bytes */
        buf[i++] = 0xC0 | (c >>> 6);
        buf[i++] = 0x80 | (c & 0x3f);
      } else if (c < 0x10000) {
        /* three bytes */
        buf[i++] = 0xE0 | (c >>> 12);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      } else {
        /* four bytes */
        buf[i++] = 0xf0 | (c >>> 18);
        buf[i++] = 0x80 | (c >>> 12 & 0x3f);
        buf[i++] = 0x80 | (c >>> 6 & 0x3f);
        buf[i++] = 0x80 | (c & 0x3f);
      }
    }

    return buf;
  };

  // Helper
  const buf2binstring = (buf, len) => {
    // On Chrome, the arguments in a function call that are allowed is `65534`.
    // If the length of the buffer is smaller than that, we can use this optimization,
    // otherwise we will take a slower path.
    if (len < 65534) {
      if (buf.subarray && STR_APPLY_UIA_OK) {
        return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
      }
    }

    let result = '';
    for (let i = 0; i < len; i++) {
      result += String.fromCharCode(buf[i]);
    }
    return result;
  };


  // convert array to string
  var buf2string = (buf, max) => {
    const len = max || buf.length;

    if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
      return new TextDecoder().decode(buf.subarray(0, max));
    }

    let i, out;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    const utf16buf = new Array(len * 2);

    for (out = 0, i = 0; i < len;) {
      let c = buf[i++];
      // quick process ascii
      if (c < 0x80) { utf16buf[out++] = c; continue; }

      let c_len = _utf8len[c];
      // skip 5 & 6 byte codes
      if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

      // apply mask on first byte
      c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
      // join the rest
      while (c_len > 1 && i < len) {
        c = (c << 6) | (buf[i++] & 0x3f);
        c_len--;
      }

      // terminated by end of string?
      if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

      if (c < 0x10000) {
        utf16buf[out++] = c;
      } else {
        c -= 0x10000;
        utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
        utf16buf[out++] = 0xdc00 | (c & 0x3ff);
      }
    }

    return buf2binstring(utf16buf, out);
  };


  // Calculate max possible position in utf8 buffer,
  // that will not break sequence. If that's not possible
  // - (very small limits) return max size as is.
  //
  // buf[] - utf8 bytes array
  // max   - length limit (mandatory);
  var utf8border = (buf, max) => {

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    let pos = max - 1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means buffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
  };

  var strings = {
  	string2buf: string2buf,
  	buf2string: buf2string,
  	utf8border: utf8border
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  function ZStream() {
    /* next input byte */
    this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */
    this.avail_in = 0;
    /* total number of input bytes read so far */
    this.total_in = 0;
    /* next output byte should be put there */
    this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */
    this.avail_out = 0;
    /* total number of bytes output so far */
    this.total_out = 0;
    /* last error message, NULL if no error */
    this.msg = ''/*Z_NULL*/;
    /* not visible by applications */
    this.state = null;
    /* best guess about the data type: binary or text */
    this.data_type = 2/*Z_UNKNOWN*/;
    /* adler32 value of the uncompressed data */
    this.adler = 0;
  }

  var zstream = ZStream;

  const toString$1 = Object.prototype.toString;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
    Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
    Z_DEFAULT_COMPRESSION,
    Z_DEFAULT_STRATEGY,
    Z_DEFLATED: Z_DEFLATED$1
  } = constants$2;

  /* ===========================================================================*/


  /**
   * class Deflate
   *
   * Generic JS-style wrapper for zlib calls. If you don't need
   * streaming behaviour - use more simple functions: [[deflate]],
   * [[deflateRaw]] and [[gzip]].
   **/

  /* internal
   * Deflate.chunks -> Array
   *
   * Chunks of output data, if [[Deflate#onData]] not overridden.
   **/

  /**
   * Deflate.result -> Uint8Array
   *
   * Compressed result, generated by default [[Deflate#onData]]
   * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
   * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
   **/

  /**
   * Deflate.err -> Number
   *
   * Error code after deflate finished. 0 (Z_OK) on success.
   * You will not need it in real life, because deflate errors
   * are possible only on wrong options or bad `onData` / `onEnd`
   * custom handlers.
   **/

  /**
   * Deflate.msg -> String
   *
   * Error message, if [[Deflate.err]] != 0
   **/


  /**
   * new Deflate(options)
   * - options (Object): zlib deflate options.
   *
   * Creates new deflator instance with specified params. Throws exception
   * on bad params. Supported options:
   *
   * - `level`
   * - `windowBits`
   * - `memLevel`
   * - `strategy`
   * - `dictionary`
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Additional options, for internal needs:
   *
   * - `chunkSize` - size of generated data chunks (16K by default)
   * - `raw` (Boolean) - do raw deflate
   * - `gzip` (Boolean) - create gzip wrapper
   * - `header` (Object) - custom header for gzip
   *   - `text` (Boolean) - true if compressed data believed to be text
   *   - `time` (Number) - modification time, unix timestamp
   *   - `os` (Number) - operation system code
   *   - `extra` (Array) - array of bytes with extra data (max 65536)
   *   - `name` (String) - file name (binary string)
   *   - `comment` (String) - comment (binary string)
   *   - `hcrc` (Boolean) - true if header crc should be added
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako')
   *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
   *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
   *
   * const deflate = new pako.Deflate({ level: 3});
   *
   * deflate.push(chunk1, false);
   * deflate.push(chunk2, true);  // true -> last chunk
   *
   * if (deflate.err) { throw new Error(deflate.err); }
   *
   * console.log(deflate.result);
   * ```
   **/
  function Deflate$1(options) {
    this.options = common.assign({
      level: Z_DEFAULT_COMPRESSION,
      method: Z_DEFLATED$1,
      chunkSize: 16384,
      windowBits: 15,
      memLevel: 8,
      strategy: Z_DEFAULT_STRATEGY
    }, options || {});

    let opt = this.options;

    if (opt.raw && (opt.windowBits > 0)) {
      opt.windowBits = -opt.windowBits;
    }

    else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
      opt.windowBits += 16;
    }

    this.err    = 0;      // error code, if happens (0 = Z_OK)
    this.msg    = '';     // error message
    this.ended  = false;  // used to avoid multiple onEnd() calls
    this.chunks = [];     // chunks of compressed data

    this.strm = new zstream();
    this.strm.avail_out = 0;

    let status = deflate_1$2.deflateInit2(
      this.strm,
      opt.level,
      opt.method,
      opt.windowBits,
      opt.memLevel,
      opt.strategy
    );

    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }

    if (opt.header) {
      deflate_1$2.deflateSetHeader(this.strm, opt.header);
    }

    if (opt.dictionary) {
      let dict;
      // Convert data if needed
      if (typeof opt.dictionary === 'string') {
        // If we need to compress text, change encoding to utf8.
        dict = strings.string2buf(opt.dictionary);
      } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(opt.dictionary);
      } else {
        dict = opt.dictionary;
      }

      status = deflate_1$2.deflateSetDictionary(this.strm, dict);

      if (status !== Z_OK$2) {
        throw new Error(messages[status]);
      }

      this._dict_set = true;
    }
  }

  /**
   * Deflate#push(data[, flush_mode]) -> Boolean
   * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
   *   converted to utf8 byte sequence.
   * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
   *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
   *
   * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
   * new compressed chunks. Returns `true` on success. The last data block must
   * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
   * buffers and call [[Deflate#onEnd]].
   *
   * On fail call [[Deflate#onEnd]] with error code and return false.
   *
   * ##### Example
   *
   * ```javascript
   * push(chunk, false); // push one of data chunks
   * ...
   * push(chunk, true);  // push last chunk
   * ```
   **/
  Deflate$1.prototype.push = function (data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;

    if (this.ended) { return false; }

    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

    // Convert data if needed
    if (typeof data === 'string') {
      // If we need to compress text, change encoding to utf8.
      strm.input = strings.string2buf(data);
    } else if (toString$1.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }

    strm.next_in = 0;
    strm.avail_in = strm.input.length;

    for (;;) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }

      // Make sure avail_out > 6 to avoid repeating markers
      if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }

      status = deflate_1$2.deflate(strm, _flush_mode);

      // Ended => flush and finish
      if (status === Z_STREAM_END$2) {
        if (strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
        }
        status = deflate_1$2.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK$2;
      }

      // Flush if out buffer full
      if (strm.avail_out === 0) {
        this.onData(strm.output);
        continue;
      }

      // Flush if requested and has data
      if (_flush_mode > 0 && strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
        strm.avail_out = 0;
        continue;
      }

      if (strm.avail_in === 0) break;
    }

    return true;
  };


  /**
   * Deflate#onData(chunk) -> Void
   * - chunk (Uint8Array): output data.
   *
   * By default, stores data blocks in `chunks[]` property and glue
   * those in `onEnd`. Override this handler, if you need another behaviour.
   **/
  Deflate$1.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };


  /**
   * Deflate#onEnd(status) -> Void
   * - status (Number): deflate status. 0 (Z_OK) on success,
   *   other if not.
   *
   * Called once after you tell deflate that the input stream is
   * complete (Z_FINISH). By default - join collected chunks,
   * free memory and fill `results` / `err` properties.
   **/
  Deflate$1.prototype.onEnd = function (status) {
    // On success - join
    if (status === Z_OK$2) {
      this.result = common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  // See state defs from inflate.js
  const BAD$1 = 16209;       /* got a data error -- remain here until reset */
  const TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */

  /*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
  var inffast = function inflate_fast(strm, start) {
    let _in;                    /* local strm.input */
    let last;                   /* have enough input while in < last */
    let _out;                   /* local strm.output */
    let beg;                    /* inflate()'s initial strm.output */
    let end;                    /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
    let dmax;                   /* maximum distance from zlib header */
  //#endif
    let wsize;                  /* window size or zero if not using window */
    let whave;                  /* valid bytes in the window */
    let wnext;                  /* window write index */
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    let s_window;               /* allocated sliding window, if wsize != 0 */
    let hold;                   /* local strm.hold */
    let bits;                   /* local strm.bits */
    let lcode;                  /* local strm.lencode */
    let dcode;                  /* local strm.distcode */
    let lmask;                  /* mask for first level of length codes */
    let dmask;                  /* mask for first level of distance codes */
    let here;                   /* retrieved table entry */
    let op;                     /* code bits, operation, extra bits, or */
                                /*  window position, window bytes to copy */
    let len;                    /* match length, unused bytes */
    let dist;                   /* match distance */
    let from;                   /* where to copy match from */
    let from_source;


    let input, output; // JS specific, because we have no pointers

    /* copy state to local variables */
    const state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
    dmax = state.dmax;
  //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;


    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */

    top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }

      here = lcode[hold & lmask];

      dolen:
      for (;;) { // Goto emulation
        op = here >>> 24/*here.bits*/;
        hold >>>= op;
        bits -= op;
        op = (here >>> 16) & 0xff/*here.op*/;
        if (op === 0) {                          /* literal */
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          output[_out++] = here & 0xffff/*here.val*/;
        }
        else if (op & 16) {                     /* length base */
          len = here & 0xffff/*here.val*/;
          op &= 15;                           /* number of extra bits */
          if (op) {
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
            }
            len += hold & ((1 << op) - 1);
            hold >>>= op;
            bits -= op;
          }
          //Tracevv((stderr, "inflate:         length %u\n", len));
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = dcode[hold & dmask];

          dodist:
          for (;;) { // goto emulation
            op = here >>> 24/*here.bits*/;
            hold >>>= op;
            bits -= op;
            op = (here >>> 16) & 0xff/*here.op*/;

            if (op & 16) {                      /* distance base */
              dist = here & 0xffff/*here.val*/;
              op &= 15;                       /* number of extra bits */
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }
              }
              dist += hold & ((1 << op) - 1);
  //#ifdef INFLATE_STRICT
              if (dist > dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD$1;
                break top;
              }
  //#endif
              hold >>>= op;
              bits -= op;
              //Tracevv((stderr, "inflate:         distance %u\n", dist));
              op = _out - beg;                /* max distance in output */
              if (dist > op) {                /* see if copy from window */
                op = dist - op;               /* distance back in window */
                if (op > whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD$1;
                    break top;
                  }

  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //                if (len <= op - whave) {
  //                  do {
  //                    output[_out++] = 0;
  //                  } while (--len);
  //                  continue top;
  //                }
  //                len -= op - whave;
  //                do {
  //                  output[_out++] = 0;
  //                } while (--op > whave);
  //                if (op === 0) {
  //                  from = _out - dist;
  //                  do {
  //                    output[_out++] = output[from++];
  //                  } while (--len);
  //                  continue top;
  //                }
  //#endif
                }
                from = 0; // window index
                from_source = s_window;
                if (wnext === 0) {           /* very common case */
                  from += wsize - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                else if (wnext < op) {      /* wrap around window */
                  from += wsize + wnext - op;
                  op -= wnext;
                  if (op < len) {         /* some from end of window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = 0;
                    if (wnext < len) {  /* some from start of window */
                      op = wnext;
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;      /* rest from output */
                      from_source = output;
                    }
                  }
                }
                else {                      /* contiguous in window */
                  from += wnext - op;
                  if (op < len) {         /* some from window */
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;  /* rest from output */
                    from_source = output;
                  }
                }
                while (len > 2) {
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  output[_out++] = from_source[from++];
                  len -= 3;
                }
                if (len) {
                  output[_out++] = from_source[from++];
                  if (len > 1) {
                    output[_out++] = from_source[from++];
                  }
                }
              }
              else {
                from = _out - dist;          /* copy direct from output */
                do {                        /* minimum length is three */
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  output[_out++] = output[from++];
                  len -= 3;
                } while (len > 2);
                if (len) {
                  output[_out++] = output[from++];
                  if (len > 1) {
                    output[_out++] = output[from++];
                  }
                }
              }
            }
            else if ((op & 64) === 0) {          /* 2nd level distance code */
              here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
              continue dodist;
            }
            else {
              strm.msg = 'invalid distance code';
              state.mode = BAD$1;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        }
        else if ((op & 64) === 0) {              /* 2nd level length code */
          here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
          continue dolen;
        }
        else if (op & 32) {                     /* end-of-block */
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.mode = TYPE$1;
          break top;
        }
        else {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break top;
        }

        break; // need to emulate goto via "continue"
      }
    } while (_in < last && _out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;

    /* update state and return */
    strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
    state.hold = hold;
    state.bits = bits;
    return;
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  const MAXBITS = 15;
  const ENOUGH_LENS$1 = 852;
  const ENOUGH_DISTS$1 = 592;
  //const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

  const CODES$1 = 0;
  const LENS$1 = 1;
  const DISTS$1 = 2;

  const lbase = new Uint16Array([ /* Length codes 257..285 base */
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
  ]);

  const lext = new Uint8Array([ /* Length codes 257..285 extra */
    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
  ]);

  const dbase = new Uint16Array([ /* Distance codes 0..29 base */
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
    8193, 12289, 16385, 24577, 0, 0
  ]);

  const dext = new Uint8Array([ /* Distance codes 0..29 extra */
    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
    28, 28, 29, 29, 64, 64
  ]);

  const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
  {
    const bits = opts.bits;
        //here = opts.here; /* table entry for duplication */

    let len = 0;               /* a code's length in bits */
    let sym = 0;               /* index of code symbols */
    let min = 0, max = 0;          /* minimum and maximum code lengths */
    let root = 0;              /* number of index bits for root table */
    let curr = 0;              /* number of index bits for current table */
    let drop = 0;              /* code bits to drop for sub-table */
    let left = 0;                   /* number of prefix codes available */
    let used = 0;              /* code entries in table used */
    let huff = 0;              /* Huffman code */
    let incr;              /* for incrementing code, index */
    let fill;              /* index for replicating entries */
    let low;               /* low bits for current root entry */
    let mask;              /* mask for low root bits */
    let next;             /* next available space in table */
    let base = null;     /* base value table to use */
  //  let shoextra;    /* extra bits table to use */
    let match;                  /* use base and extra for symbol >= match */
    const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    let extra = null;

    let here_bits, here_op, here_val;

    /*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++) {
      count[len] = 0;
    }
    for (sym = 0; sym < codes; sym++) {
      count[lens[lens_index + sym]]++;
    }

    /* bound code lengths, force root to be within code lengths */
    root = bits;
    for (max = MAXBITS; max >= 1; max--) {
      if (count[max] !== 0) { break; }
    }
    if (root > max) {
      root = max;
    }
    if (max === 0) {                     /* no symbols to code at all */
      //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
      //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
      //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;


      //table.op[opts.table_index] = 64;
      //table.bits[opts.table_index] = 1;
      //table.val[opts.table_index++] = 0;
      table[table_index++] = (1 << 24) | (64 << 16) | 0;

      opts.bits = 1;
      return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min < max; min++) {
      if (count[min] !== 0) { break; }
    }
    if (root < min) {
      root = min;
    }

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
      left <<= 1;
      left -= count[len];
      if (left < 0) {
        return -1;
      }        /* over-subscribed */
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) {
      return -1;                      /* incomplete set */
    }

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++) {
      offs[len + 1] = offs[len] + count[len];
    }

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++) {
      if (lens[lens_index + sym] !== 0) {
        work[offs[lens[lens_index + sym]]++] = sym;
      }
    }

    /*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES$1) {
      base = extra = work;    /* dummy value--not used */
      match = 20;

    } else if (type === LENS$1) {
      base = lbase;
      extra = lext;
      match = 257;

    } else {                    /* DISTS */
      base = dbase;
      extra = dext;
      match = 0;
    }

    /* initialize opts for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = table_index;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = -1;                   /* trigger new sub-table when len > root */
    used = 1 << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
      (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
      return 1;
    }

    /* process all codes and make table entries */
    for (;;) {
      /* create table entry */
      here_bits = len - drop;
      if (work[sym] + 1 < match) {
        here_op = 0;
        here_val = work[sym];
      }
      else if (work[sym] >= match) {
        here_op = extra[work[sym] - match];
        here_val = base[work[sym] - match];
      }
      else {
        here_op = 32 + 64;         /* end of block */
        here_val = 0;
      }

      /* replicate for those indices with low len bits equal to huff */
      incr = 1 << (len - drop);
      fill = 1 << curr;
      min = fill;                 /* save offset to next table */
      do {
        fill -= incr;
        table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
      } while (fill !== 0);

      /* backwards increment the len-bit code huff */
      incr = 1 << (len - 1);
      while (huff & incr) {
        incr >>= 1;
      }
      if (incr !== 0) {
        huff &= incr - 1;
        huff += incr;
      } else {
        huff = 0;
      }

      /* go to next symbol, update count, len */
      sym++;
      if (--count[len] === 0) {
        if (len === max) { break; }
        len = lens[lens_index + work[sym]];
      }

      /* create new sub-table if needed */
      if (len > root && (huff & mask) !== low) {
        /* if first time, transition to sub-tables */
        if (drop === 0) {
          drop = root;
        }

        /* increment past last table */
        next += min;            /* here min is 1 << curr */

        /* determine length of next table */
        curr = len - drop;
        left = 1 << curr;
        while (curr + drop < max) {
          left -= count[curr + drop];
          if (left <= 0) { break; }
          curr++;
          left <<= 1;
        }

        /* check for enough space */
        used += 1 << curr;
        if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
          (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
          return 1;
        }

        /* point entry in root table to sub-table */
        low = huff & mask;
        /*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
        table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
      }
    }

    /* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
    if (huff !== 0) {
      //table.op[next + huff] = 64;            /* invalid code marker */
      //table.bits[next + huff] = len - drop;
      //table.val[next + huff] = 0;
      table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
    }

    /* set return parameters */
    //opts.table_index += used;
    opts.bits = root;
    return 0;
  };


  var inftrees = inflate_table;

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.






  const CODES = 0;
  const LENS = 1;
  const DISTS = 2;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
    Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
    Z_DEFLATED
  } = constants$2;


  /* STATES ====================================================================*/
  /* ===========================================================================*/


  const    HEAD = 16180;       /* i: waiting for magic header */
  const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
  const    TIME = 16182;       /* i: waiting for modification time (gzip) */
  const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
  const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
  const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
  const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
  const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
  const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
  const    DICTID = 16189;    /* i: waiting for dictionary check value */
  const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
  const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
  const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
  const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
  const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
  const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
  const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
  const        LENLENS = 16197;   /* i: waiting for code length code lengths */
  const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
  const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
  const            LEN = 16200;       /* i: waiting for length/lit/eob code */
  const            LENEXT = 16201;    /* i: waiting for length extra bits */
  const            DIST = 16202;      /* i: waiting for distance code */
  const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
  const            MATCH = 16204;     /* o: waiting for output space to copy string */
  const            LIT = 16205;       /* o: waiting for output space to write literal */
  const    CHECK = 16206;     /* i: waiting for 32-bit check value */
  const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
  const    DONE = 16208;      /* finished check, done -- remain here until reset */
  const    BAD = 16209;       /* got a data error -- remain here until reset */
  const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
  const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

  /* ===========================================================================*/



  const ENOUGH_LENS = 852;
  const ENOUGH_DISTS = 592;
  //const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

  const MAX_WBITS = 15;
  /* 32K LZ77 window */
  const DEF_WBITS = MAX_WBITS;


  const zswap32 = (q) => {

    return  (((q >>> 24) & 0xff) +
            ((q >>> 8) & 0xff00) +
            ((q & 0xff00) << 8) +
            ((q & 0xff) << 24));
  };


  function InflateState() {
    this.strm = null;           /* pointer back to this zlib stream */
    this.mode = 0;              /* current inflate mode */
    this.last = false;          /* true if processing last block */
    this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                   bit 2 true to validate check value */
    this.havedict = false;      /* true if dictionary provided */
    this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                   -1 if raw or no header yet */
    this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
    this.check = 0;             /* protected copy of check value */
    this.total = 0;             /* protected copy of output count */
    // TODO: may be {}
    this.head = null;           /* where to save gzip header information */

    /* sliding window */
    this.wbits = 0;             /* log base 2 of requested window size */
    this.wsize = 0;             /* window size or zero if not using window */
    this.whave = 0;             /* valid bytes in the window */
    this.wnext = 0;             /* window write index */
    this.window = null;         /* allocated sliding window, if needed */

    /* bit accumulator */
    this.hold = 0;              /* input bit accumulator */
    this.bits = 0;              /* number of bits in "in" */

    /* for string and stored block copying */
    this.length = 0;            /* literal or length of data to copy */
    this.offset = 0;            /* distance back to copy string from */

    /* for table and code decoding */
    this.extra = 0;             /* extra bits needed */

    /* fixed and dynamic code tables */
    this.lencode = null;          /* starting table for length/literal codes */
    this.distcode = null;         /* starting table for distance codes */
    this.lenbits = 0;           /* index bits for lencode */
    this.distbits = 0;          /* index bits for distcode */

    /* dynamic table building */
    this.ncode = 0;             /* number of code length code lengths */
    this.nlen = 0;              /* number of length code lengths */
    this.ndist = 0;             /* number of distance code lengths */
    this.have = 0;              /* number of code lengths in lens[] */
    this.next = null;              /* next available space in codes[] */

    this.lens = new Uint16Array(320); /* temporary storage for code lengths */
    this.work = new Uint16Array(288); /* work area for code table building */

    /*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
    //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
    this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
    this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
    this.sane = 0;                   /* if false, allow invalid distance too far */
    this.back = 0;                   /* bits back of last unprocessed length/lit */
    this.was = 0;                    /* initial length of match */
  }


  const inflateStateCheck = (strm) => {

    if (!strm) {
      return 1;
    }
    const state = strm.state;
    if (!state || state.strm !== strm ||
      state.mode < HEAD || state.mode > SYNC) {
      return 1;
    }
    return 0;
  };


  const inflateResetKeep = (strm) => {

    if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/
    if (state.wrap) {       /* to support ill-conceived Java test suite */
      strm.adler = state.wrap & 1;
    }
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.flags = -1;
    state.dmax = 32768;
    state.head = null/*Z_NULL*/;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK$1;
  };


  const inflateReset = (strm) => {

    if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);

  };


  const inflateReset2 = (strm, windowBits) => {
    let wrap;

    /* get the state */
    if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
    const state = strm.state;

    /* extract wrap request from windowBits parameter */
    if (windowBits < 0) {
      wrap = 0;
      windowBits = -windowBits;
    }
    else {
      wrap = (windowBits >> 4) + 5;
      if (windowBits < 48) {
        windowBits &= 15;
      }
    }

    /* set number of window bits, free window if different */
    if (windowBits && (windowBits < 8 || windowBits > 15)) {
      return Z_STREAM_ERROR$1;
    }
    if (state.window !== null && state.wbits !== windowBits) {
      state.window = null;
    }

    /* update state and reset the rest of it */
    state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
  };


  const inflateInit2 = (strm, windowBits) => {

    if (!strm) { return Z_STREAM_ERROR$1; }
    //strm.msg = Z_NULL;                 /* in case we return an error */

    const state = new InflateState();

    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.strm = strm;
    state.window = null/*Z_NULL*/;
    state.mode = HEAD;     /* to pass state test in inflateReset2() */
    const ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) {
      strm.state = null/*Z_NULL*/;
    }
    return ret;
  };


  const inflateInit = (strm) => {

    return inflateInit2(strm, DEF_WBITS);
  };


  /*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
  let virgin = true;

  let lenfix, distfix; // We have no pointers in JS, so keep tables separate


  const fixedtables = (state) => {

    /* build fixed huffman tables if first call (may not be thread safe) */
    if (virgin) {
      lenfix = new Int32Array(512);
      distfix = new Int32Array(32);

      /* literal/length table */
      let sym = 0;
      while (sym < 144) { state.lens[sym++] = 8; }
      while (sym < 256) { state.lens[sym++] = 9; }
      while (sym < 280) { state.lens[sym++] = 7; }
      while (sym < 288) { state.lens[sym++] = 8; }

      inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

      /* distance table */
      sym = 0;
      while (sym < 32) { state.lens[sym++] = 5; }

      inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

      /* do this just once */
      virgin = false;
    }

    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
  };


  /*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
  const updatewindow = (strm, src, end, copy) => {

    let dist;
    const state = strm.state;

    /* if it hasn't been done already, allocate space for the window */
    if (state.window === null) {
      state.wsize = 1 << state.wbits;
      state.wnext = 0;
      state.whave = 0;

      state.window = new Uint8Array(state.wsize);
    }

    /* copy state->wsize or less output bytes into the circular window */
    if (copy >= state.wsize) {
      state.window.set(src.subarray(end - state.wsize, end), 0);
      state.wnext = 0;
      state.whave = state.wsize;
    }
    else {
      dist = state.wsize - state.wnext;
      if (dist > copy) {
        dist = copy;
      }
      //zmemcpy(state->window + state->wnext, end - copy, dist);
      state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
      copy -= dist;
      if (copy) {
        //zmemcpy(state->window, end - copy, copy);
        state.window.set(src.subarray(end - copy, end), 0);
        state.wnext = copy;
        state.whave = state.wsize;
      }
      else {
        state.wnext += dist;
        if (state.wnext === state.wsize) { state.wnext = 0; }
        if (state.whave < state.wsize) { state.whave += dist; }
      }
    }
    return 0;
  };


  const inflate$2 = (strm, flush) => {

    let state;
    let input, output;          // input/output buffers
    let next;                   /* next input INDEX */
    let put;                    /* next output INDEX */
    let have, left;             /* available input and output */
    let hold;                   /* bit buffer */
    let bits;                   /* bits in bit buffer */
    let _in, _out;              /* save starting available input and output */
    let copy;                   /* number of stored or match bytes to copy */
    let from;                   /* where to copy match bytes from */
    let from_source;
    let here = 0;               /* current decoding table entry */
    let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //let last;                   /* parent table entry */
    let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    let len;                    /* length to copy for repeats, bits to drop */
    let ret;                    /* return code */
    const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
    let opts;

    let n; // temporary variable for NEED_BITS

    const order = /* permutation of code lengths */
      new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


    if (inflateStateCheck(strm) || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
      return Z_STREAM_ERROR$1;
    }

    state = strm.state;
    if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---

    _in = have;
    _out = left;
    ret = Z_OK$1;

    inf_leave: // goto emulation
    for (;;) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          //=== NEEDBITS(16);
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
            if (state.wbits === 0) {
              state.wbits = 15;
            }
            state.check = 0/*crc32(0L, Z_NULL, 0)*/;
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//

            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = FLAGS;
            break;
          }
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) ||   /* check if zlib header allowed */
            (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
            strm.msg = 'incorrect header check';
            state.mode = BAD;
            break;
          }
          if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
          len = (hold & 0x0f)/*BITS(4)*/ + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          if (len > 15 || len > state.wbits) {
            strm.msg = 'invalid window size';
            state.mode = BAD;
            break;
          }

          // !!! pako patch. Force use `options.windowBits` if passed.
          // Required to always use max window size by default.
          state.dmax = 1 << state.wbits;
          //state.dmax = 1 << len;

          state.flags = 0;               /* indicate zlib header */
          //Tracev((stderr, "inflate:   zlib header ok\n"));
          strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
          state.mode = hold & 0x200 ? DICTID : TYPE;
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          break;
        case FLAGS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.flags = hold;
          if ((state.flags & 0xff) !== Z_DEFLATED) {
            strm.msg = 'unknown compression method';
            state.mode = BAD;
            break;
          }
          if (state.flags & 0xe000) {
            strm.msg = 'unknown header flags set';
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = ((hold >> 8) & 1);
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = TIME;
          /* falls through */
        case TIME:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.time = hold;
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC4(state.check, hold)
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            hbuf[2] = (hold >>> 16) & 0xff;
            hbuf[3] = (hold >>> 24) & 0xff;
            state.check = crc32_1(state.check, hbuf, 4, 0);
            //===
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = OS;
          /* falls through */
        case OS:
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (state.head) {
            state.head.xflags = (hold & 0xff);
            state.head.os = (hold >> 8);
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = EXLEN;
          /* falls through */
        case EXLEN:
          if (state.flags & 0x0400) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          else if (state.head) {
            state.head.extra = null/*Z_NULL*/;
          }
          state.mode = EXTRA;
          /* falls through */
        case EXTRA:
          if (state.flags & 0x0400) {
            copy = state.length;
            if (copy > have) { copy = have; }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  // Use untyped array for more convenient processing later
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(
                  input.subarray(
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    next + copy
                  ),
                  /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                  len
                );
                //zmemcpy(state.head.extra + len, next,
                //        len + copy > state.head.extra_max ?
                //        state.head.extra_max - len : copy);
              }
              if ((state.flags & 0x0200) && (state.wrap & 4)) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) { break inf_leave; }
          }
          state.length = 0;
          state.mode = NAME;
          /* falls through */
        case NAME:
          if (state.flags & 0x0800) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              // TODO: 2 or 1 bytes?
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                  (state.length < 65536 /*state.head.name_max*/)) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);

            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
          /* falls through */
        case COMMENT:
          if (state.flags & 0x1000) {
            if (have === 0) { break inf_leave; }
            copy = 0;
            do {
              len = input[next + copy++];
              /* use constant limit because in js we should not preallocate memory */
              if (state.head && len &&
                  (state.length < 65536 /*state.head.comm_max*/)) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) { break inf_leave; }
          }
          else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
          /* falls through */
        case HCRC:
          if (state.flags & 0x0200) {
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
              strm.msg = 'header crc mismatch';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
          }
          if (state.head) {
            state.head.hcrc = ((state.flags >> 9) & 1);
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          strm.adler = state.check = zswap32(hold);
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = DICT;
          /* falls through */
        case DICT:
          if (state.havedict === 0) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
          state.mode = TYPE;
          /* falls through */
        case TYPE:
          if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case TYPEDO:
          if (state.last) {
            //--- BYTEBITS() ---//
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            state.mode = CHECK;
            break;
          }
          //=== NEEDBITS(3); */
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.last = (hold & 0x01)/*BITS(1)*/;
          //--- DROPBITS(1) ---//
          hold >>>= 1;
          bits -= 1;
          //---//

          switch ((hold & 0x03)/*BITS(2)*/) {
            case 0:                             /* stored block */
              //Tracev((stderr, "inflate:     stored block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = STORED;
              break;
            case 1:                             /* fixed block */
              fixedtables(state);
              //Tracev((stderr, "inflate:     fixed codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = LEN_;             /* decode codes */
              if (flush === Z_TREES) {
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
                break inf_leave;
              }
              break;
            case 2:                             /* dynamic block */
              //Tracev((stderr, "inflate:     dynamic codes block%s\n",
              //        state.last ? " (last)" : ""));
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = 'invalid block type';
              state.mode = BAD;
          }
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break;
        case STORED:
          //--- BYTEBITS() ---// /* go to byte boundary */
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          //=== NEEDBITS(32); */
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
            strm.msg = 'invalid stored block lengths';
            state.mode = BAD;
            break;
          }
          state.length = hold & 0xffff;
          //Tracev((stderr, "inflate:       stored length %u\n",
          //        state.length));
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = COPY_;
          if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case COPY_:
          state.mode = COPY;
          /* falls through */
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) { copy = have; }
            if (copy > left) { copy = left; }
            if (copy === 0) { break inf_leave; }
            //--- zmemcpy(put, next, copy); ---
            output.set(input.subarray(next, next + copy), put);
            //---//
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          //Tracev((stderr, "inflate:       stored end\n"));
          state.mode = TYPE;
          break;
        case TABLE:
          //=== NEEDBITS(14); */
          while (bits < 14) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
          //--- DROPBITS(5) ---//
          hold >>>= 5;
          bits -= 5;
          //---//
          state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
          //--- DROPBITS(4) ---//
          hold >>>= 4;
          bits -= 4;
          //---//
  //#ifndef PKZIP_BUG_WORKAROUND
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = 'too many length or distance symbols';
            state.mode = BAD;
            break;
          }
  //#endif
          //Tracev((stderr, "inflate:       table sizes ok\n"));
          state.have = 0;
          state.mode = LENLENS;
          /* falls through */
        case LENLENS:
          while (state.have < state.ncode) {
            //=== NEEDBITS(3);
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          // We have separate tables & no pointers. 2 commented lines below not needed.
          //state.next = state.codes;
          //state.lencode = state.next;
          // Switch to use dynamic table
          state.lencode = state.lendyn;
          state.lenbits = 7;

          opts = { bits: state.lenbits };
          ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;

          if (ret) {
            strm.msg = 'invalid code lengths set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, "inflate:       code lengths ok\n"));
          state.have = 0;
          state.mode = CODELENS;
          /* falls through */
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_val < 16) {
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              state.lens[state.have++] = here_val;
            }
            else {
              if (here_val === 16) {
                //=== NEEDBITS(here.bits + 2);
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                if (state.have === 0) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 0x03);//BITS(2);
                //--- DROPBITS(2) ---//
                hold >>>= 2;
                bits -= 2;
                //---//
              }
              else if (here_val === 17) {
                //=== NEEDBITS(here.bits + 3);
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 3 + (hold & 0x07);//BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
                //---//
              }
              else {
                //=== NEEDBITS(here.bits + 7);
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) { break inf_leave; }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                //===//
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                len = 0;
                copy = 11 + (hold & 0x7f);//BITS(7);
                //--- DROPBITS(7) ---//
                hold >>>= 7;
                bits -= 7;
                //---//
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }

          /* handle error breaks in while */
          if (state.mode === BAD) { break; }

          /* check for end-of-block code (better have one) */
          if (state.lens[256] === 0) {
            strm.msg = 'invalid code -- missing end-of-block';
            state.mode = BAD;
            break;
          }

          /* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */
          state.lenbits = 9;

          opts = { bits: state.lenbits };
          ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.lenbits = opts.bits;
          // state.lencode = state.next;

          if (ret) {
            strm.msg = 'invalid literal/lengths set';
            state.mode = BAD;
            break;
          }

          state.distbits = 6;
          //state.distcode.copy(state.codes);
          // Switch to use dynamic table
          state.distcode = state.distdyn;
          opts = { bits: state.distbits };
          ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          // We have separate tables & no pointers. 2 commented lines below not needed.
          // state.next_index = opts.table_index;
          state.distbits = opts.bits;
          // state.distcode = state.next;

          if (ret) {
            strm.msg = 'invalid distances set';
            state.mode = BAD;
            break;
          }
          //Tracev((stderr, 'inflate:       codes ok\n'));
          state.mode = LEN_;
          if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
        case LEN_:
          state.mode = LEN;
          /* falls through */
        case LEN:
          if (have >= 6 && left >= 258) {
            //--- RESTORE() ---
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            //---
            inffast(strm, _out);
            //--- LOAD() ---
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            //---

            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_op && (here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.lencode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
          /* falls through */
        case LENEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
          //Tracevv((stderr, "inflate:         length %u\n", state.length));
          state.was = state.length;
          state.mode = DIST;
          /* falls through */
        case DIST:
          for (;;) {
            here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if ((here_op & 0xf0) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (;;) {
              here = state.distcode[last_val +
                      ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((last_bits + here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            //--- DROPBITS(last.bits) ---//
            hold >>>= last_bits;
            bits -= last_bits;
            //---//
            state.back += last_bits;
          }
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = (here_op) & 15;
          state.mode = DISTEXT;
          /* falls through */
        case DISTEXT:
          if (state.extra) {
            //=== NEEDBITS(state.extra);
            n = state.extra;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
            //--- DROPBITS(state.extra) ---//
            hold >>>= state.extra;
            bits -= state.extra;
            //---//
            state.back += state.extra;
          }
  //#ifdef INFLATE_STRICT
          if (state.offset > state.dmax) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
  //#endif
          //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
          state.mode = MATCH;
          /* falls through */
        case MATCH:
          if (left === 0) { break inf_leave; }
          copy = _out - left;
          if (state.offset > copy) {         /* copy from window */
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              }
  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility
  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
  //          Trace((stderr, "inflate.c too far\n"));
  //          copy -= state.whave;
  //          if (copy > state.length) { copy = state.length; }
  //          if (copy > left) { copy = left; }
  //          left -= copy;
  //          state.length -= copy;
  //          do {
  //            output[put++] = 0;
  //          } while (--copy);
  //          if (state.length === 0) { state.mode = LEN; }
  //          break;
  //#endif
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            }
            else {
              from = state.wnext - copy;
            }
            if (copy > state.length) { copy = state.length; }
            from_source = state.window;
          }
          else {                              /* copy from output */
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) { copy = left; }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) { state.mode = LEN; }
          break;
        case LIT:
          if (left === 0) { break inf_leave; }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              // Use '|' instead of '+' to make sure that result is signed
              hold |= input[next++] << bits;
              bits += 8;
            }
            //===//
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if ((state.wrap & 4) && _out) {
              strm.adler = state.check =
                  /*UPDATE_CHECK(state.check, put - _out, _out);*/
                  (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

            }
            _out = left;
            // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
            if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = 'incorrect data check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
          }
          state.mode = LENGTH;
          /* falls through */
        case LENGTH:
          if (state.wrap && state.flags) {
            //=== NEEDBITS(32);
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
              strm.msg = 'incorrect length check';
              state.mode = BAD;
              break;
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
          }
          state.mode = DONE;
          /* falls through */
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR$1;
        case SYNC:
          /* falls through */
        default:
          return Z_STREAM_ERROR$1;
      }
    }

    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

    /*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

    //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---

    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                        (state.mode < CHECK || flush !== Z_FINISH$1))) {
      if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
    }
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if ((state.wrap & 4) && _out) {
      strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
        (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
    }
    strm.data_type = state.bits + (state.last ? 64 : 0) +
                      (state.mode === TYPE ? 128 : 0) +
                      (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
      ret = Z_BUF_ERROR;
    }
    return ret;
  };


  const inflateEnd = (strm) => {

    if (inflateStateCheck(strm)) {
      return Z_STREAM_ERROR$1;
    }

    let state = strm.state;
    if (state.window) {
      state.window = null;
    }
    strm.state = null;
    return Z_OK$1;
  };


  const inflateGetHeader = (strm, head) => {

    /* check state */
    if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
    const state = strm.state;
    if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

    /* save header structure */
    state.head = head;
    head.done = false;
    return Z_OK$1;
  };


  const inflateSetDictionary = (strm, dictionary) => {
    const dictLength = dictionary.length;

    let state;
    let dictid;
    let ret;

    /* check state */
    if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
    state = strm.state;

    if (state.wrap !== 0 && state.mode !== DICT) {
      return Z_STREAM_ERROR$1;
    }

    /* check for correct dictionary identifier */
    if (state.mode === DICT) {
      dictid = 1; /* adler32(0, null, 0)*/
      /* dictid = adler32(dictid, dictionary, dictLength); */
      dictid = adler32_1(dictid, dictionary, dictLength, 0);
      if (dictid !== state.check) {
        return Z_DATA_ERROR$1;
      }
    }
    /* copy dictionary to window using updatewindow(), which will amend the
     existing dictionary if appropriate */
    ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
      state.mode = MEM;
      return Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK$1;
  };


  var inflateReset_1 = inflateReset;
  var inflateReset2_1 = inflateReset2;
  var inflateResetKeep_1 = inflateResetKeep;
  var inflateInit_1 = inflateInit;
  var inflateInit2_1 = inflateInit2;
  var inflate_2$1 = inflate$2;
  var inflateEnd_1 = inflateEnd;
  var inflateGetHeader_1 = inflateGetHeader;
  var inflateSetDictionary_1 = inflateSetDictionary;
  var inflateInfo = 'pako inflate (from Nodeca project)';

  /* Not implemented
  module.exports.inflateCodesUsed = inflateCodesUsed;
  module.exports.inflateCopy = inflateCopy;
  module.exports.inflateGetDictionary = inflateGetDictionary;
  module.exports.inflateMark = inflateMark;
  module.exports.inflatePrime = inflatePrime;
  module.exports.inflateSync = inflateSync;
  module.exports.inflateSyncPoint = inflateSyncPoint;
  module.exports.inflateUndermine = inflateUndermine;
  module.exports.inflateValidate = inflateValidate;
  */

  var inflate_1$2 = {
  	inflateReset: inflateReset_1,
  	inflateReset2: inflateReset2_1,
  	inflateResetKeep: inflateResetKeep_1,
  	inflateInit: inflateInit_1,
  	inflateInit2: inflateInit2_1,
  	inflate: inflate_2$1,
  	inflateEnd: inflateEnd_1,
  	inflateGetHeader: inflateGetHeader_1,
  	inflateSetDictionary: inflateSetDictionary_1,
  	inflateInfo: inflateInfo
  };

  // (C) 1995-2013 Jean-loup Gailly and Mark Adler
  // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
  //
  // This software is provided 'as-is', without any express or implied
  // warranty. In no event will the authors be held liable for any damages
  // arising from the use of this software.
  //
  // Permission is granted to anyone to use this software for any purpose,
  // including commercial applications, and to alter it and redistribute it
  // freely, subject to the following restrictions:
  //
  // 1. The origin of this software must not be misrepresented; you must not
  //   claim that you wrote the original software. If you use this software
  //   in a product, an acknowledgment in the product documentation would be
  //   appreciated but is not required.
  // 2. Altered source versions must be plainly marked as such, and must not be
  //   misrepresented as being the original software.
  // 3. This notice may not be removed or altered from any source distribution.

  function GZheader() {
    /* true if compressed data believed to be text */
    this.text       = 0;
    /* modification time */
    this.time       = 0;
    /* extra flags (not used when writing a gzip file) */
    this.xflags     = 0;
    /* operating system */
    this.os         = 0;
    /* pointer to extra field or Z_NULL if none */
    this.extra      = null;
    /* extra field length (valid if extra != Z_NULL) */
    this.extra_len  = 0; // Actually, we don't need it in JS,
                         // but leave for few code modifications

    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //

    /* space at extra (only when reading header) */
    // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */
    this.name       = '';
    /* space at name (only when reading header) */
    // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */
    this.comment    = '';
    /* space at comment (only when reading header) */
    // this.comm_max   = 0;
    /* true if there was or will be a header crc */
    this.hcrc       = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */
    this.done       = false;
  }

  var gzheader = GZheader;

  const toString = Object.prototype.toString;

  /* Public constants ==========================================================*/
  /* ===========================================================================*/

  const {
    Z_NO_FLUSH, Z_FINISH,
    Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
  } = constants$2;

  /* ===========================================================================*/


  /**
   * class Inflate
   *
   * Generic JS-style wrapper for zlib calls. If you don't need
   * streaming behaviour - use more simple functions: [[inflate]]
   * and [[inflateRaw]].
   **/

  /* internal
   * inflate.chunks -> Array
   *
   * Chunks of output data, if [[Inflate#onData]] not overridden.
   **/

  /**
   * Inflate.result -> Uint8Array|String
   *
   * Uncompressed result, generated by default [[Inflate#onData]]
   * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
   * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
   **/

  /**
   * Inflate.err -> Number
   *
   * Error code after inflate finished. 0 (Z_OK) on success.
   * Should be checked if broken data possible.
   **/

  /**
   * Inflate.msg -> String
   *
   * Error message, if [[Inflate.err]] != 0
   **/


  /**
   * new Inflate(options)
   * - options (Object): zlib inflate options.
   *
   * Creates new inflator instance with specified params. Throws exception
   * on bad params. Supported options:
   *
   * - `windowBits`
   * - `dictionary`
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information on these.
   *
   * Additional options, for internal needs:
   *
   * - `chunkSize` - size of generated data chunks (16K by default)
   * - `raw` (Boolean) - do raw inflate
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   * By default, when no options set, autodetect deflate/gzip data format via
   * wrapper header.
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako')
   * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
   * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
   *
   * const inflate = new pako.Inflate({ level: 3});
   *
   * inflate.push(chunk1, false);
   * inflate.push(chunk2, true);  // true -> last chunk
   *
   * if (inflate.err) { throw new Error(inflate.err); }
   *
   * console.log(inflate.result);
   * ```
   **/
  function Inflate$1(options) {
    this.options = common.assign({
      chunkSize: 1024 * 64,
      windowBits: 15,
      to: ''
    }, options || {});

    const opt = this.options;

    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
      opt.windowBits = -opt.windowBits;
      if (opt.windowBits === 0) { opt.windowBits = -15; }
    }

    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
        !(options && options.windowBits)) {
      opt.windowBits += 32;
    }

    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
      // bit 3 (16) -> gzipped data
      // bit 4 (32) -> autodetect gzip/deflate
      if ((opt.windowBits & 15) === 0) {
        opt.windowBits |= 15;
      }
    }

    this.err    = 0;      // error code, if happens (0 = Z_OK)
    this.msg    = '';     // error message
    this.ended  = false;  // used to avoid multiple onEnd() calls
    this.chunks = [];     // chunks of compressed data

    this.strm   = new zstream();
    this.strm.avail_out = 0;

    let status  = inflate_1$2.inflateInit2(
      this.strm,
      opt.windowBits
    );

    if (status !== Z_OK) {
      throw new Error(messages[status]);
    }

    this.header = new gzheader();

    inflate_1$2.inflateGetHeader(this.strm, this.header);

    // Setup dictionary
    if (opt.dictionary) {
      // Convert data if needed
      if (typeof opt.dictionary === 'string') {
        opt.dictionary = strings.string2buf(opt.dictionary);
      } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
        opt.dictionary = new Uint8Array(opt.dictionary);
      }
      if (opt.raw) { //In raw mode we need to set the dictionary early
        status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
        if (status !== Z_OK) {
          throw new Error(messages[status]);
        }
      }
    }
  }

  /**
   * Inflate#push(data[, flush_mode]) -> Boolean
   * - data (Uint8Array|ArrayBuffer): input data
   * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
   *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
   *   `true` means Z_FINISH.
   *
   * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
   * new output chunks. Returns `true` on success. If end of stream detected,
   * [[Inflate#onEnd]] will be called.
   *
   * `flush_mode` is not needed for normal operation, because end of stream
   * detected automatically. You may try to use it for advanced things, but
   * this functionality was not tested.
   *
   * On fail call [[Inflate#onEnd]] with error code and return false.
   *
   * ##### Example
   *
   * ```javascript
   * push(chunk, false); // push one of data chunks
   * ...
   * push(chunk, true);  // push last chunk
   * ```
   **/
  Inflate$1.prototype.push = function (data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;

    if (this.ended) return false;

    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

    // Convert data if needed
    if (toString.call(data) === '[object ArrayBuffer]') {
      strm.input = new Uint8Array(data);
    } else {
      strm.input = data;
    }

    strm.next_in = 0;
    strm.avail_in = strm.input.length;

    for (;;) {
      if (strm.avail_out === 0) {
        strm.output = new Uint8Array(chunkSize);
        strm.next_out = 0;
        strm.avail_out = chunkSize;
      }

      status = inflate_1$2.inflate(strm, _flush_mode);

      if (status === Z_NEED_DICT && dictionary) {
        status = inflate_1$2.inflateSetDictionary(strm, dictionary);

        if (status === Z_OK) {
          status = inflate_1$2.inflate(strm, _flush_mode);
        } else if (status === Z_DATA_ERROR) {
          // Replace code with more verbose
          status = Z_NEED_DICT;
        }
      }

      // Skip snyc markers if more data follows and not raw mode
      while (strm.avail_in > 0 &&
             status === Z_STREAM_END &&
             strm.state.wrap > 0 &&
             data[strm.next_in] !== 0)
      {
        inflate_1$2.inflateReset(strm);
        status = inflate_1$2.inflate(strm, _flush_mode);
      }

      switch (status) {
        case Z_STREAM_ERROR:
        case Z_DATA_ERROR:
        case Z_NEED_DICT:
        case Z_MEM_ERROR:
          this.onEnd(status);
          this.ended = true;
          return false;
      }

      // Remember real `avail_out` value, because we may patch out buffer content
      // to align utf8 strings boundaries.
      last_avail_out = strm.avail_out;

      if (strm.next_out) {
        if (strm.avail_out === 0 || status === Z_STREAM_END) {

          if (this.options.to === 'string') {

            let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

            let tail = strm.next_out - next_out_utf8;
            let utf8str = strings.buf2string(strm.output, next_out_utf8);

            // move tail & realign counters
            strm.next_out = tail;
            strm.avail_out = chunkSize - tail;
            if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

            this.onData(utf8str);

          } else {
            this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
          }
        }
      }

      // Must repeat iteration if out buffer is full
      if (status === Z_OK && last_avail_out === 0) continue;

      // Finalize if end of stream reached.
      if (status === Z_STREAM_END) {
        status = inflate_1$2.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return true;
      }

      if (strm.avail_in === 0) break;
    }

    return true;
  };


  /**
   * Inflate#onData(chunk) -> Void
   * - chunk (Uint8Array|String): output data. When string output requested,
   *   each chunk will be string.
   *
   * By default, stores data blocks in `chunks[]` property and glue
   * those in `onEnd`. Override this handler, if you need another behaviour.
   **/
  Inflate$1.prototype.onData = function (chunk) {
    this.chunks.push(chunk);
  };


  /**
   * Inflate#onEnd(status) -> Void
   * - status (Number): inflate status. 0 (Z_OK) on success,
   *   other if not.
   *
   * Called either after you tell inflate that the input stream is
   * complete (Z_FINISH). By default - join collected chunks,
   * free memory and fill `results` / `err` properties.
   **/
  Inflate$1.prototype.onEnd = function (status) {
    // On success - join
    if (status === Z_OK) {
      if (this.options.to === 'string') {
        this.result = this.chunks.join('');
      } else {
        this.result = common.flattenChunks(this.chunks);
      }
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
  };


  /**
   * inflate(data[, options]) -> Uint8Array|String
   * - data (Uint8Array|ArrayBuffer): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * Decompress `data` with inflate/ungzip and `options`. Autodetect
   * format via wrapper header by default. That's why we don't provide
   * separate `ungzip` method.
   *
   * Supported options are:
   *
   * - windowBits
   *
   * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
   * for more information.
   *
   * Sugar (options):
   *
   * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
   *   negative windowBits implicitly.
   * - `to` (String) - if equal to 'string', then result will be converted
   *   from utf8 to utf16 (javascript) string. When string output requested,
   *   chunk length can differ from `chunkSize`, depending on content.
   *
   *
   * ##### Example:
   *
   * ```javascript
   * const pako = require('pako');
   * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
   * let output;
   *
   * try {
   *   output = pako.inflate(input);
   * } catch (err) {
   *   console.log(err);
   * }
   * ```
   **/
  function inflate$1(input, options) {
    const inflator = new Inflate$1(options);

    inflator.push(input);

    // That will never happens, if you don't cheat with options :)
    if (inflator.err) throw inflator.msg || messages[inflator.err];

    return inflator.result;
  }


  /**
   * inflateRaw(data[, options]) -> Uint8Array|String
   * - data (Uint8Array|ArrayBuffer): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * The same as [[inflate]], but creates raw data, without wrapper
   * (header and adler32 crc).
   **/
  function inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return inflate$1(input, options);
  }


  /**
   * ungzip(data[, options]) -> Uint8Array|String
   * - data (Uint8Array|ArrayBuffer): input data to decompress.
   * - options (Object): zlib inflate options.
   *
   * Just shortcut to [[inflate]], because it autodetects format
   * by header.content. Done for convenience.
   **/


  var Inflate_1$1 = Inflate$1;
  var inflate_2 = inflate$1;
  var inflateRaw_1$1 = inflateRaw$1;
  var ungzip$1 = inflate$1;
  var constants = constants$2;

  var inflate_1$1 = {
  	Inflate: Inflate_1$1,
  	inflate: inflate_2,
  	inflateRaw: inflateRaw_1$1,
  	ungzip: ungzip$1,
  	constants: constants
  };

  const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
  var inflate_1 = inflate;

  class DeflateDecoder extends BaseDecoder {
    decodeBlock(buffer) {
      return inflate_1(new Uint8Array(buffer)).buffer;
    }
  }

  var deflate = {
    __proto__: null,
    'default': DeflateDecoder
  };

  class PackbitsDecoder extends BaseDecoder {
    decodeBlock(buffer) {
      const dataView = new DataView(buffer);
      const out = [];

      for (let i = 0; i < buffer.byteLength; ++i) {
        let header = dataView.getInt8(i);
        if (header < 0) {
          const next = dataView.getUint8(i + 1);
          header = -header;
          for (let j = 0; j <= header; ++j) {
            out.push(next);
          }
          i += 1;
        } else {
          for (let j = 0; j <= header; ++j) {
            out.push(dataView.getUint8(i + j + 1));
          }
          i += header + 1;
        }
      }
      return new Uint8Array(out).buffer;
    }
  }

  var packbits = {
    __proto__: null,
    'default': PackbitsDecoder
  };

  var LercDecode = {exports: {}};

  (function (module) {
  /* jshint forin: false, bitwise: false */
  /*
  Copyright 2015-2021 Esri

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  A copy of the license and additional notices are located with the
  source distribution at:

  http://github.com/Esri/lerc/

  Contributors:  Johannes Schmid, (LERC v1)
                 Chayanika Khatua, (LERC v1)
                 Wenxue Ju (LERC v1, v2.x)
  */

  /* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */

  /**
   * a module for decoding LERC blobs
   * @module Lerc
   */
  (function() {
    //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). 
    //the exported module handles format variation autoamtically.

    //the original LercDecode for Version 1
    var LercDecode = (function() {

      // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of
      // the class was chosen to be future proof.

      var CntZImage = {};

      CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value

      /**
       * Decode a LERC byte stream and return an object containing the pixel data and some required and optional
       * information about it, such as the image's width and height.
       *
       * @param {ArrayBuffer} input The LERC input byte stream
       * @param {object} [options] Decoding options, containing any of the following properties:
       * @config {number} [inputOffset = 0]
       *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.
       * @config {Uint8Array} [encodedMask = null]
       *        If specified, the decoder will not read mask information from the input and use the specified encoded
       *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.
       * @config {number} [noDataValue = LercCode.defaultNoDataValue]
       *        Pixel value to use for masked pixels.
       * @config {ArrayBufferView|Array} [pixelType = Float32Array]
       *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to
       *        provide an appropriate noDataValue if the default pixelType is overridden.
       * @config {boolean} [returnMask = false]
       *        If true, the return value will contain a maskData property of type Uint8Array which has one element per
       *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the
       *        input LERC data does not contain a mask, maskData will not be returned.
       * @config {boolean} [returnEncodedMask = false]
       *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as
       *        encodedMask.
       * @config {boolean} [returnFileInfo = false]
       *        If true, the return value will have a fileInfo property that contains metadata obtained from the
       *        LERC headers and the decoding process.
       * @config {boolean} [computeUsedBitDepths = false]
       *        If true, the fileInfo property in the return value will contain the set of all block bit depths
       *        encountered during decoding. Will only have an effect if returnFileInfo option is true.
       * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}
       */
      CntZImage.decode = function(input, options) {
        options = options || {};

        var skipMask = options.encodedMaskData || (options.encodedMaskData === null);
        var parsedData = parse(input, options.inputOffset || 0, skipMask);

        var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;

        var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,
          options.encodedMaskData, noDataValue, options.returnMask);

        var result = {
          width: parsedData.width,
          height: parsedData.height,
          pixelData: uncompressedData.resultPixels,
          minValue: uncompressedData.minValue,
          maxValue: parsedData.pixels.maxValue,
          noDataValue: noDataValue
        };

        if (uncompressedData.resultMask) {
          result.maskData = uncompressedData.resultMask;
        }

        if (options.returnEncodedMask && parsedData.mask) {
          result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;
        }

        if (options.returnFileInfo) {
          result.fileInfo = formatFileInfo(parsedData);
          if (options.computeUsedBitDepths) {
            result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);
          }
        }

        return result;
      };

      var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {
        var blockIdx = 0;
        var numX = data.pixels.numBlocksX;
        var numY = data.pixels.numBlocksY;
        var blockWidth = Math.floor(data.width / numX);
        var blockHeight = Math.floor(data.height / numY);
        var scale = 2 * data.maxZError;
        var minValue = Number.MAX_VALUE, currentValue;
        maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);

        var resultPixels, resultMask;
        resultPixels = new TypedArrayClass(data.width * data.height);
        if (storeDecodedMask && maskBitset) {
          resultMask = new Uint8Array(data.width * data.height);
        }
        var blockDataBuffer = new Float32Array(blockWidth * blockHeight);

        var xx, yy;
        for (var y = 0; y <= numY; y++) {
          var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);
          if (thisBlockHeight === 0) {
            continue;
          }
          for (var x = 0; x <= numX; x++) {
            var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);
            if (thisBlockWidth === 0) {
              continue;
            }

            var outPtr = y * data.width * blockHeight + x * blockWidth;
            var outStride = data.width - thisBlockWidth;

            var block = data.pixels.blocks[blockIdx];

            var blockData, blockPtr, constValue;
            if (block.encoding < 2) {
              // block is either uncompressed or bit-stuffed (encodings 0 and 1)
              if (block.encoding === 0) {
                // block is uncompressed
                blockData = block.rawData;
              } else {
                // block is bit-stuffed
                unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);
                blockData = blockDataBuffer;
              }
              blockPtr = 0;
            }
            else if (block.encoding === 2) {
              // block is all 0
              constValue = 0;
            }
            else {
              // block has constant value (encoding === 3)
              constValue = block.offset;
            }

            var maskByte;
            if (maskBitset) {
              for (yy = 0; yy < thisBlockHeight; yy++) {
                if (outPtr & 7) {
                  //
                  maskByte = maskBitset[outPtr >> 3];
                  maskByte <<= outPtr & 7;
                }
                for (xx = 0; xx < thisBlockWidth; xx++) {
                  if (!(outPtr & 7)) {
                    // read next byte from mask
                    maskByte = maskBitset[outPtr >> 3];
                  }
                  if (maskByte & 128) {
                    // pixel data present
                    if (resultMask) {
                      resultMask[outPtr] = 1;
                    }
                    currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;
                    minValue = minValue > currentValue ? currentValue : minValue;
                    resultPixels[outPtr++] = currentValue;
                  } else {
                    // pixel data not present
                    if (resultMask) {
                      resultMask[outPtr] = 0;
                    }
                    resultPixels[outPtr++] = noDataValue;
                  }
                  maskByte <<= 1;
                }
                outPtr += outStride;
              }
            } else {
              // mask not present, simply copy block over
              if (block.encoding < 2) {
                // duplicating this code block for performance reasons
                // blockData case:
                for (yy = 0; yy < thisBlockHeight; yy++) {
                  for (xx = 0; xx < thisBlockWidth; xx++) {
                    currentValue = blockData[blockPtr++];
                    minValue = minValue > currentValue ? currentValue : minValue;
                    resultPixels[outPtr++] = currentValue;
                  }
                  outPtr += outStride;
                }
              }
              else {
                // constValue case:
                minValue = minValue > constValue ? constValue : minValue;
                for (yy = 0; yy < thisBlockHeight; yy++) {
                  for (xx = 0; xx < thisBlockWidth; xx++) {
                    resultPixels[outPtr++] = constValue;
                  }
                  outPtr += outStride;
                }
              }
            }
            if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {
              throw "Block and Mask do not match";
            }
            blockIdx++;
          }
        }

        return {
          resultPixels: resultPixels,
          resultMask: resultMask,
          minValue: minValue
        };
      };

      var formatFileInfo = function(data) {
        return {
          "fileIdentifierString": data.fileIdentifierString,
          "fileVersion": data.fileVersion,
          "imageType": data.imageType,
          "height": data.height,
          "width": data.width,
          "maxZError": data.maxZError,
          "eofOffset": data.eofOffset,
          "mask": data.mask ? {
            "numBlocksX": data.mask.numBlocksX,
            "numBlocksY": data.mask.numBlocksY,
            "numBytes": data.mask.numBytes,
            "maxValue": data.mask.maxValue
          } : null,
          "pixels": {
            "numBlocksX": data.pixels.numBlocksX,
            "numBlocksY": data.pixels.numBlocksY,
            "numBytes": data.pixels.numBytes,
            "maxValue": data.pixels.maxValue,
            "noDataValue": data.noDataValue
          }
        };
      };

      var computeUsedBitDepths = function(data) {
        var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;
        var bitDepths = {};
        for (var i = 0; i < numBlocks; i++) {
          var block = data.pixels.blocks[i];
          if (block.encoding === 0) {
            bitDepths.float32 = true;
          } else if (block.encoding === 1) {
            bitDepths[block.bitsPerPixel] = true;
          } else {
            bitDepths[0] = true;
          }
        }

        return Object.keys(bitDepths);
      };

      var parse = function(input, fp, skipMask) {
        var data = {};

        // File header
        var fileIdView = new Uint8Array(input, fp, 10);
        data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);
        if (data.fileIdentifierString.trim() !== "CntZImage") {
          throw "Unexpected file identifier string: " + data.fileIdentifierString;
        }
        fp += 10;
        var view = new DataView(input, fp, 24);
        data.fileVersion = view.getInt32(0, true);
        data.imageType = view.getInt32(4, true);
        data.height = view.getUint32(8, true);
        data.width = view.getUint32(12, true);
        data.maxZError = view.getFloat64(16, true);
        fp += 24;

        // Mask Header
        if (!skipMask) {
          view = new DataView(input, fp, 16);
          data.mask = {};
          data.mask.numBlocksY = view.getUint32(0, true);
          data.mask.numBlocksX = view.getUint32(4, true);
          data.mask.numBytes = view.getUint32(8, true);
          data.mask.maxValue = view.getFloat32(12, true);
          fp += 16;

          // Mask Data
          if (data.mask.numBytes > 0) {
            var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));
            view = new DataView(input, fp, data.mask.numBytes);
            var cnt = view.getInt16(0, true);
            var ip = 2, op = 0;
            do {
              if (cnt > 0) {
                while (cnt--) { bitset[op++] = view.getUint8(ip++); }
              } else {
                var val = view.getUint8(ip++);
                cnt = -cnt;
                while (cnt--) { bitset[op++] = val; }
              }
              cnt = view.getInt16(ip, true);
              ip += 2;
            } while (ip < data.mask.numBytes);
            if ((cnt !== -32768) || (op < bitset.length)) {
              throw "Unexpected end of mask RLE encoding";
            }
            data.mask.bitset = bitset;
            fp += data.mask.numBytes;
          }
          else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata
            data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));
          }
        }

        // Pixel Header
        view = new DataView(input, fp, 16);
        data.pixels = {};
        data.pixels.numBlocksY = view.getUint32(0, true);
        data.pixels.numBlocksX = view.getUint32(4, true);
        data.pixels.numBytes = view.getUint32(8, true);
        data.pixels.maxValue = view.getFloat32(12, true);
        fp += 16;

        var numBlocksX = data.pixels.numBlocksX;
        var numBlocksY = data.pixels.numBlocksY;
        // the number of blocks specified in the header does not take into account the blocks at the end of
        // each row/column with a special width/height that make the image complete in case the width is not
        // evenly divisible by the number of blocks.
        var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);
        var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);
        data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);
        var blockI = 0;
        for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {
          for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {

            // Block
            var size = 0;
            var bytesLeft = input.byteLength - fp;
            view = new DataView(input, fp, Math.min(10, bytesLeft));
            var block = {};
            data.pixels.blocks[blockI++] = block;
            var headerByte = view.getUint8(0); size++;
            block.encoding = headerByte & 63;
            if (block.encoding > 3) {
              throw "Invalid block encoding (" + block.encoding + ")";
            }
            if (block.encoding === 2) {
              fp++;
              continue;
            }
            if ((headerByte !== 0) && (headerByte !== 2)) {
              headerByte >>= 6;
              block.offsetType = headerByte;
              if (headerByte === 2) {
                block.offset = view.getInt8(1); size++;
              } else if (headerByte === 1) {
                block.offset = view.getInt16(1, true); size += 2;
              } else if (headerByte === 0) {
                block.offset = view.getFloat32(1, true); size += 4;
              } else {
                throw "Invalid block offset type";
              }

              if (block.encoding === 1) {
                headerByte = view.getUint8(size); size++;
                block.bitsPerPixel = headerByte & 63;
                headerByte >>= 6;
                block.numValidPixelsType = headerByte;
                if (headerByte === 2) {
                  block.numValidPixels = view.getUint8(size); size++;
                } else if (headerByte === 1) {
                  block.numValidPixels = view.getUint16(size, true); size += 2;
                } else if (headerByte === 0) {
                  block.numValidPixels = view.getUint32(size, true); size += 4;
                } else {
                  throw "Invalid valid pixel count type";
                }
              }
            }
            fp += size;

            if (block.encoding === 3) {
              continue;
            }

            var arrayBuf, store8;
            if (block.encoding === 0) {
              var numPixels = (data.pixels.numBytes - 1) / 4;
              if (numPixels !== Math.floor(numPixels)) {
                throw "uncompressed block has invalid length";
              }
              arrayBuf = new ArrayBuffer(numPixels * 4);
              store8 = new Uint8Array(arrayBuf);
              store8.set(new Uint8Array(input, fp, numPixels * 4));
              var rawData = new Float32Array(arrayBuf);
              block.rawData = rawData;
              fp += numPixels * 4;
            } else if (block.encoding === 1) {
              var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);
              var dataWords = Math.ceil(dataBytes / 4);
              arrayBuf = new ArrayBuffer(dataWords * 4);
              store8 = new Uint8Array(arrayBuf);
              store8.set(new Uint8Array(input, fp, dataBytes));
              block.stuffedData = new Uint32Array(arrayBuf);
              fp += dataBytes;
            }
          }
        }
        data.eofOffset = fp;
        return data;
      };

      var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {
        var bitMask = (1 << bitsPerPixel) - 1;
        var i = 0, o;
        var bitsLeft = 0;
        var n, buffer;
        var nmax = Math.ceil((maxValue - offset) / scale);
        // get rid of trailing bytes that are already part of next block
        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
        src[src.length - 1] <<= 8 * numInvalidTailBytes;

        for (o = 0; o < numPixels; o++) {
          if (bitsLeft === 0) {
            buffer = src[i++];
            bitsLeft = 32;
          }
          if (bitsLeft >= bitsPerPixel) {
            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;
            bitsLeft -= bitsPerPixel;
          } else {
            var missingBits = (bitsPerPixel - bitsLeft);
            n = ((buffer & bitMask) << missingBits) & bitMask;
            buffer = src[i++];
            bitsLeft = 32 - missingBits;
            n += (buffer >>> bitsLeft);
          }
          //pixel values may exceed max due to quantization
          dest[o] = n < nmax ? offset + n * scale : maxValue;
        }
        return dest;
      };

      return CntZImage;
    })();

    //version 2. Supports 2.1, 2.2, 2.3
    var Lerc2Decode = (function() {
      // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of
      // the class was chosen to be future proof, following LercDecode.

      /*****************************************
      * private static class bitsutffer used by Lerc2Decode
      *******************************************/
      var BitStuffer = {
        //methods ending with 2 are for the new byte order used by Lerc2.3 and above.
        //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.
        unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {
          var bitMask = (1 << bitsPerPixel) - 1;
          var i = 0, o;
          var bitsLeft = 0;
          var n, buffer, missingBits, nmax;

          // get rid of trailing bytes that are already part of next block
          var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
          src[src.length - 1] <<= 8 * numInvalidTailBytes;
          if (lutArr) {
            for (o = 0; o < numPixels; o++) {
              if (bitsLeft === 0) {
                buffer = src[i++];
                bitsLeft = 32;
              }
              if (bitsLeft >= bitsPerPixel) {
                n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;
                bitsLeft -= bitsPerPixel;
              }
              else {
                missingBits = (bitsPerPixel - bitsLeft);
                n = ((buffer & bitMask) << missingBits) & bitMask;
                buffer = src[i++];
                bitsLeft = 32 - missingBits;
                n += (buffer >>> bitsLeft);
              }
              dest[o] = lutArr[n];//offset + lutArr[n] * scale;
            }
          }
          else {
            nmax = Math.ceil((maxValue - offset) / scale);
            for (o = 0; o < numPixels; o++) {
              if (bitsLeft === 0) {
                buffer = src[i++];
                bitsLeft = 32;
              }
              if (bitsLeft >= bitsPerPixel) {
                n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;
                bitsLeft -= bitsPerPixel;
              }
              else {
                missingBits = (bitsPerPixel - bitsLeft);
                n = ((buffer & bitMask) << missingBits) & bitMask;
                buffer = src[i++];
                bitsLeft = 32 - missingBits;
                n += (buffer >>> bitsLeft);
              }
              //pixel values may exceed max due to quantization
              dest[o] = n < nmax ? offset + n * scale : maxValue;
            }
          }
        },

        unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {
          var bitMask = (1 << bitsPerPixel) - 1;
          var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;
          var buffer;
          var dest = [];

          // get rid of trailing bytes that are already part of next block
          var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
          src[src.length - 1] <<= 8 * numInvalidTailBytes;

          var nmax = Math.ceil((maxValue - offset) / scale);
          for (o = 0; o < numPixels; o++) {
            if (bitsLeft === 0) {
              buffer = src[i++];
              bitsLeft = 32;
            }
            if (bitsLeft >= bitsPerPixel) {
              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;
              bitsLeft -= bitsPerPixel;
            } else {
              missingBits = (bitsPerPixel - bitsLeft);
              n = ((buffer & bitMask) << missingBits) & bitMask;
              buffer = src[i++];
              bitsLeft = 32 - missingBits;
              n += (buffer >>> bitsLeft);
            }
            //dest.push(n);
            dest[o] = n < nmax ? offset + n * scale : maxValue;
          }
          dest.unshift(offset);//1st one
          return dest;
        },

        unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {
          var bitMask = (1 << bitsPerPixel) - 1;
          var i = 0, o;
          var bitsLeft = 0, bitPos = 0;
          var n, buffer, missingBits;
          if (lutArr) {
            for (o = 0; o < numPixels; o++) {
              if (bitsLeft === 0) {
                buffer = src[i++];
                bitsLeft = 32;
                bitPos = 0;
              }
              if (bitsLeft >= bitsPerPixel) {
                n = ((buffer >>> bitPos) & bitMask);
                bitsLeft -= bitsPerPixel;
                bitPos += bitsPerPixel;
              } else {
                missingBits = (bitsPerPixel - bitsLeft);
                n = (buffer >>> bitPos) & bitMask;
                buffer = src[i++];
                bitsLeft = 32 - missingBits;
                n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);
                bitPos = missingBits;
              }
              dest[o] = lutArr[n];
            }
          }
          else {
            var nmax = Math.ceil((maxValue - offset) / scale);
            for (o = 0; o < numPixels; o++) {
              if (bitsLeft === 0) {
                buffer = src[i++];
                bitsLeft = 32;
                bitPos = 0;
              }
              if (bitsLeft >= bitsPerPixel) {
                //no unsigned left shift
                n = ((buffer >>> bitPos) & bitMask);
                bitsLeft -= bitsPerPixel;
                bitPos += bitsPerPixel;
              } else {
                missingBits = (bitsPerPixel - bitsLeft);
                n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;
                buffer = src[i++];
                bitsLeft = 32 - missingBits;
                n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);
                bitPos = missingBits;
              }
              //pixel values may exceed max due to quantization
              dest[o] = n < nmax ? offset + n * scale : maxValue;
            }
          }
          return dest;
        },

        unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {
          var bitMask = (1 << bitsPerPixel) - 1;
          var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;
          var buffer;
          var dest = [];
          var nmax = Math.ceil((maxValue - offset) / scale);
          for (o = 0; o < numPixels; o++) {
            if (bitsLeft === 0) {
              buffer = src[i++];
              bitsLeft = 32;
              bitPos = 0;
            }
            if (bitsLeft >= bitsPerPixel) {
              //no unsigned left shift
              n = ((buffer >>> bitPos) & bitMask);
              bitsLeft -= bitsPerPixel;
              bitPos += bitsPerPixel;
            } else {
              missingBits = (bitsPerPixel - bitsLeft);
              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;
              buffer = src[i++];
              bitsLeft = 32 - missingBits;
              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);
              bitPos = missingBits;
            }
            //dest.push(n);
            dest[o] = n < nmax ? offset + n * scale : maxValue;
          }
          dest.unshift(offset);
          return dest;
        },

        originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {
          var bitMask = (1 << bitsPerPixel) - 1;
          var i = 0, o;
          var bitsLeft = 0;
          var n, buffer, missingBits;

          // get rid of trailing bytes that are already part of next block
          var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);
          src[src.length - 1] <<= 8 * numInvalidTailBytes;

          for (o = 0; o < numPixels; o++) {
            if (bitsLeft === 0) {
              buffer = src[i++];
              bitsLeft = 32;
            }
            if (bitsLeft >= bitsPerPixel) {
              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;
              bitsLeft -= bitsPerPixel;
            }
            else {
              missingBits = (bitsPerPixel - bitsLeft);
              n = ((buffer & bitMask) << missingBits) & bitMask;
              buffer = src[i++];
              bitsLeft = 32 - missingBits;
              n += (buffer >>> bitsLeft);
            }
            dest[o] = n;
          }
          return dest;
        },

        originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {
          var bitMask = (1 << bitsPerPixel) - 1;
          var i = 0, o;
          var bitsLeft = 0, bitPos = 0;
          var n, buffer, missingBits;
          //micro-optimizations
          for (o = 0; o < numPixels; o++) {
            if (bitsLeft === 0) {
              buffer = src[i++];
              bitsLeft = 32;
              bitPos = 0;
            }
            if (bitsLeft >= bitsPerPixel) {
              //no unsigned left shift
              n = ((buffer >>> bitPos) & bitMask);
              bitsLeft -= bitsPerPixel;
              bitPos += bitsPerPixel;
            } else {
              missingBits = (bitsPerPixel - bitsLeft);
              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;
              buffer = src[i++];
              bitsLeft = 32 - missingBits;
              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);
              bitPos = missingBits;
            }
            dest[o] = n;
          }
          return dest;
        }
      };

      /*****************************************
      *private static class used by Lerc2Decode
      ******************************************/
      var Lerc2Helpers = {
        HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant
        computeChecksumFletcher32: function(input) {

          var sum1 = 0xffff, sum2 = 0xffff;
          var len = input.length;
          var words = Math.floor(len / 2);
          var i = 0;
          while (words) {
            var tlen = (words >= 359) ? 359 : words;
            words -= tlen;
            do {
              sum1 += (input[i++] << 8);
              sum2 += sum1 += input[i++];
            } while (--tlen);

            sum1 = (sum1 & 0xffff) + (sum1 >>> 16);
            sum2 = (sum2 & 0xffff) + (sum2 >>> 16);
          }

          // add the straggler byte if it exists
          if (len & 1) {
            sum2 += sum1 += (input[i] << 8);
          }
          // second reduction step to reduce sums to 16 bits
          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);
          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);

          return (sum2 << 16 | sum1) >>> 0;
        },

        readHeaderInfo: function(input, data) {
          var ptr = data.ptr;
          var fileIdView = new Uint8Array(input, ptr, 6);
          var headerInfo = {};
          headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);
          if (headerInfo.fileIdentifierString.lastIndexOf("Lerc2", 0) !== 0) {
            throw "Unexpected file identifier string (expect Lerc2 ): " + headerInfo.fileIdentifierString;
          }
          ptr += 6;
          var view = new DataView(input, ptr, 8);
          var fileVersion = view.getInt32(0, true);
          headerInfo.fileVersion = fileVersion;
          ptr += 4;
          if (fileVersion >= 3) {
            headerInfo.checksum = view.getUint32(4, true); //nrows
            ptr += 4;
          }

          //keys start from here
          view = new DataView(input, ptr, 12);
          headerInfo.height = view.getUint32(0, true); //nrows
          headerInfo.width = view.getUint32(4, true); //ncols
          ptr += 8;
          if (fileVersion >= 4) {
            headerInfo.numDims = view.getUint32(8, true);
            ptr += 4;
          }
          else {
            headerInfo.numDims = 1;
          }

          view = new DataView(input, ptr, 40);
          headerInfo.numValidPixel = view.getUint32(0, true);
          headerInfo.microBlockSize = view.getInt32(4, true);
          headerInfo.blobSize = view.getInt32(8, true);
          headerInfo.imageType = view.getInt32(12, true);

          headerInfo.maxZError = view.getFloat64(16, true);
          headerInfo.zMin = view.getFloat64(24, true);
          headerInfo.zMax = view.getFloat64(32, true);
          ptr += 40;
          data.headerInfo = headerInfo;
          data.ptr = ptr;

          var checksum, keyLength;
          if (fileVersion >= 3) {
            keyLength = fileVersion >= 4 ? 52 : 48;
            checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));
            if (checksum !== headerInfo.checksum) {
              throw "Checksum failed.";
            }
          }
          return true;
        },

        checkMinMaxRanges: function(input, data) {
          var headerInfo = data.headerInfo;
          var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);
          var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);
          var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);
          var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);
          data.ptr += (2 * rangeBytes);
          var i, equal = true;
          for (i = 0; i < headerInfo.numDims; i++) {
            if (minValues[i] !== maxValues[i]) {
              equal = false;
              break;
            }
          }
          headerInfo.minValues = minValues;
          headerInfo.maxValues = maxValues;
          return equal;
        },

        readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {
          var rawData;
          if (OutPixelTypeArray === Uint8Array) {
            rawData = new Uint8Array(input, ptr, numBytes);
          }
          else {
            var arrayBuf = new ArrayBuffer(numBytes);
            var store8 = new Uint8Array(arrayBuf);
            store8.set(new Uint8Array(input, ptr, numBytes));
            rawData = new OutPixelTypeArray(arrayBuf);
          }
          return rawData;
        },

        readMask: function(input, data) {
          var ptr = data.ptr;
          var headerInfo = data.headerInfo;
          var numPixels = headerInfo.width * headerInfo.height;
          var numValidPixel = headerInfo.numValidPixel;

          var view = new DataView(input, ptr, 4);
          var mask = {};
          mask.numBytes = view.getUint32(0, true);
          ptr += 4;

          // Mask Data
          if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {
            throw ("invalid mask");
          }
          var bitset, resultMask;
          if (numValidPixel === 0) {
            bitset = new Uint8Array(Math.ceil(numPixels / 8));
            mask.bitset = bitset;
            resultMask = new Uint8Array(numPixels);
            data.pixels.resultMask = resultMask;
            ptr += mask.numBytes;
          }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {
          else if (mask.numBytes > 0) {
            bitset = new Uint8Array(Math.ceil(numPixels / 8));
            view = new DataView(input, ptr, mask.numBytes);
            var cnt = view.getInt16(0, true);
            var ip = 2, op = 0, val = 0;
            do {
              if (cnt > 0) {
                while (cnt--) { bitset[op++] = view.getUint8(ip++); }
              } else {
                val = view.getUint8(ip++);
                cnt = -cnt;
                while (cnt--) { bitset[op++] = val; }
              }
              cnt = view.getInt16(ip, true);
              ip += 2;
            } while (ip < mask.numBytes);
            if ((cnt !== -32768) || (op < bitset.length)) {
              throw "Unexpected end of mask RLE encoding";
            }

            resultMask = new Uint8Array(numPixels);
            var mb = 0, k = 0;

            for (k = 0; k < numPixels; k++) {
              if (k & 7) {
                mb = bitset[k >> 3];
                mb <<= k & 7;
              }
              else {
                mb = bitset[k >> 3];
              }
              if (mb & 128) {
                resultMask[k] = 1;
              }
            }
            data.pixels.resultMask = resultMask;

            mask.bitset = bitset;
            ptr += mask.numBytes;
          }
          data.ptr = ptr;
          data.mask = mask;
          return true;
        },

        readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {
          var ptr = data.ptr;
          var headerInfo = data.headerInfo;
          var numDims = headerInfo.numDims;
          var numPixels = headerInfo.width * headerInfo.height;
          var imageType = headerInfo.imageType;
          var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;
          //data.pixels.numBytes = numBytes;
          var rawData;
          var mask = data.pixels.resultMask;
          if (OutPixelTypeArray === Uint8Array) {
            rawData = new Uint8Array(input, ptr, numBytes);
          }
          else {
            var arrayBuf = new ArrayBuffer(numBytes);
            var store8 = new Uint8Array(arrayBuf);
            store8.set(new Uint8Array(input, ptr, numBytes));
            rawData = new OutPixelTypeArray(arrayBuf);
          }
          if (rawData.length === numPixels * numDims) {
            if (useBSQForOutputDim) {
              data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);
            }
            else {
              data.pixels.resultPixels = rawData;
            }
          }
          else  //mask
          {
            data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);
            var z = 0, k = 0, i = 0, nStart = 0;
            if (numDims > 1) {
              if (useBSQForOutputDim) {
                for (k = 0; k < numPixels; k++) {
                  if (mask[k]) {
                    nStart = k;
                    for (i = 0; i < numDims; i++, nStart+=numPixels) {
                      data.pixels.resultPixels[nStart] = rawData[z++];
                    }
                  }
                }
              }
              else {
                for (k = 0; k < numPixels; k++) {
                  if (mask[k]) {
                    nStart = k * numDims;
                    for (i = 0; i < numDims; i++) {
                      data.pixels.resultPixels[nStart + i] = rawData[z++];
                    }
                  }
                }
              }
            }
            else {
              for (k = 0; k < numPixels; k++) {
                if (mask[k]) {
                  data.pixels.resultPixels[k] = rawData[z++];
                }
              }
            }
          }
          ptr += numBytes;
          data.ptr = ptr;       //return data;
          return true;
        },

        readHuffmanTree: function(input, data) {
          var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image
          //var size_max = 1 << BITS_MAX;
          /* ************************
          * reading code table
          *************************/
          var view = new DataView(input, data.ptr, 16);
          data.ptr += 16;
          var version = view.getInt32(0, true);
          if (version < 2) {
            throw "unsupported Huffman version";
          }
          var size = view.getInt32(4, true);
          var i0 = view.getInt32(8, true);
          var i1 = view.getInt32(12, true);
          if (i0 >= i1) {
            return false;
          }
          var blockDataBuffer = new Uint32Array(i1 - i0);
          Lerc2Helpers.decodeBits(input, data, blockDataBuffer);
          var codeTable = []; //size
          var i, j, k, len;

          for (i = i0; i < i1; i++) {
            j = i - (i < size ? 0 : size);//wrap around
            codeTable[j] = { first: blockDataBuffer[i - i0], second: null };
          }

          var dataBytes = input.byteLength - data.ptr;
          var dataWords = Math.ceil(dataBytes / 4);
          var arrayBuf = new ArrayBuffer(dataWords * 4);
          var store8 = new Uint8Array(arrayBuf);
          store8.set(new Uint8Array(input, data.ptr, dataBytes));
          var stuffedData = new Uint32Array(arrayBuf); //must start from x*4
          var bitPos = 0, word, srcPtr = 0;
          word = stuffedData[0];
          for (i = i0; i < i1; i++) {
            j = i - (i < size ? 0 : size);//wrap around
            len = codeTable[j].first;
            if (len > 0) {
              codeTable[j].second = (word << bitPos) >>> (32 - len);

              if (32 - bitPos >= len) {
                bitPos += len;
                if (bitPos === 32) {
                  bitPos = 0;
                  srcPtr++;
                  word = stuffedData[srcPtr];
                }
              }
              else {
                bitPos += len - 32;
                srcPtr++;
                word = stuffedData[srcPtr];
                codeTable[j].second |= word >>> (32 - bitPos);
              }
            }
          }

          //finished reading code table

          /* ************************
          * building lut
          *************************/
          var numBitsLUT = 0, numBitsLUTQick = 0;
          var tree = new TreeNode();
          for (i = 0; i < codeTable.length; i++) {
            if (codeTable[i] !== undefined) {
              numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);
            }
          }
          if (numBitsLUT >= BITS_MAX) {
            numBitsLUTQick = BITS_MAX;
          }
          else {
            numBitsLUTQick = numBitsLUT;
          }
          // for debugging purpose
          // if (numBitsLUT >= 30) {
          //   console.log("WARning, large NUM LUT BITS IS " + numBitsLUT);
          // }
          var decodeLut = [], entry, code, numEntries, jj, currentBit, node;
          for (i = i0; i < i1; i++) {
            j = i - (i < size ? 0 : size);//wrap around
            len = codeTable[j].first;
            if (len > 0) {
              entry = [len, j];
              if (len <= numBitsLUTQick) {
                code = codeTable[j].second << (numBitsLUTQick - len);
                numEntries = 1 << (numBitsLUTQick - len);
                for (k = 0; k < numEntries; k++) {
                  decodeLut[code | k] = entry;
                }
              }
              else {
                //build tree
                code = codeTable[j].second;
                node = tree;
                for (jj = len - 1; jj >= 0; jj--) {
                  currentBit = code >>> jj & 1; //no left shift as length could be 30,31
                  if (currentBit) {
                    if (!node.right) {
                      node.right = new TreeNode();
                    }
                    node = node.right;
                  }
                  else {
                    if (!node.left) {
                      node.left = new TreeNode();
                    }
                    node = node.left;
                  }
                  if (jj === 0 && !node.val) {
                    node.val = entry[1];
                  }
                }
              }
            }
          }
          return {
            decodeLut: decodeLut,
            numBitsLUTQick: numBitsLUTQick,
            numBitsLUT: numBitsLUT,
            tree: tree,
            stuffedData: stuffedData,
            srcPtr: srcPtr,
            bitPos: bitPos
          };
        },

        readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {
          var headerInfo = data.headerInfo;
          var numDims = headerInfo.numDims;
          var height = data.headerInfo.height;
          var width = data.headerInfo.width;
          var numPixels = width * height;
          //var size_max = 1 << BITS_MAX;
          /* ************************
          * reading huffman structure info
          *************************/
          var huffmanInfo = this.readHuffmanTree(input, data);
          var decodeLut = huffmanInfo.decodeLut;
          var tree = huffmanInfo.tree;
          //stuffedData includes huffman headers
          var stuffedData = huffmanInfo.stuffedData;
          var srcPtr = huffmanInfo.srcPtr;
          var bitPos = huffmanInfo.bitPos;
          var numBitsLUTQick = huffmanInfo.numBitsLUTQick;
          var numBitsLUT = huffmanInfo.numBitsLUT;
          var offset = data.headerInfo.imageType === 0 ? 128 : 0;
          /*************************
          *  decode
          ***************************/
          var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;
          var i, j, k, ii;
          var prevVal = 0;
          if (bitPos > 0) {
            srcPtr++;
            bitPos = 0;
          }
          var word = stuffedData[srcPtr];
          var deltaEncode = data.encodeMode === 1;
          var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);
          var resultPixels = resultPixelsAllDim;
          var iDim;
          // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out
          if (numDims < 2 || deltaEncode) {
            for (iDim = 0; iDim < numDims; iDim++) {
              if (numDims > 1) {
                //get the mem block of current dimension
                resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);
                prevVal = 0;
              }
              if (data.headerInfo.numValidPixel === width * height) { //all valid
                for (k = 0, i = 0; i < height; i++) {
                  for (j = 0; j < width; j++, k++) {
                    val = 0;
                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);
                    valTmpQuick = valTmp;// >>> deltaBits;
                    if (32 - bitPos < numBitsLUTQick) {
                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));
                      valTmpQuick = valTmp;// >>> deltaBits;
                    }
                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done
                    {
                      val = decodeLut[valTmpQuick][1];
                      bitPos += decodeLut[valTmpQuick][0];
                    }
                    else {
                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);
                      valTmpQuick = valTmp;// >>> deltaBits;
                      if (32 - bitPos < numBitsLUT) {
                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));
                        valTmpQuick = valTmp;// >>> deltaBits;
                      }
                      node = tree;
                      for (ii = 0; ii < numBitsLUT; ii++) {
                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;
                        node = currentBit ? node.right : node.left;
                        if (!(node.left || node.right)) {
                          val = node.val;
                          bitPos = bitPos + ii + 1;
                          break;
                        }
                      }
                    }
      
                    if (bitPos >= 32) {
                      bitPos -= 32;
                      srcPtr++;
                      word = stuffedData[srcPtr];
                    }
      
                    delta = val - offset;
                    if (deltaEncode) {
                      if (j > 0) {
                        delta += prevVal;    // use overflow
                      }
                      else if (i > 0) {
                        delta += resultPixels[k - width];
                      }
                      else {
                        delta += prevVal;
                      }
                      delta &= 0xFF; //overflow
                      resultPixels[k] = delta;//overflow
                      prevVal = delta;
                    }
                    else {
                      resultPixels[k] = delta;
                    }
                  }
                }
              }
              else { //not all valid, use mask
                for (k = 0, i = 0; i < height; i++) {
                  for (j = 0; j < width; j++, k++) {
                    if (mask[k]) {
                      val = 0;
                      valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);
                      valTmpQuick = valTmp;// >>> deltaBits;
                      if (32 - bitPos < numBitsLUTQick) {
                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));
                        valTmpQuick = valTmp;// >>> deltaBits;
                      }
                      if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done
                      {
                        val = decodeLut[valTmpQuick][1];
                        bitPos += decodeLut[valTmpQuick][0];
                      }
                      else {
                        valTmp = (word << bitPos) >>> (32 - numBitsLUT);
                        valTmpQuick = valTmp;// >>> deltaBits;
                        if (32 - bitPos < numBitsLUT) {
                          valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));
                          valTmpQuick = valTmp;// >>> deltaBits;
                        }
                        node = tree;
                        for (ii = 0; ii < numBitsLUT; ii++) {
                          currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;
                          node = currentBit ? node.right : node.left;
                          if (!(node.left || node.right)) {
                            val = node.val;
                            bitPos = bitPos + ii + 1;
                            break;
                          }
                        }
                      }
      
                      if (bitPos >= 32) {
                        bitPos -= 32;
                        srcPtr++;
                        word = stuffedData[srcPtr];
                      }
      
                      delta = val - offset;
                      if (deltaEncode) {
                        if (j > 0 && mask[k - 1]) {
                          delta += prevVal;    // use overflow
                        }
                        else if (i > 0 && mask[k - width]) {
                          delta += resultPixels[k - width];
                        }
                        else {
                          delta += prevVal;
                        }
      
                        delta &= 0xFF; //overflow
                        resultPixels[k] = delta;//overflow
                        prevVal = delta;
                      }
                      else {
                        resultPixels[k] = delta;
                      }
                    }
                  }
                }
              }
            }
          }
          else {
            for (k = 0, i = 0; i < height; i++) {
              for (j = 0; j < width; j++) {
                k = i * width + j;
                if (!mask || mask[k]) {
                  for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {
                    val = 0;
                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);
                    valTmpQuick = valTmp;
                    if (32 - bitPos < numBitsLUTQick) {
                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));
                      valTmpQuick = valTmp;
                    }
                    if (decodeLut[valTmpQuick])
                    {
                      val = decodeLut[valTmpQuick][1];
                      bitPos += decodeLut[valTmpQuick][0];
                    }
                    else {
                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);
                      valTmpQuick = valTmp;
                      if (32 - bitPos < numBitsLUT) {
                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));
                        valTmpQuick = valTmp;
                      }
                      node = tree;
                      for (ii = 0; ii < numBitsLUT; ii++) {
                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;
                        node = currentBit ? node.right : node.left;
                        if (!(node.left || node.right)) {
                          val = node.val;
                          bitPos = bitPos + ii + 1;
                          break;
                        }
                      }
                    }

                    if (bitPos >= 32) {
                      bitPos -= 32;
                      srcPtr++;
                      word = stuffedData[srcPtr];
                    }

                    delta = val - offset;
                    resultPixels[k] = delta;
                  }
                }
              }
            }
          }
          data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);
          data.pixels.resultPixels = resultPixelsAllDim;
          //swap for BIP layout
          if (numDims > 1 && !useBSQForOutputDim) {
            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);
          }
        },

        decodeBits: function(input, data, blockDataBuffer, offset, iDim) {
          {
            //bitstuff encoding is 3
            var headerInfo = data.headerInfo;
            var fileVersion = headerInfo.fileVersion;
            //var block = {};
            var blockPtr = 0;
            var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);
            var view = new DataView(input, data.ptr, viewByteLength);
            var headerByte = view.getUint8(0);
            blockPtr++;
            var bits67 = headerByte >> 6;
            var n = (bits67 === 0) ? 4 : 3 - bits67;
            var doLut = (headerByte & 32) > 0 ? true : false;//5th bit
            var numBits = headerByte & 31;
            var numElements = 0;
            if (n === 1) {
              numElements = view.getUint8(blockPtr); blockPtr++;
            } else if (n === 2) {
              numElements = view.getUint16(blockPtr, true); blockPtr += 2;
            } else if (n === 4) {
              numElements = view.getUint32(blockPtr, true); blockPtr += 4;
            } else {
              throw "Invalid valid pixel count type";
            }
            //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff
            //offset = offset || 0;
            var scale = 2 * headerInfo.maxZError;
            var stuffedData, arrayBuf, store8, dataBytes, dataWords;
            var lutArr, lutData, lutBytes, bitsPerPixel;
            var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;
            if (doLut) {
              data.counter.lut++;
              lutBytes = view.getUint8(blockPtr);
              blockPtr++;
              dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);
              dataWords = Math.ceil(dataBytes / 4);
              arrayBuf = new ArrayBuffer(dataWords * 4);
              store8 = new Uint8Array(arrayBuf);

              data.ptr += blockPtr;
              store8.set(new Uint8Array(input, data.ptr, dataBytes));

              lutData = new Uint32Array(arrayBuf);
              data.ptr += dataBytes;

              bitsPerPixel = 0;
              while ((lutBytes - 1) >>> bitsPerPixel) {
                bitsPerPixel++;
              }
              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);
              dataWords = Math.ceil(dataBytes / 4);
              arrayBuf = new ArrayBuffer(dataWords * 4);
              store8 = new Uint8Array(arrayBuf);
              store8.set(new Uint8Array(input, data.ptr, dataBytes));
              stuffedData = new Uint32Array(arrayBuf);
              data.ptr += dataBytes;
              if (fileVersion >= 3) {
                lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);
              }
              else {
                lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);
              }
              //lutArr.unshift(0);
              if (fileVersion >= 3) {
                //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);
                BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);
              }
              else {
                BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);
              }
            }
            else {
              //console.debug("bitstuffer");
              data.counter.bitstuffer++;
              bitsPerPixel = numBits;
              data.ptr += blockPtr;
              if (bitsPerPixel > 0) {
                dataBytes = Math.ceil(numElements * bitsPerPixel / 8);
                dataWords = Math.ceil(dataBytes / 4);
                arrayBuf = new ArrayBuffer(dataWords * 4);
                store8 = new Uint8Array(arrayBuf);
                store8.set(new Uint8Array(input, data.ptr, dataBytes));
                stuffedData = new Uint32Array(arrayBuf);
                data.ptr += dataBytes;
                if (fileVersion >= 3) {
                  if (offset == null) {
                    BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);
                  }
                  else {
                    BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);
                  }
                }
                else {
                  if (offset == null) {
                    BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);
                  }
                  else {
                    BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);
                  }
                }
              }
            }
          }

        },

        readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {
          var headerInfo = data.headerInfo;
          var width = headerInfo.width;
          var height = headerInfo.height;
          var numPixels = width * height;
          var microBlockSize = headerInfo.microBlockSize;
          var imageType = headerInfo.imageType;
          var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);
          var numBlocksX = Math.ceil(width / microBlockSize);
          var numBlocksY = Math.ceil(height / microBlockSize);
          data.pixels.numBlocksY = numBlocksY;
          data.pixels.numBlocksX = numBlocksX;
          data.pixels.ptr = 0;
          var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;
          var view, block, arrayBuf, store8, rawData;
          var blockEncoding;
          var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);
          var lastBlockHeight = (height % microBlockSize) || microBlockSize;
          var lastBlockWidth = (width % microBlockSize) || microBlockSize;
          var offsetType, offset;
          var numDims = headerInfo.numDims, iDim;
          var mask = data.pixels.resultMask;
          var resultPixels = data.pixels.resultPixels;
          var fileVersion = headerInfo.fileVersion;
          var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;
          var isDiffEncoding;
          var zMax = headerInfo.zMax;
          //var resultPixelsAllDim = resultPixels;
          var resultPixelsPrevDim;
          for (blockY = 0; blockY < numBlocksY; blockY++) {
            thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;
            for (blockX = 0; blockX < numBlocksX; blockX++) {
              //console.debug("y" + blockY + " x" + blockX);
              thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;

              outPtr = blockY * width * microBlockSize + blockX * microBlockSize;
              outStride = width - thisBlockWidth;

              for (iDim = 0; iDim < numDims; iDim++) {
                if (numDims > 1) {
                  resultPixelsPrevDim = resultPixels;
                  outPtr = blockY * width * microBlockSize + blockX * microBlockSize;
                  resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);
                  zMax = headerInfo.maxValues[iDim];
                } else {
                  resultPixelsPrevDim = null;
                }
                bytesLeft = input.byteLength - data.ptr;
                view = new DataView(input, data.ptr, Math.min(10, bytesLeft));
                block = {};
                blockPtr = 0;
                headerByte = view.getUint8(0);
                blockPtr++;
                isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;
                bits67 = (headerByte >> 6) & 0xFF;
                testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check
                if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {
                  throw "integrity issue";
                }

                if (isDiffEncoding && iDim === 0) {
                  throw "integrity issue";
                }

                blockEncoding = headerByte & 3;
                if (blockEncoding > 3) {
                  data.ptr += blockPtr;
                  throw "Invalid block encoding (" + blockEncoding + ")";
                }
                else if (blockEncoding === 2) { //constant 0
                  if (isDiffEncoding) {
                    if (mask) {
                      for (row = 0; row < thisBlockHeight; row++) {
                        for (col = 0; col < thisBlockWidth; col++) {
                          if (mask[outPtr]) {
                            resultPixels[outPtr] = resultPixelsPrevDim[outPtr];
                          }
                          outPtr++;
                        }
                      }
                    }
                    else {
                      for (row = 0; row < thisBlockHeight; row++) {
                        for (col = 0; col < thisBlockWidth; col++) {
                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];
                          outPtr++;
                        }
                      }
                    }
                  }
                  data.counter.constant++;
                  data.ptr += blockPtr;
                  continue;
                }
                else if (blockEncoding === 0) {  //uncompressed
                  if (isDiffEncoding) {
                    // doesn't make sense, should not happen
                    throw "integrity issue";
                  }
                  data.counter.uncompressed++;
                  data.ptr += blockPtr;
                  numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;
                  bytesleft = input.byteLength - data.ptr;
                  numBytes = numBytes < bytesleft ? numBytes : bytesleft;
                  //bit alignment
                  arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));
                  store8 = new Uint8Array(arrayBuf);
                  store8.set(new Uint8Array(input, data.ptr, numBytes));
                  rawData = new OutPixelTypeArray(arrayBuf);
                  z = 0;
                  if (mask) {
                    for (row = 0; row < thisBlockHeight; row++) {
                      for (col = 0; col < thisBlockWidth; col++) {
                        if (mask[outPtr]) {
                          resultPixels[outPtr] = rawData[z++];
                        }
                        outPtr++;
                      }
                      outPtr += outStride;
                    }
                  }
                  else {//all valid
                    for (row = 0; row < thisBlockHeight; row++) {
                      for (col = 0; col < thisBlockWidth; col++) {
                        resultPixels[outPtr++] = rawData[z++];
                      }
                      outPtr += outStride;
                    }
                  }
                  data.ptr += z * dataTypeSize;
                }
                else { //1 or 3
                  offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);
                  offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);
                  blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);
                  if (blockEncoding === 3) //constant offset value
                  {
                    data.ptr += blockPtr;
                    data.counter.constantoffset++;
                    //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.
                    //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values
                    if (mask) {
                      for (row = 0; row < thisBlockHeight; row++) {
                        for (col = 0; col < thisBlockWidth; col++) {
                          if (mask[outPtr]) {
                            resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;
                          }
                          outPtr++;
                        }
                        outPtr += outStride;
                      }
                    }
                    else {
                      for (row = 0; row < thisBlockHeight; row++) {
                        for (col = 0; col < thisBlockWidth; col++) {
                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;
                          outPtr++;
                        }
                        outPtr += outStride;
                      }
                    }
                  }
                  else { //bitstuff encoding is 3
                    data.ptr += blockPtr;
                    //heavy lifting
                    Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);
                    blockPtr = 0;
                    // duplicate code to favor performance, diff encoding is for multidimension only
                    if (isDiffEncoding) {
                      if (mask) {
                        for (row = 0; row < thisBlockHeight; row++) {
                          for (col = 0; col < thisBlockWidth; col++) {
                            if (mask[outPtr]) {
                              resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];
                            }
                            outPtr++;
                          }
                          outPtr += outStride;
                        }
                      }
                      else {
                        for (row = 0; row < thisBlockHeight; row++) {
                          for (col = 0; col < thisBlockWidth; col++) {
                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];
                            outPtr++;
                          }
                          outPtr += outStride;
                        }
                      }
                    }
                    else if (mask) {
                      for (row = 0; row < thisBlockHeight; row++) {
                        for (col = 0; col < thisBlockWidth; col++) {
                          if (mask[outPtr]) {
                            resultPixels[outPtr] = blockDataBuffer[blockPtr++];
                          }
                          outPtr++;
                        }
                        outPtr += outStride;
                      }
                    }
                    else {
                      for (row = 0; row < thisBlockHeight; row++) {
                        for (col = 0; col < thisBlockWidth; col++) {
                          resultPixels[outPtr++] = blockDataBuffer[blockPtr++];
                        }
                        outPtr += outStride;
                      }
                    }
                  }
                }
              }
            }
          }
          //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes
          if (numDims > 1 && !useBSQForOutputDim) {
            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);
          }
        },

        /*****************
        *  private methods (helper methods)
        *****************/

        formatFileInfo: function(data) {
          return {
            "fileIdentifierString": data.headerInfo.fileIdentifierString,
            "fileVersion": data.headerInfo.fileVersion,
            "imageType": data.headerInfo.imageType,
            "height": data.headerInfo.height,
            "width": data.headerInfo.width,
            "numValidPixel": data.headerInfo.numValidPixel,
            "microBlockSize": data.headerInfo.microBlockSize,
            "blobSize": data.headerInfo.blobSize,
            "maxZError": data.headerInfo.maxZError,
            "pixelType": Lerc2Helpers.getPixelType(data.headerInfo.imageType),
            "eofOffset": data.eofOffset,
            "mask": data.mask ? {
              "numBytes": data.mask.numBytes
            } : null,
            "pixels": {
              "numBlocksX": data.pixels.numBlocksX,
              "numBlocksY": data.pixels.numBlocksY,
              //"numBytes": data.pixels.numBytes,
              "maxValue": data.headerInfo.zMax,
              "minValue": data.headerInfo.zMin,
              "noDataValue": data.noDataValue
            }
          };
        },

        constructConstantSurface: function(data, useBSQForOutputDim) {
          var val = data.headerInfo.zMax;
          var valMin = data.headerInfo.zMin;
          var maxValues = data.headerInfo.maxValues;
          var numDims = data.headerInfo.numDims;
          var numPixels = data.headerInfo.height * data.headerInfo.width;
          var i = 0, k = 0, nStart = 0;
          var mask = data.pixels.resultMask;
          var resultPixels = data.pixels.resultPixels;
          if (mask) {
            if (numDims > 1) {
              if (useBSQForOutputDim) {
                for (i = 0; i < numDims; i++) {
                  nStart = i * numPixels;
                  val = maxValues[i];
                  for (k = 0; k < numPixels; k++) {
                    if (mask[k]) {
                      resultPixels[nStart + k] = val;
                    }
                  }
                }  
              }
              else {
                for (k = 0; k < numPixels; k++) {
                  if (mask[k]) {
                    nStart = k * numDims;
                    for (i = 0; i < numDims; i++) {
                      resultPixels[nStart + numDims] = maxValues[i];
                    }
                  }
                }
              }
            }
            else {
              for (k = 0; k < numPixels; k++) {
                if (mask[k]) {
                  resultPixels[k] = val;
                }
              }
            }
          }
          else {
            if (numDims > 1 && valMin !== val) {
              if (useBSQForOutputDim) {
                for (i = 0; i < numDims; i++) {
                  nStart = i * numPixels;
                  val = maxValues[i];
                  for (k = 0; k < numPixels; k++) {
                    resultPixels[nStart + k] = val;
                  }
                }
              }
              else {
                for (k = 0; k < numPixels; k++) {
                  nStart = k * numDims;
                  for (i = 0; i < numDims; i++) {
                    resultPixels[nStart + i] = maxValues[i];
                  }
                }
              }
            }
            else {
              for (k = 0; k < numPixels * numDims; k++) {
                resultPixels[k] = val;
              }
            }
          }
          return;
        },

        getDataTypeArray: function(t) {
          var tp;
          switch (t) {
            case 0: //char
              tp = Int8Array;
              break;
            case 1: //byte
              tp = Uint8Array;
              break;
            case 2: //short
              tp = Int16Array;
              break;
            case 3: //ushort
              tp = Uint16Array;
              break;
            case 4:
              tp = Int32Array;
              break;
            case 5:
              tp = Uint32Array;
              break;
            case 6:
              tp = Float32Array;
              break;
            case 7:
              tp = Float64Array;
              break;
            default:
              tp = Float32Array;
          }
          return tp;
        },

        getPixelType: function(t) {
          var tp;
          switch (t) {
            case 0: //char
              tp = "S8";
              break;
            case 1: //byte
              tp = "U8";
              break;
            case 2: //short
              tp = "S16";
              break;
            case 3: //ushort
              tp = "U16";
              break;
            case 4:
              tp = "S32";
              break;
            case 5:
              tp = "U32";
              break;
            case 6:
              tp = "F32";
              break;
            case 7:
              tp = "F64";
              break;
            default:
              tp = "F32";
          }
          return tp;
        },

        isValidPixelValue: function(t, val) {
          if (val == null) {
            return false;
          }
          var isValid;
          switch (t) {
            case 0: //char
              isValid = val >= -128 && val <= 127;
              break;
            case 1: //byte  (unsigned char)
              isValid = val >= 0 && val <= 255;
              break;
            case 2: //short
              isValid = val >= -32768 && val <= 32767;
              break;
            case 3: //ushort
              isValid = val >= 0 && val <= 65536;
              break;
            case 4: //int 32
              isValid = val >= -2147483648 && val <= 2147483647;
              break;
            case 5: //uinit 32
              isValid = val >= 0 && val <= 4294967296;
              break;
            case 6:
              isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;
              break;
            case 7:
              isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;
              break;
            default:
              isValid = false;
          }
          return isValid;
        },

        getDataTypeSize: function(t) {
          var s = 0;
          switch (t) {
            case 0: //ubyte
            case 1: //byte
              s = 1;
              break;
            case 2: //short
            case 3: //ushort
              s = 2;
              break;
            case 4:
            case 5:
            case 6:
              s = 4;
              break;
            case 7:
              s = 8;
              break;
            default:
              s = t;
          }
          return s;
        },

        getDataTypeUsed: function(dt, tc) {
          var t = dt;
          switch (dt) {
            case 2: //short
            case 4: //long
              t = dt - tc;
              break;
            case 3: //ushort
            case 5: //ulong
              t = dt - 2 * tc;
              break;
            case 6: //float
              if (0 === tc) {
                t = dt;
              }
              else if (1 === tc) {
                t = 2;
              }
              else {
                t = 1;//byte
              }
              break;
            case 7: //double
              if (0 === tc) {
                t = dt;
              }
              else {
                t = dt - 2 * tc + 1;
              }
              break;
            default:
              t = dt;
              break;
          }
          return t;
        },

        getOnePixel: function(block, blockPtr, offsetType, view) {
          var temp = 0;
          switch (offsetType) {
            case 0: //char
              temp = view.getInt8(blockPtr);
              break;
            case 1: //byte
              temp = view.getUint8(blockPtr);
              break;
            case 2:
              temp = view.getInt16(blockPtr, true);
              break;
            case 3:
              temp = view.getUint16(blockPtr, true);
              break;
            case 4:
              temp = view.getInt32(blockPtr, true);
              break;
            case 5:
              temp = view.getUInt32(blockPtr, true);
              break;
            case 6:
              temp = view.getFloat32(blockPtr, true);
              break;
            case 7:
              temp = view.getFloat64(blockPtr, true);
              break;
            default:
              throw ("the decoder does not understand this pixel type");
          }
          return temp;
        },

        swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {
          var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;
          if (numDims > 1) {
            swap = new OutPixelTypeArray(numPixels * numDims);
            if (inputIsBIP) {
              for (i=0; i<numPixels; i++) {
                temp = i;
                for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {
                  swap[temp] = pixels[j++];
                }
              }  
            }
            else {
              for (i=0; i<numPixels; i++) {
                temp = i;
                for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {
                  swap[j++] = pixels[temp];
                }
              }
            }
          }
          return swap;
        }
      };

      /***************************************************
      *private class for a tree node. Huffman code is in Lerc2Helpers
      ****************************************************/
      var TreeNode = function(val, left, right) {
        this.val = val;
        this.left = left;
        this.right = right;
      };

      var Lerc2Decode = {
        /*
        * ********removed options compared to LERC1. We can bring some of them back if needed.
         * removed pixel type. LERC2 is typed and doesn't require user to give pixel type
         * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.
         * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.
         * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,
         *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.
         *       We can add it back later if their's a clear requirement.
         * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)
         * removed computeUsedBitDepths.
         *
         *
         * response changes compared to LERC1
         * 1. encodedMaskData is not available
         * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)
         * 3. maskData is always available
        */
        /*****************
        *  public properties
        ******************/
        //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable

        /*****************
        *  public methods
        *****************/

        /**
         * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.
         *
         * @param {ArrayBuffer} input The LERC input byte stream
         * @param {object} [options] options Decoding options
         * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position
         * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process
         * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]
         */
        decode: function(/*byte array*/ input, /*object*/ options) {
          //currently there's a bug in the sparse array, so please do not set to false
          options = options || {};
          var noDataValue = options.noDataValue;

          //initialize
          var i = 0, data = {};
          data.ptr = options.inputOffset || 0;
          data.pixels = {};

          // File header
          if (!Lerc2Helpers.readHeaderInfo(input, data)) ;

          var headerInfo = data.headerInfo;
          var fileVersion = headerInfo.fileVersion;
          var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);

          // version check
          if (fileVersion > 5) {
            throw "unsupported lerc version 2." + fileVersion;
          }

          // Mask Header
          Lerc2Helpers.readMask(input, data);
          if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {
            data.pixels.resultMask = options.maskData;
          }

          var numPixels = headerInfo.width * headerInfo.height;
          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);

          data.counter = {
            onesweep: 0,
            uncompressed: 0,
            lut: 0,
            bitstuffer: 0,
            constant: 0,
            constantoffset: 0
          };
          var useBSQForOutputDim = !options.returnPixelInterleavedDims;
          if (headerInfo.numValidPixel !== 0) {
            //not tested
            if (headerInfo.zMax === headerInfo.zMin) //constant surface
            {
              Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);
            }
            else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {
              Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);
            }
            else {
              var view = new DataView(input, data.ptr, 2);
              var bReadDataOneSweep = view.getUint8(0);
              data.ptr++;
              if (bReadDataOneSweep) {
                //console.debug("OneSweep");
                Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);
              }
              else {
                //lerc2.1: //bitstuffing + lut
                //lerc2.2: //bitstuffing + lut + huffman
                //lerc2.3: new bitstuffer
                if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {
                  //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman
                  var flagHuffman = view.getUint8(1);
                  data.ptr++;
                  data.encodeMode = flagHuffman;
                  if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {
                    throw "Invalid Huffman flag " + flagHuffman;
                  }
                  if (flagHuffman) {//1 - delta Huffman, 2 - Huffman
                    //console.log("Huffman");
                    Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);
                  }
                  else {
                    //console.log("Tiles");
                    Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);
                  }
                }
                else { //lerc2.x non-8 bit data
                  //console.log("Tiles");
                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);
                }
              }
            }
          }

          data.eofOffset = data.ptr;
          var diff;
          if (options.inputOffset) {
            diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;
            if (Math.abs(diff) >= 1) {
              //console.debug("incorrect eof: dataptr " + data.ptr + " offset " + options.inputOffset + " blobsize " + data.headerInfo.blobSize + " diff: " + diff);
              data.eofOffset = options.inputOffset + data.headerInfo.blobSize;
            }
          }
          else {
            diff = data.headerInfo.blobSize - data.ptr;
            if (Math.abs(diff) >= 1) {
              //console.debug("incorrect first band eof: dataptr " + data.ptr + " blobsize " + data.headerInfo.blobSize + " diff: " + diff);
              data.eofOffset = data.headerInfo.blobSize;
            }
          }

          var result = {
            width: headerInfo.width,
            height: headerInfo.height,
            pixelData: data.pixels.resultPixels,
            minValue: headerInfo.zMin,
            maxValue: headerInfo.zMax,
            validPixelCount: headerInfo.numValidPixel,
            dimCount: headerInfo.numDims,
            dimStats: {
              minValues: headerInfo.minValues,
              maxValues: headerInfo.maxValues
            },
            maskData: data.pixels.resultMask
            //noDataValue: noDataValue
          };

          //we should remove this if there's no existing client
          //optional noDataValue processing, it's user's responsiblity
          if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {
            var mask = data.pixels.resultMask;
            for (i = 0; i < numPixels; i++) {
              if (!mask[i]) {
                result.pixelData[i] = noDataValue;
              }
            }
            result.noDataValue = noDataValue;
          }
          data.noDataValue = noDataValue;
          if (options.returnFileInfo) {
            result.fileInfo = Lerc2Helpers.formatFileInfo(data);
          }
          return result;
        },

        getBandCount: function(/*byte array*/ input) {
          var count = 0;
          var i = 0;
          var temp = {};
          temp.ptr = 0;
          temp.pixels = {};
          while (i < input.byteLength - 58) {
            Lerc2Helpers.readHeaderInfo(input, temp);
            i += temp.headerInfo.blobSize;
            count++;
            temp.ptr = i;
          }
          return count;
        }
      };

      return Lerc2Decode;
    })();

    var isPlatformLittleEndian = (function() {
      var a = new ArrayBuffer(4);
      var b = new Uint8Array(a);
      var c = new Uint32Array(a);
      c[0] = 1;
      return b[0] === 1;
    })();

    var Lerc = {
      /************wrapper**********************************************/
      /**
       * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.
       *
       * @alias module:Lerc
       * @param {ArrayBuffer} input The LERC input byte stream
       * @param {object} [options] The decoding options below are optional.
       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.
       * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.
       * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.
       * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]
       * @returns {{width, height, pixels, pixelType, mask, statistics}}
         * @property {number} width Width of decoded image.
         * @property {number} height Height of decoded image.
         * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.
         * @property {string} pixelType The type of pixels represented in the output.
         * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.
         * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values
      **/
      decode: function(encodedData, options) {
        if (!isPlatformLittleEndian) {
          throw "Big endian system is not supported.";
        }
        options = options || {};
        var inputOffset = options.inputOffset || 0;
        var fileIdView = new Uint8Array(encodedData, inputOffset, 10);
        var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);
        var lerc, majorVersion;
        if (fileIdentifierString.trim() === "CntZImage") {
          lerc = LercDecode;
          majorVersion = 1;
        }
        else if (fileIdentifierString.substring(0, 5) === "Lerc2") {
          lerc = Lerc2Decode;
          majorVersion = 2;
        }
        else {
          throw "Unexpected file identifier string: " + fileIdentifierString;
        }

        var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;
        var decodedPixelBlock = {
          width: 0,
          height: 0,
          pixels: [],
          pixelType: options.pixelType,
          mask: null,
          statistics: []
        };
        var uniqueBandMaskCount = 0;

        while (inputOffset < eof) {
          var result = lerc.decode(encodedData, {
            inputOffset: inputOffset,//for both lerc1 and lerc2
            encodedMaskData: encodedMaskData,//lerc1 only
            maskData: maskData,//lerc2 only
            returnMask: iPlane === 0 ? true : false,//lerc1 only
            returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only
            returnFileInfo: true,//for both lerc1 and lerc2
            returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only
            pixelType: options.pixelType || null,//lerc1 only
            noDataValue: options.noDataValue || null//lerc1 only
          });

          inputOffset = result.fileInfo.eofOffset;
          maskData = result.maskData;//lerc2
          if (iPlane === 0) {
            encodedMaskData = result.encodedMaskData;//lerc1
            decodedPixelBlock.width = result.width;
            decodedPixelBlock.height = result.height;
            decodedPixelBlock.dimCount = result.dimCount || 1;
            //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;
            decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;
            decodedPixelBlock.mask = maskData;
          }
          if (majorVersion > 1) {
            if (maskData) {
              bandMasks.push(maskData);
            }
            if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {
              uniqueBandMaskCount++;
            }
          }

          iPlane++;
          decodedPixelBlock.pixels.push(result.pixelData);
          decodedPixelBlock.statistics.push({
            minValue: result.minValue,
            maxValue: result.maxValue,
            noDataValue: result.noDataValue,
            dimStats: result.dimStats
          });
        }
        var i, j, numPixels;
        if (majorVersion > 1 && uniqueBandMaskCount > 1) {
          numPixels = decodedPixelBlock.width * decodedPixelBlock.height;
          decodedPixelBlock.bandMasks = bandMasks;
          maskData = new Uint8Array(numPixels);
          maskData.set(bandMasks[0]);
          for (i = 1; i < bandMasks.length; i++) {
            bandMask = bandMasks[i];
            for (j = 0; j < numPixels; j++) {
              maskData[j] = maskData[j] & bandMask[j];
            }
          }
          decodedPixelBlock.maskData = maskData;
        }

        return decodedPixelBlock;
      }
    };

    if (module.exports) {/* jshint ignore:line */
      //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS
      //http://wiki.commonjs.org/wiki/Modules
      module.exports = Lerc;/* jshint ignore:line */
    }
    else {
      //assign to this, most likely window
      this.Lerc = Lerc;
    }

  })();
  }(LercDecode));

  var Lerc = LercDecode.exports;

  class LercDecoder extends BaseDecoder {
    constructor(fileDirectory) {
      super();

      this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;
      this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;

      this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];
    }

    decodeBlock(buffer) {
      switch (this.addCompression) {
        case LercAddCompression.None:
          break;
        case LercAddCompression.Deflate:
          buffer = inflate_1(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring
          break;
        default:
          throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);
      }

      const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });
      const lercData = lercResult.pixels[0];
      return lercData.buffer;
    }
  }

  var lerc = {
    __proto__: null,
    'default': LercDecoder
  };

  /**
   * class WebImageDecoder
   *
   * This decoder uses the browsers image decoding facilities to read image
   * formats like WebP when supported.
   */
  class WebImageDecoder extends BaseDecoder {
    constructor() {
      super();
      if (typeof createImageBitmap === 'undefined') {
        throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');
      } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {
        throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');
      }
    }

    async decode(fileDirectory, buffer) {
      const blob = new Blob([buffer]);
      const imageBitmap = await createImageBitmap(blob);

      let canvas;
      if (typeof document !== 'undefined') {
        canvas = document.createElement('canvas');
        canvas.width = imageBitmap.width;
        canvas.height = imageBitmap.height;
      } else {
        canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);
      }

      const ctx = canvas.getContext('2d');
      ctx.drawImage(imageBitmap, 0, 0);

      // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly
      // it seems like GDAL always encodes via RGBA which does not require a translation

      return ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer;
    }
  }

  var webimage = {
    __proto__: null,
    'default': WebImageDecoder
  };

  /**
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var browser = Worker;

  function create() {
            const source = "function e(e,t,r,n,i,a,o){try{var s=e[a](o),f=s.value}catch(e){return void r(e)}s.done?t(f):Promise.resolve(f).then(n,i)}function t(t){return function(){var r=this,n=arguments;return new Promise((function(i,a){var o=t.apply(r,n);function s(t){e(o,i,a,s,f,\"next\",t)}function f(t){e(o,i,a,s,f,\"throw\",t)}s(void 0)}))}}function r(e){return r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},r(e)}var n={exports:{}};!function(e){var t=function(e){var t,n=Object.prototype,i=n.hasOwnProperty,a=\"function\"==typeof Symbol?Symbol:{},o=a.iterator||\"@@iterator\",s=a.asyncIterator||\"@@asyncIterator\",f=a.toStringTag||\"@@toStringTag\";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},\"\")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof y?t:y,a=Object.create(i.prototype),o=new T(n||[]);return a._invoke=function(e,t,r){var n=h;return function(i,a){if(n===p)throw new Error(\"Generator is already running\");if(n===m){if(\"throw\"===i)throw a;return E()}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var s=I(o,r);if(s){if(s===v)continue;return s}}if(\"next\"===r.method)r.sent=r._sent=r.arg;else if(\"throw\"===r.method){if(n===h)throw n=m,r.arg;r.dispatchException(r.arg)}else\"return\"===r.method&&r.abrupt(\"return\",r.arg);n=p;var f=c(e,t,r);if(\"normal\"===f.type){if(n=r.done?m:d,f.arg===v)continue;return{value:f.arg,done:r.done}}\"throw\"===f.type&&(n=m,r.method=\"throw\",r.arg=f.arg)}}}(e,r,o),a}function c(e,t,r){try{return{type:\"normal\",arg:e.call(t,r)}}catch(e){return{type:\"throw\",arg:e}}}e.wrap=u;var h=\"suspendedStart\",d=\"suspendedYield\",p=\"executing\",m=\"completed\",v={};function y(){}function w(){}function g(){}var b={};l(b,o,(function(){return this}));var k=Object.getPrototypeOf,x=k&&k(k(D([])));x&&x!==n&&i.call(x,o)&&(b=x);var _=g.prototype=y.prototype=Object.create(b);function A(e){[\"next\",\"throw\",\"return\"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function P(e,t){function n(a,o,s,f){var l=c(e[a],e,o);if(\"throw\"!==l.type){var u=l.arg,h=u.value;return h&&\"object\"===r(h)&&i.call(h,\"__await\")?t.resolve(h.__await).then((function(e){n(\"next\",e,s,f)}),(function(e){n(\"throw\",e,s,f)})):t.resolve(h).then((function(e){u.value=e,s(u)}),(function(e){return n(\"throw\",e,s,f)}))}f(l.arg)}var a;this._invoke=function(e,r){function i(){return new t((function(t,i){n(e,r,t,i)}))}return a=a?a.then(i,i):i()}}function I(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,\"throw\"===r.method){if(e.iterator.return&&(r.method=\"return\",r.arg=t,I(e,r),\"throw\"===r.method))return v;r.method=\"throw\",r.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return v}var i=c(n,e.iterator,r.arg);if(\"throw\"===i.type)return r.method=\"throw\",r.arg=i.arg,r.delegate=null,v;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,\"return\"!==r.method&&(r.method=\"next\",r.arg=t),r.delegate=null,v):a:(r.method=\"throw\",r.arg=new TypeError(\"iterator result is not an object\"),r.delegate=null,v)}function U(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(U,this),this.reset(!0)}function D(e){if(e){var r=e[o];if(r)return r.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,a=function r(){for(;++n<e.length;)if(i.call(e,n))return r.value=e[n],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}return{next:E}}function E(){return{value:t,done:!0}}return w.prototype=g,l(_,\"constructor\",g),l(g,\"constructor\",w),w.displayName=l(g,f,\"GeneratorFunction\"),e.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===w||\"GeneratorFunction\"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,l(e,f,\"GeneratorFunction\")),e.prototype=Object.create(_),e},e.awrap=function(e){return{__await:e}},A(P.prototype),l(P.prototype,s,(function(){return this})),e.AsyncIterator=P,e.async=function(t,r,n,i,a){void 0===a&&(a=Promise);var o=new P(u(t,r,n,i),a);return e.isGeneratorFunction(r)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},A(_),l(_,f,\"Generator\"),l(_,o,(function(){return this})),l(_,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=D,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(S),!e)for(var r in this)\"t\"===r.charAt(0)&&i.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function n(n,i){return s.type=\"throw\",s.arg=e,r.next=n,i&&(r.method=\"next\",r.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if(\"root\"===o.tryLoc)return n(\"end\");if(o.tryLoc<=this.prev){var f=i.call(o,\"catchLoc\"),l=i.call(o,\"finallyLoc\");if(f&&l){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(f){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!l)throw new Error(\"try statement without catch or finally\");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,\"finallyLoc\")&&this.prev<n.finallyLoc){var a=n;break}}a&&(\"break\"===e||\"continue\"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=t,a?(this.method=\"next\",this.next=a.finallyLoc,v):this.complete(o)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),S(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if(\"throw\"===n.type){var i=n.arg;S(r)}return i}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,r,n){return this.delegate={iterator:D(e),resultName:r,nextLoc:n},\"next\"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){\"object\"===(\"undefined\"==typeof globalThis?\"undefined\":r(globalThis))?globalThis.regeneratorRuntime=t:Function(\"r\",\"regeneratorRuntime = r\")(t)}}(n);var i=n.exports,a=new Map;function o(e,t){Array.isArray(e)||(e=[e]),e.forEach((function(e){return a.set(e,t)}))}function s(e){return f.apply(this,arguments)}function f(){return(f=t(i.mark((function e(t){var r,n;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=a.get(t.Compression)){e.next=3;break}throw new Error(\"Unknown compression method identifier: \".concat(t.Compression));case 3:return e.next=5,r();case 5:return n=e.sent,e.abrupt(\"return\",new n(t));case 7:case\"end\":return e.stop()}}),e)})))).apply(this,arguments)}o([void 0,1],(function(){return Promise.resolve().then((function(){return _})).then((function(e){return e.default}))})),o(5,(function(){return Promise.resolve().then((function(){return S})).then((function(e){return e.default}))})),o(6,(function(){throw new Error(\"old style JPEG compression is not supported.\")})),o(7,(function(){return Promise.resolve().then((function(){return L})).then((function(e){return e.default}))})),o([8,32946],(function(){return Promise.resolve().then((function(){return Ne})).then((function(e){return e.default}))})),o(32773,(function(){return Promise.resolve().then((function(){return Ye})).then((function(e){return e.default}))})),o(34887,(function(){return Promise.resolve().then((function(){return ut})).then((function(e){return e.default}))})),o(50001,(function(){return Promise.resolve().then((function(){return dt})).then((function(e){return e.default}))}));var l=globalThis;function u(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),e}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function p(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}function m(e,t){if(t&&(\"object\"===r(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return function(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e)}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}function y(e,t){var r=e.length-t,n=0;do{for(var i=t;i>0;i--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function w(e,t,r){for(var n=0,i=e.length,a=i/r;i>t;){for(var o=t;o>0;--o)e[n+t]+=e[n],++n;i-=t}for(var s=e.slice(),f=0;f<a;++f)for(var l=0;l<r;++l)e[r*f+l]=s[(r-l-1)*a+f]}function g(e,t,r,n,i,a){if(!t||1===t)return e;for(var o=0;o<i.length;++o){if(i[o]%8!=0)throw new Error(\"When decoding with predictor, only multiple of 8 bits are supported.\");if(i[o]!==i[0])throw new Error(\"When decoding with predictor, all samples must have the same size.\")}for(var s=i[0]/8,f=2===a?1:i.length,l=0;l<n&&!(l*f*r*s>=e.byteLength);++l){var u=void 0;if(2===t){switch(i[0]){case 8:u=new Uint8Array(e,l*f*r*s,f*r*s);break;case 16:u=new Uint16Array(e,l*f*r*s,f*r*s/2);break;case 32:u=new Uint32Array(e,l*f*r*s,f*r*s/4);break;default:throw new Error(\"Predictor 2 not allowed with \".concat(i[0],\" bits per sample.\"))}y(u,f)}else 3===t&&w(u=new Uint8Array(e,l*f*r*s,f*r*s),f,s)}return e}l.addEventListener(\"message\",function(){var e=t(i.mark((function e(t){var r,n,a,o,f,u;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.data,n=r.id,a=r.fileDirectory,o=r.buffer,e.next=3,s(a);case 3:return f=e.sent,e.next=6,f.decode(a,o);case 6:u=e.sent,l.postMessage({decoded:u,id:n},[u]);case 8:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());var b=function(){function e(){u(this,e)}var r;return h(e,[{key:\"decode\",value:(r=t(i.mark((function e(t,r){var n,a,o,s,f;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.decodeBlock(r);case 2:if(n=e.sent,1===(a=t.Predictor||1)){e.next=9;break}return o=!t.StripOffsets,s=o?t.TileWidth:t.ImageWidth,f=o?t.TileLength:t.RowsPerStrip||t.ImageLength,e.abrupt(\"return\",g(n,a,s,f,t.BitsPerSample,t.PlanarConfiguration));case 9:return e.abrupt(\"return\",n);case 10:case\"end\":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})}]),e}();function k(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}var x=function(e){p(r,b);var t=k(r);function r(){return u(this,r),t.apply(this,arguments)}return h(r,[{key:\"decodeBlock\",value:function(e){return e}}]),r}(),_=Object.freeze({__proto__:null,default:x});function A(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}function P(e,t){for(var r=t.length-1;r>=0;r--)e.push(t[r]);return e}function I(e){for(var t=new Uint16Array(4093),r=new Uint8Array(4093),n=0;n<=257;n++)t[n]=4096,r[n]=n;var i=258,a=9,o=0;function s(){i=258,a=9}function f(e){var t=function(e,t,r){var n=t%8,i=Math.floor(t/8),a=8-n,o=t+r-8*(i+1),s=8*(i+2)-(t+r),f=8*(i+2)-t;if(s=Math.max(0,s),i>=e.length)return console.warn(\"ran off the end of the buffer before finding EOI_CODE (end on input code)\"),257;var l=e[i]&Math.pow(2,8-n)-1,u=l<<=r-a;if(i+1<e.length){var c=e[i+1]>>>s;u+=c<<=Math.max(0,r-f)}if(o>8&&i+2<e.length){var h=8*(i+3)-(t+r);u+=e[i+2]>>>h}return u}(e,o,a);return o+=a,t}function l(e,n){return r[i]=n,t[i]=e,++i-1}function u(e){for(var n=[],i=e;4096!==i;i=t[i])n.push(r[i]);return n}var c=[];s();for(var h,d=new Uint8Array(e),p=f(d);257!==p;){if(256===p){for(s(),p=f(d);256===p;)p=f(d);if(257===p)break;if(p>256)throw new Error(\"corrupted code at scanline \".concat(p));P(c,u(p)),h=p}else if(p<i){var m=u(p);P(c,m),l(h,m[m.length-1]),h=p}else{var v=u(h);if(!v)throw new Error(\"Bogus entry. Not in dictionary, \".concat(h,\" / \").concat(i,\", position: \").concat(o));P(c,v),c.push(v[v.length-1]),l(h,v[v.length-1]),h=p}i+1>=Math.pow(2,a)&&(12===a?h=void 0:a++),p=f(d)}return new Uint8Array(c)}var U=function(e){p(r,b);var t=A(r);function r(){return u(this,r),t.apply(this,arguments)}return h(r,[{key:\"decodeBlock\",value:function(e){return I(e).buffer}}]),r}(),S=Object.freeze({__proto__:null,default:U});function T(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}var D=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]);function E(e,t){for(var r=0,n=[],i=16;i>0&&!e[i-1];)--i;n.push({children:[],index:0});for(var a,o=n[0],s=0;s<i;s++){for(var f=0;f<e[s];f++){for((o=n.pop()).children[o.index]=t[r];o.index>0;)o=n.pop();for(o.index++,n.push(o);n.length<=s;)n.push(a={children:[],index:0}),o.children[o.index]=a.children,o=a;r++}s+1<i&&(n.push(a={children:[],index:0}),o.children[o.index]=a.children,o=a)}return n[0].children}function B(e,t,n,i,a,o,s,f,l){var u=n.mcusPerLine,c=n.progressive,h=t,d=t,p=0,m=0;function v(){if(m>0)return m--,p>>m&1;if(255===(p=e[d++])){var t=e[d++];if(t)throw new Error(\"unexpected marker: \".concat((p<<8|t).toString(16)))}return m=7,p>>>7}function y(e){for(var t,n=e;null!==(t=v());){if(\"number\"==typeof(n=n[t]))return n;if(\"object\"!==r(n))throw new Error(\"invalid huffman sequence\")}return null}function w(e){for(var t=e,r=0;t>0;){var n=v();if(null===n)return;r=r<<1|n,--t}return r}function g(e){var t=w(e);return t>=1<<e-1?t:t+(-1<<e)+1}var b=0;var k,x=0;function _(e,t,r,n,i){var a=r%u,o=(r/u|0)*e.v+n,s=a*e.h+i;t(e,e.blocks[o][s])}function A(e,t,r){var n=r/e.blocksPerLine|0,i=r%e.blocksPerLine;t(e,e.blocks[n][i])}var P,I,U,S,T,E,B=i.length;E=c?0===o?0===f?function(e,t){var r=y(e.huffmanTableDC),n=0===r?0:g(r)<<l;e.pred+=n,t[0]=e.pred}:function(e,t){t[0]|=v()<<l}:0===f?function(e,t){if(b>0)b--;else for(var r=o,n=s;r<=n;){var i=y(e.huffmanTableAC),a=15&i,f=i>>4;if(0===a){if(f<15){b=w(f)+(1<<f)-1;break}r+=16}else t[D[r+=f]]=g(a)*(1<<l),r++}}:function(e,t){for(var r=o,n=s,i=0;r<=n;){var a=D[r],f=t[a]<0?-1:1;switch(x){case 0:var u=y(e.huffmanTableAC),c=15&u;if(i=u>>4,0===c)i<15?(b=w(i)+(1<<i),x=4):(i=16,x=1);else{if(1!==c)throw new Error(\"invalid ACn encoding\");k=g(c),x=i?2:3}continue;case 1:case 2:t[a]?t[a]+=(v()<<l)*f:0==--i&&(x=2===x?3:0);break;case 3:t[a]?t[a]+=(v()<<l)*f:(t[a]=k<<l,x=0);break;case 4:t[a]&&(t[a]+=(v()<<l)*f)}r++}4===x&&0==--b&&(x=0)}:function(e,t){var r=y(e.huffmanTableDC),n=0===r?0:g(r);e.pred+=n,t[0]=e.pred;for(var i=1;i<64;){var a=y(e.huffmanTableAC),o=15&a,s=a>>4;if(0===o){if(s<15)break;i+=16}else t[D[i+=s]]=g(o),i++}};var O,M,C=0;M=1===B?i[0].blocksPerLine*i[0].blocksPerColumn:u*n.mcusPerColumn;for(var L=a||M;C<M;){for(I=0;I<B;I++)i[I].pred=0;if(b=0,1===B)for(P=i[0],T=0;T<L;T++)A(P,E,C),C++;else for(T=0;T<L;T++){for(I=0;I<B;I++){var R=P=i[I],V=R.h,G=R.v;for(U=0;U<G;U++)for(S=0;S<V;S++)_(P,E,C,U,S)}if(++C===M)break}if(m=0,(O=e[d]<<8|e[d+1])<65280)throw new Error(\"marker was not found\");if(!(O>=65488&&O<=65495))break;d+=2}return d-h}function O(e,t){var r=[],n=t.blocksPerLine,i=t.blocksPerColumn,a=n<<3,o=new Int32Array(64),s=new Uint8Array(64);function f(e,r,n){var i,a,o,s,f,l,u,c,h,d,p=t.quantizationTable,m=n;for(d=0;d<64;d++)m[d]=e[d]*p[d];for(d=0;d<8;++d){var v=8*d;0!==m[1+v]||0!==m[2+v]||0!==m[3+v]||0!==m[4+v]||0!==m[5+v]||0!==m[6+v]||0!==m[7+v]?(i=5793*m[0+v]+128>>8,a=5793*m[4+v]+128>>8,o=m[2+v],s=m[6+v],f=2896*(m[1+v]-m[7+v])+128>>8,c=2896*(m[1+v]+m[7+v])+128>>8,l=m[3+v]<<4,h=i-a+1>>1,i=i+a+1>>1,a=h,h=3784*o+1567*s+128>>8,o=1567*o-3784*s+128>>8,s=h,h=f-(u=m[5+v]<<4)+1>>1,f=f+u+1>>1,u=h,h=c+l+1>>1,l=c-l+1>>1,c=h,h=i-s+1>>1,i=i+s+1>>1,s=h,h=a-o+1>>1,a=a+o+1>>1,o=h,h=2276*f+3406*c+2048>>12,f=3406*f-2276*c+2048>>12,c=h,h=799*l+4017*u+2048>>12,l=4017*l-799*u+2048>>12,u=h,m[0+v]=i+c,m[7+v]=i-c,m[1+v]=a+u,m[6+v]=a-u,m[2+v]=o+l,m[5+v]=o-l,m[3+v]=s+f,m[4+v]=s-f):(h=5793*m[0+v]+512>>10,m[0+v]=h,m[1+v]=h,m[2+v]=h,m[3+v]=h,m[4+v]=h,m[5+v]=h,m[6+v]=h,m[7+v]=h)}for(d=0;d<8;++d){var y=d;0!==m[8+y]||0!==m[16+y]||0!==m[24+y]||0!==m[32+y]||0!==m[40+y]||0!==m[48+y]||0!==m[56+y]?(i=5793*m[0+y]+2048>>12,a=5793*m[32+y]+2048>>12,o=m[16+y],s=m[48+y],f=2896*(m[8+y]-m[56+y])+2048>>12,c=2896*(m[8+y]+m[56+y])+2048>>12,l=m[24+y],h=i-a+1>>1,i=i+a+1>>1,a=h,h=3784*o+1567*s+2048>>12,o=1567*o-3784*s+2048>>12,s=h,h=f-(u=m[40+y])+1>>1,f=f+u+1>>1,u=h,h=c+l+1>>1,l=c-l+1>>1,c=h,h=i-s+1>>1,i=i+s+1>>1,s=h,h=a-o+1>>1,a=a+o+1>>1,o=h,h=2276*f+3406*c+2048>>12,f=3406*f-2276*c+2048>>12,c=h,h=799*l+4017*u+2048>>12,l=4017*l-799*u+2048>>12,u=h,m[0+y]=i+c,m[56+y]=i-c,m[8+y]=a+u,m[48+y]=a-u,m[16+y]=o+l,m[40+y]=o-l,m[24+y]=s+f,m[32+y]=s-f):(h=5793*n[d+0]+8192>>14,m[0+y]=h,m[8+y]=h,m[16+y]=h,m[24+y]=h,m[32+y]=h,m[40+y]=h,m[48+y]=h,m[56+y]=h)}for(d=0;d<64;++d){var w=128+(m[d]+8>>4);r[d]=w<0?0:w>255?255:w}}for(var l=0;l<i;l++){for(var u=l<<3,c=0;c<8;c++)r.push(new Uint8Array(a));for(var h=0;h<n;h++){f(t.blocks[l][h],s,o);for(var d=0,p=h<<3,m=0;m<8;m++)for(var v=r[u+m],y=0;y<8;y++)v[p+y]=s[d++]}}return r}var M=function(){function e(){u(this,e),this.jfif=null,this.adobe=null,this.quantizationTables=[],this.huffmanTablesAC=[],this.huffmanTablesDC=[],this.resetFrames()}return h(e,[{key:\"resetFrames\",value:function(){this.frames=[]}},{key:\"parse\",value:function(e){var t=0;function r(){var r=e[t]<<8|e[t+1];return t+=2,r}function n(e){var t,r,n=0,i=0;for(r in e.components)e.components.hasOwnProperty(r)&&(n<(t=e.components[r]).h&&(n=t.h),i<t.v&&(i=t.v));var a=Math.ceil(e.samplesPerLine/8/n),o=Math.ceil(e.scanLines/8/i);for(r in e.components)if(e.components.hasOwnProperty(r)){t=e.components[r];for(var s=Math.ceil(Math.ceil(e.samplesPerLine/8)*t.h/n),f=Math.ceil(Math.ceil(e.scanLines/8)*t.v/i),l=a*t.h,u=o*t.v,c=[],h=0;h<u;h++){for(var d=[],p=0;p<l;p++)d.push(new Int32Array(64));c.push(d)}t.blocksPerLine=s,t.blocksPerColumn=f,t.blocks=c}e.maxH=n,e.maxV=i,e.mcusPerLine=a,e.mcusPerColumn=o}var i,a,o=r();if(65496!==o)throw new Error(\"SOI not found\");for(o=r();65497!==o;){switch(o){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var s=(i=void 0,a=void 0,i=r(),a=e.subarray(t,t+i-2),t+=a.length,a);65504===o&&74===s[0]&&70===s[1]&&73===s[2]&&70===s[3]&&0===s[4]&&(this.jfif={version:{major:s[5],minor:s[6]},densityUnits:s[7],xDensity:s[8]<<8|s[9],yDensity:s[10]<<8|s[11],thumbWidth:s[12],thumbHeight:s[13],thumbData:s.subarray(14,14+3*s[12]*s[13])}),65518===o&&65===s[0]&&100===s[1]&&111===s[2]&&98===s[3]&&101===s[4]&&0===s[5]&&(this.adobe={version:s[6],flags0:s[7]<<8|s[8],flags1:s[9]<<8|s[10],transformCode:s[11]});break;case 65499:for(var f=r()+t-2;t<f;){var l=e[t++],u=new Int32Array(64);if(l>>4==0)for(var c=0;c<64;c++){u[D[c]]=e[t++]}else{if(l>>4!=1)throw new Error(\"DQT: invalid table spec\");for(var h=0;h<64;h++){u[D[h]]=r()}}this.quantizationTables[15&l]=u}break;case 65472:case 65473:case 65474:r();for(var d={extended:65473===o,progressive:65474===o,precision:e[t++],scanLines:r(),samplesPerLine:r(),components:{},componentsOrder:[]},p=e[t++],m=void 0,v=0;v<p;v++){m=e[t];var y=e[t+1]>>4,w=15&e[t+1],g=e[t+2];d.componentsOrder.push(m),d.components[m]={h:y,v:w,quantizationIdx:g},t+=3}n(d),this.frames.push(d);break;case 65476:for(var b=r(),k=2;k<b;){for(var x=e[t++],_=new Uint8Array(16),A=0,P=0;P<16;P++,t++)_[P]=e[t],A+=_[P];for(var I=new Uint8Array(A),U=0;U<A;U++,t++)I[U]=e[t];k+=17+A,x>>4==0?this.huffmanTablesDC[15&x]=E(_,I):this.huffmanTablesAC[15&x]=E(_,I)}break;case 65501:r(),this.resetInterval=r();break;case 65498:r();for(var S=e[t++],T=[],O=this.frames[0],M=0;M<S;M++){var C=O.components[e[t++]],L=e[t++];C.huffmanTableDC=this.huffmanTablesDC[L>>4],C.huffmanTableAC=this.huffmanTablesAC[15&L],T.push(C)}var R=e[t++],V=e[t++],G=e[t++],F=B(e,t,O,T,this.resetInterval,R,V,G>>4,15&G);t+=F;break;case 65535:255!==e[t]&&t--;break;default:if(255===e[t-3]&&e[t-2]>=192&&e[t-2]<=254){t-=3;break}throw new Error(\"unknown JPEG marker \".concat(o.toString(16)))}o=r()}}},{key:\"getResult\",value:function(){var e=this.frames;if(0===this.frames.length)throw new Error(\"no frames were decoded\");this.frames.length>1&&console.warn(\"more than one frame is not supported\");for(var t=0;t<this.frames.length;t++)for(var r=this.frames[t].components,n=0,i=Object.keys(r);n<i.length;n++){var a=i[n];r[a].quantizationTable=this.quantizationTables[r[a].quantizationIdx],delete r[a].quantizationIdx}for(var o=e[0],s=o.components,f=o.componentsOrder,l=[],u=o.samplesPerLine,c=o.scanLines,h=0;h<f.length;h++){var d=s[f[h]];l.push({lines:O(0,d),scaleX:d.h/o.maxH,scaleY:d.v/o.maxV})}for(var p=new Uint8Array(u*c*l.length),m=0,v=0;v<c;++v)for(var y=0;y<u;++y)for(var w=0;w<l.length;++w){var g=l[w];p[m]=g.lines[0|v*g.scaleY][0|y*g.scaleX],++m}return p}}]),e}(),C=function(e){p(r,b);var t=T(r);function r(e){var n;return u(this,r),(n=t.call(this)).reader=new M,e.JPEGTables&&n.reader.parse(e.JPEGTables),n}return h(r,[{key:\"decodeBlock\",value:function(e){return this.reader.resetFrames(),this.reader.parse(new Uint8Array(e)),this.reader.getResult().buffer}}]),r}(),L=Object.freeze({__proto__:null,default:C});function R(e){for(var t=e.length;--t>=0;)e[t]=0}R(new Array(576)),R(new Array(60)),R(new Array(512)),R(new Array(256)),R(new Array(29)),R(new Array(30));var V=function(e,t,r,n){for(var i=65535&e|0,a=e>>>16&65535|0,o=0;0!==r;){r-=o=r>2e3?2e3:r;do{a=a+(i=i+t[n++]|0)|0}while(--o);i%=65521,a%=65521}return i|a<<16|0},G=new Uint32Array(function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}()),F=function(e,t,r,n){var i=G,a=n+r;e^=-1;for(var o=n;o<a;o++)e=e>>>8^i[255&(e^t[o])];return-1^e},z={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"},j={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8},N=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},Z=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if(\"object\"!==r(n))throw new TypeError(n+\"must be non-object\");for(var i in n)N(n,i)&&(e[i]=n[i])}}return e},K=function(e){for(var t=0,r=0,n=e.length;r<n;r++)t+=e[r].length;for(var i=new Uint8Array(t),a=0,o=0,s=e.length;a<s;a++){var f=e[a];i.set(f,o),o+=f.length}return i},H=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){H=!1}for(var Y=new Uint8Array(256),X=0;X<256;X++)Y[X]=X>=252?6:X>=248?5:X>=240?4:X>=224?3:X>=192?2:1;Y[254]=Y[254]=1;var W=function(e){if(\"function\"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);var t,r,n,i,a,o=e.length,s=0;for(i=0;i<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<o&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),s+=r<128?1:r<2048?2:r<65536?3:4;for(t=new Uint8Array(s),a=0,i=0;a<s;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<o&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[a++]=r:r<2048?(t[a++]=192|r>>>6,t[a++]=128|63&r):r<65536?(t[a++]=224|r>>>12,t[a++]=128|r>>>6&63,t[a++]=128|63&r):(t[a++]=240|r>>>18,t[a++]=128|r>>>12&63,t[a++]=128|r>>>6&63,t[a++]=128|63&r);return t},q=function(e,t){var r,n,i=t||e.length;if(\"function\"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,t));var a=new Array(2*i);for(n=0,r=0;r<i;){var o=e[r++];if(o<128)a[n++]=o;else{var s=Y[o];if(s>4)a[n++]=65533,r+=s-1;else{for(o&=2===s?31:3===s?15:7;s>1&&r<i;)o=o<<6|63&e[r++],s--;s>1?a[n++]=65533:o<65536?a[n++]=o:(o-=65536,a[n++]=55296|o>>10&1023,a[n++]=56320|1023&o)}}}return function(e,t){if(t<65534&&e.subarray&&H)return String.fromCharCode.apply(null,e.length===t?e:e.subarray(0,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}(a,n)},J=function(e,t){(t=t||e.length)>e.length&&(t=e.length);for(var r=t-1;r>=0&&128==(192&e[r]);)r--;return r<0||0===r?t:r+Y[e[r]]>t?r:t};var Q=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0},$=function(e,t){var r,n,i,a,o,s,f,l,u,c,h,d,p,m,v,y,w,g,b,k,x,_,A,P,I=e.state;r=e.next_in,A=e.input,n=r+(e.avail_in-5),i=e.next_out,P=e.output,a=i-(t-e.avail_out),o=i+(e.avail_out-257),s=I.dmax,f=I.wsize,l=I.whave,u=I.wnext,c=I.window,h=I.hold,d=I.bits,p=I.lencode,m=I.distcode,v=(1<<I.lenbits)-1,y=(1<<I.distbits)-1;e:do{d<15&&(h+=A[r++]<<d,d+=8,h+=A[r++]<<d,d+=8),w=p[h&v];t:for(;;){if(h>>>=g=w>>>24,d-=g,0===(g=w>>>16&255))P[i++]=65535&w;else{if(!(16&g)){if(0==(64&g)){w=p[(65535&w)+(h&(1<<g)-1)];continue t}if(32&g){I.mode=12;break e}e.msg=\"invalid literal/length code\",I.mode=30;break e}b=65535&w,(g&=15)&&(d<g&&(h+=A[r++]<<d,d+=8),b+=h&(1<<g)-1,h>>>=g,d-=g),d<15&&(h+=A[r++]<<d,d+=8,h+=A[r++]<<d,d+=8),w=m[h&y];r:for(;;){if(h>>>=g=w>>>24,d-=g,!(16&(g=w>>>16&255))){if(0==(64&g)){w=m[(65535&w)+(h&(1<<g)-1)];continue r}e.msg=\"invalid distance code\",I.mode=30;break e}if(k=65535&w,d<(g&=15)&&(h+=A[r++]<<d,(d+=8)<g&&(h+=A[r++]<<d,d+=8)),(k+=h&(1<<g)-1)>s){e.msg=\"invalid distance too far back\",I.mode=30;break e}if(h>>>=g,d-=g,k>(g=i-a)){if((g=k-g)>l&&I.sane){e.msg=\"invalid distance too far back\",I.mode=30;break e}if(x=0,_=c,0===u){if(x+=f-g,g<b){b-=g;do{P[i++]=c[x++]}while(--g);x=i-k,_=P}}else if(u<g){if(x+=f+u-g,(g-=u)<b){b-=g;do{P[i++]=c[x++]}while(--g);if(x=0,u<b){b-=g=u;do{P[i++]=c[x++]}while(--g);x=i-k,_=P}}}else if(x+=u-g,g<b){b-=g;do{P[i++]=c[x++]}while(--g);x=i-k,_=P}for(;b>2;)P[i++]=_[x++],P[i++]=_[x++],P[i++]=_[x++],b-=3;b&&(P[i++]=_[x++],b>1&&(P[i++]=_[x++]))}else{x=i-k;do{P[i++]=P[x++],P[i++]=P[x++],P[i++]=P[x++],b-=3}while(b>2);b&&(P[i++]=P[x++],b>1&&(P[i++]=P[x++]))}break}}break}}while(r<n&&i<o);r-=b=d>>3,h&=(1<<(d-=b<<3))-1,e.next_in=r,e.next_out=i,e.avail_in=r<n?n-r+5:5-(r-n),e.avail_out=i<o?o-i+257:257-(i-o),I.hold=h,I.bits=d},ee=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),te=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),re=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ne=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),ie=function(e,t,r,n,i,a,o,s){var f,l,u,c,h,d,p,m,v,y=s.bits,w=0,g=0,b=0,k=0,x=0,_=0,A=0,P=0,I=0,U=0,S=null,T=0,D=new Uint16Array(16),E=new Uint16Array(16),B=null,O=0;for(w=0;w<=15;w++)D[w]=0;for(g=0;g<n;g++)D[t[r+g]]++;for(x=y,k=15;k>=1&&0===D[k];k--);if(x>k&&(x=k),0===k)return i[a++]=20971520,i[a++]=20971520,s.bits=1,0;for(b=1;b<k&&0===D[b];b++);for(x<b&&(x=b),P=1,w=1;w<=15;w++)if(P<<=1,(P-=D[w])<0)return-1;if(P>0&&(0===e||1!==k))return-1;for(E[1]=0,w=1;w<15;w++)E[w+1]=E[w]+D[w];for(g=0;g<n;g++)0!==t[r+g]&&(o[E[t[r+g]]++]=g);if(0===e?(S=B=o,d=19):1===e?(S=ee,T-=257,B=te,O-=257,d=256):(S=re,B=ne,d=-1),U=0,g=0,w=b,h=a,_=x,A=0,u=-1,c=(I=1<<x)-1,1===e&&I>852||2===e&&I>592)return 1;for(;;){p=w-A,o[g]<d?(m=0,v=o[g]):o[g]>d?(m=B[O+o[g]],v=S[T+o[g]]):(m=96,v=0),f=1<<w-A,b=l=1<<_;do{i[h+(U>>A)+(l-=f)]=p<<24|m<<16|v|0}while(0!==l);for(f=1<<w-1;U&f;)f>>=1;if(0!==f?(U&=f-1,U+=f):U=0,g++,0==--D[w]){if(w===k)break;w=t[r+o[g]]}if(w>x&&(U&c)!==u){for(0===A&&(A=x),h+=b,P=1<<(_=w-A);_+A<k&&!((P-=D[_+A])<=0);)_++,P<<=1;if(I+=1<<_,1===e&&I>852||2===e&&I>592)return 1;i[u=U&c]=x<<24|_<<16|h-a|0}}return 0!==U&&(i[h+U]=w-A<<24|64<<16|0),s.bits=x,0},ae=j.Z_FINISH,oe=j.Z_BLOCK,se=j.Z_TREES,fe=j.Z_OK,le=j.Z_STREAM_END,ue=j.Z_NEED_DICT,ce=j.Z_STREAM_ERROR,he=j.Z_DATA_ERROR,de=j.Z_MEM_ERROR,pe=j.Z_BUF_ERROR,me=j.Z_DEFLATED,ve=function(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)};function ye(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}var we,ge,be=function(e){if(!e||!e.state)return ce;var t=e.state;return e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,fe},ke=function(e){if(!e||!e.state)return ce;var t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,be(e)},xe=function(e,t){var r;if(!e||!e.state)return ce;var n=e.state;return t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?ce:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,ke(e))},_e=function(e,t){if(!e)return ce;var r=new ye;e.state=r,r.window=null;var n=xe(e,t);return n!==fe&&(e.state=null),n},Ae=!0,Pe=function(e){if(Ae){we=new Int32Array(512),ge=new Int32Array(32);for(var t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(ie(1,e.lens,0,288,we,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;ie(2,e.lens,0,32,ge,0,e.work,{bits:5}),Ae=!1}e.lencode=we,e.lenbits=9,e.distcode=ge,e.distbits=5},Ie=function(e,t,r,n){var i,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new Uint8Array(a.wsize)),n>=a.wsize?(a.window.set(t.subarray(r-a.wsize,r),0),a.wnext=0,a.whave=a.wsize):((i=a.wsize-a.wnext)>n&&(i=n),a.window.set(t.subarray(r-n,r-n+i),a.wnext),(n-=i)?(a.window.set(t.subarray(r-n,r),0),a.wnext=n,a.whave=a.wsize):(a.wnext+=i,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=i))),0},Ue={inflateReset:ke,inflateReset2:xe,inflateResetKeep:be,inflateInit:function(e){return _e(e,15)},inflateInit2:_e,inflate:function(e,t){var r,n,i,a,o,s,f,l,u,c,h,d,p,m,v,y,w,g,b,k,x,_,A,P,I=0,U=new Uint8Array(4),S=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return ce;12===(r=e.state).mode&&(r.mode=13),o=e.next_out,i=e.output,f=e.avail_out,a=e.next_in,n=e.input,s=e.avail_in,l=r.hold,u=r.bits,c=s,h=f,_=fe;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;u<16;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(2&r.wrap&&35615===l){r.check=0,U[0]=255&l,U[1]=l>>>8&255,r.check=F(r.check,U,2,0),l=0,u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&l)<<8)+(l>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if((15&l)!==me){e.msg=\"unknown compression method\",r.mode=30;break}if(u-=4,x=8+(15&(l>>>=4)),0===r.wbits)r.wbits=x;else if(x>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<r.wbits,e.adler=r.check=1,r.mode=512&l?10:12,l=0,u=0;break;case 2:for(;u<16;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(r.flags=l,(255&r.flags)!==me){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=l>>8&1),512&r.flags&&(U[0]=255&l,U[1]=l>>>8&255,r.check=F(r.check,U,2,0)),l=0,u=0,r.mode=3;case 3:for(;u<32;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}r.head&&(r.head.time=l),512&r.flags&&(U[0]=255&l,U[1]=l>>>8&255,U[2]=l>>>16&255,U[3]=l>>>24&255,r.check=F(r.check,U,4,0)),l=0,u=0,r.mode=4;case 4:for(;u<16;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}r.head&&(r.head.xflags=255&l,r.head.os=l>>8),512&r.flags&&(U[0]=255&l,U[1]=l>>>8&255,r.check=F(r.check,U,2,0)),l=0,u=0,r.mode=5;case 5:if(1024&r.flags){for(;u<16;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}r.length=l,r.head&&(r.head.extra_len=l),512&r.flags&&(U[0]=255&l,U[1]=l>>>8&255,r.check=F(r.check,U,2,0)),l=0,u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((d=r.length)>s&&(d=s),d&&(r.head&&(x=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Uint8Array(r.head.extra_len)),r.head.extra.set(n.subarray(a,a+d),x)),512&r.flags&&(r.check=F(r.check,n,d,a)),s-=d,a+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===s)break e;d=0;do{x=n[a+d++],r.head&&x&&r.length<65536&&(r.head.name+=String.fromCharCode(x))}while(x&&d<s);if(512&r.flags&&(r.check=F(r.check,n,d,a)),s-=d,a+=d,x)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===s)break e;d=0;do{x=n[a+d++],r.head&&x&&r.length<65536&&(r.head.comment+=String.fromCharCode(x))}while(x&&d<s);if(512&r.flags&&(r.check=F(r.check,n,d,a)),s-=d,a+=d,x)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;u<16;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(l!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}l=0,u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;u<32;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}e.adler=r.check=ve(l),l=0,u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,ue;e.adler=r.check=1,r.mode=12;case 12:if(t===oe||t===se)break e;case 13:if(r.last){l>>>=7&u,u-=7&u,r.mode=27;break}for(;u<3;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}switch(r.last=1&l,u-=1,3&(l>>>=1)){case 0:r.mode=14;break;case 1:if(Pe(r),r.mode=20,t===se){l>>>=2,u-=2;break e}break;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}l>>>=2,u-=2;break;case 14:for(l>>>=7&u,u-=7&u;u<32;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if((65535&l)!=(l>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&l,l=0,u=0,r.mode=15,t===se)break e;case 15:r.mode=16;case 16:if(d=r.length){if(d>s&&(d=s),d>f&&(d=f),0===d)break e;i.set(n.subarray(a,a+d),o),s-=d,a+=d,f-=d,o+=d,r.length-=d;break}r.mode=12;break;case 17:for(;u<14;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(r.nlen=257+(31&l),l>>>=5,u-=5,r.ndist=1+(31&l),l>>>=5,u-=5,r.ncode=4+(15&l),l>>>=4,u-=4,r.nlen>286||r.ndist>30){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;u<3;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}r.lens[S[r.have++]]=7&l,l>>>=3,u-=3}for(;r.have<19;)r.lens[S[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,A={bits:r.lenbits},_=ie(0,r.lens,0,19,r.lencode,0,r.work,A),r.lenbits=A.bits,_){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;y=(I=r.lencode[l&(1<<r.lenbits)-1])>>>16&255,w=65535&I,!((v=I>>>24)<=u);){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(w<16)l>>>=v,u-=v,r.lens[r.have++]=w;else{if(16===w){for(P=v+2;u<P;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(l>>>=v,u-=v,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}x=r.lens[r.have-1],d=3+(3&l),l>>>=2,u-=2}else if(17===w){for(P=v+3;u<P;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}u-=v,x=0,d=3+(7&(l>>>=v)),l>>>=3,u-=3}else{for(P=v+7;u<P;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}u-=v,x=0,d=11+(127&(l>>>=v)),l>>>=7,u-=7}if(r.have+d>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;d--;)r.lens[r.have++]=x}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,A={bits:r.lenbits},_=ie(1,r.lens,0,r.nlen,r.lencode,0,r.work,A),r.lenbits=A.bits,_){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,A={bits:r.distbits},_=ie(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,A),r.distbits=A.bits,_){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,t===se)break e;case 20:r.mode=21;case 21:if(s>=6&&f>=258){e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,$(e,h),o=e.next_out,i=e.output,f=e.avail_out,a=e.next_in,n=e.input,s=e.avail_in,l=r.hold,u=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;y=(I=r.lencode[l&(1<<r.lenbits)-1])>>>16&255,w=65535&I,!((v=I>>>24)<=u);){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(y&&0==(240&y)){for(g=v,b=y,k=w;y=(I=r.lencode[k+((l&(1<<g+b)-1)>>g)])>>>16&255,w=65535&I,!(g+(v=I>>>24)<=u);){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}l>>>=g,u-=g,r.back+=g}if(l>>>=v,u-=v,r.back+=v,r.length=w,0===y){r.mode=26;break}if(32&y){r.back=-1,r.mode=12;break}if(64&y){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&y,r.mode=22;case 22:if(r.extra){for(P=r.extra;u<P;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;y=(I=r.distcode[l&(1<<r.distbits)-1])>>>16&255,w=65535&I,!((v=I>>>24)<=u);){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(0==(240&y)){for(g=v,b=y,k=w;y=(I=r.distcode[k+((l&(1<<g+b)-1)>>g)])>>>16&255,w=65535&I,!(g+(v=I>>>24)<=u);){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}l>>>=g,u-=g,r.back+=g}if(l>>>=v,u-=v,r.back+=v,64&y){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=w,r.extra=15&y,r.mode=24;case 24:if(r.extra){for(P=r.extra;u<P;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===f)break e;if(d=h-f,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}d>r.wnext?(d-=r.wnext,p=r.wsize-d):p=r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=o-r.offset,d=r.length;d>f&&(d=f),f-=d,r.length-=d;do{i[o++]=m[p++]}while(--d);0===r.length&&(r.mode=21);break;case 26:if(0===f)break e;i[o++]=r.length,f--,r.mode=21;break;case 27:if(r.wrap){for(;u<32;){if(0===s)break e;s--,l|=n[a++]<<u,u+=8}if(h-=f,e.total_out+=h,r.total+=h,h&&(e.adler=r.check=r.flags?F(r.check,i,h,o-h):V(r.check,i,h,o-h)),h=f,(r.flags?l:ve(l))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}l=0,u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;u<32;){if(0===s)break e;s--,l+=n[a++]<<u,u+=8}if(l!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}l=0,u=0}r.mode=29;case 29:_=le;break e;case 30:_=he;break e;case 31:return de;default:return ce}return e.next_out=o,e.avail_out=f,e.next_in=a,e.avail_in=s,r.hold=l,r.bits=u,(r.wsize||h!==e.avail_out&&r.mode<30&&(r.mode<27||t!==ae))&&Ie(e,e.output,e.next_out,h-e.avail_out),c-=e.avail_in,h-=e.avail_out,e.total_in+=c,e.total_out+=h,r.total+=h,r.wrap&&h&&(e.adler=r.check=r.flags?F(r.check,i,h,e.next_out-h):V(r.check,i,h,e.next_out-h)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0===c&&0===h||t===ae)&&_===fe&&(_=pe),_},inflateEnd:function(e){if(!e||!e.state)return ce;var t=e.state;return t.window&&(t.window=null),e.state=null,fe},inflateGetHeader:function(e,t){if(!e||!e.state)return ce;var r=e.state;return 0==(2&r.wrap)?ce:(r.head=t,t.done=!1,fe)},inflateSetDictionary:function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?ce:11===r.mode&&V(1,t,n,0)!==r.check?he:Ie(e,t,n,n)?(r.mode=31,de):(r.havedict=1,fe):ce},inflateInfo:\"pako inflate (from Nodeca project)\"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1},Te=Object.prototype.toString,De=j.Z_NO_FLUSH,Ee=j.Z_FINISH,Be=j.Z_OK,Oe=j.Z_STREAM_END,Me=j.Z_NEED_DICT,Ce=j.Z_STREAM_ERROR,Le=j.Z_DATA_ERROR,Re=j.Z_MEM_ERROR;function Ve(e){this.options=Z({chunkSize:65536,windowBits:15,to:\"\"},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Q,this.strm.avail_out=0;var r=Ue.inflateInit2(this.strm,t.windowBits);if(r!==Be)throw new Error(z[r]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),t.dictionary&&(\"string\"==typeof t.dictionary?t.dictionary=W(t.dictionary):\"[object ArrayBuffer]\"===Te.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(r=Ue.inflateSetDictionary(this.strm,t.dictionary))!==Be))throw new Error(z[r])}function Ge(e,t){var r=new Ve(t);if(r.push(e),r.err)throw r.msg||z[r.err];return r.result}Ve.prototype.push=function(e,t){var r,n,i,a=this.strm,o=this.options.chunkSize,s=this.options.dictionary;if(this.ended)return!1;for(n=t===~~t?t:!0===t?Ee:De,\"[object ArrayBuffer]\"===Te.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(o),a.next_out=0,a.avail_out=o),(r=Ue.inflate(a,n))===Me&&s&&((r=Ue.inflateSetDictionary(a,s))===Be?r=Ue.inflate(a,n):r===Le&&(r=Me));a.avail_in>0&&r===Oe&&a.state.wrap>0&&0!==e[a.next_in];)Ue.inflateReset(a),r=Ue.inflate(a,n);switch(r){case Ce:case Le:case Me:case Re:return this.onEnd(r),this.ended=!0,!1}if(i=a.avail_out,a.next_out&&(0===a.avail_out||r===Oe))if(\"string\"===this.options.to){var f=J(a.output,a.next_out),l=a.next_out-f,u=q(a.output,f);a.next_out=l,a.avail_out=o-l,l&&a.output.set(a.output.subarray(f,f+l),0),this.onData(u)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(r!==Be||0!==i){if(r===Oe)return r=Ue.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},Ve.prototype.onData=function(e){this.chunks.push(e)},Ve.prototype.onEnd=function(e){e===Be&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=K(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var Fe={Inflate:Ve,inflate:Ge,inflateRaw:function(e,t){return(t=t||{}).raw=!0,Ge(e,t)},ungzip:Ge,constants:j}.inflate;function ze(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}var je=function(e){p(r,b);var t=ze(r);function r(){return u(this,r),t.apply(this,arguments)}return h(r,[{key:\"decodeBlock\",value:function(e){return Fe(new Uint8Array(e)).buffer}}]),r}(),Ne=Object.freeze({__proto__:null,default:je});function Ze(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}var Ke,He=function(e){p(r,b);var t=Ze(r);function r(){return u(this,r),t.apply(this,arguments)}return h(r,[{key:\"decodeBlock\",value:function(e){for(var t=new DataView(e),r=[],n=0;n<e.byteLength;++n){var i=t.getInt8(n);if(i<0){var a=t.getUint8(n+1);i=-i;for(var o=0;o<=i;++o)r.push(a);n+=1}else{for(var s=0;s<=i;++s)r.push(t.getUint8(n+s+1));n+=i+1}}return new Uint8Array(r).buffer}}]),r}(),Ye=Object.freeze({__proto__:null,default:He}),Xe={exports:{}};Ke=Xe,\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\nfunction(){var e,t,r,n,i,a,o,s,f,l,u,c,h,d,p,m,v=(e={defaultNoDataValue:-34027999387901484e22,decode:function(a,o){var s=(o=o||{}).encodedMaskData||null===o.encodedMaskData,f=i(a,o.inputOffset||0,s),l=null!==o.noDataValue?o.noDataValue:e.defaultNoDataValue,u=t(f,o.pixelType||Float32Array,o.encodedMaskData,l,o.returnMask),c={width:f.width,height:f.height,pixelData:u.resultPixels,minValue:u.minValue,maxValue:f.pixels.maxValue,noDataValue:l};return u.resultMask&&(c.maskData=u.resultMask),o.returnEncodedMask&&f.mask&&(c.encodedMaskData=f.mask.bitset?f.mask.bitset:null),o.returnFileInfo&&(c.fileInfo=r(f),o.computeUsedBitDepths&&(c.fileInfo.bitDepths=n(f))),c}},t=function(e,t,r,n,i){var o,s,f,l=0,u=e.pixels.numBlocksX,c=e.pixels.numBlocksY,h=Math.floor(e.width/u),d=Math.floor(e.height/c),p=2*e.maxZError,m=Number.MAX_VALUE;r=r||(e.mask?e.mask.bitset:null),s=new t(e.width*e.height),i&&r&&(f=new Uint8Array(e.width*e.height));for(var v,y,w=new Float32Array(h*d),g=0;g<=c;g++){var b=g!==c?d:e.height%c;if(0!==b)for(var k=0;k<=u;k++){var x=k!==u?h:e.width%u;if(0!==x){var _,A,P,I,U=g*e.width*d+k*h,S=e.width-x,T=e.pixels.blocks[l];if(T.encoding<2?(0===T.encoding?_=T.rawData:(a(T.stuffedData,T.bitsPerPixel,T.numValidPixels,T.offset,p,w,e.pixels.maxValue),_=w),A=0):P=2===T.encoding?0:T.offset,r)for(y=0;y<b;y++){for(7&U&&(I=r[U>>3],I<<=7&U),v=0;v<x;v++)7&U||(I=r[U>>3]),128&I?(f&&(f[U]=1),m=m>(o=T.encoding<2?_[A++]:P)?o:m,s[U++]=o):(f&&(f[U]=0),s[U++]=n),I<<=1;U+=S}else if(T.encoding<2)for(y=0;y<b;y++){for(v=0;v<x;v++)m=m>(o=_[A++])?o:m,s[U++]=o;U+=S}else for(m=m>P?P:m,y=0;y<b;y++){for(v=0;v<x;v++)s[U++]=P;U+=S}if(1===T.encoding&&A!==T.numValidPixels)throw\"Block and Mask do not match\";l++}}}return{resultPixels:s,resultMask:f,minValue:m}},r=function(e){return{fileIdentifierString:e.fileIdentifierString,fileVersion:e.fileVersion,imageType:e.imageType,height:e.height,width:e.width,maxZError:e.maxZError,eofOffset:e.eofOffset,mask:e.mask?{numBlocksX:e.mask.numBlocksX,numBlocksY:e.mask.numBlocksY,numBytes:e.mask.numBytes,maxValue:e.mask.maxValue}:null,pixels:{numBlocksX:e.pixels.numBlocksX,numBlocksY:e.pixels.numBlocksY,numBytes:e.pixels.numBytes,maxValue:e.pixels.maxValue,noDataValue:e.noDataValue}}},n=function(e){for(var t=e.pixels.numBlocksX*e.pixels.numBlocksY,r={},n=0;n<t;n++){var i=e.pixels.blocks[n];0===i.encoding?r.float32=!0:1===i.encoding?r[i.bitsPerPixel]=!0:r[0]=!0}return Object.keys(r)},i=function(e,t,r){var n={},i=new Uint8Array(e,t,10);if(n.fileIdentifierString=String.fromCharCode.apply(null,i),\"CntZImage\"!==n.fileIdentifierString.trim())throw\"Unexpected file identifier string: \"+n.fileIdentifierString;t+=10;var a=new DataView(e,t,24);if(n.fileVersion=a.getInt32(0,!0),n.imageType=a.getInt32(4,!0),n.height=a.getUint32(8,!0),n.width=a.getUint32(12,!0),n.maxZError=a.getFloat64(16,!0),t+=24,!r)if(a=new DataView(e,t,16),n.mask={},n.mask.numBlocksY=a.getUint32(0,!0),n.mask.numBlocksX=a.getUint32(4,!0),n.mask.numBytes=a.getUint32(8,!0),n.mask.maxValue=a.getFloat32(12,!0),t+=16,n.mask.numBytes>0){var o=new Uint8Array(Math.ceil(n.width*n.height/8)),s=(a=new DataView(e,t,n.mask.numBytes)).getInt16(0,!0),f=2,l=0;do{if(s>0)for(;s--;)o[l++]=a.getUint8(f++);else{var u=a.getUint8(f++);for(s=-s;s--;)o[l++]=u}s=a.getInt16(f,!0),f+=2}while(f<n.mask.numBytes);if(-32768!==s||l<o.length)throw\"Unexpected end of mask RLE encoding\";n.mask.bitset=o,t+=n.mask.numBytes}else 0==(n.mask.numBytes|n.mask.numBlocksY|n.mask.maxValue)&&(n.mask.bitset=new Uint8Array(Math.ceil(n.width*n.height/8)));a=new DataView(e,t,16),n.pixels={},n.pixels.numBlocksY=a.getUint32(0,!0),n.pixels.numBlocksX=a.getUint32(4,!0),n.pixels.numBytes=a.getUint32(8,!0),n.pixels.maxValue=a.getFloat32(12,!0),t+=16;var c=n.pixels.numBlocksX,h=n.pixels.numBlocksY,d=c+(n.width%c>0?1:0),p=h+(n.height%h>0?1:0);n.pixels.blocks=new Array(d*p);for(var m=0,v=0;v<p;v++)for(var y=0;y<d;y++){var w=0,g=e.byteLength-t;a=new DataView(e,t,Math.min(10,g));var b={};n.pixels.blocks[m++]=b;var k=a.getUint8(0);if(w++,b.encoding=63&k,b.encoding>3)throw\"Invalid block encoding (\"+b.encoding+\")\";if(2!==b.encoding){if(0!==k&&2!==k){if(k>>=6,b.offsetType=k,2===k)b.offset=a.getInt8(1),w++;else if(1===k)b.offset=a.getInt16(1,!0),w+=2;else{if(0!==k)throw\"Invalid block offset type\";b.offset=a.getFloat32(1,!0),w+=4}if(1===b.encoding)if(k=a.getUint8(w),w++,b.bitsPerPixel=63&k,k>>=6,b.numValidPixelsType=k,2===k)b.numValidPixels=a.getUint8(w),w++;else if(1===k)b.numValidPixels=a.getUint16(w,!0),w+=2;else{if(0!==k)throw\"Invalid valid pixel count type\";b.numValidPixels=a.getUint32(w,!0),w+=4}}var x;if(t+=w,3!==b.encoding)if(0===b.encoding){var _=(n.pixels.numBytes-1)/4;if(_!==Math.floor(_))throw\"uncompressed block has invalid length\";x=new ArrayBuffer(4*_),new Uint8Array(x).set(new Uint8Array(e,t,4*_));var A=new Float32Array(x);b.rawData=A,t+=4*_}else if(1===b.encoding){var P=Math.ceil(b.numValidPixels*b.bitsPerPixel/8),I=Math.ceil(P/4);x=new ArrayBuffer(4*I),new Uint8Array(x).set(new Uint8Array(e,t,P)),b.stuffedData=new Uint32Array(x),t+=P}}else t++}return n.eofOffset=t,n},a=function(e,t,r,n,i,a,o){var s,f,l,u=(1<<t)-1,c=0,h=0,d=Math.ceil((o-n)/i),p=4*e.length-Math.ceil(t*r/8);for(e[e.length-1]<<=8*p,s=0;s<r;s++){if(0===h&&(l=e[c++],h=32),h>=t)f=l>>>h-t&u,h-=t;else{var m=t-h;f=(l&u)<<m&u,f+=(l=e[c++])>>>(h=32-m)}a[s]=f<d?n+f*i:o}return a},e),y=(o=function(e,t,r,n,i,a,o,s){var f,l,u,c,h,d=(1<<r)-1,p=0,m=0,v=4*e.length-Math.ceil(r*n/8);if(e[e.length-1]<<=8*v,i)for(f=0;f<n;f++)0===m&&(u=e[p++],m=32),m>=r?(l=u>>>m-r&d,m-=r):(l=(u&d)<<(c=r-m)&d,l+=(u=e[p++])>>>(m=32-c)),t[f]=i[l];else for(h=Math.ceil((s-a)/o),f=0;f<n;f++)0===m&&(u=e[p++],m=32),m>=r?(l=u>>>m-r&d,m-=r):(l=(u&d)<<(c=r-m)&d,l+=(u=e[p++])>>>(m=32-c)),t[f]=l<h?a+l*o:s},s=function(e,t,r,n,i,a){var o,s=(1<<t)-1,f=0,l=0,u=0,c=0,h=0,d=[],p=4*e.length-Math.ceil(t*r/8);e[e.length-1]<<=8*p;var m=Math.ceil((a-n)/i);for(l=0;l<r;l++)0===c&&(o=e[f++],c=32),c>=t?(h=o>>>c-t&s,c-=t):(h=(o&s)<<(u=t-c)&s,h+=(o=e[f++])>>>(c=32-u)),d[l]=h<m?n+h*i:a;return d.unshift(n),d},f=function(e,t,r,n,i,a,o,s){var f,l,u,c,h=(1<<r)-1,d=0,p=0,m=0;if(i)for(f=0;f<n;f++)0===p&&(u=e[d++],p=32,m=0),p>=r?(l=u>>>m&h,p-=r,m+=r):(l=u>>>m&h,p=32-(c=r-p),l|=((u=e[d++])&(1<<c)-1)<<r-c,m=c),t[f]=i[l];else{var v=Math.ceil((s-a)/o);for(f=0;f<n;f++)0===p&&(u=e[d++],p=32,m=0),p>=r?(l=u>>>m&h,p-=r,m+=r):(l=u>>>m&h,p=32-(c=r-p),l|=((u=e[d++])&(1<<c)-1)<<r-c,m=c),t[f]=l<v?a+l*o:s}return t},l=function(e,t,r,n,i,a){var o,s=(1<<t)-1,f=0,l=0,u=0,c=0,h=0,d=0,p=[],m=Math.ceil((a-n)/i);for(l=0;l<r;l++)0===c&&(o=e[f++],c=32,d=0),c>=t?(h=o>>>d&s,c-=t,d+=t):(h=o>>>d&s,c=32-(u=t-c),h|=((o=e[f++])&(1<<u)-1)<<t-u,d=u),p[l]=h<m?n+h*i:a;return p.unshift(n),p},u=function(e,t,r,n){var i,a,o,s,f=(1<<r)-1,l=0,u=0,c=4*e.length-Math.ceil(r*n/8);for(e[e.length-1]<<=8*c,i=0;i<n;i++)0===u&&(o=e[l++],u=32),u>=r?(a=o>>>u-r&f,u-=r):(a=(o&f)<<(s=r-u)&f,a+=(o=e[l++])>>>(u=32-s)),t[i]=a;return t},c=function(e,t,r,n){var i,a,o,s,f=(1<<r)-1,l=0,u=0,c=0;for(i=0;i<n;i++)0===u&&(o=e[l++],u=32,c=0),u>=r?(a=o>>>c&f,u-=r,c+=r):(a=o>>>c&f,u=32-(s=r-u),a|=((o=e[l++])&(1<<s)-1)<<r-s,c=s),t[i]=a;return t},h={HUFFMAN_LUT_BITS_MAX:12,computeChecksumFletcher32:function(e){for(var t=65535,r=65535,n=e.length,i=Math.floor(n/2),a=0;i;){var o=i>=359?359:i;i-=o;do{t+=e[a++]<<8,r+=t+=e[a++]}while(--o);t=(65535&t)+(t>>>16),r=(65535&r)+(r>>>16)}return 1&n&&(r+=t+=e[a]<<8),((r=(65535&r)+(r>>>16))<<16|(t=(65535&t)+(t>>>16)))>>>0},readHeaderInfo:function(e,t){var r=t.ptr,n=new Uint8Array(e,r,6),i={};if(i.fileIdentifierString=String.fromCharCode.apply(null,n),0!==i.fileIdentifierString.lastIndexOf(\"Lerc2\",0))throw\"Unexpected file identifier string (expect Lerc2 ): \"+i.fileIdentifierString;r+=6;var a,o=new DataView(e,r,8),s=o.getInt32(0,!0);if(i.fileVersion=s,r+=4,s>=3&&(i.checksum=o.getUint32(4,!0),r+=4),o=new DataView(e,r,12),i.height=o.getUint32(0,!0),i.width=o.getUint32(4,!0),r+=8,s>=4?(i.numDims=o.getUint32(8,!0),r+=4):i.numDims=1,o=new DataView(e,r,40),i.numValidPixel=o.getUint32(0,!0),i.microBlockSize=o.getInt32(4,!0),i.blobSize=o.getInt32(8,!0),i.imageType=o.getInt32(12,!0),i.maxZError=o.getFloat64(16,!0),i.zMin=o.getFloat64(24,!0),i.zMax=o.getFloat64(32,!0),r+=40,t.headerInfo=i,t.ptr=r,s>=3&&(a=s>=4?52:48,this.computeChecksumFletcher32(new Uint8Array(e,r-a,i.blobSize-14))!==i.checksum))throw\"Checksum failed.\";return!0},checkMinMaxRanges:function(e,t){var r=t.headerInfo,n=this.getDataTypeArray(r.imageType),i=r.numDims*this.getDataTypeSize(r.imageType),a=this.readSubArray(e,t.ptr,n,i),o=this.readSubArray(e,t.ptr+i,n,i);t.ptr+=2*i;var s,f=!0;for(s=0;s<r.numDims;s++)if(a[s]!==o[s]){f=!1;break}return r.minValues=a,r.maxValues=o,f},readSubArray:function(e,t,r,n){var i;if(r===Uint8Array)i=new Uint8Array(e,t,n);else{var a=new ArrayBuffer(n);new Uint8Array(a).set(new Uint8Array(e,t,n)),i=new r(a)}return i},readMask:function(e,t){var r,n,i=t.ptr,a=t.headerInfo,o=a.width*a.height,s=a.numValidPixel,f=new DataView(e,i,4),l={};if(l.numBytes=f.getUint32(0,!0),i+=4,(0===s||o===s)&&0!==l.numBytes)throw\"invalid mask\";if(0===s)r=new Uint8Array(Math.ceil(o/8)),l.bitset=r,n=new Uint8Array(o),t.pixels.resultMask=n,i+=l.numBytes;else if(l.numBytes>0){r=new Uint8Array(Math.ceil(o/8));var u=(f=new DataView(e,i,l.numBytes)).getInt16(0,!0),c=2,h=0,d=0;do{if(u>0)for(;u--;)r[h++]=f.getUint8(c++);else for(d=f.getUint8(c++),u=-u;u--;)r[h++]=d;u=f.getInt16(c,!0),c+=2}while(c<l.numBytes);if(-32768!==u||h<r.length)throw\"Unexpected end of mask RLE encoding\";n=new Uint8Array(o);var p=0,m=0;for(m=0;m<o;m++)7&m?(p=r[m>>3],p<<=7&m):p=r[m>>3],128&p&&(n[m]=1);t.pixels.resultMask=n,l.bitset=r,i+=l.numBytes}return t.ptr=i,t.mask=l,!0},readDataOneSweep:function(e,t,r,n){var i,a=t.ptr,o=t.headerInfo,s=o.numDims,f=o.width*o.height,l=o.imageType,u=o.numValidPixel*h.getDataTypeSize(l)*s,c=t.pixels.resultMask;if(r===Uint8Array)i=new Uint8Array(e,a,u);else{var d=new ArrayBuffer(u);new Uint8Array(d).set(new Uint8Array(e,a,u)),i=new r(d)}if(i.length===f*s)t.pixels.resultPixels=n?h.swapDimensionOrder(i,f,s,r,!0):i;else{t.pixels.resultPixels=new r(f*s);var p=0,m=0,v=0,y=0;if(s>1){if(n){for(m=0;m<f;m++)if(c[m])for(y=m,v=0;v<s;v++,y+=f)t.pixels.resultPixels[y]=i[p++]}else for(m=0;m<f;m++)if(c[m])for(y=m*s,v=0;v<s;v++)t.pixels.resultPixels[y+v]=i[p++]}else for(m=0;m<f;m++)c[m]&&(t.pixels.resultPixels[m]=i[p++])}return a+=u,t.ptr=a,!0},readHuffmanTree:function(e,t){var r=this.HUFFMAN_LUT_BITS_MAX,n=new DataView(e,t.ptr,16);if(t.ptr+=16,n.getInt32(0,!0)<2)throw\"unsupported Huffman version\";var i=n.getInt32(4,!0),a=n.getInt32(8,!0),o=n.getInt32(12,!0);if(a>=o)return!1;var s=new Uint32Array(o-a);h.decodeBits(e,t,s);var f,l,u,c,p=[];for(f=a;f<o;f++)p[l=f-(f<i?0:i)]={first:s[f-a],second:null};var m=e.byteLength-t.ptr,v=Math.ceil(m/4),y=new ArrayBuffer(4*v);new Uint8Array(y).set(new Uint8Array(e,t.ptr,m));var w,g=new Uint32Array(y),b=0,k=0;for(w=g[0],f=a;f<o;f++)(c=p[l=f-(f<i?0:i)].first)>0&&(p[l].second=w<<b>>>32-c,32-b>=c?32===(b+=c)&&(b=0,w=g[++k]):(b+=c-32,w=g[++k],p[l].second|=w>>>32-b));var x=0,_=0,A=new d;for(f=0;f<p.length;f++)void 0!==p[f]&&(x=Math.max(x,p[f].first));_=x>=r?r:x;var P,I,U,S,T,D=[];for(f=a;f<o;f++)if((c=p[l=f-(f<i?0:i)].first)>0)if(P=[c,l],c<=_)for(I=p[l].second<<_-c,U=1<<_-c,u=0;u<U;u++)D[I|u]=P;else for(I=p[l].second,T=A,S=c-1;S>=0;S--)I>>>S&1?(T.right||(T.right=new d),T=T.right):(T.left||(T.left=new d),T=T.left),0!==S||T.val||(T.val=P[1]);return{decodeLut:D,numBitsLUTQick:_,numBitsLUT:x,tree:A,stuffedData:g,srcPtr:k,bitPos:b}},readHuffman:function(e,t,r,n){var i,a,o,s,f,l,u,c,d,p=t.headerInfo.numDims,m=t.headerInfo.height,v=t.headerInfo.width,y=v*m,w=this.readHuffmanTree(e,t),g=w.decodeLut,b=w.tree,k=w.stuffedData,x=w.srcPtr,_=w.bitPos,A=w.numBitsLUTQick,P=w.numBitsLUT,I=0===t.headerInfo.imageType?128:0,U=t.pixels.resultMask,S=0;_>0&&(x++,_=0);var T,D=k[x],E=1===t.encodeMode,B=new r(y*p),O=B;if(p<2||E){for(T=0;T<p;T++)if(p>1&&(O=new r(B.buffer,y*T,y),S=0),t.headerInfo.numValidPixel===v*m)for(c=0,l=0;l<m;l++)for(u=0;u<v;u++,c++){if(a=0,f=s=D<<_>>>32-A,32-_<A&&(f=s|=k[x+1]>>>64-_-A),g[f])a=g[f][1],_+=g[f][0];else for(f=s=D<<_>>>32-P,32-_<P&&(f=s|=k[x+1]>>>64-_-P),i=b,d=0;d<P;d++)if(!(i=s>>>P-d-1&1?i.right:i.left).left&&!i.right){a=i.val,_=_+d+1;break}_>=32&&(_-=32,D=k[++x]),o=a-I,E?(o+=u>0?S:l>0?O[c-v]:S,o&=255,O[c]=o,S=o):O[c]=o}else for(c=0,l=0;l<m;l++)for(u=0;u<v;u++,c++)if(U[c]){if(a=0,f=s=D<<_>>>32-A,32-_<A&&(f=s|=k[x+1]>>>64-_-A),g[f])a=g[f][1],_+=g[f][0];else for(f=s=D<<_>>>32-P,32-_<P&&(f=s|=k[x+1]>>>64-_-P),i=b,d=0;d<P;d++)if(!(i=s>>>P-d-1&1?i.right:i.left).left&&!i.right){a=i.val,_=_+d+1;break}_>=32&&(_-=32,D=k[++x]),o=a-I,E?(u>0&&U[c-1]?o+=S:l>0&&U[c-v]?o+=O[c-v]:o+=S,o&=255,O[c]=o,S=o):O[c]=o}}else for(c=0,l=0;l<m;l++)for(u=0;u<v;u++)if(c=l*v+u,!U||U[c])for(T=0;T<p;T++,c+=y){if(a=0,f=s=D<<_>>>32-A,32-_<A&&(f=s|=k[x+1]>>>64-_-A),g[f])a=g[f][1],_+=g[f][0];else for(f=s=D<<_>>>32-P,32-_<P&&(f=s|=k[x+1]>>>64-_-P),i=b,d=0;d<P;d++)if(!(i=s>>>P-d-1&1?i.right:i.left).left&&!i.right){a=i.val,_=_+d+1;break}_>=32&&(_-=32,D=k[++x]),o=a-I,O[c]=o}t.ptr=t.ptr+4*(x+1)+(_>0?4:0),t.pixels.resultPixels=B,p>1&&!n&&(t.pixels.resultPixels=h.swapDimensionOrder(B,y,p,r))},decodeBits:function(e,t,r,n,i){var a=t.headerInfo,h=a.fileVersion,d=0,p=e.byteLength-t.ptr>=5?5:e.byteLength-t.ptr,m=new DataView(e,t.ptr,p),v=m.getUint8(0);d++;var y=v>>6,w=0===y?4:3-y,g=(32&v)>0,b=31&v,k=0;if(1===w)k=m.getUint8(d),d++;else if(2===w)k=m.getUint16(d,!0),d+=2;else{if(4!==w)throw\"Invalid valid pixel count type\";k=m.getUint32(d,!0),d+=4}var x,_,A,P,I,U,S,T,D,E=2*a.maxZError,B=a.numDims>1?a.maxValues[i]:a.zMax;if(g){for(t.counter.lut++,T=m.getUint8(d),d++,P=Math.ceil((T-1)*b/8),I=Math.ceil(P/4),_=new ArrayBuffer(4*I),A=new Uint8Array(_),t.ptr+=d,A.set(new Uint8Array(e,t.ptr,P)),S=new Uint32Array(_),t.ptr+=P,D=0;T-1>>>D;)D++;P=Math.ceil(k*D/8),I=Math.ceil(P/4),_=new ArrayBuffer(4*I),(A=new Uint8Array(_)).set(new Uint8Array(e,t.ptr,P)),x=new Uint32Array(_),t.ptr+=P,U=h>=3?l(S,b,T-1,n,E,B):s(S,b,T-1,n,E,B),h>=3?f(x,r,D,k,U):o(x,r,D,k,U)}else t.counter.bitstuffer++,D=b,t.ptr+=d,D>0&&(P=Math.ceil(k*D/8),I=Math.ceil(P/4),_=new ArrayBuffer(4*I),(A=new Uint8Array(_)).set(new Uint8Array(e,t.ptr,P)),x=new Uint32Array(_),t.ptr+=P,h>=3?null==n?c(x,r,D,k):f(x,r,D,k,!1,n,E,B):null==n?u(x,r,D,k):o(x,r,D,k,!1,n,E,B))},readTiles:function(e,t,r,n){var i=t.headerInfo,a=i.width,o=i.height,s=a*o,f=i.microBlockSize,l=i.imageType,u=h.getDataTypeSize(l),c=Math.ceil(a/f),d=Math.ceil(o/f);t.pixels.numBlocksY=d,t.pixels.numBlocksX=c,t.pixels.ptr=0;var p,m,v,y,w,g,b,k,x,_,A=0,P=0,I=0,U=0,S=0,T=0,D=0,E=0,B=0,O=0,M=0,C=0,L=0,R=0,V=0,G=new r(f*f),F=o%f||f,z=a%f||f,j=i.numDims,N=t.pixels.resultMask,Z=t.pixels.resultPixels,K=i.fileVersion>=5?14:15,H=i.zMax;for(I=0;I<d;I++)for(S=I!==d-1?f:F,U=0;U<c;U++)for(O=I*a*f+U*f,M=a-(T=U!==c-1?f:z),k=0;k<j;k++){if(j>1?(_=Z,O=I*a*f+U*f,Z=new r(t.pixels.resultPixels.buffer,s*k*u,s),H=i.maxValues[k]):_=null,D=e.byteLength-t.ptr,m={},V=0,E=(p=new DataView(e,t.ptr,Math.min(10,D))).getUint8(0),V++,x=i.fileVersion>=5?4&E:0,B=E>>6&255,(E>>2&K)!=(U*f>>3&K))throw\"integrity issue\";if(x&&0===k)throw\"integrity issue\";if((w=3&E)>3)throw t.ptr+=V,\"Invalid block encoding (\"+w+\")\";if(2!==w)if(0===w){if(x)throw\"integrity issue\";if(t.counter.uncompressed++,t.ptr+=V,C=(C=S*T*u)<(L=e.byteLength-t.ptr)?C:L,v=new ArrayBuffer(C%u==0?C:C+u-C%u),new Uint8Array(v).set(new Uint8Array(e,t.ptr,C)),y=new r(v),R=0,N)for(A=0;A<S;A++){for(P=0;P<T;P++)N[O]&&(Z[O]=y[R++]),O++;O+=M}else for(A=0;A<S;A++){for(P=0;P<T;P++)Z[O++]=y[R++];O+=M}t.ptr+=R*u}else if(g=h.getDataTypeUsed(x&&l<6?4:l,B),b=h.getOnePixel(m,V,g,p),V+=h.getDataTypeSize(g),3===w)if(t.ptr+=V,t.counter.constantoffset++,N)for(A=0;A<S;A++){for(P=0;P<T;P++)N[O]&&(Z[O]=x?Math.min(H,_[O]+b):b),O++;O+=M}else for(A=0;A<S;A++){for(P=0;P<T;P++)Z[O]=x?Math.min(H,_[O]+b):b,O++;O+=M}else if(t.ptr+=V,h.decodeBits(e,t,G,b,k),V=0,x)if(N)for(A=0;A<S;A++){for(P=0;P<T;P++)N[O]&&(Z[O]=G[V++]+_[O]),O++;O+=M}else for(A=0;A<S;A++){for(P=0;P<T;P++)Z[O]=G[V++]+_[O],O++;O+=M}else if(N)for(A=0;A<S;A++){for(P=0;P<T;P++)N[O]&&(Z[O]=G[V++]),O++;O+=M}else for(A=0;A<S;A++){for(P=0;P<T;P++)Z[O++]=G[V++];O+=M}else{if(x)if(N)for(A=0;A<S;A++)for(P=0;P<T;P++)N[O]&&(Z[O]=_[O]),O++;else for(A=0;A<S;A++)for(P=0;P<T;P++)Z[O]=_[O],O++;t.counter.constant++,t.ptr+=V}}j>1&&!n&&(t.pixels.resultPixels=h.swapDimensionOrder(t.pixels.resultPixels,s,j,r))},formatFileInfo:function(e){return{fileIdentifierString:e.headerInfo.fileIdentifierString,fileVersion:e.headerInfo.fileVersion,imageType:e.headerInfo.imageType,height:e.headerInfo.height,width:e.headerInfo.width,numValidPixel:e.headerInfo.numValidPixel,microBlockSize:e.headerInfo.microBlockSize,blobSize:e.headerInfo.blobSize,maxZError:e.headerInfo.maxZError,pixelType:h.getPixelType(e.headerInfo.imageType),eofOffset:e.eofOffset,mask:e.mask?{numBytes:e.mask.numBytes}:null,pixels:{numBlocksX:e.pixels.numBlocksX,numBlocksY:e.pixels.numBlocksY,maxValue:e.headerInfo.zMax,minValue:e.headerInfo.zMin,noDataValue:e.noDataValue}}},constructConstantSurface:function(e,t){var r=e.headerInfo.zMax,n=e.headerInfo.zMin,i=e.headerInfo.maxValues,a=e.headerInfo.numDims,o=e.headerInfo.height*e.headerInfo.width,s=0,f=0,l=0,u=e.pixels.resultMask,c=e.pixels.resultPixels;if(u)if(a>1){if(t)for(s=0;s<a;s++)for(l=s*o,r=i[s],f=0;f<o;f++)u[f]&&(c[l+f]=r);else for(f=0;f<o;f++)if(u[f])for(l=f*a,s=0;s<a;s++)c[l+a]=i[s]}else for(f=0;f<o;f++)u[f]&&(c[f]=r);else if(a>1&&n!==r)if(t)for(s=0;s<a;s++)for(l=s*o,r=i[s],f=0;f<o;f++)c[l+f]=r;else for(f=0;f<o;f++)for(l=f*a,s=0;s<a;s++)c[l+s]=i[s];else for(f=0;f<o*a;f++)c[f]=r},getDataTypeArray:function(e){var t;switch(e){case 0:t=Int8Array;break;case 1:t=Uint8Array;break;case 2:t=Int16Array;break;case 3:t=Uint16Array;break;case 4:t=Int32Array;break;case 5:t=Uint32Array;break;case 6:default:t=Float32Array;break;case 7:t=Float64Array}return t},getPixelType:function(e){var t;switch(e){case 0:t=\"S8\";break;case 1:t=\"U8\";break;case 2:t=\"S16\";break;case 3:t=\"U16\";break;case 4:t=\"S32\";break;case 5:t=\"U32\";break;case 6:default:t=\"F32\";break;case 7:t=\"F64\"}return t},isValidPixelValue:function(e,t){if(null==t)return!1;var r;switch(e){case 0:r=t>=-128&&t<=127;break;case 1:r=t>=0&&t<=255;break;case 2:r=t>=-32768&&t<=32767;break;case 3:r=t>=0&&t<=65536;break;case 4:r=t>=-2147483648&&t<=2147483647;break;case 5:r=t>=0&&t<=4294967296;break;case 6:r=t>=-34027999387901484e22&&t<=34027999387901484e22;break;case 7:r=t>=-17976931348623157e292&&t<=17976931348623157e292;break;default:r=!1}return r},getDataTypeSize:function(e){var t=0;switch(e){case 0:case 1:t=1;break;case 2:case 3:t=2;break;case 4:case 5:case 6:t=4;break;case 7:t=8;break;default:t=e}return t},getDataTypeUsed:function(e,t){var r=e;switch(e){case 2:case 4:r=e-t;break;case 3:case 5:r=e-2*t;break;case 6:r=0===t?e:1===t?2:1;break;case 7:r=0===t?e:e-2*t+1;break;default:r=e}return r},getOnePixel:function(e,t,r,n){var i=0;switch(r){case 0:i=n.getInt8(t);break;case 1:i=n.getUint8(t);break;case 2:i=n.getInt16(t,!0);break;case 3:i=n.getUint16(t,!0);break;case 4:i=n.getInt32(t,!0);break;case 5:i=n.getUInt32(t,!0);break;case 6:i=n.getFloat32(t,!0);break;case 7:i=n.getFloat64(t,!0);break;default:throw\"the decoder does not understand this pixel type\"}return i},swapDimensionOrder:function(e,t,r,n,i){var a=0,o=0,s=0,f=0,l=e;if(r>1)if(l=new n(t*r),i)for(a=0;a<t;a++)for(f=a,s=0;s<r;s++,f+=t)l[f]=e[o++];else for(a=0;a<t;a++)for(f=a,s=0;s<r;s++,f+=t)l[o++]=e[f];return l}},d=function(e,t,r){this.val=e,this.left=t,this.right=r},{decode:function(e,t){var r=(t=t||{}).noDataValue,n=0,i={};i.ptr=t.inputOffset||0,i.pixels={},h.readHeaderInfo(e,i);var a=i.headerInfo,o=a.fileVersion,s=h.getDataTypeArray(a.imageType);if(o>5)throw\"unsupported lerc version 2.\"+o;h.readMask(e,i),a.numValidPixel===a.width*a.height||i.pixels.resultMask||(i.pixels.resultMask=t.maskData);var f=a.width*a.height;i.pixels.resultPixels=new s(f*a.numDims),i.counter={onesweep:0,uncompressed:0,lut:0,bitstuffer:0,constant:0,constantoffset:0};var l,u=!t.returnPixelInterleavedDims;if(0!==a.numValidPixel)if(a.zMax===a.zMin)h.constructConstantSurface(i,u);else if(o>=4&&h.checkMinMaxRanges(e,i))h.constructConstantSurface(i,u);else{var c=new DataView(e,i.ptr,2),d=c.getUint8(0);if(i.ptr++,d)h.readDataOneSweep(e,i,s,u);else if(o>1&&a.imageType<=1&&Math.abs(a.maxZError-.5)<1e-5){var p=c.getUint8(1);if(i.ptr++,i.encodeMode=p,p>2||o<4&&p>1)throw\"Invalid Huffman flag \"+p;p?h.readHuffman(e,i,s,u):h.readTiles(e,i,s,u)}else h.readTiles(e,i,s,u)}i.eofOffset=i.ptr,t.inputOffset?(l=i.headerInfo.blobSize+t.inputOffset-i.ptr,Math.abs(l)>=1&&(i.eofOffset=t.inputOffset+i.headerInfo.blobSize)):(l=i.headerInfo.blobSize-i.ptr,Math.abs(l)>=1&&(i.eofOffset=i.headerInfo.blobSize));var m={width:a.width,height:a.height,pixelData:i.pixels.resultPixels,minValue:a.zMin,maxValue:a.zMax,validPixelCount:a.numValidPixel,dimCount:a.numDims,dimStats:{minValues:a.minValues,maxValues:a.maxValues},maskData:i.pixels.resultMask};if(i.pixels.resultMask&&h.isValidPixelValue(a.imageType,r)){var v=i.pixels.resultMask;for(n=0;n<f;n++)v[n]||(m.pixelData[n]=r);m.noDataValue=r}return i.noDataValue=r,t.returnFileInfo&&(m.fileInfo=h.formatFileInfo(i)),m},getBandCount:function(e){for(var t=0,r=0,n={ptr:0,pixels:{}};r<e.byteLength-58;)h.readHeaderInfo(e,n),r+=n.headerInfo.blobSize,t++,n.ptr=r;return t}}),w=(p=new ArrayBuffer(4),m=new Uint8Array(p),new Uint32Array(p)[0]=1,1===m[0]),g={decode:function(e,t){if(!w)throw\"Big endian system is not supported.\";var r,n,i=(t=t||{}).inputOffset||0,a=new Uint8Array(e,i,10),o=String.fromCharCode.apply(null,a);if(\"CntZImage\"===o.trim())r=v,n=1;else{if(\"Lerc2\"!==o.substring(0,5))throw\"Unexpected file identifier string: \"+o;r=y,n=2}for(var s,f,l,u,c,h,d=0,p=e.byteLength-10,m=[],g={width:0,height:0,pixels:[],pixelType:t.pixelType,mask:null,statistics:[]},b=0;i<p;){var k=r.decode(e,{inputOffset:i,encodedMaskData:s,maskData:l,returnMask:0===d,returnEncodedMask:0===d,returnFileInfo:!0,returnPixelInterleavedDims:t.returnPixelInterleavedDims,pixelType:t.pixelType||null,noDataValue:t.noDataValue||null});i=k.fileInfo.eofOffset,l=k.maskData,0===d&&(s=k.encodedMaskData,g.width=k.width,g.height=k.height,g.dimCount=k.dimCount||1,g.pixelType=k.pixelType||k.fileInfo.pixelType,g.mask=l),n>1&&(l&&m.push(l),k.fileInfo.mask&&k.fileInfo.mask.numBytes>0&&b++),d++,g.pixels.push(k.pixelData),g.statistics.push({minValue:k.minValue,maxValue:k.maxValue,noDataValue:k.noDataValue,dimStats:k.dimStats})}if(n>1&&b>1){for(h=g.width*g.height,g.bandMasks=m,(l=new Uint8Array(h)).set(m[0]),u=1;u<m.length;u++)for(f=m[u],c=0;c<h;c++)l[c]=l[c]&f[c];g.maskData=l}return g}};Ke.exports?Ke.exports=g:this.Lerc=g}();var We=Xe.exports,qe={315:\"Artist\",258:\"BitsPerSample\",265:\"CellLength\",264:\"CellWidth\",320:\"ColorMap\",259:\"Compression\",33432:\"Copyright\",306:\"DateTime\",338:\"ExtraSamples\",266:\"FillOrder\",289:\"FreeByteCounts\",288:\"FreeOffsets\",291:\"GrayResponseCurve\",290:\"GrayResponseUnit\",316:\"HostComputer\",270:\"ImageDescription\",257:\"ImageLength\",256:\"ImageWidth\",271:\"Make\",281:\"MaxSampleValue\",280:\"MinSampleValue\",272:\"Model\",254:\"NewSubfileType\",274:\"Orientation\",262:\"PhotometricInterpretation\",284:\"PlanarConfiguration\",296:\"ResolutionUnit\",278:\"RowsPerStrip\",277:\"SamplesPerPixel\",305:\"Software\",279:\"StripByteCounts\",273:\"StripOffsets\",255:\"SubfileType\",263:\"Threshholding\",282:\"XResolution\",283:\"YResolution\",326:\"BadFaxLines\",327:\"CleanFaxData\",343:\"ClipPath\",328:\"ConsecutiveBadFaxLines\",433:\"Decode\",434:\"DefaultImageColor\",269:\"DocumentName\",336:\"DotRange\",321:\"HalftoneHints\",346:\"Indexed\",347:\"JPEGTables\",285:\"PageName\",297:\"PageNumber\",317:\"Predictor\",319:\"PrimaryChromaticities\",532:\"ReferenceBlackWhite\",339:\"SampleFormat\",340:\"SMinSampleValue\",341:\"SMaxSampleValue\",559:\"StripRowCounts\",330:\"SubIFDs\",292:\"T4Options\",293:\"T6Options\",325:\"TileByteCounts\",323:\"TileLength\",324:\"TileOffsets\",322:\"TileWidth\",301:\"TransferFunction\",318:\"WhitePoint\",344:\"XClipPathUnits\",286:\"XPosition\",529:\"YCbCrCoefficients\",531:\"YCbCrPositioning\",530:\"YCbCrSubSampling\",345:\"YClipPathUnits\",287:\"YPosition\",37378:\"ApertureValue\",40961:\"ColorSpace\",36868:\"DateTimeDigitized\",36867:\"DateTimeOriginal\",34665:\"Exif IFD\",36864:\"ExifVersion\",33434:\"ExposureTime\",41728:\"FileSource\",37385:\"Flash\",40960:\"FlashpixVersion\",33437:\"FNumber\",42016:\"ImageUniqueID\",37384:\"LightSource\",37500:\"MakerNote\",37377:\"ShutterSpeedValue\",37510:\"UserComment\",33723:\"IPTC\",34675:\"ICC Profile\",700:\"XMP\",42112:\"GDAL_METADATA\",42113:\"GDAL_NODATA\",34377:\"Photoshop\",33550:\"ModelPixelScale\",33922:\"ModelTiepoint\",34264:\"ModelTransformation\",34735:\"GeoKeyDirectory\",34736:\"GeoDoubleParams\",34737:\"GeoAsciiParams\",50674:\"LercParameters\"},Je={};for(var Qe in qe)qe.hasOwnProperty(Qe)&&(Je[qe[Qe]]=parseInt(Qe,10));Je.BitsPerSample,Je.ExtraSamples,Je.SampleFormat,Je.StripByteCounts,Je.StripOffsets,Je.StripRowCounts,Je.TileByteCounts,Je.TileOffsets,Je.SubIFDs;var $e={1:\"BYTE\",2:\"ASCII\",3:\"SHORT\",4:\"LONG\",5:\"RATIONAL\",6:\"SBYTE\",7:\"UNDEFINED\",8:\"SSHORT\",9:\"SLONG\",10:\"SRATIONAL\",11:\"FLOAT\",12:\"DOUBLE\",13:\"IFD\",16:\"LONG8\",17:\"SLONG8\",18:\"IFD8\"},et={};for(var tt in $e)$e.hasOwnProperty(tt)&&(et[$e[tt]]=parseInt(tt,10));var rt=1,nt=0,it=1,at={1024:\"GTModelTypeGeoKey\",1025:\"GTRasterTypeGeoKey\",1026:\"GTCitationGeoKey\",2048:\"GeographicTypeGeoKey\",2049:\"GeogCitationGeoKey\",2050:\"GeogGeodeticDatumGeoKey\",2051:\"GeogPrimeMeridianGeoKey\",2052:\"GeogLinearUnitsGeoKey\",2053:\"GeogLinearUnitSizeGeoKey\",2054:\"GeogAngularUnitsGeoKey\",2055:\"GeogAngularUnitSizeGeoKey\",2056:\"GeogEllipsoidGeoKey\",2057:\"GeogSemiMajorAxisGeoKey\",2058:\"GeogSemiMinorAxisGeoKey\",2059:\"GeogInvFlatteningGeoKey\",2060:\"GeogAzimuthUnitsGeoKey\",2061:\"GeogPrimeMeridianLongGeoKey\",2062:\"GeogTOWGS84GeoKey\",3072:\"ProjectedCSTypeGeoKey\",3073:\"PCSCitationGeoKey\",3074:\"ProjectionGeoKey\",3075:\"ProjCoordTransGeoKey\",3076:\"ProjLinearUnitsGeoKey\",3077:\"ProjLinearUnitSizeGeoKey\",3078:\"ProjStdParallel1GeoKey\",3079:\"ProjStdParallel2GeoKey\",3080:\"ProjNatOriginLongGeoKey\",3081:\"ProjNatOriginLatGeoKey\",3082:\"ProjFalseEastingGeoKey\",3083:\"ProjFalseNorthingGeoKey\",3084:\"ProjFalseOriginLongGeoKey\",3085:\"ProjFalseOriginLatGeoKey\",3086:\"ProjFalseOriginEastingGeoKey\",3087:\"ProjFalseOriginNorthingGeoKey\",3088:\"ProjCenterLongGeoKey\",3089:\"ProjCenterLatGeoKey\",3090:\"ProjCenterEastingGeoKey\",3091:\"ProjCenterNorthingGeoKey\",3092:\"ProjScaleAtNatOriginGeoKey\",3093:\"ProjScaleAtCenterGeoKey\",3094:\"ProjAzimuthAngleGeoKey\",3095:\"ProjStraightVertPoleLongGeoKey\",3096:\"ProjRectifiedGridAngleGeoKey\",4096:\"VerticalCSTypeGeoKey\",4097:\"VerticalCitationGeoKey\",4098:\"VerticalDatumGeoKey\",4099:\"VerticalUnitsGeoKey\"},ot={};for(var st in at)at.hasOwnProperty(st)&&(ot[at[st]]=parseInt(st,10));function ft(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}var lt=function(e){p(r,b);var t=ft(r);function r(e){var n;return u(this,r),(n=t.call(this)).planarConfiguration=void 0!==e.PlanarConfiguration?e.PlanarConfiguration:1,n.samplesPerPixel=void 0!==e.SamplesPerPixel?e.SamplesPerPixel:1,n.addCompression=e.LercParameters[rt],n}return h(r,[{key:\"decodeBlock\",value:function(e){switch(this.addCompression){case nt:break;case it:e=Fe(new Uint8Array(e)).buffer;break;default:throw new Error(\"Unsupported LERC additional compression method identifier: \".concat(this.addCompression))}return We.decode(e,{returnPixelInterleavedDims:1===this.planarConfiguration}).pixels[0].buffer}}]),r}(),ut=Object.freeze({__proto__:null,default:lt});function ct(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=v(e);if(t){var i=v(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return m(this,r)}}var ht=function(e){p(a,b);var r,n=ct(a);function a(){var e;if(u(this,a),e=n.call(this),\"undefined\"==typeof createImageBitmap)throw new Error(\"Cannot decode WebImage as `createImageBitmap` is not available\");if(\"undefined\"==typeof document&&\"undefined\"==typeof OffscreenCanvas)throw new Error(\"Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available\");return e}return h(a,[{key:\"decode\",value:(r=t(i.mark((function e(t,r){var n,a,o,s;return i.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new Blob([r]),e.next=3,createImageBitmap(n);case 3:return a=e.sent,\"undefined\"!=typeof document?((o=document.createElement(\"canvas\")).width=a.width,o.height=a.height):o=new OffscreenCanvas(a.width,a.height),(s=o.getContext(\"2d\")).drawImage(a,0,0),e.abrupt(\"return\",s.getImageData(0,0,a.width,a.height).data.buffer);case 8:case\"end\":return e.stop()}}),e)}))),function(e,t){return r.apply(this,arguments)})}]),a}(),dt=Object.freeze({__proto__:null,default:ht});";
            return new browser(typeof Blob === 'undefined'
              ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')
              : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));
          }

  var decoder = {
    __proto__: null,
    create: create
  };

  return ol;

})();
